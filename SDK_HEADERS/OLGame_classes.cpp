/*
#############################################################################################
# Outlast2 (1.0.0.0) SDK
# Generated with the CodeRedGenerator v1.0.2
# ========================================================================================= #
# File: OLGame_classes.cpp
# ========================================================================================= #
# Credits: TheFeckless, ItsBranK
# Links: www.github.com/CodeRedModding/CodeRed-Generator, www.twitter.com/ItsBranK
#############################################################################################
*/
#include "../SdkHeaders.hpp"

#ifdef _MSC_VER
	#pragma pack(push, 0x4)
#endif

/*
# ========================================================================================= #
# Functions
# ========================================================================================= #
*/

// Function OLGame.OLAITrigger.Touch
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)
// class UPrimitiveComponent*     OtherComp                      (CPF_Parm | CPF_EditInline)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)

void AOLAITrigger::eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal)
{
	static UFunction* uFnTouch = nullptr;

	if (!uFnTouch)
	{
		uFnTouch = UFunction::FindFunction("Function OLGame.OLAITrigger.Touch");
	}

	AOLAITrigger_eventTouch_Params Touch_Params;
	memset(&Touch_Params, 0, sizeof(Touch_Params));
	memcpy_s(&Touch_Params.Other, sizeof(Touch_Params.Other), &Other, sizeof(Other));
	memcpy_s(&Touch_Params.OtherComp, sizeof(Touch_Params.OtherComp), &OtherComp, sizeof(OtherComp));
	memcpy_s(&Touch_Params.HitLocation, sizeof(Touch_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	memcpy_s(&Touch_Params.HitNormal, sizeof(Touch_Params.HitNormal), &HitNormal, sizeof(HitNormal));

	this->ProcessEvent(uFnTouch, &Touch_Params, nullptr);
};

// Function OLGame.OLAITrigger.NativeOnTouch
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void AOLAITrigger::NativeOnTouch(class AActor* Other)
{
	static UFunction* uFnNativeOnTouch = nullptr;

	if (!uFnNativeOnTouch)
	{
		uFnNativeOnTouch = UFunction::FindFunction("Function OLGame.OLAITrigger.NativeOnTouch");
	}

	AOLAITrigger_execNativeOnTouch_Params NativeOnTouch_Params;
	memset(&NativeOnTouch_Params, 0, sizeof(NativeOnTouch_Params));
	memcpy_s(&NativeOnTouch_Params.Other, sizeof(NativeOnTouch_Params.Other), &Other, sizeof(Other));

	uFnNativeOnTouch->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeOnTouch, &NativeOnTouch_Params, nullptr);
	uFnNativeOnTouch->FunctionFlags |= 0x400;
};

// Function OLGame.OLAITrigger.PostBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLAITrigger::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function OLGame.OLAITrigger.PostBeginPlay");
	}

	AOLAITrigger_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function OLGame.OLBasementWindow.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AOLBasementWindow::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function OLGame.OLBasementWindow.OnToggle");
	}

	AOLBasementWindow_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	memcpy_s(&OnToggle_Params.Action, sizeof(OnToggle_Params.Action), &Action, sizeof(Action));

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function OLGame.OLBashableObject.OnToggle
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AOLBashableObject::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function OLGame.OLBashableObject.OnToggle");
	}

	AOLBashableObject_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	memcpy_s(&OnToggle_Params.Action, sizeof(OnToggle_Params.Action), &Action, sizeof(Action));

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function OLGame.OLBlockingObject.OnToggle
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AOLBlockingObject::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function OLGame.OLBlockingObject.OnToggle");
	}

	AOLBlockingObject_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	memcpy_s(&OnToggle_Params.Action, sizeof(OnToggle_Params.Action), &Action, sizeof(Action));

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function OLGame.OLBlockingObject.OnDisable
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBlockingObject::OnDisable()
{
	static UFunction* uFnOnDisable = nullptr;

	if (!uFnOnDisable)
	{
		uFnOnDisable = UFunction::FindFunction("Function OLGame.OLBlockingObject.OnDisable");
	}

	AOLBlockingObject_execOnDisable_Params OnDisable_Params;
	memset(&OnDisable_Params, 0, sizeof(OnDisable_Params));

	uFnOnDisable->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnOnDisable, &OnDisable_Params, nullptr);
	uFnOnDisable->FunctionFlags |= 0x400;
};

// Function OLGame.OLBlockingObject.OnEnable
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBlockingObject::OnEnable()
{
	static UFunction* uFnOnEnable = nullptr;

	if (!uFnOnEnable)
	{
		uFnOnEnable = UFunction::FindFunction("Function OLGame.OLBlockingObject.OnEnable");
	}

	AOLBlockingObject_execOnEnable_Params OnEnable_Params;
	memset(&OnEnable_Params, 0, sizeof(OnEnable_Params));

	uFnOnEnable->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnOnEnable, &OnEnable_Params, nullptr);
	uFnOnEnable->FunctionFlags |= 0x400;
};

// Function OLGame.OLCamcorderFilesHud.SetPCInputLabel
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  navigationLabelUp              (CPF_Parm | CPF_NeedCtorLink)
// class FString                  navigationLabelLeft            (CPF_Parm | CPF_NeedCtorLink)
// class FString                  navigationLabelDown            (CPF_Parm | CPF_NeedCtorLink)
// class FString                  navigationLabelRight           (CPF_Parm | CPF_NeedCtorLink)
// class FString                  nextLabel                      (CPF_Parm | CPF_NeedCtorLink)
// class FString                  previousLabel                  (CPF_Parm | CPF_NeedCtorLink)
// class FString                  backLabel                      (CPF_Parm | CPF_NeedCtorLink)
// class FString                  displayLabel                   (CPF_Parm | CPF_NeedCtorLink)
// class FString                  playLabel                      (CPF_Parm | CPF_NeedCtorLink)
// class FString                  selectLabelText                (CPF_Parm | CPF_NeedCtorLink)

void UOLCamcorderFilesHud::eventSetPCInputLabel(class FString navigationLabelUp, class FString navigationLabelLeft, class FString navigationLabelDown, class FString navigationLabelRight, class FString nextLabel, class FString previousLabel, class FString backLabel, class FString displayLabel, class FString playLabel, class FString selectLabelText)
{
	static UFunction* uFnSetPCInputLabel = nullptr;

	if (!uFnSetPCInputLabel)
	{
		uFnSetPCInputLabel = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.SetPCInputLabel");
	}

	UOLCamcorderFilesHud_eventSetPCInputLabel_Params SetPCInputLabel_Params;
	memset(&SetPCInputLabel_Params, 0, sizeof(SetPCInputLabel_Params));
	memcpy_s(&SetPCInputLabel_Params.navigationLabelUp, sizeof(SetPCInputLabel_Params.navigationLabelUp), &navigationLabelUp, sizeof(navigationLabelUp));
	memcpy_s(&SetPCInputLabel_Params.navigationLabelLeft, sizeof(SetPCInputLabel_Params.navigationLabelLeft), &navigationLabelLeft, sizeof(navigationLabelLeft));
	memcpy_s(&SetPCInputLabel_Params.navigationLabelDown, sizeof(SetPCInputLabel_Params.navigationLabelDown), &navigationLabelDown, sizeof(navigationLabelDown));
	memcpy_s(&SetPCInputLabel_Params.navigationLabelRight, sizeof(SetPCInputLabel_Params.navigationLabelRight), &navigationLabelRight, sizeof(navigationLabelRight));
	memcpy_s(&SetPCInputLabel_Params.nextLabel, sizeof(SetPCInputLabel_Params.nextLabel), &nextLabel, sizeof(nextLabel));
	memcpy_s(&SetPCInputLabel_Params.previousLabel, sizeof(SetPCInputLabel_Params.previousLabel), &previousLabel, sizeof(previousLabel));
	memcpy_s(&SetPCInputLabel_Params.backLabel, sizeof(SetPCInputLabel_Params.backLabel), &backLabel, sizeof(backLabel));
	memcpy_s(&SetPCInputLabel_Params.displayLabel, sizeof(SetPCInputLabel_Params.displayLabel), &displayLabel, sizeof(displayLabel));
	memcpy_s(&SetPCInputLabel_Params.playLabel, sizeof(SetPCInputLabel_Params.playLabel), &playLabel, sizeof(playLabel));
	memcpy_s(&SetPCInputLabel_Params.selectLabelText, sizeof(SetPCInputLabel_Params.selectLabelText), &selectLabelText, sizeof(selectLabelText));

	this->ProcessEvent(uFnSetPCInputLabel, &SetPCInputLabel_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.SetPCInputLabelFunction
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  navigationLabelUp              (CPF_Parm | CPF_NeedCtorLink)
// class FString                  navigationLabelLeft            (CPF_Parm | CPF_NeedCtorLink)
// class FString                  navigationLabelDown            (CPF_Parm | CPF_NeedCtorLink)
// class FString                  navigationLabelRight           (CPF_Parm | CPF_NeedCtorLink)
// class FString                  nextLabel                      (CPF_Parm | CPF_NeedCtorLink)
// class FString                  previousLabel                  (CPF_Parm | CPF_NeedCtorLink)
// class FString                  backLabel                      (CPF_Parm | CPF_NeedCtorLink)
// class FString                  displayLabel                   (CPF_Parm | CPF_NeedCtorLink)
// class FString                  playLabel                      (CPF_Parm | CPF_NeedCtorLink)
// class FString                  selectLabelText                (CPF_Parm | CPF_NeedCtorLink)

void UOLCamcorderFilesHud::SetPCInputLabelFunction(class FString navigationLabelUp, class FString navigationLabelLeft, class FString navigationLabelDown, class FString navigationLabelRight, class FString nextLabel, class FString previousLabel, class FString backLabel, class FString displayLabel, class FString playLabel, class FString selectLabelText)
{
	static UFunction* uFnSetPCInputLabelFunction = nullptr;

	if (!uFnSetPCInputLabelFunction)
	{
		uFnSetPCInputLabelFunction = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.SetPCInputLabelFunction");
	}

	UOLCamcorderFilesHud_execSetPCInputLabelFunction_Params SetPCInputLabelFunction_Params;
	memset(&SetPCInputLabelFunction_Params, 0, sizeof(SetPCInputLabelFunction_Params));
	memcpy_s(&SetPCInputLabelFunction_Params.navigationLabelUp, sizeof(SetPCInputLabelFunction_Params.navigationLabelUp), &navigationLabelUp, sizeof(navigationLabelUp));
	memcpy_s(&SetPCInputLabelFunction_Params.navigationLabelLeft, sizeof(SetPCInputLabelFunction_Params.navigationLabelLeft), &navigationLabelLeft, sizeof(navigationLabelLeft));
	memcpy_s(&SetPCInputLabelFunction_Params.navigationLabelDown, sizeof(SetPCInputLabelFunction_Params.navigationLabelDown), &navigationLabelDown, sizeof(navigationLabelDown));
	memcpy_s(&SetPCInputLabelFunction_Params.navigationLabelRight, sizeof(SetPCInputLabelFunction_Params.navigationLabelRight), &navigationLabelRight, sizeof(navigationLabelRight));
	memcpy_s(&SetPCInputLabelFunction_Params.nextLabel, sizeof(SetPCInputLabelFunction_Params.nextLabel), &nextLabel, sizeof(nextLabel));
	memcpy_s(&SetPCInputLabelFunction_Params.previousLabel, sizeof(SetPCInputLabelFunction_Params.previousLabel), &previousLabel, sizeof(previousLabel));
	memcpy_s(&SetPCInputLabelFunction_Params.backLabel, sizeof(SetPCInputLabelFunction_Params.backLabel), &backLabel, sizeof(backLabel));
	memcpy_s(&SetPCInputLabelFunction_Params.displayLabel, sizeof(SetPCInputLabelFunction_Params.displayLabel), &displayLabel, sizeof(displayLabel));
	memcpy_s(&SetPCInputLabelFunction_Params.playLabel, sizeof(SetPCInputLabelFunction_Params.playLabel), &playLabel, sizeof(playLabel));
	memcpy_s(&SetPCInputLabelFunction_Params.selectLabelText, sizeof(SetPCInputLabelFunction_Params.selectLabelText), &selectLabelText, sizeof(selectLabelText));

	this->ProcessEvent(uFnSetPCInputLabelFunction, &SetPCInputLabelFunction_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.selectConsole
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Console                        (CPF_Parm | CPF_NeedCtorLink)

void UOLCamcorderFilesHud::selectConsole(class FString Console)
{
	static UFunction* uFnselectConsole = nullptr;

	if (!uFnselectConsole)
	{
		uFnselectConsole = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.selectConsole");
	}

	UOLCamcorderFilesHud_execselectConsole_Params selectConsole_Params;
	memset(&selectConsole_Params, 0, sizeof(selectConsole_Params));
	memcpy_s(&selectConsole_Params.Console, sizeof(selectConsole_Params.Console), &Console, sizeof(Console));

	this->ProcessEvent(uFnselectConsole, &selectConsole_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.UsingPC
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderFilesHud::eventUsingPC()
{
	static UFunction* uFnUsingPC = nullptr;

	if (!uFnUsingPC)
	{
		uFnUsingPC = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.UsingPC");
	}

	UOLCamcorderFilesHud_eventUsingPC_Params UsingPC_Params;
	memset(&UsingPC_Params, 0, sizeof(UsingPC_Params));

	this->ProcessEvent(uFnUsingPC, &UsingPC_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.UsingXboxOne
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderFilesHud::eventUsingXboxOne()
{
	static UFunction* uFnUsingXboxOne = nullptr;

	if (!uFnUsingXboxOne)
	{
		uFnUsingXboxOne = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.UsingXboxOne");
	}

	UOLCamcorderFilesHud_eventUsingXboxOne_Params UsingXboxOne_Params;
	memset(&UsingXboxOne_Params, 0, sizeof(UsingXboxOne_Params));

	this->ProcessEvent(uFnUsingXboxOne, &UsingXboxOne_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.UsingPS4
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderFilesHud::eventUsingPS4()
{
	static UFunction* uFnUsingPS4 = nullptr;

	if (!uFnUsingPS4)
	{
		uFnUsingPS4 = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.UsingPS4");
	}

	UOLCamcorderFilesHud_eventUsingPS4_Params UsingPS4_Params;
	memset(&UsingPS4_Params, 0, sizeof(UsingPS4_Params));

	this->ProcessEvent(uFnUsingPS4, &UsingPS4_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.SetSouthPaw
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bSouthPaw                      (CPF_Parm)

void UOLCamcorderFilesHud::eventSetSouthPaw(bool bSouthPaw)
{
	static UFunction* uFnSetSouthPaw = nullptr;

	if (!uFnSetSouthPaw)
	{
		uFnSetSouthPaw = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.SetSouthPaw");
	}

	UOLCamcorderFilesHud_eventSetSouthPaw_Params SetSouthPaw_Params;
	memset(&SetSouthPaw_Params, 0, sizeof(SetSouthPaw_Params));
	SetSouthPaw_Params.bSouthPaw = bSouthPaw;

	this->ProcessEvent(uFnSetSouthPaw, &SetSouthPaw_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.SetLocalizedText
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  zoomLabel                      (CPF_Parm | CPF_NeedCtorLink)
// class FString                  navigationLabel                (CPF_Parm | CPF_NeedCtorLink)
// class FString                  cleanTextLabel                 (CPF_Parm | CPF_NeedCtorLink)
// class FString                  selectLabel                    (CPF_Parm | CPF_NeedCtorLink)
// class FString                  backLabel                      (CPF_Parm | CPF_NeedCtorLink)
// class FString                  previousLabel                  (CPF_Parm | CPF_NeedCtorLink)
// class FString                  nextLabel                      (CPF_Parm | CPF_NeedCtorLink)
// class FString                  playLabel                      (CPF_Parm | CPF_NeedCtorLink)
// class FString                  pauseLabel                     (CPF_Parm | CPF_NeedCtorLink)
// class FString                  moveImage                      (CPF_Parm | CPF_NeedCtorLink)

void UOLCamcorderFilesHud::eventSetLocalizedText(class FString zoomLabel, class FString navigationLabel, class FString cleanTextLabel, class FString selectLabel, class FString backLabel, class FString previousLabel, class FString nextLabel, class FString playLabel, class FString pauseLabel, class FString moveImage)
{
	static UFunction* uFnSetLocalizedText = nullptr;

	if (!uFnSetLocalizedText)
	{
		uFnSetLocalizedText = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.SetLocalizedText");
	}

	UOLCamcorderFilesHud_eventSetLocalizedText_Params SetLocalizedText_Params;
	memset(&SetLocalizedText_Params, 0, sizeof(SetLocalizedText_Params));
	memcpy_s(&SetLocalizedText_Params.zoomLabel, sizeof(SetLocalizedText_Params.zoomLabel), &zoomLabel, sizeof(zoomLabel));
	memcpy_s(&SetLocalizedText_Params.navigationLabel, sizeof(SetLocalizedText_Params.navigationLabel), &navigationLabel, sizeof(navigationLabel));
	memcpy_s(&SetLocalizedText_Params.cleanTextLabel, sizeof(SetLocalizedText_Params.cleanTextLabel), &cleanTextLabel, sizeof(cleanTextLabel));
	memcpy_s(&SetLocalizedText_Params.selectLabel, sizeof(SetLocalizedText_Params.selectLabel), &selectLabel, sizeof(selectLabel));
	memcpy_s(&SetLocalizedText_Params.backLabel, sizeof(SetLocalizedText_Params.backLabel), &backLabel, sizeof(backLabel));
	memcpy_s(&SetLocalizedText_Params.previousLabel, sizeof(SetLocalizedText_Params.previousLabel), &previousLabel, sizeof(previousLabel));
	memcpy_s(&SetLocalizedText_Params.nextLabel, sizeof(SetLocalizedText_Params.nextLabel), &nextLabel, sizeof(nextLabel));
	memcpy_s(&SetLocalizedText_Params.playLabel, sizeof(SetLocalizedText_Params.playLabel), &playLabel, sizeof(playLabel));
	memcpy_s(&SetLocalizedText_Params.pauseLabel, sizeof(SetLocalizedText_Params.pauseLabel), &pauseLabel, sizeof(pauseLabel));
	memcpy_s(&SetLocalizedText_Params.moveImage, sizeof(SetLocalizedText_Params.moveImage), &moveImage, sizeof(moveImage));

	this->ProcessEvent(uFnSetLocalizedText, &SetLocalizedText_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.PopulateFolderList
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bRefreshOnly                   (CPF_OptionalParm | CPF_Parm)

void UOLCamcorderFilesHud::PopulateFolderList(bool bRefreshOnly)
{
	static UFunction* uFnPopulateFolderList = nullptr;

	if (!uFnPopulateFolderList)
	{
		uFnPopulateFolderList = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.PopulateFolderList");
	}

	UOLCamcorderFilesHud_execPopulateFolderList_Params PopulateFolderList_Params;
	memset(&PopulateFolderList_Params, 0, sizeof(PopulateFolderList_Params));
	PopulateFolderList_Params.bRefreshOnly = bRefreshOnly;

	uFnPopulateFolderList->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPopulateFolderList, &PopulateFolderList_Params, nullptr);
	uFnPopulateFolderList->FunctionFlags |= 0x400;
};

// Function OLGame.OLCamcorderFilesHud.WidgetInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   WidgetName                     (CPF_Parm)
// struct FName                   WidgetPath                     (CPF_Parm)
// class UGFxObject*              Widget                         (CPF_Parm)

bool UOLCamcorderFilesHud::eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget)
{
	static UFunction* uFnWidgetInitialized = nullptr;

	if (!uFnWidgetInitialized)
	{
		uFnWidgetInitialized = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.WidgetInitialized");
	}

	UOLCamcorderFilesHud_eventWidgetInitialized_Params WidgetInitialized_Params;
	memset(&WidgetInitialized_Params, 0, sizeof(WidgetInitialized_Params));
	memcpy_s(&WidgetInitialized_Params.WidgetName, sizeof(WidgetInitialized_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&WidgetInitialized_Params.WidgetPath, sizeof(WidgetInitialized_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));
	memcpy_s(&WidgetInitialized_Params.Widget, sizeof(WidgetInitialized_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnWidgetInitialized, &WidgetInitialized_Params, nullptr);

	return WidgetInitialized_Params.ReturnValue;
};

// Function OLGame.OLCamcorderFilesHud.HideImageNavigateLabel
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderFilesHud::eventHideImageNavigateLabel()
{
	static UFunction* uFnHideImageNavigateLabel = nullptr;

	if (!uFnHideImageNavigateLabel)
	{
		uFnHideImageNavigateLabel = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.HideImageNavigateLabel");
	}

	UOLCamcorderFilesHud_eventHideImageNavigateLabel_Params HideImageNavigateLabel_Params;
	memset(&HideImageNavigateLabel_Params, 0, sizeof(HideImageNavigateLabel_Params));

	this->ProcessEvent(uFnHideImageNavigateLabel, &HideImageNavigateLabel_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.ShowImageNavigateLabel
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderFilesHud::eventShowImageNavigateLabel()
{
	static UFunction* uFnShowImageNavigateLabel = nullptr;

	if (!uFnShowImageNavigateLabel)
	{
		uFnShowImageNavigateLabel = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.ShowImageNavigateLabel");
	}

	UOLCamcorderFilesHud_eventShowImageNavigateLabel_Params ShowImageNavigateLabel_Params;
	memset(&ShowImageNavigateLabel_Params, 0, sizeof(ShowImageNavigateLabel_Params));

	this->ProcessEvent(uFnShowImageNavigateLabel, &ShowImageNavigateLabel_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.Pause
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderFilesHud::eventPause()
{
	static UFunction* uFnPause = nullptr;

	if (!uFnPause)
	{
		uFnPause = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.Pause");
	}

	UOLCamcorderFilesHud_eventPause_Params Pause_Params;
	memset(&Pause_Params, 0, sizeof(Pause_Params));

	this->ProcessEvent(uFnPause, &Pause_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.TogglePlayPause
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderFilesHud::eventTogglePlayPause()
{
	static UFunction* uFnTogglePlayPause = nullptr;

	if (!uFnTogglePlayPause)
	{
		uFnTogglePlayPause = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.TogglePlayPause");
	}

	UOLCamcorderFilesHud_eventTogglePlayPause_Params TogglePlayPause_Params;
	memset(&TogglePlayPause_Params, 0, sizeof(TogglePlayPause_Params));

	this->ProcessEvent(uFnTogglePlayPause, &TogglePlayPause_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.InputTypeChanged
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderFilesHud::eventInputTypeChanged()
{
	static UFunction* uFnInputTypeChanged = nullptr;

	if (!uFnInputTypeChanged)
	{
		uFnInputTypeChanged = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.InputTypeChanged");
	}

	UOLCamcorderFilesHud_eventInputTypeChanged_Params InputTypeChanged_Params;
	memset(&InputTypeChanged_Params, 0, sizeof(InputTypeChanged_Params));

	this->ProcessEvent(uFnInputTypeChanged, &InputTypeChanged_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.NativeInputTypeChanged
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderFilesHud::NativeInputTypeChanged()
{
	static UFunction* uFnNativeInputTypeChanged = nullptr;

	if (!uFnNativeInputTypeChanged)
	{
		uFnNativeInputTypeChanged = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.NativeInputTypeChanged");
	}

	UOLCamcorderFilesHud_execNativeInputTypeChanged_Params NativeInputTypeChanged_Params;
	memset(&NativeInputTypeChanged_Params, 0, sizeof(NativeInputTypeChanged_Params));

	uFnNativeInputTypeChanged->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeInputTypeChanged, &NativeInputTypeChanged_Params, nullptr);
	uFnNativeInputTypeChanged->FunctionFlags |= 0x400;
};

// Function OLGame.OLCamcorderFilesHud.NativePlaySound
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UAkEvent*                SndEvent                       (CPF_Parm)

void UOLCamcorderFilesHud::NativePlaySound(class UAkEvent* SndEvent)
{
	static UFunction* uFnNativePlaySound = nullptr;

	if (!uFnNativePlaySound)
	{
		uFnNativePlaySound = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.NativePlaySound");
	}

	UOLCamcorderFilesHud_execNativePlaySound_Params NativePlaySound_Params;
	memset(&NativePlaySound_Params, 0, sizeof(NativePlaySound_Params));
	memcpy_s(&NativePlaySound_Params.SndEvent, sizeof(NativePlaySound_Params.SndEvent), &SndEvent, sizeof(SndEvent));

	uFnNativePlaySound->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativePlaySound, &NativePlaySound_Params, nullptr);
	uFnNativePlaySound->FunctionFlags |= 0x400;
};

// Function OLGame.OLCamcorderFilesHud.OnStop
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderFilesHud::OnStop()
{
	static UFunction* uFnOnStop = nullptr;

	if (!uFnOnStop)
	{
		uFnOnStop = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.OnStop");
	}

	UOLCamcorderFilesHud_execOnStop_Params OnStop_Params;
	memset(&OnStop_Params, 0, sizeof(OnStop_Params));

	this->ProcessEvent(uFnOnStop, &OnStop_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.NativeOnStop
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderFilesHud::NativeOnStop()
{
	static UFunction* uFnNativeOnStop = nullptr;

	if (!uFnNativeOnStop)
	{
		uFnNativeOnStop = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.NativeOnStop");
	}

	UOLCamcorderFilesHud_execNativeOnStop_Params NativeOnStop_Params;
	memset(&NativeOnStop_Params, 0, sizeof(NativeOnStop_Params));

	uFnNativeOnStop->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeOnStop, &NativeOnStop_Params, nullptr);
	uFnNativeOnStop->FunctionFlags |= 0x400;
};

// Function OLGame.OLCamcorderFilesHud.NativeFullStop
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderFilesHud::NativeFullStop()
{
	static UFunction* uFnNativeFullStop = nullptr;

	if (!uFnNativeFullStop)
	{
		uFnNativeFullStop = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.NativeFullStop");
	}

	UOLCamcorderFilesHud_execNativeFullStop_Params NativeFullStop_Params;
	memset(&NativeFullStop_Params, 0, sizeof(NativeFullStop_Params));

	uFnNativeFullStop->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeFullStop, &NativeFullStop_Params, nullptr);
	uFnNativeFullStop->FunctionFlags |= 0x400;
};

// Function OLGame.OLCamcorderFilesHud.OnPlay
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderFilesHud::OnPlay()
{
	static UFunction* uFnOnPlay = nullptr;

	if (!uFnOnPlay)
	{
		uFnOnPlay = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.OnPlay");
	}

	UOLCamcorderFilesHud_execOnPlay_Params OnPlay_Params;
	memset(&OnPlay_Params, 0, sizeof(OnPlay_Params));

	this->ProcessEvent(uFnOnPlay, &OnPlay_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.NativeOnPlay
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderFilesHud::NativeOnPlay()
{
	static UFunction* uFnNativeOnPlay = nullptr;

	if (!uFnNativeOnPlay)
	{
		uFnNativeOnPlay = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.NativeOnPlay");
	}

	UOLCamcorderFilesHud_execNativeOnPlay_Params NativeOnPlay_Params;
	memset(&NativeOnPlay_Params, 0, sizeof(NativeOnPlay_Params));

	uFnNativeOnPlay->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeOnPlay, &NativeOnPlay_Params, nullptr);
	uFnNativeOnPlay->FunctionFlags |= 0x400;
};

// Function OLGame.OLCamcorderFilesHud.OnDisplayChange
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderFilesHud::OnDisplayChange()
{
	static UFunction* uFnOnDisplayChange = nullptr;

	if (!uFnOnDisplayChange)
	{
		uFnOnDisplayChange = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.OnDisplayChange");
	}

	UOLCamcorderFilesHud_execOnDisplayChange_Params OnDisplayChange_Params;
	memset(&OnDisplayChange_Params, 0, sizeof(OnDisplayChange_Params));

	this->ProcessEvent(uFnOnDisplayChange, &OnDisplayChange_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.NativeOnDisplayChange
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderFilesHud::NativeOnDisplayChange()
{
	static UFunction* uFnNativeOnDisplayChange = nullptr;

	if (!uFnNativeOnDisplayChange)
	{
		uFnNativeOnDisplayChange = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.NativeOnDisplayChange");
	}

	UOLCamcorderFilesHud_execNativeOnDisplayChange_Params NativeOnDisplayChange_Params;
	memset(&NativeOnDisplayChange_Params, 0, sizeof(NativeOnDisplayChange_Params));

	uFnNativeOnDisplayChange->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeOnDisplayChange, &NativeOnDisplayChange_Params, nullptr);
	uFnNativeOnDisplayChange->FunctionFlags |= 0x400;
};

// Function OLGame.OLCamcorderFilesHud.OnMove
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderFilesHud::OnMove()
{
	static UFunction* uFnOnMove = nullptr;

	if (!uFnOnMove)
	{
		uFnOnMove = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.OnMove");
	}

	UOLCamcorderFilesHud_execOnMove_Params OnMove_Params;
	memset(&OnMove_Params, 0, sizeof(OnMove_Params));

	this->ProcessEvent(uFnOnMove, &OnMove_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.OnSelect
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderFilesHud::OnSelect()
{
	static UFunction* uFnOnSelect = nullptr;

	if (!uFnOnSelect)
	{
		uFnOnSelect = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.OnSelect");
	}

	UOLCamcorderFilesHud_execOnSelect_Params OnSelect_Params;
	memset(&OnSelect_Params, 0, sizeof(OnSelect_Params));

	this->ProcessEvent(uFnOnSelect, &OnSelect_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.OnBack
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderFilesHud::OnBack()
{
	static UFunction* uFnOnBack = nullptr;

	if (!uFnOnBack)
	{
		uFnOnBack = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.OnBack");
	}

	UOLCamcorderFilesHud_execOnBack_Params OnBack_Params;
	memset(&OnBack_Params, 0, sizeof(OnBack_Params));

	this->ProcessEvent(uFnOnBack, &OnBack_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.OnBackOnRootMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderFilesHud::OnBackOnRootMenu()
{
	static UFunction* uFnOnBackOnRootMenu = nullptr;

	if (!uFnOnBackOnRootMenu)
	{
		uFnOnBackOnRootMenu = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.OnBackOnRootMenu");
	}

	UOLCamcorderFilesHud_execOnBackOnRootMenu_Params OnBackOnRootMenu_Params;
	memset(&OnBackOnRootMenu_Params, 0, sizeof(OnBackOnRootMenu_Params));

	this->ProcessEvent(uFnOnBackOnRootMenu, &OnBackOnRootMenu_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.NativeOnBackOnRootMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderFilesHud::NativeOnBackOnRootMenu()
{
	static UFunction* uFnNativeOnBackOnRootMenu = nullptr;

	if (!uFnNativeOnBackOnRootMenu)
	{
		uFnNativeOnBackOnRootMenu = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.NativeOnBackOnRootMenu");
	}

	UOLCamcorderFilesHud_execNativeOnBackOnRootMenu_Params NativeOnBackOnRootMenu_Params;
	memset(&NativeOnBackOnRootMenu_Params, 0, sizeof(NativeOnBackOnRootMenu_Params));

	uFnNativeOnBackOnRootMenu->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeOnBackOnRootMenu, &NativeOnBackOnRootMenu_Params, nullptr);
	uFnNativeOnBackOnRootMenu->FunctionFlags |= 0x400;
};

// Function OLGame.OLCamcorderFilesHud.OnScrollToIndexChange
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ListIndex                      (CPF_Parm)
// int32_t                        StartIndex                     (CPF_Parm)
// int32_t                        endIndex                       (CPF_Parm)

void UOLCamcorderFilesHud::OnScrollToIndexChange(int32_t ListIndex, int32_t StartIndex, int32_t endIndex)
{
	static UFunction* uFnOnScrollToIndexChange = nullptr;

	if (!uFnOnScrollToIndexChange)
	{
		uFnOnScrollToIndexChange = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.OnScrollToIndexChange");
	}

	UOLCamcorderFilesHud_execOnScrollToIndexChange_Params OnScrollToIndexChange_Params;
	memset(&OnScrollToIndexChange_Params, 0, sizeof(OnScrollToIndexChange_Params));
	memcpy_s(&OnScrollToIndexChange_Params.ListIndex, sizeof(OnScrollToIndexChange_Params.ListIndex), &ListIndex, sizeof(ListIndex));
	memcpy_s(&OnScrollToIndexChange_Params.StartIndex, sizeof(OnScrollToIndexChange_Params.StartIndex), &StartIndex, sizeof(StartIndex));
	memcpy_s(&OnScrollToIndexChange_Params.endIndex, sizeof(OnScrollToIndexChange_Params.endIndex), &endIndex, sizeof(endIndex));

	this->ProcessEvent(uFnOnScrollToIndexChange, &OnScrollToIndexChange_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.NativeOnScrollToIndexChange
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ListIndex                      (CPF_Parm)
// int32_t                        StartIndex                     (CPF_Parm)
// int32_t                        endIndex                       (CPF_Parm)
// bool                           bForce                         (CPF_OptionalParm | CPF_Parm)

void UOLCamcorderFilesHud::NativeOnScrollToIndexChange(int32_t ListIndex, int32_t StartIndex, int32_t endIndex, bool bForce)
{
	static UFunction* uFnNativeOnScrollToIndexChange = nullptr;

	if (!uFnNativeOnScrollToIndexChange)
	{
		uFnNativeOnScrollToIndexChange = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.NativeOnScrollToIndexChange");
	}

	UOLCamcorderFilesHud_execNativeOnScrollToIndexChange_Params NativeOnScrollToIndexChange_Params;
	memset(&NativeOnScrollToIndexChange_Params, 0, sizeof(NativeOnScrollToIndexChange_Params));
	memcpy_s(&NativeOnScrollToIndexChange_Params.ListIndex, sizeof(NativeOnScrollToIndexChange_Params.ListIndex), &ListIndex, sizeof(ListIndex));
	memcpy_s(&NativeOnScrollToIndexChange_Params.StartIndex, sizeof(NativeOnScrollToIndexChange_Params.StartIndex), &StartIndex, sizeof(StartIndex));
	memcpy_s(&NativeOnScrollToIndexChange_Params.endIndex, sizeof(NativeOnScrollToIndexChange_Params.endIndex), &endIndex, sizeof(endIndex));
	NativeOnScrollToIndexChange_Params.bForce = bForce;

	uFnNativeOnScrollToIndexChange->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeOnScrollToIndexChange, &NativeOnScrollToIndexChange_Params, nullptr);
	uFnNativeOnScrollToIndexChange->FunctionFlags |= 0x400;
};

// Function OLGame.OLCamcorderFilesHud.OnFullScaleImageChanged
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bInView                        (CPF_Parm)
// class FString                  photoName                      (CPF_Parm | CPF_NeedCtorLink)

void UOLCamcorderFilesHud::OnFullScaleImageChanged(bool bInView, class FString photoName)
{
	static UFunction* uFnOnFullScaleImageChanged = nullptr;

	if (!uFnOnFullScaleImageChanged)
	{
		uFnOnFullScaleImageChanged = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.OnFullScaleImageChanged");
	}

	UOLCamcorderFilesHud_execOnFullScaleImageChanged_Params OnFullScaleImageChanged_Params;
	memset(&OnFullScaleImageChanged_Params, 0, sizeof(OnFullScaleImageChanged_Params));
	OnFullScaleImageChanged_Params.bInView = bInView;
	memcpy_s(&OnFullScaleImageChanged_Params.photoName, sizeof(OnFullScaleImageChanged_Params.photoName), &photoName, sizeof(photoName));

	this->ProcessEvent(uFnOnFullScaleImageChanged, &OnFullScaleImageChanged_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.NativeOnFullScaleImageChanged
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bInView                        (CPF_Parm)
// class FString                  photoName                      (CPF_Parm | CPF_NeedCtorLink)

void UOLCamcorderFilesHud::NativeOnFullScaleImageChanged(bool bInView, class FString photoName)
{
	static UFunction* uFnNativeOnFullScaleImageChanged = nullptr;

	if (!uFnNativeOnFullScaleImageChanged)
	{
		uFnNativeOnFullScaleImageChanged = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.NativeOnFullScaleImageChanged");
	}

	UOLCamcorderFilesHud_execNativeOnFullScaleImageChanged_Params NativeOnFullScaleImageChanged_Params;
	memset(&NativeOnFullScaleImageChanged_Params, 0, sizeof(NativeOnFullScaleImageChanged_Params));
	NativeOnFullScaleImageChanged_Params.bInView = bInView;
	memcpy_s(&NativeOnFullScaleImageChanged_Params.photoName, sizeof(NativeOnFullScaleImageChanged_Params.photoName), &photoName, sizeof(photoName));

	uFnNativeOnFullScaleImageChanged->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeOnFullScaleImageChanged, &NativeOnFullScaleImageChanged_Params, nullptr);
	uFnNativeOnFullScaleImageChanged->FunctionFlags |= 0x400;
};

// Function OLGame.OLCamcorderFilesHud.NativeQuickOpen
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderFilesHud::NativeQuickOpen()
{
	static UFunction* uFnNativeQuickOpen = nullptr;

	if (!uFnNativeQuickOpen)
	{
		uFnNativeQuickOpen = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.NativeQuickOpen");
	}

	UOLCamcorderFilesHud_execNativeQuickOpen_Params NativeQuickOpen_Params;
	memset(&NativeQuickOpen_Params, 0, sizeof(NativeQuickOpen_Params));

	uFnNativeQuickOpen->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeQuickOpen, &NativeQuickOpen_Params, nullptr);
	uFnNativeQuickOpen->FunctionFlags |= 0x400;
};

// Function OLGame.OLCamcorderFilesHud.SetLargePhotoURL
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        folderIndex                    (CPF_Parm)
// int32_t                        imageIndex                     (CPF_Parm)
// class FString                  largePhotoURL                  (CPF_Parm | CPF_NeedCtorLink)

void UOLCamcorderFilesHud::eventSetLargePhotoURL(int32_t folderIndex, int32_t imageIndex, class FString largePhotoURL)
{
	static UFunction* uFnSetLargePhotoURL = nullptr;

	if (!uFnSetLargePhotoURL)
	{
		uFnSetLargePhotoURL = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.SetLargePhotoURL");
	}

	UOLCamcorderFilesHud_eventSetLargePhotoURL_Params SetLargePhotoURL_Params;
	memset(&SetLargePhotoURL_Params, 0, sizeof(SetLargePhotoURL_Params));
	memcpy_s(&SetLargePhotoURL_Params.folderIndex, sizeof(SetLargePhotoURL_Params.folderIndex), &folderIndex, sizeof(folderIndex));
	memcpy_s(&SetLargePhotoURL_Params.imageIndex, sizeof(SetLargePhotoURL_Params.imageIndex), &imageIndex, sizeof(imageIndex));
	memcpy_s(&SetLargePhotoURL_Params.largePhotoURL, sizeof(SetLargePhotoURL_Params.largePhotoURL), &largePhotoURL, sizeof(largePhotoURL));

	this->ProcessEvent(uFnSetLargePhotoURL, &SetLargePhotoURL_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.SelectRecording
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        folderIndex                    (CPF_Parm)
// int32_t                        imageIndex                     (CPF_Parm)

void UOLCamcorderFilesHud::eventSelectRecording(int32_t folderIndex, int32_t imageIndex)
{
	static UFunction* uFnSelectRecording = nullptr;

	if (!uFnSelectRecording)
	{
		uFnSelectRecording = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.SelectRecording");
	}

	UOLCamcorderFilesHud_eventSelectRecording_Params SelectRecording_Params;
	memset(&SelectRecording_Params, 0, sizeof(SelectRecording_Params));
	memcpy_s(&SelectRecording_Params.folderIndex, sizeof(SelectRecording_Params.folderIndex), &folderIndex, sizeof(folderIndex));
	memcpy_s(&SelectRecording_Params.imageIndex, sizeof(SelectRecording_Params.imageIndex), &imageIndex, sizeof(imageIndex));

	this->ProcessEvent(uFnSelectRecording, &SelectRecording_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.SetAllowSingleFolder
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// bool                           bAllowSingleFolder             (CPF_Parm)

bool UOLCamcorderFilesHud::eventSetAllowSingleFolder(bool bAllowSingleFolder)
{
	static UFunction* uFnSetAllowSingleFolder = nullptr;

	if (!uFnSetAllowSingleFolder)
	{
		uFnSetAllowSingleFolder = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.SetAllowSingleFolder");
	}

	UOLCamcorderFilesHud_eventSetAllowSingleFolder_Params SetAllowSingleFolder_Params;
	memset(&SetAllowSingleFolder_Params, 0, sizeof(SetAllowSingleFolder_Params));
	SetAllowSingleFolder_Params.bAllowSingleFolder = bAllowSingleFolder;

	this->ProcessEvent(uFnSetAllowSingleFolder, &SetAllowSingleFolder_Params, nullptr);

	return SetAllowSingleFolder_Params.ReturnValue;
};

// Function OLGame.OLCamcorderFilesHud.SetDisplayLabel
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

bool UOLCamcorderFilesHud::eventSetDisplayLabel(class FString Label)
{
	static UFunction* uFnSetDisplayLabel = nullptr;

	if (!uFnSetDisplayLabel)
	{
		uFnSetDisplayLabel = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.SetDisplayLabel");
	}

	UOLCamcorderFilesHud_eventSetDisplayLabel_Params SetDisplayLabel_Params;
	memset(&SetDisplayLabel_Params, 0, sizeof(SetDisplayLabel_Params));
	memcpy_s(&SetDisplayLabel_Params.Label, sizeof(SetDisplayLabel_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnSetDisplayLabel, &SetDisplayLabel_Params, nullptr);

	return SetDisplayLabel_Params.ReturnValue;
};

// Function OLGame.OLCamcorderFilesHud.SetVisible
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bShow                          (CPF_Parm)

void UOLCamcorderFilesHud::eventSetVisible(bool bShow)
{
	static UFunction* uFnSetVisible = nullptr;

	if (!uFnSetVisible)
	{
		uFnSetVisible = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.SetVisible");
	}

	UOLCamcorderFilesHud_eventSetVisible_Params SetVisible_Params;
	memset(&SetVisible_Params, 0, sizeof(SetVisible_Params));
	SetVisible_Params.bShow = bShow;

	this->ProcessEvent(uFnSetVisible, &SetVisible_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.FlagRecordingAsRead
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        folderIndex                    (CPF_Parm)
// int32_t                        recordingIndex                 (CPF_Parm)

void UOLCamcorderFilesHud::eventFlagRecordingAsRead(int32_t folderIndex, int32_t recordingIndex)
{
	static UFunction* uFnFlagRecordingAsRead = nullptr;

	if (!uFnFlagRecordingAsRead)
	{
		uFnFlagRecordingAsRead = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.FlagRecordingAsRead");
	}

	UOLCamcorderFilesHud_eventFlagRecordingAsRead_Params FlagRecordingAsRead_Params;
	memset(&FlagRecordingAsRead_Params, 0, sizeof(FlagRecordingAsRead_Params));
	memcpy_s(&FlagRecordingAsRead_Params.folderIndex, sizeof(FlagRecordingAsRead_Params.folderIndex), &folderIndex, sizeof(folderIndex));
	memcpy_s(&FlagRecordingAsRead_Params.recordingIndex, sizeof(FlagRecordingAsRead_Params.recordingIndex), &recordingIndex, sizeof(recordingIndex));

	this->ProcessEvent(uFnFlagRecordingAsRead, &FlagRecordingAsRead_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.DisplayChange
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderFilesHud::eventDisplayChange()
{
	static UFunction* uFnDisplayChange = nullptr;

	if (!uFnDisplayChange)
	{
		uFnDisplayChange = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.DisplayChange");
	}

	UOLCamcorderFilesHud_eventDisplayChange_Params DisplayChange_Params;
	memset(&DisplayChange_Params, 0, sizeof(DisplayChange_Params));

	this->ProcessEvent(uFnDisplayChange, &DisplayChange_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.RefreshData
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderFilesHud::eventRefreshData()
{
	static UFunction* uFnRefreshData = nullptr;

	if (!uFnRefreshData)
	{
		uFnRefreshData = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.RefreshData");
	}

	UOLCamcorderFilesHud_eventRefreshData_Params RefreshData_Params;
	memset(&RefreshData_Params, 0, sizeof(RefreshData_Params));

	this->ProcessEvent(uFnRefreshData, &RefreshData_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.SetListFocusIndex
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        indexA                         (CPF_Parm)
// int32_t                        indexB                         (CPF_Parm)
// int32_t                        indexC                         (CPF_Parm)
// int32_t                        indexD                         (CPF_Parm)
// int32_t                        indexE                         (CPF_Parm)
// int32_t                        indexF                         (CPF_Parm)

bool UOLCamcorderFilesHud::eventSetListFocusIndex(int32_t indexA, int32_t indexB, int32_t indexC, int32_t indexD, int32_t indexE, int32_t indexF)
{
	static UFunction* uFnSetListFocusIndex = nullptr;

	if (!uFnSetListFocusIndex)
	{
		uFnSetListFocusIndex = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.SetListFocusIndex");
	}

	UOLCamcorderFilesHud_eventSetListFocusIndex_Params SetListFocusIndex_Params;
	memset(&SetListFocusIndex_Params, 0, sizeof(SetListFocusIndex_Params));
	memcpy_s(&SetListFocusIndex_Params.indexA, sizeof(SetListFocusIndex_Params.indexA), &indexA, sizeof(indexA));
	memcpy_s(&SetListFocusIndex_Params.indexB, sizeof(SetListFocusIndex_Params.indexB), &indexB, sizeof(indexB));
	memcpy_s(&SetListFocusIndex_Params.indexC, sizeof(SetListFocusIndex_Params.indexC), &indexC, sizeof(indexC));
	memcpy_s(&SetListFocusIndex_Params.indexD, sizeof(SetListFocusIndex_Params.indexD), &indexD, sizeof(indexD));
	memcpy_s(&SetListFocusIndex_Params.indexE, sizeof(SetListFocusIndex_Params.indexE), &indexE, sizeof(indexE));
	memcpy_s(&SetListFocusIndex_Params.indexF, sizeof(SetListFocusIndex_Params.indexF), &indexF, sizeof(indexF));

	this->ProcessEvent(uFnSetListFocusIndex, &SetListFocusIndex_Params, nullptr);

	return SetListFocusIndex_Params.ReturnValue;
};

// Function OLGame.OLCamcorderFilesHud.SetLargeImageSize
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          SizeX                          (CPF_Parm)
// float                          SizeY                          (CPF_Parm)
// float                          PosX                           (CPF_Parm)
// float                          PosY                           (CPF_Parm)

bool UOLCamcorderFilesHud::eventSetLargeImageSize(float SizeX, float SizeY, float PosX, float PosY)
{
	static UFunction* uFnSetLargeImageSize = nullptr;

	if (!uFnSetLargeImageSize)
	{
		uFnSetLargeImageSize = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.SetLargeImageSize");
	}

	UOLCamcorderFilesHud_eventSetLargeImageSize_Params SetLargeImageSize_Params;
	memset(&SetLargeImageSize_Params, 0, sizeof(SetLargeImageSize_Params));
	memcpy_s(&SetLargeImageSize_Params.SizeX, sizeof(SetLargeImageSize_Params.SizeX), &SizeX, sizeof(SizeX));
	memcpy_s(&SetLargeImageSize_Params.SizeY, sizeof(SetLargeImageSize_Params.SizeY), &SizeY, sizeof(SizeY));
	memcpy_s(&SetLargeImageSize_Params.PosX, sizeof(SetLargeImageSize_Params.PosX), &PosX, sizeof(PosX));
	memcpy_s(&SetLargeImageSize_Params.PosY, sizeof(SetLargeImageSize_Params.PosY), &PosY, sizeof(PosY));

	this->ProcessEvent(uFnSetLargeImageSize, &SetLargeImageSize_Params, nullptr);

	return SetLargeImageSize_Params.ReturnValue;
};

// Function OLGame.OLCamcorderFilesHud.DisallowInputChangeFocus
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderFilesHud::eventDisallowInputChangeFocus()
{
	static UFunction* uFnDisallowInputChangeFocus = nullptr;

	if (!uFnDisallowInputChangeFocus)
	{
		uFnDisallowInputChangeFocus = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.DisallowInputChangeFocus");
	}

	UOLCamcorderFilesHud_eventDisallowInputChangeFocus_Params DisallowInputChangeFocus_Params;
	memset(&DisallowInputChangeFocus_Params, 0, sizeof(DisallowInputChangeFocus_Params));

	this->ProcessEvent(uFnDisallowInputChangeFocus, &DisallowInputChangeFocus_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.AllowInputChangeFocus
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderFilesHud::eventAllowInputChangeFocus()
{
	static UFunction* uFnAllowInputChangeFocus = nullptr;

	if (!uFnAllowInputChangeFocus)
	{
		uFnAllowInputChangeFocus = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.AllowInputChangeFocus");
	}

	UOLCamcorderFilesHud_eventAllowInputChangeFocus_Params AllowInputChangeFocus_Params;
	memset(&AllowInputChangeFocus_Params, 0, sizeof(AllowInputChangeFocus_Params));

	this->ProcessEvent(uFnAllowInputChangeFocus, &AllowInputChangeFocus_Params, nullptr);
};

// Function OLGame.OLCamcorderFilesHud.PauseVideo
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLCamcorderFilesHud::eventPauseVideo()
{
	static UFunction* uFnPauseVideo = nullptr;

	if (!uFnPauseVideo)
	{
		uFnPauseVideo = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.PauseVideo");
	}

	UOLCamcorderFilesHud_eventPauseVideo_Params PauseVideo_Params;
	memset(&PauseVideo_Params, 0, sizeof(PauseVideo_Params));

	this->ProcessEvent(uFnPauseVideo, &PauseVideo_Params, nullptr);

	return PauseVideo_Params.ReturnValue;
};

// Function OLGame.OLCamcorderFilesHud.ConfigUI
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLCamcorderFilesHud::eventConfigUI()
{
	static UFunction* uFnConfigUI = nullptr;

	if (!uFnConfigUI)
	{
		uFnConfigUI = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.ConfigUI");
	}

	UOLCamcorderFilesHud_eventConfigUI_Params ConfigUI_Params;
	memset(&ConfigUI_Params, 0, sizeof(ConfigUI_Params));

	this->ProcessEvent(uFnConfigUI, &ConfigUI_Params, nullptr);

	return ConfigUI_Params.ReturnValue;
};

// Function OLGame.OLCamcorderFilesHud.back
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLCamcorderFilesHud::eventback()
{
	static UFunction* uFnback = nullptr;

	if (!uFnback)
	{
		uFnback = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.back");
	}

	UOLCamcorderFilesHud_eventback_Params back_Params;
	memset(&back_Params, 0, sizeof(back_Params));

	this->ProcessEvent(uFnback, &back_Params, nullptr);

	return back_Params.ReturnValue;
};

// Function OLGame.OLCamcorderFilesHud.BackToMainMenu
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLCamcorderFilesHud::eventBackToMainMenu()
{
	static UFunction* uFnBackToMainMenu = nullptr;

	if (!uFnBackToMainMenu)
	{
		uFnBackToMainMenu = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.BackToMainMenu");
	}

	UOLCamcorderFilesHud_eventBackToMainMenu_Params BackToMainMenu_Params;
	memset(&BackToMainMenu_Params, 0, sizeof(BackToMainMenu_Params));

	this->ProcessEvent(uFnBackToMainMenu, &BackToMainMenu_Params, nullptr);

	return BackToMainMenu_Params.ReturnValue;
};

// Function OLGame.OLCamcorderFilesHud.Next
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLCamcorderFilesHud::eventNext()
{
	static UFunction* uFnNext = nullptr;

	if (!uFnNext)
	{
		uFnNext = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.Next");
	}

	UOLCamcorderFilesHud_eventNext_Params Next_Params;
	memset(&Next_Params, 0, sizeof(Next_Params));

	this->ProcessEvent(uFnNext, &Next_Params, nullptr);

	return Next_Params.ReturnValue;
};

// Function OLGame.OLCamcorderFilesHud.Previous
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLCamcorderFilesHud::eventPrevious()
{
	static UFunction* uFnPrevious = nullptr;

	if (!uFnPrevious)
	{
		uFnPrevious = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.Previous");
	}

	UOLCamcorderFilesHud_eventPrevious_Params Previous_Params;
	memset(&Previous_Params, 0, sizeof(Previous_Params));

	this->ProcessEvent(uFnPrevious, &Previous_Params, nullptr);

	return Previous_Params.ReturnValue;
};

// Function OLGame.OLCamcorderFilesHud.RefreshLargeImage
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLCamcorderFilesHud::eventRefreshLargeImage()
{
	static UFunction* uFnRefreshLargeImage = nullptr;

	if (!uFnRefreshLargeImage)
	{
		uFnRefreshLargeImage = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.RefreshLargeImage");
	}

	UOLCamcorderFilesHud_eventRefreshLargeImage_Params RefreshLargeImage_Params;
	memset(&RefreshLargeImage_Params, 0, sizeof(RefreshLargeImage_Params));

	this->ProcessEvent(uFnRefreshLargeImage, &RefreshLargeImage_Params, nullptr);

	return RefreshLargeImage_Params.ReturnValue;
};

// Function OLGame.OLCamcorderFilesHud.FilterButtonInput
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// struct FName                   ButtonName                     (CPF_Parm)
// EInputEvent                    InputEvent                     (CPF_Parm)

bool UOLCamcorderFilesHud::eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent)
{
	static UFunction* uFnFilterButtonInput = nullptr;

	if (!uFnFilterButtonInput)
	{
		uFnFilterButtonInput = UFunction::FindFunction("Function OLGame.OLCamcorderFilesHud.FilterButtonInput");
	}

	UOLCamcorderFilesHud_eventFilterButtonInput_Params FilterButtonInput_Params;
	memset(&FilterButtonInput_Params, 0, sizeof(FilterButtonInput_Params));
	memcpy_s(&FilterButtonInput_Params.ControllerId, sizeof(FilterButtonInput_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&FilterButtonInput_Params.ButtonName, sizeof(FilterButtonInput_Params.ButtonName), &ButtonName, sizeof(ButtonName));
	memcpy_s(&FilterButtonInput_Params.InputEvent, sizeof(FilterButtonInput_Params.InputEvent), &InputEvent, sizeof(InputEvent));

	this->ProcessEvent(uFnFilterButtonInput, &FilterButtonInput_Params, nullptr);

	return FilterButtonInput_Params.ReturnValue;
};

// Function OLGame.OLCamcorderHud.UpdateRecordingTime
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void UOLCamcorderHud::UpdateRecordingTime(float DeltaTime)
{
	static UFunction* uFnUpdateRecordingTime = nullptr;

	if (!uFnUpdateRecordingTime)
	{
		uFnUpdateRecordingTime = UFunction::FindFunction("Function OLGame.OLCamcorderHud.UpdateRecordingTime");
	}

	UOLCamcorderHud_execUpdateRecordingTime_Params UpdateRecordingTime_Params;
	memset(&UpdateRecordingTime_Params, 0, sizeof(UpdateRecordingTime_Params));
	memcpy_s(&UpdateRecordingTime_Params.DeltaTime, sizeof(UpdateRecordingTime_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnUpdateRecordingTime, &UpdateRecordingTime_Params, nullptr);
};

// Function OLGame.OLCamcorderHud.WidgetInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   WidgetName                     (CPF_Parm)
// struct FName                   WidgetPath                     (CPF_Parm)
// class UGFxObject*              Widget                         (CPF_Parm)

bool UOLCamcorderHud::eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget)
{
	static UFunction* uFnWidgetInitialized = nullptr;

	if (!uFnWidgetInitialized)
	{
		uFnWidgetInitialized = UFunction::FindFunction("Function OLGame.OLCamcorderHud.WidgetInitialized");
	}

	UOLCamcorderHud_eventWidgetInitialized_Params WidgetInitialized_Params;
	memset(&WidgetInitialized_Params, 0, sizeof(WidgetInitialized_Params));
	memcpy_s(&WidgetInitialized_Params.WidgetName, sizeof(WidgetInitialized_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&WidgetInitialized_Params.WidgetPath, sizeof(WidgetInitialized_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));
	memcpy_s(&WidgetInitialized_Params.Widget, sizeof(WidgetInitialized_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnWidgetInitialized, &WidgetInitialized_Params, nullptr);

	return WidgetInitialized_Params.ReturnValue;
};

// Function OLGame.OLCamcorderHud.HandleUnpaused
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderHud::eventHandleUnpaused()
{
	static UFunction* uFnHandleUnpaused = nullptr;

	if (!uFnHandleUnpaused)
	{
		uFnHandleUnpaused = UFunction::FindFunction("Function OLGame.OLCamcorderHud.HandleUnpaused");
	}

	UOLCamcorderHud_eventHandleUnpaused_Params HandleUnpaused_Params;
	memset(&HandleUnpaused_Params, 0, sizeof(HandleUnpaused_Params));

	this->ProcessEvent(uFnHandleUnpaused, &HandleUnpaused_Params, nullptr);
};

// Function OLGame.OLCamcorderHud.HandlePaused
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCamcorderHud::eventHandlePaused()
{
	static UFunction* uFnHandlePaused = nullptr;

	if (!uFnHandlePaused)
	{
		uFnHandlePaused = UFunction::FindFunction("Function OLGame.OLCamcorderHud.HandlePaused");
	}

	UOLCamcorderHud_eventHandlePaused_Params HandlePaused_Params;
	memset(&HandlePaused_Params, 0, sizeof(HandlePaused_Params));

	this->ProcessEvent(uFnHandlePaused, &HandlePaused_Params, nullptr);
};

// Function OLGame.OLCamcorderHud.SetVisible
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bShow                          (CPF_Parm)

void UOLCamcorderHud::eventSetVisible(bool bShow)
{
	static UFunction* uFnSetVisible = nullptr;

	if (!uFnSetVisible)
	{
		uFnSetVisible = UFunction::FindFunction("Function OLGame.OLCamcorderHud.SetVisible");
	}

	UOLCamcorderHud_eventSetVisible_Params SetVisible_Params;
	memset(&SetVisible_Params, 0, sizeof(SetVisible_Params));
	SetVisible_Params.bShow = bShow;

	this->ProcessEvent(uFnSetVisible, &SetVisible_Params, nullptr);
};

// Function OLGame.OLCameraActor.GetCameraView
// [0x00420102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)
// struct FTPOV                   OutPOV                         (CPF_Parm | CPF_OutParm)

void AOLCameraActor::GetCameraView(float DeltaTime, struct FTPOV& OutPOV)
{
	static UFunction* uFnGetCameraView = nullptr;

	if (!uFnGetCameraView)
	{
		uFnGetCameraView = UFunction::FindFunction("Function OLGame.OLCameraActor.GetCameraView");
	}

	AOLCameraActor_execGetCameraView_Params GetCameraView_Params;
	memset(&GetCameraView_Params, 0, sizeof(GetCameraView_Params));
	memcpy_s(&GetCameraView_Params.DeltaTime, sizeof(GetCameraView_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&GetCameraView_Params.OutPOV, sizeof(GetCameraView_Params.OutPOV), &OutPOV, sizeof(OutPOV));

	this->ProcessEvent(uFnGetCameraView, &GetCameraView_Params, nullptr);

	memcpy_s(&OutPOV, sizeof(OutPOV), &GetCameraView_Params.OutPOV, sizeof(GetCameraView_Params.OutPOV));
};

// Function OLGame.OLCameraActor.NativeGetCameraView
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct FTPOV                   OutPOV                         (CPF_Parm | CPF_OutParm)

void AOLCameraActor::NativeGetCameraView(struct FTPOV& OutPOV)
{
	static UFunction* uFnNativeGetCameraView = nullptr;

	if (!uFnNativeGetCameraView)
	{
		uFnNativeGetCameraView = UFunction::FindFunction("Function OLGame.OLCameraActor.NativeGetCameraView");
	}

	AOLCameraActor_execNativeGetCameraView_Params NativeGetCameraView_Params;
	memset(&NativeGetCameraView_Params, 0, sizeof(NativeGetCameraView_Params));
	memcpy_s(&NativeGetCameraView_Params.OutPOV, sizeof(NativeGetCameraView_Params.OutPOV), &OutPOV, sizeof(OutPOV));

	uFnNativeGetCameraView->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeGetCameraView, &NativeGetCameraView_Params, nullptr);
	uFnNativeGetCameraView->FunctionFlags |= 0x400;

	memcpy_s(&OutPOV, sizeof(OutPOV), &NativeGetCameraView_Params.OutPOV, sizeof(NativeGetCameraView_Params.OutPOV));
};

// Function OLGame.OLPlayerController.UnlockAchievement
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EOutlastAchievement            achievement                    (CPF_Parm)

void AOLPlayerController::eventUnlockAchievement(EOutlastAchievement achievement)
{
	static UFunction* uFnUnlockAchievement = nullptr;

	if (!uFnUnlockAchievement)
	{
		uFnUnlockAchievement = UFunction::FindFunction("Function OLGame.OLPlayerController.UnlockAchievement");
	}

	AOLPlayerController_eventUnlockAchievement_Params UnlockAchievement_Params;
	memset(&UnlockAchievement_Params, 0, sizeof(UnlockAchievement_Params));
	memcpy_s(&UnlockAchievement_Params.achievement, sizeof(UnlockAchievement_Params.achievement), &achievement, sizeof(achievement));

	this->ProcessEvent(uFnUnlockAchievement, &UnlockAchievement_Params, nullptr);
};

// Function OLGame.OLPlayerController.NotifyDifficultyChanged
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::NotifyDifficultyChanged()
{
	static UFunction* uFnNotifyDifficultyChanged = nullptr;

	if (!uFnNotifyDifficultyChanged)
	{
		uFnNotifyDifficultyChanged = UFunction::FindFunction("Function OLGame.OLPlayerController.NotifyDifficultyChanged");
	}

	AOLPlayerController_execNotifyDifficultyChanged_Params NotifyDifficultyChanged_Params;
	memset(&NotifyDifficultyChanged_Params, 0, sizeof(NotifyDifficultyChanged_Params));

	this->ProcessEvent(uFnNotifyDifficultyChanged, &NotifyDifficultyChanged_Params, nullptr);
};

// Function OLGame.OLPlayerController.UpdateDifficultyBasedValues
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::UpdateDifficultyBasedValues()
{
	static UFunction* uFnUpdateDifficultyBasedValues = nullptr;

	if (!uFnUpdateDifficultyBasedValues)
	{
		uFnUpdateDifficultyBasedValues = UFunction::FindFunction("Function OLGame.OLPlayerController.UpdateDifficultyBasedValues");
	}

	AOLPlayerController_execUpdateDifficultyBasedValues_Params UpdateDifficultyBasedValues_Params;
	memset(&UpdateDifficultyBasedValues_Params, 0, sizeof(UpdateDifficultyBasedValues_Params));

	this->ProcessEvent(uFnUpdateDifficultyBasedValues, &UpdateDifficultyBasedValues_Params, nullptr);
};

// Function OLGame.OLPlayerController.CheckForProfileUpdate
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::eventCheckForProfileUpdate()
{
	static UFunction* uFnCheckForProfileUpdate = nullptr;

	if (!uFnCheckForProfileUpdate)
	{
		uFnCheckForProfileUpdate = UFunction::FindFunction("Function OLGame.OLPlayerController.CheckForProfileUpdate");
	}

	AOLPlayerController_eventCheckForProfileUpdate_Params CheckForProfileUpdate_Params;
	memset(&CheckForProfileUpdate_Params, 0, sizeof(CheckForProfileUpdate_Params));

	this->ProcessEvent(uFnCheckForProfileUpdate, &CheckForProfileUpdate_Params, nullptr);
};

// Function OLGame.OLPlayerController.UpdateLocalCacheOfProfileSettings
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLProfileSettings*      EffectiveProfileSettings       (CPF_Parm)

void AOLPlayerController::eventUpdateLocalCacheOfProfileSettings(class UOLProfileSettings* EffectiveProfileSettings)
{
	static UFunction* uFnUpdateLocalCacheOfProfileSettings = nullptr;

	if (!uFnUpdateLocalCacheOfProfileSettings)
	{
		uFnUpdateLocalCacheOfProfileSettings = UFunction::FindFunction("Function OLGame.OLPlayerController.UpdateLocalCacheOfProfileSettings");
	}

	AOLPlayerController_eventUpdateLocalCacheOfProfileSettings_Params UpdateLocalCacheOfProfileSettings_Params;
	memset(&UpdateLocalCacheOfProfileSettings_Params, 0, sizeof(UpdateLocalCacheOfProfileSettings_Params));
	memcpy_s(&UpdateLocalCacheOfProfileSettings_Params.EffectiveProfileSettings, sizeof(UpdateLocalCacheOfProfileSettings_Params.EffectiveProfileSettings), &EffectiveProfileSettings, sizeof(EffectiveProfileSettings));

	this->ProcessEvent(uFnUpdateLocalCacheOfProfileSettings, &UpdateLocalCacheOfProfileSettings_Params, nullptr);
};

// Function OLGame.OLPlayerController.ClientSaveAllPlayerData
// [0xFFFF0000010241C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_NetClient | FUNC_NetValidate | FUNC_AllFlags)
// Parameter Info:
// bool                           bShouldForce                   (CPF_OptionalParm | CPF_Parm)
// bool                           bSkipCacheUpdate               (CPF_OptionalParm | CPF_Parm)

void AOLPlayerController::ClientSaveAllPlayerData(bool bShouldForce, bool bSkipCacheUpdate)
{
	static UFunction* uFnClientSaveAllPlayerData = nullptr;

	if (!uFnClientSaveAllPlayerData)
	{
		uFnClientSaveAllPlayerData = UFunction::FindFunction("Function OLGame.OLPlayerController.ClientSaveAllPlayerData");
	}

	AOLPlayerController_execClientSaveAllPlayerData_Params ClientSaveAllPlayerData_Params;
	memset(&ClientSaveAllPlayerData_Params, 0, sizeof(ClientSaveAllPlayerData_Params));
	ClientSaveAllPlayerData_Params.bShouldForce = bShouldForce;
	ClientSaveAllPlayerData_Params.bSkipCacheUpdate = bSkipCacheUpdate;

	this->ProcessEvent(uFnClientSaveAllPlayerData, &ClientSaveAllPlayerData_Params, nullptr);
};

// Function OLGame.OLPlayerController.OnProfileWriteComplete
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void AOLPlayerController::OnProfileWriteComplete(uint8_t LocalUserNum, bool bWasSuccessful)
{
	static UFunction* uFnOnProfileWriteComplete = nullptr;

	if (!uFnOnProfileWriteComplete)
	{
		uFnOnProfileWriteComplete = UFunction::FindFunction("Function OLGame.OLPlayerController.OnProfileWriteComplete");
	}

	AOLPlayerController_execOnProfileWriteComplete_Params OnProfileWriteComplete_Params;
	memset(&OnProfileWriteComplete_Params, 0, sizeof(OnProfileWriteComplete_Params));
	memcpy_s(&OnProfileWriteComplete_Params.LocalUserNum, sizeof(OnProfileWriteComplete_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	OnProfileWriteComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnProfileWriteComplete, &OnProfileWriteComplete_Params, nullptr);
};

// Function OLGame.OLPlayerController.ClearSaveProfileDelegate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ControllerId                   (CPF_Parm)
// struct FScriptDelegate         WriteProfileSettingsCompleteDelegate (CPF_Parm | CPF_NeedCtorLink)

void AOLPlayerController::ClearSaveProfileDelegate(int32_t ControllerId, struct FScriptDelegate WriteProfileSettingsCompleteDelegate)
{
	static UFunction* uFnClearSaveProfileDelegate = nullptr;

	if (!uFnClearSaveProfileDelegate)
	{
		uFnClearSaveProfileDelegate = UFunction::FindFunction("Function OLGame.OLPlayerController.ClearSaveProfileDelegate");
	}

	AOLPlayerController_execClearSaveProfileDelegate_Params ClearSaveProfileDelegate_Params;
	memset(&ClearSaveProfileDelegate_Params, 0, sizeof(ClearSaveProfileDelegate_Params));
	memcpy_s(&ClearSaveProfileDelegate_Params.ControllerId, sizeof(ClearSaveProfileDelegate_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&ClearSaveProfileDelegate_Params.WriteProfileSettingsCompleteDelegate, sizeof(ClearSaveProfileDelegate_Params.WriteProfileSettingsCompleteDelegate), &WriteProfileSettingsCompleteDelegate, sizeof(WriteProfileSettingsCompleteDelegate));

	this->ProcessEvent(uFnClearSaveProfileDelegate, &ClearSaveProfileDelegate_Params, nullptr);
};

// Function OLGame.OLPlayerController.ResetProfile
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::eventResetProfile()
{
	static UFunction* uFnResetProfile = nullptr;

	if (!uFnResetProfile)
	{
		uFnResetProfile = UFunction::FindFunction("Function OLGame.OLPlayerController.ResetProfile");
	}

	AOLPlayerController_eventResetProfile_Params ResetProfile_Params;
	memset(&ResetProfile_Params, 0, sizeof(ResetProfile_Params));

	this->ProcessEvent(uFnResetProfile, &ResetProfile_Params, nullptr);
};

// Function OLGame.OLPlayerController.SaveProfile
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::eventSaveProfile()
{
	static UFunction* uFnSaveProfile = nullptr;

	if (!uFnSaveProfile)
	{
		uFnSaveProfile = UFunction::FindFunction("Function OLGame.OLPlayerController.SaveProfile");
	}

	AOLPlayerController_eventSaveProfile_Params SaveProfile_Params;
	memset(&SaveProfile_Params, 0, sizeof(SaveProfile_Params));

	this->ProcessEvent(uFnSaveProfile, &SaveProfile_Params, nullptr);
};

// Function OLGame.OLPlayerController.OnControllerChanged
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ControllerId                   (CPF_Parm)
// bool                           bIsConnected                   (CPF_Parm)

void AOLPlayerController::OnControllerChanged(int32_t ControllerId, bool bIsConnected)
{
	static UFunction* uFnOnControllerChanged = nullptr;

	if (!uFnOnControllerChanged)
	{
		uFnOnControllerChanged = UFunction::FindFunction("Function OLGame.OLPlayerController.OnControllerChanged");
	}

	AOLPlayerController_execOnControllerChanged_Params OnControllerChanged_Params;
	memset(&OnControllerChanged_Params, 0, sizeof(OnControllerChanged_Params));
	memcpy_s(&OnControllerChanged_Params.ControllerId, sizeof(OnControllerChanged_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	OnControllerChanged_Params.bIsConnected = bIsConnected;

	this->ProcessEvent(uFnOnControllerChanged, &OnControllerChanged_Params, nullptr);
};

// Function OLGame.OLPlayerController.NativeOnControllerChanged
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ControllerId                   (CPF_Parm)
// bool                           bIsConnected                   (CPF_Parm)

void AOLPlayerController::NativeOnControllerChanged(int32_t ControllerId, bool bIsConnected)
{
	static UFunction* uFnNativeOnControllerChanged = nullptr;

	if (!uFnNativeOnControllerChanged)
	{
		uFnNativeOnControllerChanged = UFunction::FindFunction("Function OLGame.OLPlayerController.NativeOnControllerChanged");
	}

	AOLPlayerController_execNativeOnControllerChanged_Params NativeOnControllerChanged_Params;
	memset(&NativeOnControllerChanged_Params, 0, sizeof(NativeOnControllerChanged_Params));
	memcpy_s(&NativeOnControllerChanged_Params.ControllerId, sizeof(NativeOnControllerChanged_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	NativeOnControllerChanged_Params.bIsConnected = bIsConnected;

	uFnNativeOnControllerChanged->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeOnControllerChanged, &NativeOnControllerChanged_Params, nullptr);
	uFnNativeOnControllerChanged->FunctionFlags |= 0x400;
};

// Function OLGame.OLPlayerController.UnregisterPlayerDataStores
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::UnregisterPlayerDataStores()
{
	static UFunction* uFnUnregisterPlayerDataStores = nullptr;

	if (!uFnUnregisterPlayerDataStores)
	{
		uFnUnregisterPlayerDataStores = UFunction::FindFunction("Function OLGame.OLPlayerController.UnregisterPlayerDataStores");
	}

	AOLPlayerController_execUnregisterPlayerDataStores_Params UnregisterPlayerDataStores_Params;
	memset(&UnregisterPlayerDataStores_Params, 0, sizeof(UnregisterPlayerDataStores_Params));

	this->ProcessEvent(uFnUnregisterPlayerDataStores, &UnregisterPlayerDataStores_Params, nullptr);
};

// Function OLGame.OLPlayerController.RegisterCustomPlayerDataStores
// [0x00080102] (FUNC_Defined | FUNC_Simulated | FUNC_Protected | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::RegisterCustomPlayerDataStores()
{
	static UFunction* uFnRegisterCustomPlayerDataStores = nullptr;

	if (!uFnRegisterCustomPlayerDataStores)
	{
		uFnRegisterCustomPlayerDataStores = UFunction::FindFunction("Function OLGame.OLPlayerController.RegisterCustomPlayerDataStores");
	}

	AOLPlayerController_execRegisterCustomPlayerDataStores_Params RegisterCustomPlayerDataStores_Params;
	memset(&RegisterCustomPlayerDataStores_Params, 0, sizeof(RegisterCustomPlayerDataStores_Params));

	this->ProcessEvent(uFnRegisterCustomPlayerDataStores, &RegisterCustomPlayerDataStores_Params, nullptr);
};

// Function OLGame.OLPlayerController.CheatGiveAllCollectibles
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::CheatGiveAllCollectibles()
{
	static UFunction* uFnCheatGiveAllCollectibles = nullptr;

	if (!uFnCheatGiveAllCollectibles)
	{
		uFnCheatGiveAllCollectibles = UFunction::FindFunction("Function OLGame.OLPlayerController.CheatGiveAllCollectibles");
	}

	AOLPlayerController_execCheatGiveAllCollectibles_Params CheatGiveAllCollectibles_Params;
	memset(&CheatGiveAllCollectibles_Params, 0, sizeof(CheatGiveAllCollectibles_Params));

	uFnCheatGiveAllCollectibles->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCheatGiveAllCollectibles, &CheatGiveAllCollectibles_Params, nullptr);
	uFnCheatGiveAllCollectibles->FunctionFlags |= 0x400;
};

// Function OLGame.OLPlayerController.ShippingCheat_GiveAllCheckpoints
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLPlayerController::ShippingCheat_GiveAllCheckpoints()
{
	static UFunction* uFnShippingCheat_GiveAllCheckpoints = nullptr;

	if (!uFnShippingCheat_GiveAllCheckpoints)
	{
		uFnShippingCheat_GiveAllCheckpoints = UFunction::FindFunction("Function OLGame.OLPlayerController.ShippingCheat_GiveAllCheckpoints");
	}

	AOLPlayerController_execShippingCheat_GiveAllCheckpoints_Params ShippingCheat_GiveAllCheckpoints_Params;
	memset(&ShippingCheat_GiveAllCheckpoints_Params, 0, sizeof(ShippingCheat_GiveAllCheckpoints_Params));

	uFnShippingCheat_GiveAllCheckpoints->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnShippingCheat_GiveAllCheckpoints, &ShippingCheat_GiveAllCheckpoints_Params, nullptr);
	uFnShippingCheat_GiveAllCheckpoints->FunctionFlags |= 0x400;

	return ShippingCheat_GiveAllCheckpoints_Params.ReturnValue;
};

// Function OLGame.OLPlayerController.QueueClearWorldState
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::QueueClearWorldState()
{
	static UFunction* uFnQueueClearWorldState = nullptr;

	if (!uFnQueueClearWorldState)
	{
		uFnQueueClearWorldState = UFunction::FindFunction("Function OLGame.OLPlayerController.QueueClearWorldState");
	}

	AOLPlayerController_execQueueClearWorldState_Params QueueClearWorldState_Params;
	memset(&QueueClearWorldState_Params, 0, sizeof(QueueClearWorldState_Params));

	this->ProcessEvent(uFnQueueClearWorldState, &QueueClearWorldState_Params, nullptr);
};

// Function OLGame.OLPlayerController.ClearSavedStates
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::ClearSavedStates()
{
	static UFunction* uFnClearSavedStates = nullptr;

	if (!uFnClearSavedStates)
	{
		uFnClearSavedStates = UFunction::FindFunction("Function OLGame.OLPlayerController.ClearSavedStates");
	}

	AOLPlayerController_execClearSavedStates_Params ClearSavedStates_Params;
	memset(&ClearSavedStates_Params, 0, sizeof(ClearSavedStates_Params));

	uFnClearSavedStates->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClearSavedStates, &ClearSavedStates_Params, nullptr);
	uFnClearSavedStates->FunctionFlags |= 0x400;
};

// Function OLGame.OLPlayerController.ClearAllProgress
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::ClearAllProgress()
{
	static UFunction* uFnClearAllProgress = nullptr;

	if (!uFnClearAllProgress)
	{
		uFnClearAllProgress = UFunction::FindFunction("Function OLGame.OLPlayerController.ClearAllProgress");
	}

	AOLPlayerController_execClearAllProgress_Params ClearAllProgress_Params;
	memset(&ClearAllProgress_Params, 0, sizeof(ClearAllProgress_Params));

	uFnClearAllProgress->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClearAllProgress, &ClearAllProgress_Params, nullptr);
	uFnClearAllProgress->FunctionFlags |= 0x400;
};

// Function OLGame.OLPlayerController.SaveBeforeQuitting
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::SaveBeforeQuitting()
{
	static UFunction* uFnSaveBeforeQuitting = nullptr;

	if (!uFnSaveBeforeQuitting)
	{
		uFnSaveBeforeQuitting = UFunction::FindFunction("Function OLGame.OLPlayerController.SaveBeforeQuitting");
	}

	AOLPlayerController_execSaveBeforeQuitting_Params SaveBeforeQuitting_Params;
	memset(&SaveBeforeQuitting_Params, 0, sizeof(SaveBeforeQuitting_Params));

	uFnSaveBeforeQuitting->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSaveBeforeQuitting, &SaveBeforeQuitting_Params, nullptr);
	uFnSaveBeforeQuitting->FunctionFlags |= 0x400;
};

// Function OLGame.OLPlayerController.ClientCommitMapChangeNoOverlay
// [0xFFFF0000010209C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_NetClient | FUNC_NetValidate | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::eventClientCommitMapChangeNoOverlay()
{
	static UFunction* uFnClientCommitMapChangeNoOverlay = nullptr;

	if (!uFnClientCommitMapChangeNoOverlay)
	{
		uFnClientCommitMapChangeNoOverlay = UFunction::FindFunction("Function OLGame.OLPlayerController.ClientCommitMapChangeNoOverlay");
	}

	AOLPlayerController_eventClientCommitMapChangeNoOverlay_Params ClientCommitMapChangeNoOverlay_Params;
	memset(&ClientCommitMapChangeNoOverlay_Params, 0, sizeof(ClientCommitMapChangeNoOverlay_Params));

	this->ProcessEvent(uFnClientCommitMapChangeNoOverlay, &ClientCommitMapChangeNoOverlay_Params, nullptr);
};

// Function OLGame.OLPlayerController.ClientCommitMapChange
// [0xFFFF0000010209C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_NetClient | FUNC_NetValidate | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::eventClientCommitMapChange()
{
	static UFunction* uFnClientCommitMapChange = nullptr;

	if (!uFnClientCommitMapChange)
	{
		uFnClientCommitMapChange = UFunction::FindFunction("Function OLGame.OLPlayerController.ClientCommitMapChange");
	}

	AOLPlayerController_eventClientCommitMapChange_Params ClientCommitMapChange_Params;
	memset(&ClientCommitMapChange_Params, 0, sizeof(ClientCommitMapChange_Params));

	this->ProcessEvent(uFnClientCommitMapChange, &ClientCommitMapChange_Params, nullptr);
};

// Function OLGame.OLPlayerController.StartNewGameAtCheckpoint
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           bSaveToDisk                    (CPF_Parm)
// class FString                  CheckpointStr                  (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AOLPlayerController::StartNewGameAtCheckpoint(bool bSaveToDisk, class FString& CheckpointStr)
{
	static UFunction* uFnStartNewGameAtCheckpoint = nullptr;

	if (!uFnStartNewGameAtCheckpoint)
	{
		uFnStartNewGameAtCheckpoint = UFunction::FindFunction("Function OLGame.OLPlayerController.StartNewGameAtCheckpoint");
	}

	AOLPlayerController_execStartNewGameAtCheckpoint_Params StartNewGameAtCheckpoint_Params;
	memset(&StartNewGameAtCheckpoint_Params, 0, sizeof(StartNewGameAtCheckpoint_Params));
	StartNewGameAtCheckpoint_Params.bSaveToDisk = bSaveToDisk;
	memcpy_s(&StartNewGameAtCheckpoint_Params.CheckpointStr, sizeof(StartNewGameAtCheckpoint_Params.CheckpointStr), &CheckpointStr, sizeof(CheckpointStr));

	uFnStartNewGameAtCheckpoint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStartNewGameAtCheckpoint, &StartNewGameAtCheckpoint_Params, nullptr);
	uFnStartNewGameAtCheckpoint->FunctionFlags |= 0x400;

	memcpy_s(&CheckpointStr, sizeof(CheckpointStr), &StartNewGameAtCheckpoint_Params.CheckpointStr, sizeof(StartNewGameAtCheckpoint_Params.CheckpointStr));
};

// Function OLGame.OLPlayerController.ApplyCheckpointRecord
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct AOLPlayerController_FCheckpointRecord Record                         (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AOLPlayerController::ApplyCheckpointRecord(struct AOLPlayerController_FCheckpointRecord& Record)
{
	static UFunction* uFnApplyCheckpointRecord = nullptr;

	if (!uFnApplyCheckpointRecord)
	{
		uFnApplyCheckpointRecord = UFunction::FindFunction("Function OLGame.OLPlayerController.ApplyCheckpointRecord");
	}

	AOLPlayerController_execApplyCheckpointRecord_Params ApplyCheckpointRecord_Params;
	memset(&ApplyCheckpointRecord_Params, 0, sizeof(ApplyCheckpointRecord_Params));
	memcpy_s(&ApplyCheckpointRecord_Params.Record, sizeof(ApplyCheckpointRecord_Params.Record), &Record, sizeof(Record));

	this->ProcessEvent(uFnApplyCheckpointRecord, &ApplyCheckpointRecord_Params, nullptr);

	memcpy_s(&Record, sizeof(Record), &ApplyCheckpointRecord_Params.Record, sizeof(ApplyCheckpointRecord_Params.Record));
};

// Function OLGame.OLPlayerController.GetSaveGameNameFromRecord
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct AOLPlayerController_FCheckpointRecord Record                         (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  SaveGameName                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AOLPlayerController::GetSaveGameNameFromRecord(struct AOLPlayerController_FCheckpointRecord& Record, class FString& SaveGameName)
{
	static UFunction* uFnGetSaveGameNameFromRecord = nullptr;

	if (!uFnGetSaveGameNameFromRecord)
	{
		uFnGetSaveGameNameFromRecord = UFunction::FindFunction("Function OLGame.OLPlayerController.GetSaveGameNameFromRecord");
	}

	AOLPlayerController_execGetSaveGameNameFromRecord_Params GetSaveGameNameFromRecord_Params;
	memset(&GetSaveGameNameFromRecord_Params, 0, sizeof(GetSaveGameNameFromRecord_Params));
	memcpy_s(&GetSaveGameNameFromRecord_Params.Record, sizeof(GetSaveGameNameFromRecord_Params.Record), &Record, sizeof(Record));
	memcpy_s(&GetSaveGameNameFromRecord_Params.SaveGameName, sizeof(GetSaveGameNameFromRecord_Params.SaveGameName), &SaveGameName, sizeof(SaveGameName));

	this->ProcessEvent(uFnGetSaveGameNameFromRecord, &GetSaveGameNameFromRecord_Params, nullptr);

	memcpy_s(&Record, sizeof(Record), &GetSaveGameNameFromRecord_Params.Record, sizeof(GetSaveGameNameFromRecord_Params.Record));
	memcpy_s(&SaveGameName, sizeof(SaveGameName), &GetSaveGameNameFromRecord_Params.SaveGameName, sizeof(GetSaveGameNameFromRecord_Params.SaveGameName));
};

// Function OLGame.OLPlayerController.CreateCheckpointRecord
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct AOLPlayerController_FCheckpointRecord Record                         (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AOLPlayerController::CreateCheckpointRecord(struct AOLPlayerController_FCheckpointRecord& Record)
{
	static UFunction* uFnCreateCheckpointRecord = nullptr;

	if (!uFnCreateCheckpointRecord)
	{
		uFnCreateCheckpointRecord = UFunction::FindFunction("Function OLGame.OLPlayerController.CreateCheckpointRecord");
	}

	AOLPlayerController_execCreateCheckpointRecord_Params CreateCheckpointRecord_Params;
	memset(&CreateCheckpointRecord_Params, 0, sizeof(CreateCheckpointRecord_Params));
	memcpy_s(&CreateCheckpointRecord_Params.Record, sizeof(CreateCheckpointRecord_Params.Record), &Record, sizeof(Record));

	this->ProcessEvent(uFnCreateCheckpointRecord, &CreateCheckpointRecord_Params, nullptr);

	memcpy_s(&Record, sizeof(Record), &CreateCheckpointRecord_Params.Record, sizeof(CreateCheckpointRecord_Params.Record));
};

// Function OLGame.OLPlayerController.SetSaveGameName
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  SaveGameName                   (CPF_Parm | CPF_NeedCtorLink)

void AOLPlayerController::SetSaveGameName(class FString SaveGameName)
{
	static UFunction* uFnSetSaveGameName = nullptr;

	if (!uFnSetSaveGameName)
	{
		uFnSetSaveGameName = UFunction::FindFunction("Function OLGame.OLPlayerController.SetSaveGameName");
	}

	AOLPlayerController_execSetSaveGameName_Params SetSaveGameName_Params;
	memset(&SetSaveGameName_Params, 0, sizeof(SetSaveGameName_Params));
	memcpy_s(&SetSaveGameName_Params.SaveGameName, sizeof(SetSaveGameName_Params.SaveGameName), &SaveGameName, sizeof(SaveGameName));

	uFnSetSaveGameName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetSaveGameName, &SetSaveGameName_Params, nullptr);
	uFnSetSaveGameName->FunctionFlags |= 0x400;
};

// Function OLGame.OLPlayerController.GetSaveGameName
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  SaveGameName                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AOLPlayerController::GetSaveGameName(class FString& SaveGameName)
{
	static UFunction* uFnGetSaveGameName = nullptr;

	if (!uFnGetSaveGameName)
	{
		uFnGetSaveGameName = UFunction::FindFunction("Function OLGame.OLPlayerController.GetSaveGameName");
	}

	AOLPlayerController_execGetSaveGameName_Params GetSaveGameName_Params;
	memset(&GetSaveGameName_Params, 0, sizeof(GetSaveGameName_Params));
	memcpy_s(&GetSaveGameName_Params.SaveGameName, sizeof(GetSaveGameName_Params.SaveGameName), &SaveGameName, sizeof(SaveGameName));

	uFnGetSaveGameName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetSaveGameName, &GetSaveGameName_Params, nullptr);
	uFnGetSaveGameName->FunctionFlags |= 0x400;

	memcpy_s(&SaveGameName, sizeof(SaveGameName), &GetSaveGameName_Params.SaveGameName, sizeof(GetSaveGameName_Params.SaveGameName));
};

// Function OLGame.OLPlayerController.NativeGetSaveGameNameFromRecord
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct AOLPlayerController_FCheckpointRecord Record                         (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  SaveGameName                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AOLPlayerController::NativeGetSaveGameNameFromRecord(struct AOLPlayerController_FCheckpointRecord& Record, class FString& SaveGameName)
{
	static UFunction* uFnNativeGetSaveGameNameFromRecord = nullptr;

	if (!uFnNativeGetSaveGameNameFromRecord)
	{
		uFnNativeGetSaveGameNameFromRecord = UFunction::FindFunction("Function OLGame.OLPlayerController.NativeGetSaveGameNameFromRecord");
	}

	AOLPlayerController_execNativeGetSaveGameNameFromRecord_Params NativeGetSaveGameNameFromRecord_Params;
	memset(&NativeGetSaveGameNameFromRecord_Params, 0, sizeof(NativeGetSaveGameNameFromRecord_Params));
	memcpy_s(&NativeGetSaveGameNameFromRecord_Params.Record, sizeof(NativeGetSaveGameNameFromRecord_Params.Record), &Record, sizeof(Record));
	memcpy_s(&NativeGetSaveGameNameFromRecord_Params.SaveGameName, sizeof(NativeGetSaveGameNameFromRecord_Params.SaveGameName), &SaveGameName, sizeof(SaveGameName));

	uFnNativeGetSaveGameNameFromRecord->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeGetSaveGameNameFromRecord, &NativeGetSaveGameNameFromRecord_Params, nullptr);
	uFnNativeGetSaveGameNameFromRecord->FunctionFlags |= 0x400;

	memcpy_s(&Record, sizeof(Record), &NativeGetSaveGameNameFromRecord_Params.Record, sizeof(NativeGetSaveGameNameFromRecord_Params.Record));
	memcpy_s(&SaveGameName, sizeof(SaveGameName), &NativeGetSaveGameNameFromRecord_Params.SaveGameName, sizeof(NativeGetSaveGameNameFromRecord_Params.SaveGameName));
};

// Function OLGame.OLPlayerController.NativeApplyCheckpointRecord
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct AOLPlayerController_FCheckpointRecord Record                         (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AOLPlayerController::NativeApplyCheckpointRecord(struct AOLPlayerController_FCheckpointRecord& Record)
{
	static UFunction* uFnNativeApplyCheckpointRecord = nullptr;

	if (!uFnNativeApplyCheckpointRecord)
	{
		uFnNativeApplyCheckpointRecord = UFunction::FindFunction("Function OLGame.OLPlayerController.NativeApplyCheckpointRecord");
	}

	AOLPlayerController_execNativeApplyCheckpointRecord_Params NativeApplyCheckpointRecord_Params;
	memset(&NativeApplyCheckpointRecord_Params, 0, sizeof(NativeApplyCheckpointRecord_Params));
	memcpy_s(&NativeApplyCheckpointRecord_Params.Record, sizeof(NativeApplyCheckpointRecord_Params.Record), &Record, sizeof(Record));

	uFnNativeApplyCheckpointRecord->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeApplyCheckpointRecord, &NativeApplyCheckpointRecord_Params, nullptr);
	uFnNativeApplyCheckpointRecord->FunctionFlags |= 0x400;

	memcpy_s(&Record, sizeof(Record), &NativeApplyCheckpointRecord_Params.Record, sizeof(NativeApplyCheckpointRecord_Params.Record));
};

// Function OLGame.OLPlayerController.NativeGetCurrentCheckpointRecord
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct AOLPlayerController_FCheckpointRecord Record                         (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AOLPlayerController::NativeGetCurrentCheckpointRecord(struct AOLPlayerController_FCheckpointRecord& Record)
{
	static UFunction* uFnNativeGetCurrentCheckpointRecord = nullptr;

	if (!uFnNativeGetCurrentCheckpointRecord)
	{
		uFnNativeGetCurrentCheckpointRecord = UFunction::FindFunction("Function OLGame.OLPlayerController.NativeGetCurrentCheckpointRecord");
	}

	AOLPlayerController_execNativeGetCurrentCheckpointRecord_Params NativeGetCurrentCheckpointRecord_Params;
	memset(&NativeGetCurrentCheckpointRecord_Params, 0, sizeof(NativeGetCurrentCheckpointRecord_Params));
	memcpy_s(&NativeGetCurrentCheckpointRecord_Params.Record, sizeof(NativeGetCurrentCheckpointRecord_Params.Record), &Record, sizeof(Record));

	uFnNativeGetCurrentCheckpointRecord->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeGetCurrentCheckpointRecord, &NativeGetCurrentCheckpointRecord_Params, nullptr);
	uFnNativeGetCurrentCheckpointRecord->FunctionFlags |= 0x400;

	memcpy_s(&Record, sizeof(Record), &NativeGetCurrentCheckpointRecord_Params.Record, sizeof(NativeGetCurrentCheckpointRecord_Params.Record));
};

// Function OLGame.OLPlayerController.StopAllSounds
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::StopAllSounds()
{
	static UFunction* uFnStopAllSounds = nullptr;

	if (!uFnStopAllSounds)
	{
		uFnStopAllSounds = UFunction::FindFunction("Function OLGame.OLPlayerController.StopAllSounds");
	}

	AOLPlayerController_execStopAllSounds_Params StopAllSounds_Params;
	memset(&StopAllSounds_Params, 0, sizeof(StopAllSounds_Params));

	uFnStopAllSounds->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStopAllSounds, &StopAllSounds_Params, nullptr);
	uFnStopAllSounds->FunctionFlags |= 0x400;
};

// Function OLGame.OLPlayerController.DrawHUD
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    H                              (CPF_Parm)

void AOLPlayerController::DrawHUD(class AHUD* H)
{
	static UFunction* uFnDrawHUD = nullptr;

	if (!uFnDrawHUD)
	{
		uFnDrawHUD = UFunction::FindFunction("Function OLGame.OLPlayerController.DrawHUD");
	}

	AOLPlayerController_execDrawHUD_Params DrawHUD_Params;
	memset(&DrawHUD_Params, 0, sizeof(DrawHUD_Params));
	memcpy_s(&DrawHUD_Params.H, sizeof(DrawHUD_Params.H), &H, sizeof(H));

	this->ProcessEvent(uFnDrawHUD, &DrawHUD_Params, nullptr);
};

// Function OLGame.OLPlayerController.FullScreenOverlayChanged
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::eventFullScreenOverlayChanged()
{
	static UFunction* uFnFullScreenOverlayChanged = nullptr;

	if (!uFnFullScreenOverlayChanged)
	{
		uFnFullScreenOverlayChanged = UFunction::FindFunction("Function OLGame.OLPlayerController.FullScreenOverlayChanged");
	}

	AOLPlayerController_eventFullScreenOverlayChanged_Params FullScreenOverlayChanged_Params;
	memset(&FullScreenOverlayChanged_Params, 0, sizeof(FullScreenOverlayChanged_Params));

	this->ProcessEvent(uFnFullScreenOverlayChanged, &FullScreenOverlayChanged_Params, nullptr);
};

// Function OLGame.OLPlayerController.ForcePause
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bPause                         (CPF_Parm)

void AOLPlayerController::eventForcePause(bool bPause)
{
	static UFunction* uFnForcePause = nullptr;

	if (!uFnForcePause)
	{
		uFnForcePause = UFunction::FindFunction("Function OLGame.OLPlayerController.ForcePause");
	}

	AOLPlayerController_eventForcePause_Params ForcePause_Params;
	memset(&ForcePause_Params, 0, sizeof(ForcePause_Params));
	ForcePause_Params.bPause = bPause;

	this->ProcessEvent(uFnForcePause, &ForcePause_Params, nullptr);
};

// Function OLGame.OLPlayerController.ClientSetHUD
// [0xFFFF0000010201C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Public | FUNC_NetClient | FUNC_NetValidate | FUNC_AllFlags)
// Parameter Info:
// class UClass*                  newHUDType                     (CPF_Parm)

void AOLPlayerController::ClientSetHUD(class UClass* newHUDType)
{
	static UFunction* uFnClientSetHUD = nullptr;

	if (!uFnClientSetHUD)
	{
		uFnClientSetHUD = UFunction::FindFunction("Function OLGame.OLPlayerController.ClientSetHUD");
	}

	AOLPlayerController_execClientSetHUD_Params ClientSetHUD_Params;
	memset(&ClientSetHUD_Params, 0, sizeof(ClientSetHUD_Params));
	memcpy_s(&ClientSetHUD_Params.newHUDType, sizeof(ClientSetHUD_Params.newHUDType), &newHUDType, sizeof(newHUDType));

	this->ProcessEvent(uFnClientSetHUD, &ClientSetHUD_Params, nullptr);
};

// Function OLGame.OLPlayerController.OnSetMesh
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_SetMesh*         Action                         (CPF_Parm)

void AOLPlayerController::eventOnSetMesh(class USeqAct_SetMesh* Action)
{
	static UFunction* uFnOnSetMesh = nullptr;

	if (!uFnOnSetMesh)
	{
		uFnOnSetMesh = UFunction::FindFunction("Function OLGame.OLPlayerController.OnSetMesh");
	}

	AOLPlayerController_eventOnSetMesh_Params OnSetMesh_Params;
	memset(&OnSetMesh_Params, 0, sizeof(OnSetMesh_Params));
	memcpy_s(&OnSetMesh_Params.Action, sizeof(OnSetMesh_Params.Action), &Action, sizeof(Action));

	this->ProcessEvent(uFnOnSetMesh, &OnSetMesh_Params, nullptr);
};

// Function OLGame.OLPlayerController.ClientSetCameraFade
// [0xFFFF0000010249C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_NetClient | FUNC_NetValidate | FUNC_AllFlags)
// Parameter Info:
// bool                           _enableFading                  (CPF_Parm)
// struct FColor                  _FadeColor                     (CPF_OptionalParm | CPF_Parm)
// struct FVector2D               _FadeAlpha                     (CPF_OptionalParm | CPF_Parm)
// float                          _FadeTime                      (CPF_OptionalParm | CPF_Parm)
// bool                           _fadeAudio                     (CPF_OptionalParm | CPF_Parm)

void AOLPlayerController::eventClientSetCameraFade(bool _enableFading, struct FColor _FadeColor, struct FVector2D _FadeAlpha, float _FadeTime, bool _fadeAudio)
{
	static UFunction* uFnClientSetCameraFade = nullptr;

	if (!uFnClientSetCameraFade)
	{
		uFnClientSetCameraFade = UFunction::FindFunction("Function OLGame.OLPlayerController.ClientSetCameraFade");
	}

	AOLPlayerController_eventClientSetCameraFade_Params ClientSetCameraFade_Params;
	memset(&ClientSetCameraFade_Params, 0, sizeof(ClientSetCameraFade_Params));
	ClientSetCameraFade_Params._enableFading = _enableFading;
	memcpy_s(&ClientSetCameraFade_Params._FadeColor, sizeof(ClientSetCameraFade_Params._FadeColor), &_FadeColor, sizeof(_FadeColor));
	memcpy_s(&ClientSetCameraFade_Params._FadeAlpha, sizeof(ClientSetCameraFade_Params._FadeAlpha), &_FadeAlpha, sizeof(_FadeAlpha));
	memcpy_s(&ClientSetCameraFade_Params._FadeTime, sizeof(ClientSetCameraFade_Params._FadeTime), &_FadeTime, sizeof(_FadeTime));
	ClientSetCameraFade_Params._fadeAudio = _fadeAudio;

	this->ProcessEvent(uFnClientSetCameraFade, &ClientSetCameraFade_Params, nullptr);
};

// Function OLGame.OLPlayerController.SetCinematicMode
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_ToggleCinematicMode* Action                         (CPF_Parm)
// bool                           bInCinematicMode               (CPF_Parm)
// bool                           bHidePlayer                    (CPF_Parm)
// bool                           bAffectsHUD                    (CPF_Parm)
// bool                           bAffectsMovement               (CPF_Parm)
// bool                           bAffectsTurning                (CPF_Parm)
// bool                           bAffectsButtons                (CPF_Parm)

void AOLPlayerController::SetCinematicMode(class USeqAct_ToggleCinematicMode* Action, bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsButtons)
{
	static UFunction* uFnSetCinematicMode = nullptr;

	if (!uFnSetCinematicMode)
	{
		uFnSetCinematicMode = UFunction::FindFunction("Function OLGame.OLPlayerController.SetCinematicMode");
	}

	AOLPlayerController_execSetCinematicMode_Params SetCinematicMode_Params;
	memset(&SetCinematicMode_Params, 0, sizeof(SetCinematicMode_Params));
	memcpy_s(&SetCinematicMode_Params.Action, sizeof(SetCinematicMode_Params.Action), &Action, sizeof(Action));
	SetCinematicMode_Params.bInCinematicMode = bInCinematicMode;
	SetCinematicMode_Params.bHidePlayer = bHidePlayer;
	SetCinematicMode_Params.bAffectsHUD = bAffectsHUD;
	SetCinematicMode_Params.bAffectsMovement = bAffectsMovement;
	SetCinematicMode_Params.bAffectsTurning = bAffectsTurning;
	SetCinematicMode_Params.bAffectsButtons = bAffectsButtons;

	this->ProcessEvent(uFnSetCinematicMode, &SetCinematicMode_Params, nullptr);
};

// Function OLGame.OLPlayerController.GetPlayerViewPoint
// [0x00420902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 POVLocation                    (CPF_Parm | CPF_OutParm)
// struct FRotator                POVRotation                    (CPF_Parm | CPF_OutParm)

void AOLPlayerController::eventGetPlayerViewPoint(struct FVector& POVLocation, struct FRotator& POVRotation)
{
	static UFunction* uFnGetPlayerViewPoint = nullptr;

	if (!uFnGetPlayerViewPoint)
	{
		uFnGetPlayerViewPoint = UFunction::FindFunction("Function OLGame.OLPlayerController.GetPlayerViewPoint");
	}

	AOLPlayerController_eventGetPlayerViewPoint_Params GetPlayerViewPoint_Params;
	memset(&GetPlayerViewPoint_Params, 0, sizeof(GetPlayerViewPoint_Params));
	memcpy_s(&GetPlayerViewPoint_Params.POVLocation, sizeof(GetPlayerViewPoint_Params.POVLocation), &POVLocation, sizeof(POVLocation));
	memcpy_s(&GetPlayerViewPoint_Params.POVRotation, sizeof(GetPlayerViewPoint_Params.POVRotation), &POVRotation, sizeof(POVRotation));

	this->ProcessEvent(uFnGetPlayerViewPoint, &GetPlayerViewPoint_Params, nullptr);

	memcpy_s(&POVLocation, sizeof(POVLocation), &GetPlayerViewPoint_Params.POVLocation, sizeof(GetPlayerViewPoint_Params.POVLocation));
	memcpy_s(&POVRotation, sizeof(POVRotation), &GetPlayerViewPoint_Params.POVRotation, sizeof(GetPlayerViewPoint_Params.POVRotation));
};

// Function OLGame.OLPlayerController.GetFOVAngle
// [0x00820802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float AOLPlayerController::eventGetFOVAngle()
{
	static UFunction* uFnGetFOVAngle = nullptr;

	if (!uFnGetFOVAngle)
	{
		uFnGetFOVAngle = UFunction::FindFunction("Function OLGame.OLPlayerController.GetFOVAngle");
	}

	AOLPlayerController_eventGetFOVAngle_Params GetFOVAngle_Params;
	memset(&GetFOVAngle_Params, 0, sizeof(GetFOVAngle_Params));

	this->ProcessEvent(uFnGetFOVAngle, &GetFOVAngle_Params, nullptr);

	return GetFOVAngle_Params.ReturnValue;
};

// Function OLGame.OLPlayerController.SpawnCamera
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::SpawnCamera()
{
	static UFunction* uFnSpawnCamera = nullptr;

	if (!uFnSpawnCamera)
	{
		uFnSpawnCamera = UFunction::FindFunction("Function OLGame.OLPlayerController.SpawnCamera");
	}

	AOLPlayerController_execSpawnCamera_Params SpawnCamera_Params;
	memset(&SpawnCamera_Params, 0, sizeof(SpawnCamera_Params));

	this->ProcessEvent(uFnSpawnCamera, &SpawnCamera_Params, nullptr);
};

// Function OLGame.OLPlayerController.SetCameraMode
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FName                   NewCamMode                     (CPF_Parm)

void AOLPlayerController::SetCameraMode(struct FName NewCamMode)
{
	static UFunction* uFnSetCameraMode = nullptr;

	if (!uFnSetCameraMode)
	{
		uFnSetCameraMode = UFunction::FindFunction("Function OLGame.OLPlayerController.SetCameraMode");
	}

	AOLPlayerController_execSetCameraMode_Params SetCameraMode_Params;
	memset(&SetCameraMode_Params, 0, sizeof(SetCameraMode_Params));
	memcpy_s(&SetCameraMode_Params.NewCamMode, sizeof(SetCameraMode_Params.NewCamMode), &NewCamMode, sizeof(NewCamMode));

	this->ProcessEvent(uFnSetCameraMode, &SetCameraMode_Params, nullptr);
};

// Function OLGame.OLPlayerController.UsingFirstPersonCamera
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLPlayerController::UsingFirstPersonCamera()
{
	static UFunction* uFnUsingFirstPersonCamera = nullptr;

	if (!uFnUsingFirstPersonCamera)
	{
		uFnUsingFirstPersonCamera = UFunction::FindFunction("Function OLGame.OLPlayerController.UsingFirstPersonCamera");
	}

	AOLPlayerController_execUsingFirstPersonCamera_Params UsingFirstPersonCamera_Params;
	memset(&UsingFirstPersonCamera_Params, 0, sizeof(UsingFirstPersonCamera_Params));

	this->ProcessEvent(uFnUsingFirstPersonCamera, &UsingFirstPersonCamera_Params, nullptr);

	return UsingFirstPersonCamera_Params.ReturnValue;
};

// Function OLGame.OLPlayerController.SetBehindView
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bNewBehindView                 (CPF_Parm)

void AOLPlayerController::SetBehindView(bool bNewBehindView)
{
	static UFunction* uFnSetBehindView = nullptr;

	if (!uFnSetBehindView)
	{
		uFnSetBehindView = UFunction::FindFunction("Function OLGame.OLPlayerController.SetBehindView");
	}

	AOLPlayerController_execSetBehindView_Params SetBehindView_Params;
	memset(&SetBehindView_Params, 0, sizeof(SetBehindView_Params));
	SetBehindView_Params.bNewBehindView = bNewBehindView;

	this->ProcessEvent(uFnSetBehindView, &SetBehindView_Params, nullptr);
};

// Function OLGame.OLPlayerController.BehindView
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::BehindView()
{
	static UFunction* uFnBehindView = nullptr;

	if (!uFnBehindView)
	{
		uFnBehindView = UFunction::FindFunction("Function OLGame.OLPlayerController.BehindView");
	}

	AOLPlayerController_execBehindView_Params BehindView_Params;
	memset(&BehindView_Params, 0, sizeof(BehindView_Params));

	this->ProcessEvent(uFnBehindView, &BehindView_Params, nullptr);
};

// Function OLGame.OLPlayerController.NotifyProfileChanged
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::NotifyProfileChanged()
{
	static UFunction* uFnNotifyProfileChanged = nullptr;

	if (!uFnNotifyProfileChanged)
	{
		uFnNotifyProfileChanged = UFunction::FindFunction("Function OLGame.OLPlayerController.NotifyProfileChanged");
	}

	AOLPlayerController_execNotifyProfileChanged_Params NotifyProfileChanged_Params;
	memset(&NotifyProfileChanged_Params, 0, sizeof(NotifyProfileChanged_Params));

	uFnNotifyProfileChanged->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNotifyProfileChanged, &NotifyProfileChanged_Params, nullptr);
	uFnNotifyProfileChanged->FunctionFlags |= 0x400;
};

// Function OLGame.OLPlayerController.CleanTextFilterButtonInput
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   ButtonName                     (CPF_Parm)

bool AOLPlayerController::CleanTextFilterButtonInput(struct FName ButtonName)
{
	static UFunction* uFnCleanTextFilterButtonInput = nullptr;

	if (!uFnCleanTextFilterButtonInput)
	{
		uFnCleanTextFilterButtonInput = UFunction::FindFunction("Function OLGame.OLPlayerController.CleanTextFilterButtonInput");
	}

	AOLPlayerController_execCleanTextFilterButtonInput_Params CleanTextFilterButtonInput_Params;
	memset(&CleanTextFilterButtonInput_Params, 0, sizeof(CleanTextFilterButtonInput_Params));
	memcpy_s(&CleanTextFilterButtonInput_Params.ButtonName, sizeof(CleanTextFilterButtonInput_Params.ButtonName), &ButtonName, sizeof(ButtonName));

	uFnCleanTextFilterButtonInput->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCleanTextFilterButtonInput, &CleanTextFilterButtonInput_Params, nullptr);
	uFnCleanTextFilterButtonInput->FunctionFlags |= 0x400;

	return CleanTextFilterButtonInput_Params.ReturnValue;
};

// Function OLGame.OLPlayerController.IsLookInputIgnored
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLPlayerController::eventIsLookInputIgnored()
{
	static UFunction* uFnIsLookInputIgnored = nullptr;

	if (!uFnIsLookInputIgnored)
	{
		uFnIsLookInputIgnored = UFunction::FindFunction("Function OLGame.OLPlayerController.IsLookInputIgnored");
	}

	AOLPlayerController_eventIsLookInputIgnored_Params IsLookInputIgnored_Params;
	memset(&IsLookInputIgnored_Params, 0, sizeof(IsLookInputIgnored_Params));

	this->ProcessEvent(uFnIsLookInputIgnored, &IsLookInputIgnored_Params, nullptr);

	return IsLookInputIgnored_Params.ReturnValue;
};

// Function OLGame.OLPlayerController.ToggleCrawl
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::ToggleCrawl()
{
	static UFunction* uFnToggleCrawl = nullptr;

	if (!uFnToggleCrawl)
	{
		uFnToggleCrawl = UFunction::FindFunction("Function OLGame.OLPlayerController.ToggleCrawl");
	}

	AOLPlayerController_execToggleCrawl_Params ToggleCrawl_Params;
	memset(&ToggleCrawl_Params, 0, sizeof(ToggleCrawl_Params));

	this->ProcessEvent(uFnToggleCrawl, &ToggleCrawl_Params, nullptr);
};

// Function OLGame.OLPlayerController.PrototypeActionE
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::PrototypeActionE()
{
	static UFunction* uFnPrototypeActionE = nullptr;

	if (!uFnPrototypeActionE)
	{
		uFnPrototypeActionE = UFunction::FindFunction("Function OLGame.OLPlayerController.PrototypeActionE");
	}

	AOLPlayerController_execPrototypeActionE_Params PrototypeActionE_Params;
	memset(&PrototypeActionE_Params, 0, sizeof(PrototypeActionE_Params));

	this->ProcessEvent(uFnPrototypeActionE, &PrototypeActionE_Params, nullptr);
};

// Function OLGame.OLPlayerController.PrototypeActionD
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::PrototypeActionD()
{
	static UFunction* uFnPrototypeActionD = nullptr;

	if (!uFnPrototypeActionD)
	{
		uFnPrototypeActionD = UFunction::FindFunction("Function OLGame.OLPlayerController.PrototypeActionD");
	}

	AOLPlayerController_execPrototypeActionD_Params PrototypeActionD_Params;
	memset(&PrototypeActionD_Params, 0, sizeof(PrototypeActionD_Params));

	this->ProcessEvent(uFnPrototypeActionD, &PrototypeActionD_Params, nullptr);
};

// Function OLGame.OLPlayerController.PrototypeActionC
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::PrototypeActionC()
{
	static UFunction* uFnPrototypeActionC = nullptr;

	if (!uFnPrototypeActionC)
	{
		uFnPrototypeActionC = UFunction::FindFunction("Function OLGame.OLPlayerController.PrototypeActionC");
	}

	AOLPlayerController_execPrototypeActionC_Params PrototypeActionC_Params;
	memset(&PrototypeActionC_Params, 0, sizeof(PrototypeActionC_Params));

	this->ProcessEvent(uFnPrototypeActionC, &PrototypeActionC_Params, nullptr);
};

// Function OLGame.OLPlayerController.PrototypeActionB
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::PrototypeActionB()
{
	static UFunction* uFnPrototypeActionB = nullptr;

	if (!uFnPrototypeActionB)
	{
		uFnPrototypeActionB = UFunction::FindFunction("Function OLGame.OLPlayerController.PrototypeActionB");
	}

	AOLPlayerController_execPrototypeActionB_Params PrototypeActionB_Params;
	memset(&PrototypeActionB_Params, 0, sizeof(PrototypeActionB_Params));

	this->ProcessEvent(uFnPrototypeActionB, &PrototypeActionB_Params, nullptr);
};

// Function OLGame.OLPlayerController.PrototypeActionA
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::PrototypeActionA()
{
	static UFunction* uFnPrototypeActionA = nullptr;

	if (!uFnPrototypeActionA)
	{
		uFnPrototypeActionA = UFunction::FindFunction("Function OLGame.OLPlayerController.PrototypeActionA");
	}

	AOLPlayerController_execPrototypeActionA_Params PrototypeActionA_Params;
	memset(&PrototypeActionA_Params, 0, sizeof(PrototypeActionA_Params));

	this->ProcessEvent(uFnPrototypeActionA, &PrototypeActionA_Params, nullptr);
};

// Function OLGame.OLPlayerController.GammaCalibration
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::GammaCalibration()
{
	static UFunction* uFnGammaCalibration = nullptr;

	if (!uFnGammaCalibration)
	{
		uFnGammaCalibration = UFunction::FindFunction("Function OLGame.OLPlayerController.GammaCalibration");
	}

	AOLPlayerController_execGammaCalibration_Params GammaCalibration_Params;
	memset(&GammaCalibration_Params, 0, sizeof(GammaCalibration_Params));

	this->ProcessEvent(uFnGammaCalibration, &GammaCalibration_Params, nullptr);
};

// Function OLGame.OLPlayerController.ToggleInventory
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::ToggleInventory()
{
	static UFunction* uFnToggleInventory = nullptr;

	if (!uFnToggleInventory)
	{
		uFnToggleInventory = UFunction::FindFunction("Function OLGame.OLPlayerController.ToggleInventory");
	}

	AOLPlayerController_execToggleInventory_Params ToggleInventory_Params;
	memset(&ToggleInventory_Params, 0, sizeof(ToggleInventory_Params));

	this->ProcessEvent(uFnToggleInventory, &ToggleInventory_Params, nullptr);
};

// Function OLGame.OLPlayerController.ToggleMicrophone
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::ToggleMicrophone()
{
	static UFunction* uFnToggleMicrophone = nullptr;

	if (!uFnToggleMicrophone)
	{
		uFnToggleMicrophone = UFunction::FindFunction("Function OLGame.OLPlayerController.ToggleMicrophone");
	}

	AOLPlayerController_execToggleMicrophone_Params ToggleMicrophone_Params;
	memset(&ToggleMicrophone_Params, 0, sizeof(ToggleMicrophone_Params));

	this->ProcessEvent(uFnToggleMicrophone, &ToggleMicrophone_Params, nullptr);
};

// Function OLGame.OLPlayerController.ToggleRun
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::ToggleRun()
{
	static UFunction* uFnToggleRun = nullptr;

	if (!uFnToggleRun)
	{
		uFnToggleRun = UFunction::FindFunction("Function OLGame.OLPlayerController.ToggleRun");
	}

	AOLPlayerController_execToggleRun_Params ToggleRun_Params;
	memset(&ToggleRun_Params, 0, sizeof(ToggleRun_Params));

	this->ProcessEvent(uFnToggleRun, &ToggleRun_Params, nullptr);
};

// Function OLGame.OLPlayerController.PressedJump
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::PressedJump()
{
	static UFunction* uFnPressedJump = nullptr;

	if (!uFnPressedJump)
	{
		uFnPressedJump = UFunction::FindFunction("Function OLGame.OLPlayerController.PressedJump");
	}

	AOLPlayerController_execPressedJump_Params PressedJump_Params;
	memset(&PressedJump_Params, 0, sizeof(PressedJump_Params));

	this->ProcessEvent(uFnPressedJump, &PressedJump_Params, nullptr);
};

// Function OLGame.OLPlayerController.PressedUseBandage
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::PressedUseBandage()
{
	static UFunction* uFnPressedUseBandage = nullptr;

	if (!uFnPressedUseBandage)
	{
		uFnPressedUseBandage = UFunction::FindFunction("Function OLGame.OLPlayerController.PressedUseBandage");
	}

	AOLPlayerController_execPressedUseBandage_Params PressedUseBandage_Params;
	memset(&PressedUseBandage_Params, 0, sizeof(PressedUseBandage_Params));

	this->ProcessEvent(uFnPressedUseBandage, &PressedUseBandage_Params, nullptr);
};

// Function OLGame.OLPlayerController.ReleasedReloadBatteries
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::ReleasedReloadBatteries()
{
	static UFunction* uFnReleasedReloadBatteries = nullptr;

	if (!uFnReleasedReloadBatteries)
	{
		uFnReleasedReloadBatteries = UFunction::FindFunction("Function OLGame.OLPlayerController.ReleasedReloadBatteries");
	}

	AOLPlayerController_execReleasedReloadBatteries_Params ReleasedReloadBatteries_Params;
	memset(&ReleasedReloadBatteries_Params, 0, sizeof(ReleasedReloadBatteries_Params));

	this->ProcessEvent(uFnReleasedReloadBatteries, &ReleasedReloadBatteries_Params, nullptr);
};

// Function OLGame.OLPlayerController.PressedReloadBatteries
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::PressedReloadBatteries()
{
	static UFunction* uFnPressedReloadBatteries = nullptr;

	if (!uFnPressedReloadBatteries)
	{
		uFnPressedReloadBatteries = UFunction::FindFunction("Function OLGame.OLPlayerController.PressedReloadBatteries");
	}

	AOLPlayerController_execPressedReloadBatteries_Params PressedReloadBatteries_Params;
	memset(&PressedReloadBatteries_Params, 0, sizeof(PressedReloadBatteries_Params));

	this->ProcessEvent(uFnPressedReloadBatteries, &PressedReloadBatteries_Params, nullptr);
};

// Function OLGame.OLPlayerController.StopZoom
// [0x00020302] (FUNC_Defined | FUNC_Simulated | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::StopZoom()
{
	static UFunction* uFnStopZoom = nullptr;

	if (!uFnStopZoom)
	{
		uFnStopZoom = UFunction::FindFunction("Function OLGame.OLPlayerController.StopZoom");
	}

	AOLPlayerController_execStopZoom_Params StopZoom_Params;
	memset(&StopZoom_Params, 0, sizeof(StopZoom_Params));

	this->ProcessEvent(uFnStopZoom, &StopZoom_Params, nullptr);
};

// Function OLGame.OLPlayerController.StartZoomOut
// [0x00020302] (FUNC_Defined | FUNC_Simulated | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::StartZoomOut()
{
	static UFunction* uFnStartZoomOut = nullptr;

	if (!uFnStartZoomOut)
	{
		uFnStartZoomOut = UFunction::FindFunction("Function OLGame.OLPlayerController.StartZoomOut");
	}

	AOLPlayerController_execStartZoomOut_Params StartZoomOut_Params;
	memset(&StartZoomOut_Params, 0, sizeof(StartZoomOut_Params));

	this->ProcessEvent(uFnStartZoomOut, &StartZoomOut_Params, nullptr);
};

// Function OLGame.OLPlayerController.StartZoomIn
// [0x00020302] (FUNC_Defined | FUNC_Simulated | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::StartZoomIn()
{
	static UFunction* uFnStartZoomIn = nullptr;

	if (!uFnStartZoomIn)
	{
		uFnStartZoomIn = UFunction::FindFunction("Function OLGame.OLPlayerController.StartZoomIn");
	}

	AOLPlayerController_execStartZoomIn_Params StartZoomIn_Params;
	memset(&StartZoomIn_Params, 0, sizeof(StartZoomIn_Params));

	this->ProcessEvent(uFnStartZoomIn, &StartZoomIn_Params, nullptr);
};

// Function OLGame.OLPlayerController.ZoomOut
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::ZoomOut()
{
	static UFunction* uFnZoomOut = nullptr;

	if (!uFnZoomOut)
	{
		uFnZoomOut = UFunction::FindFunction("Function OLGame.OLPlayerController.ZoomOut");
	}

	AOLPlayerController_execZoomOut_Params ZoomOut_Params;
	memset(&ZoomOut_Params, 0, sizeof(ZoomOut_Params));

	this->ProcessEvent(uFnZoomOut, &ZoomOut_Params, nullptr);
};

// Function OLGame.OLPlayerController.ZoomIn
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::ZoomIn()
{
	static UFunction* uFnZoomIn = nullptr;

	if (!uFnZoomIn)
	{
		uFnZoomIn = UFunction::FindFunction("Function OLGame.OLPlayerController.ZoomIn");
	}

	AOLPlayerController_execZoomIn_Params ZoomIn_Params;
	memset(&ZoomIn_Params, 0, sizeof(ZoomIn_Params));

	this->ProcessEvent(uFnZoomIn, &ZoomIn_Params, nullptr);
};

// Function OLGame.OLPlayerController.ToggleCamcorder
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::ToggleCamcorder()
{
	static UFunction* uFnToggleCamcorder = nullptr;

	if (!uFnToggleCamcorder)
	{
		uFnToggleCamcorder = UFunction::FindFunction("Function OLGame.OLPlayerController.ToggleCamcorder");
	}

	AOLPlayerController_execToggleCamcorder_Params ToggleCamcorder_Params;
	memset(&ToggleCamcorder_Params, 0, sizeof(ToggleCamcorder_Params));

	this->ProcessEvent(uFnToggleCamcorder, &ToggleCamcorder_Params, nullptr);
};

// Function OLGame.OLPlayerController.ToggleNightVision
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::ToggleNightVision()
{
	static UFunction* uFnToggleNightVision = nullptr;

	if (!uFnToggleNightVision)
	{
		uFnToggleNightVision = UFunction::FindFunction("Function OLGame.OLPlayerController.ToggleNightVision");
	}

	AOLPlayerController_execToggleNightVision_Params ToggleNightVision_Params;
	memset(&ToggleNightVision_Params, 0, sizeof(ToggleNightVision_Params));

	this->ProcessEvent(uFnToggleNightVision, &ToggleNightVision_Params, nullptr);
};

// Function OLGame.OLPlayerController.ReleasedUseButton
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::ReleasedUseButton()
{
	static UFunction* uFnReleasedUseButton = nullptr;

	if (!uFnReleasedUseButton)
	{
		uFnReleasedUseButton = UFunction::FindFunction("Function OLGame.OLPlayerController.ReleasedUseButton");
	}

	AOLPlayerController_execReleasedUseButton_Params ReleasedUseButton_Params;
	memset(&ReleasedUseButton_Params, 0, sizeof(ReleasedUseButton_Params));

	this->ProcessEvent(uFnReleasedUseButton, &ReleasedUseButton_Params, nullptr);
};

// Function OLGame.OLPlayerController.PressedUseButton
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::PressedUseButton()
{
	static UFunction* uFnPressedUseButton = nullptr;

	if (!uFnPressedUseButton)
	{
		uFnPressedUseButton = UFunction::FindFunction("Function OLGame.OLPlayerController.PressedUseButton");
	}

	AOLPlayerController_execPressedUseButton_Params PressedUseButton_Params;
	memset(&PressedUseButton_Params, 0, sizeof(PressedUseButton_Params));

	this->ProcessEvent(uFnPressedUseButton, &PressedUseButton_Params, nullptr);
};

// Function OLGame.OLPlayerController.PerformedUseAction
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLPlayerController::PerformedUseAction()
{
	static UFunction* uFnPerformedUseAction = nullptr;

	if (!uFnPerformedUseAction)
	{
		uFnPerformedUseAction = UFunction::FindFunction("Function OLGame.OLPlayerController.PerformedUseAction");
	}

	AOLPlayerController_execPerformedUseAction_Params PerformedUseAction_Params;
	memset(&PerformedUseAction_Params, 0, sizeof(PerformedUseAction_Params));

	this->ProcessEvent(uFnPerformedUseAction, &PerformedUseAction_Params, nullptr);

	return PerformedUseAction_Params.ReturnValue;
};

// Function OLGame.OLPlayerController.ResetWorldNoCheckpoint
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::ResetWorldNoCheckpoint()
{
	static UFunction* uFnResetWorldNoCheckpoint = nullptr;

	if (!uFnResetWorldNoCheckpoint)
	{
		uFnResetWorldNoCheckpoint = UFunction::FindFunction("Function OLGame.OLPlayerController.ResetWorldNoCheckpoint");
	}

	AOLPlayerController_execResetWorldNoCheckpoint_Params ResetWorldNoCheckpoint_Params;
	memset(&ResetWorldNoCheckpoint_Params, 0, sizeof(ResetWorldNoCheckpoint_Params));

	uFnResetWorldNoCheckpoint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnResetWorldNoCheckpoint, &ResetWorldNoCheckpoint_Params, nullptr);
	uFnResetWorldNoCheckpoint->FunctionFlags |= 0x400;
};

// Function OLGame.OLPlayerController.Destroyed
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::eventDestroyed()
{
	static UFunction* uFnDestroyed = nullptr;

	if (!uFnDestroyed)
	{
		uFnDestroyed = UFunction::FindFunction("Function OLGame.OLPlayerController.Destroyed");
	}

	AOLPlayerController_eventDestroyed_Params Destroyed_Params;
	memset(&Destroyed_Params, 0, sizeof(Destroyed_Params));

	this->ProcessEvent(uFnDestroyed, &Destroyed_Params, nullptr);
};

// Function OLGame.OLPlayerController.ClientRestart
// [0xFFFF0000010201C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Public | FUNC_NetClient | FUNC_NetValidate | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   NewPawn                        (CPF_Parm)

void AOLPlayerController::ClientRestart(class APawn* NewPawn)
{
	static UFunction* uFnClientRestart = nullptr;

	if (!uFnClientRestart)
	{
		uFnClientRestart = UFunction::FindFunction("Function OLGame.OLPlayerController.ClientRestart");
	}

	AOLPlayerController_execClientRestart_Params ClientRestart_Params;
	memset(&ClientRestart_Params, 0, sizeof(ClientRestart_Params));
	memcpy_s(&ClientRestart_Params.NewPawn, sizeof(ClientRestart_Params.NewPawn), &NewPawn, sizeof(NewPawn));

	this->ProcessEvent(uFnClientRestart, &ClientRestart_Params, nullptr);
};

// Function OLGame.OLPlayerController.Reset
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::Reset()
{
	static UFunction* uFnReset = nullptr;

	if (!uFnReset)
	{
		uFnReset = UFunction::FindFunction("Function OLGame.OLPlayerController.Reset");
	}

	AOLPlayerController_execReset_Params Reset_Params;
	memset(&Reset_Params, 0, sizeof(Reset_Params));

	this->ProcessEvent(uFnReset, &Reset_Params, nullptr);
};

// Function OLGame.OLPlayerController.UnPossess
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::eventUnPossess()
{
	static UFunction* uFnUnPossess = nullptr;

	if (!uFnUnPossess)
	{
		uFnUnPossess = UFunction::FindFunction("Function OLGame.OLPlayerController.UnPossess");
	}

	AOLPlayerController_eventUnPossess_Params UnPossess_Params;
	memset(&UnPossess_Params, 0, sizeof(UnPossess_Params));

	this->ProcessEvent(uFnUnPossess, &UnPossess_Params, nullptr);
};

// Function OLGame.OLPlayerController.Possess
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   inPawn                         (CPF_Parm)
// bool                           bVehicleTransition             (CPF_Parm)

void AOLPlayerController::eventPossess(class APawn* inPawn, bool bVehicleTransition)
{
	static UFunction* uFnPossess = nullptr;

	if (!uFnPossess)
	{
		uFnPossess = UFunction::FindFunction("Function OLGame.OLPlayerController.Possess");
	}

	AOLPlayerController_eventPossess_Params Possess_Params;
	memset(&Possess_Params, 0, sizeof(Possess_Params));
	memcpy_s(&Possess_Params.inPawn, sizeof(Possess_Params.inPawn), &inPawn, sizeof(inPawn));
	Possess_Params.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent(uFnPossess, &Possess_Params, nullptr);
};

// Function OLGame.OLPlayerController.PostBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function OLGame.OLPlayerController.PostBeginPlay");
	}

	AOLPlayerController_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function OLGame.OLPlayerController.ShowRecordingTime
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLPlayerController::ShowRecordingTime()
{
	static UFunction* uFnShowRecordingTime = nullptr;

	if (!uFnShowRecordingTime)
	{
		uFnShowRecordingTime = UFunction::FindFunction("Function OLGame.OLPlayerController.ShowRecordingTime");
	}

	AOLPlayerController_execShowRecordingTime_Params ShowRecordingTime_Params;
	memset(&ShowRecordingTime_Params, 0, sizeof(ShowRecordingTime_Params));

	uFnShowRecordingTime->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnShowRecordingTime, &ShowRecordingTime_Params, nullptr);
	uFnShowRecordingTime->FunctionFlags |= 0x400;

	return ShowRecordingTime_Params.ReturnValue;
};

// Function OLGame.OLPlayerController.GetGraphicAPIString
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString AOLPlayerController::GetGraphicAPIString()
{
	static UFunction* uFnGetGraphicAPIString = nullptr;

	if (!uFnGetGraphicAPIString)
	{
		uFnGetGraphicAPIString = UFunction::FindFunction("Function OLGame.OLPlayerController.GetGraphicAPIString");
	}

	AOLPlayerController_execGetGraphicAPIString_Params GetGraphicAPIString_Params;
	memset(&GetGraphicAPIString_Params, 0, sizeof(GetGraphicAPIString_Params));

	uFnGetGraphicAPIString->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetGraphicAPIString, &GetGraphicAPIString_Params, nullptr);
	uFnGetGraphicAPIString->FunctionFlags |= 0x400;

	return GetGraphicAPIString_Params.ReturnValue;
};

// Function OLGame.OLPlayerController.ShowGraphicAPIString
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLPlayerController::ShowGraphicAPIString()
{
	static UFunction* uFnShowGraphicAPIString = nullptr;

	if (!uFnShowGraphicAPIString)
	{
		uFnShowGraphicAPIString = UFunction::FindFunction("Function OLGame.OLPlayerController.ShowGraphicAPIString");
	}

	AOLPlayerController_execShowGraphicAPIString_Params ShowGraphicAPIString_Params;
	memset(&ShowGraphicAPIString_Params, 0, sizeof(ShowGraphicAPIString_Params));

	uFnShowGraphicAPIString->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnShowGraphicAPIString, &ShowGraphicAPIString_Params, nullptr);
	uFnShowGraphicAPIString->FunctionFlags |= 0x400;

	return ShowGraphicAPIString_Params.ReturnValue;
};

// Function OLGame.OLPlayerController.HideLoadingOverlay
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::HideLoadingOverlay()
{
	static UFunction* uFnHideLoadingOverlay = nullptr;

	if (!uFnHideLoadingOverlay)
	{
		uFnHideLoadingOverlay = UFunction::FindFunction("Function OLGame.OLPlayerController.HideLoadingOverlay");
	}

	AOLPlayerController_execHideLoadingOverlay_Params HideLoadingOverlay_Params;
	memset(&HideLoadingOverlay_Params, 0, sizeof(HideLoadingOverlay_Params));

	uFnHideLoadingOverlay->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHideLoadingOverlay, &HideLoadingOverlay_Params, nullptr);
	uFnHideLoadingOverlay->FunctionFlags |= 0x400;
};

// Function OLGame.OLPlayerController.ShowLoadingOverlay
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPlayerController::ShowLoadingOverlay()
{
	static UFunction* uFnShowLoadingOverlay = nullptr;

	if (!uFnShowLoadingOverlay)
	{
		uFnShowLoadingOverlay = UFunction::FindFunction("Function OLGame.OLPlayerController.ShowLoadingOverlay");
	}

	AOLPlayerController_execShowLoadingOverlay_Params ShowLoadingOverlay_Params;
	memset(&ShowLoadingOverlay_Params, 0, sizeof(ShowLoadingOverlay_Params));

	uFnShowLoadingOverlay->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnShowLoadingOverlay, &ShowLoadingOverlay_Params, nullptr);
	uFnShowLoadingOverlay->FunctionFlags |= 0x400;
};

// Function OLGame.OLPlayerController.SetVolume
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          VolumeLevel                    (CPF_Parm)

void AOLPlayerController::SetVolume(float VolumeLevel)
{
	static UFunction* uFnSetVolume = nullptr;

	if (!uFnSetVolume)
	{
		uFnSetVolume = UFunction::FindFunction("Function OLGame.OLPlayerController.SetVolume");
	}

	AOLPlayerController_execSetVolume_Params SetVolume_Params;
	memset(&SetVolume_Params, 0, sizeof(SetVolume_Params));
	memcpy_s(&SetVolume_Params.VolumeLevel, sizeof(SetVolume_Params.VolumeLevel), &VolumeLevel, sizeof(VolumeLevel));

	uFnSetVolume->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetVolume, &SetVolume_Params, nullptr);
	uFnSetVolume->FunctionFlags |= 0x400;
};

// Function OLGame.OLPlayerController.ApplyKeyBindings
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UOLProfileSettings*      UserConfiguredSettings         (CPF_Parm)

bool AOLPlayerController::ApplyKeyBindings(class UOLProfileSettings* UserConfiguredSettings)
{
	static UFunction* uFnApplyKeyBindings = nullptr;

	if (!uFnApplyKeyBindings)
	{
		uFnApplyKeyBindings = UFunction::FindFunction("Function OLGame.OLPlayerController.ApplyKeyBindings");
	}

	AOLPlayerController_execApplyKeyBindings_Params ApplyKeyBindings_Params;
	memset(&ApplyKeyBindings_Params, 0, sizeof(ApplyKeyBindings_Params));
	memcpy_s(&ApplyKeyBindings_Params.UserConfiguredSettings, sizeof(ApplyKeyBindings_Params.UserConfiguredSettings), &UserConfiguredSettings, sizeof(UserConfiguredSettings));

	uFnApplyKeyBindings->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnApplyKeyBindings, &ApplyKeyBindings_Params, nullptr);
	uFnApplyKeyBindings->FunctionFlags |= 0x400;

	return ApplyKeyBindings_Params.ReturnValue;
};

// Function OLGame.OLPlayerController.SetGamma
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          GammaValue                     (CPF_Parm)

void AOLPlayerController::SetGamma(float GammaValue)
{
	static UFunction* uFnSetGamma = nullptr;

	if (!uFnSetGamma)
	{
		uFnSetGamma = UFunction::FindFunction("Function OLGame.OLPlayerController.SetGamma");
	}

	AOLPlayerController_execSetGamma_Params SetGamma_Params;
	memset(&SetGamma_Params, 0, sizeof(SetGamma_Params));
	memcpy_s(&SetGamma_Params.GammaValue, sizeof(SetGamma_Params.GammaValue), &GammaValue, sizeof(GammaValue));

	uFnSetGamma->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetGamma, &SetGamma_Params, nullptr);
	uFnSetGamma->FunctionFlags |= 0x400;
};

// Function OLGame.OLPlayerController.GetGamma
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float AOLPlayerController::GetGamma()
{
	static UFunction* uFnGetGamma = nullptr;

	if (!uFnGetGamma)
	{
		uFnGetGamma = UFunction::FindFunction("Function OLGame.OLPlayerController.GetGamma");
	}

	AOLPlayerController_execGetGamma_Params GetGamma_Params;
	memset(&GetGamma_Params, 0, sizeof(GetGamma_Params));

	uFnGetGamma->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetGamma, &GetGamma_Params, nullptr);
	uFnGetGamma->FunctionFlags |= 0x400;

	return GetGamma_Params.ReturnValue;
};

// Function OLGame.OLPlayerController.NativePlayerMove
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AOLPlayerController::NativePlayerMove(float DeltaTime)
{
	static UFunction* uFnNativePlayerMove = nullptr;

	if (!uFnNativePlayerMove)
	{
		uFnNativePlayerMove = UFunction::FindFunction("Function OLGame.OLPlayerController.NativePlayerMove");
	}

	AOLPlayerController_execNativePlayerMove_Params NativePlayerMove_Params;
	memset(&NativePlayerMove_Params, 0, sizeof(NativePlayerMove_Params));
	memcpy_s(&NativePlayerMove_Params.DeltaTime, sizeof(NativePlayerMove_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	uFnNativePlayerMove->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativePlayerMove, &NativePlayerMove_Params, nullptr);
	uFnNativePlayerMove->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.ToggleFakeLongSubtitles
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ToggleFakeLongSubtitles()
{
	static UFunction* uFnToggleFakeLongSubtitles = nullptr;

	if (!uFnToggleFakeLongSubtitles)
	{
		uFnToggleFakeLongSubtitles = UFunction::FindFunction("Function OLGame.OLCheatManager.ToggleFakeLongSubtitles");
	}

	UOLCheatManager_execToggleFakeLongSubtitles_Params ToggleFakeLongSubtitles_Params;
	memset(&ToggleFakeLongSubtitles_Params, 0, sizeof(ToggleFakeLongSubtitles_Params));

	this->ProcessEvent(uFnToggleFakeLongSubtitles, &ToggleFakeLongSubtitles_Params, nullptr);
};

// Function OLGame.OLCheatManager.ToggleFakeRecordingReadFailure
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ToggleFakeRecordingReadFailure()
{
	static UFunction* uFnToggleFakeRecordingReadFailure = nullptr;

	if (!uFnToggleFakeRecordingReadFailure)
	{
		uFnToggleFakeRecordingReadFailure = UFunction::FindFunction("Function OLGame.OLCheatManager.ToggleFakeRecordingReadFailure");
	}

	UOLCheatManager_execToggleFakeRecordingReadFailure_Params ToggleFakeRecordingReadFailure_Params;
	memset(&ToggleFakeRecordingReadFailure_Params, 0, sizeof(ToggleFakeRecordingReadFailure_Params));

	this->ProcessEvent(uFnToggleFakeRecordingReadFailure, &ToggleFakeRecordingReadFailure_Params, nullptr);
};

// Function OLGame.OLCheatManager.ToggleFakeRecordingWriteFailure
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ToggleFakeRecordingWriteFailure()
{
	static UFunction* uFnToggleFakeRecordingWriteFailure = nullptr;

	if (!uFnToggleFakeRecordingWriteFailure)
	{
		uFnToggleFakeRecordingWriteFailure = UFunction::FindFunction("Function OLGame.OLCheatManager.ToggleFakeRecordingWriteFailure");
	}

	UOLCheatManager_execToggleFakeRecordingWriteFailure_Params ToggleFakeRecordingWriteFailure_Params;
	memset(&ToggleFakeRecordingWriteFailure_Params, 0, sizeof(ToggleFakeRecordingWriteFailure_Params));

	this->ProcessEvent(uFnToggleFakeRecordingWriteFailure, &ToggleFakeRecordingWriteFailure_Params, nullptr);
};

// Function OLGame.OLCheatManager.ClearAllDingoRecordings
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ClearAllDingoRecordings()
{
	static UFunction* uFnClearAllDingoRecordings = nullptr;

	if (!uFnClearAllDingoRecordings)
	{
		uFnClearAllDingoRecordings = UFunction::FindFunction("Function OLGame.OLCheatManager.ClearAllDingoRecordings");
	}

	UOLCheatManager_execClearAllDingoRecordings_Params ClearAllDingoRecordings_Params;
	memset(&ClearAllDingoRecordings_Params, 0, sizeof(ClearAllDingoRecordings_Params));

	uFnClearAllDingoRecordings->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClearAllDingoRecordings, &ClearAllDingoRecordings_Params, nullptr);
	uFnClearAllDingoRecordings->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.FakeDingoRecordingRight
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::FakeDingoRecordingRight()
{
	static UFunction* uFnFakeDingoRecordingRight = nullptr;

	if (!uFnFakeDingoRecordingRight)
	{
		uFnFakeDingoRecordingRight = UFunction::FindFunction("Function OLGame.OLCheatManager.FakeDingoRecordingRight");
	}

	UOLCheatManager_execFakeDingoRecordingRight_Params FakeDingoRecordingRight_Params;
	memset(&FakeDingoRecordingRight_Params, 0, sizeof(FakeDingoRecordingRight_Params));

	uFnFakeDingoRecordingRight->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFakeDingoRecordingRight, &FakeDingoRecordingRight_Params, nullptr);
	uFnFakeDingoRecordingRight->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.DingoTest
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::DingoTest()
{
	static UFunction* uFnDingoTest = nullptr;

	if (!uFnDingoTest)
	{
		uFnDingoTest = UFunction::FindFunction("Function OLGame.OLCheatManager.DingoTest");
	}

	UOLCheatManager_execDingoTest_Params DingoTest_Params;
	memset(&DingoTest_Params, 0, sizeof(DingoTest_Params));

	uFnDingoTest->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDingoTest, &DingoTest_Params, nullptr);
	uFnDingoTest->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.ResetTutorialReminderTimers
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ResetTutorialReminderTimers()
{
	static UFunction* uFnResetTutorialReminderTimers = nullptr;

	if (!uFnResetTutorialReminderTimers)
	{
		uFnResetTutorialReminderTimers = UFunction::FindFunction("Function OLGame.OLCheatManager.ResetTutorialReminderTimers");
	}

	UOLCheatManager_execResetTutorialReminderTimers_Params ResetTutorialReminderTimers_Params;
	memset(&ResetTutorialReminderTimers_Params, 0, sizeof(ResetTutorialReminderTimers_Params));

	uFnResetTutorialReminderTimers->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnResetTutorialReminderTimers, &ResetTutorialReminderTimers_Params, nullptr);
	uFnResetTutorialReminderTimers->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.IsFakeNotFullyDownloaded
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLCheatManager::IsFakeNotFullyDownloaded()
{
	static UFunction* uFnIsFakeNotFullyDownloaded = nullptr;

	if (!uFnIsFakeNotFullyDownloaded)
	{
		uFnIsFakeNotFullyDownloaded = UFunction::FindFunction("Function OLGame.OLCheatManager.IsFakeNotFullyDownloaded");
	}

	UOLCheatManager_execIsFakeNotFullyDownloaded_Params IsFakeNotFullyDownloaded_Params;
	memset(&IsFakeNotFullyDownloaded_Params, 0, sizeof(IsFakeNotFullyDownloaded_Params));

	uFnIsFakeNotFullyDownloaded->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsFakeNotFullyDownloaded, &IsFakeNotFullyDownloaded_Params, nullptr);
	uFnIsFakeNotFullyDownloaded->FunctionFlags |= 0x400;

	return IsFakeNotFullyDownloaded_Params.ReturnValue;
};

// Function OLGame.OLCheatManager.ToggleGameFullyDownloaded
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ToggleGameFullyDownloaded()
{
	static UFunction* uFnToggleGameFullyDownloaded = nullptr;

	if (!uFnToggleGameFullyDownloaded)
	{
		uFnToggleGameFullyDownloaded = UFunction::FindFunction("Function OLGame.OLCheatManager.ToggleGameFullyDownloaded");
	}

	UOLCheatManager_execToggleGameFullyDownloaded_Params ToggleGameFullyDownloaded_Params;
	memset(&ToggleGameFullyDownloaded_Params, 0, sizeof(ToggleGameFullyDownloaded_Params));

	uFnToggleGameFullyDownloaded->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnToggleGameFullyDownloaded, &ToggleGameFullyDownloaded_Params, nullptr);
	uFnToggleGameFullyDownloaded->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.TriggerNotDownloadScreen
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::TriggerNotDownloadScreen()
{
	static UFunction* uFnTriggerNotDownloadScreen = nullptr;

	if (!uFnTriggerNotDownloadScreen)
	{
		uFnTriggerNotDownloadScreen = UFunction::FindFunction("Function OLGame.OLCheatManager.TriggerNotDownloadScreen");
	}

	UOLCheatManager_execTriggerNotDownloadScreen_Params TriggerNotDownloadScreen_Params;
	memset(&TriggerNotDownloadScreen_Params, 0, sizeof(TriggerNotDownloadScreen_Params));

	uFnTriggerNotDownloadScreen->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTriggerNotDownloadScreen, &TriggerNotDownloadScreen_Params, nullptr);
	uFnTriggerNotDownloadScreen->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.FakeControllerDisconnected
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bDelayedPause                  (CPF_Parm)

void UOLCheatManager::FakeControllerDisconnected(bool bDelayedPause)
{
	static UFunction* uFnFakeControllerDisconnected = nullptr;

	if (!uFnFakeControllerDisconnected)
	{
		uFnFakeControllerDisconnected = UFunction::FindFunction("Function OLGame.OLCheatManager.FakeControllerDisconnected");
	}

	UOLCheatManager_execFakeControllerDisconnected_Params FakeControllerDisconnected_Params;
	memset(&FakeControllerDisconnected_Params, 0, sizeof(FakeControllerDisconnected_Params));
	FakeControllerDisconnected_Params.bDelayedPause = bDelayedPause;

	uFnFakeControllerDisconnected->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFakeControllerDisconnected, &FakeControllerDisconnected_Params, nullptr);
	uFnFakeControllerDisconnected->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.ForceHandsCrucifixion
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ForceHandsCrucifixion()
{
	static UFunction* uFnForceHandsCrucifixion = nullptr;

	if (!uFnForceHandsCrucifixion)
	{
		uFnForceHandsCrucifixion = UFunction::FindFunction("Function OLGame.OLCheatManager.ForceHandsCrucifixion");
	}

	UOLCheatManager_execForceHandsCrucifixion_Params ForceHandsCrucifixion_Params;
	memset(&ForceHandsCrucifixion_Params, 0, sizeof(ForceHandsCrucifixion_Params));

	uFnForceHandsCrucifixion->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnForceHandsCrucifixion, &ForceHandsCrucifixion_Params, nullptr);
	uFnForceHandsCrucifixion->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.DecrementDifficultyModeModifier
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::DecrementDifficultyModeModifier()
{
	static UFunction* uFnDecrementDifficultyModeModifier = nullptr;

	if (!uFnDecrementDifficultyModeModifier)
	{
		uFnDecrementDifficultyModeModifier = UFunction::FindFunction("Function OLGame.OLCheatManager.DecrementDifficultyModeModifier");
	}

	UOLCheatManager_execDecrementDifficultyModeModifier_Params DecrementDifficultyModeModifier_Params;
	memset(&DecrementDifficultyModeModifier_Params, 0, sizeof(DecrementDifficultyModeModifier_Params));

	uFnDecrementDifficultyModeModifier->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDecrementDifficultyModeModifier, &DecrementDifficultyModeModifier_Params, nullptr);
	uFnDecrementDifficultyModeModifier->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.IncrementDifficultyModeModifier
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::IncrementDifficultyModeModifier()
{
	static UFunction* uFnIncrementDifficultyModeModifier = nullptr;

	if (!uFnIncrementDifficultyModeModifier)
	{
		uFnIncrementDifficultyModeModifier = UFunction::FindFunction("Function OLGame.OLCheatManager.IncrementDifficultyModeModifier");
	}

	UOLCheatManager_execIncrementDifficultyModeModifier_Params IncrementDifficultyModeModifier_Params;
	memset(&IncrementDifficultyModeModifier_Params, 0, sizeof(IncrementDifficultyModeModifier_Params));

	uFnIncrementDifficultyModeModifier->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIncrementDifficultyModeModifier, &IncrementDifficultyModeModifier_Params, nullptr);
	uFnIncrementDifficultyModeModifier->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.DecrementDifficultyMode
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::DecrementDifficultyMode()
{
	static UFunction* uFnDecrementDifficultyMode = nullptr;

	if (!uFnDecrementDifficultyMode)
	{
		uFnDecrementDifficultyMode = UFunction::FindFunction("Function OLGame.OLCheatManager.DecrementDifficultyMode");
	}

	UOLCheatManager_execDecrementDifficultyMode_Params DecrementDifficultyMode_Params;
	memset(&DecrementDifficultyMode_Params, 0, sizeof(DecrementDifficultyMode_Params));

	uFnDecrementDifficultyMode->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDecrementDifficultyMode, &DecrementDifficultyMode_Params, nullptr);
	uFnDecrementDifficultyMode->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.IncrementDifficultyMode
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::IncrementDifficultyMode()
{
	static UFunction* uFnIncrementDifficultyMode = nullptr;

	if (!uFnIncrementDifficultyMode)
	{
		uFnIncrementDifficultyMode = UFunction::FindFunction("Function OLGame.OLCheatManager.IncrementDifficultyMode");
	}

	UOLCheatManager_execIncrementDifficultyMode_Params IncrementDifficultyMode_Params;
	memset(&IncrementDifficultyMode_Params, 0, sizeof(IncrementDifficultyMode_Params));

	uFnIncrementDifficultyMode->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIncrementDifficultyMode, &IncrementDifficultyMode_Params, nullptr);
	uFnIncrementDifficultyMode->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.ToggleCharacterPhysicDebug
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ToggleCharacterPhysicDebug()
{
	static UFunction* uFnToggleCharacterPhysicDebug = nullptr;

	if (!uFnToggleCharacterPhysicDebug)
	{
		uFnToggleCharacterPhysicDebug = UFunction::FindFunction("Function OLGame.OLCheatManager.ToggleCharacterPhysicDebug");
	}

	UOLCheatManager_execToggleCharacterPhysicDebug_Params ToggleCharacterPhysicDebug_Params;
	memset(&ToggleCharacterPhysicDebug_Params, 0, sizeof(ToggleCharacterPhysicDebug_Params));

	this->ProcessEvent(uFnToggleCharacterPhysicDebug, &ToggleCharacterPhysicDebug_Params, nullptr);
};

// Function OLGame.OLCheatManager.TryGeneratePath
// [0x00824202] (FUNC_Defined | FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// float                          PosX                           (CPF_Parm)
// float                          PosY                           (CPF_Parm)
// float                          PosZ                           (CPF_Parm)
// bool                           bTight                         (CPF_OptionalParm | CPF_Parm)
// float                          BufferDist                     (CPF_OptionalParm | CPF_Parm)

void UOLCheatManager::TryGeneratePath(float PosX, float PosY, float PosZ, bool bTight, float BufferDist)
{
	static UFunction* uFnTryGeneratePath = nullptr;

	if (!uFnTryGeneratePath)
	{
		uFnTryGeneratePath = UFunction::FindFunction("Function OLGame.OLCheatManager.TryGeneratePath");
	}

	UOLCheatManager_execTryGeneratePath_Params TryGeneratePath_Params;
	memset(&TryGeneratePath_Params, 0, sizeof(TryGeneratePath_Params));
	memcpy_s(&TryGeneratePath_Params.PosX, sizeof(TryGeneratePath_Params.PosX), &PosX, sizeof(PosX));
	memcpy_s(&TryGeneratePath_Params.PosY, sizeof(TryGeneratePath_Params.PosY), &PosY, sizeof(PosY));
	memcpy_s(&TryGeneratePath_Params.PosZ, sizeof(TryGeneratePath_Params.PosZ), &PosZ, sizeof(PosZ));
	TryGeneratePath_Params.bTight = bTight;
	memcpy_s(&TryGeneratePath_Params.BufferDist, sizeof(TryGeneratePath_Params.BufferDist), &BufferDist, sizeof(BufferDist));

	this->ProcessEvent(uFnTryGeneratePath, &TryGeneratePath_Params, nullptr);
};

// Function OLGame.OLCheatManager.SetAIVerbosity
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        NewVerbosity                   (CPF_Parm)

void UOLCheatManager::SetAIVerbosity(int32_t NewVerbosity)
{
	static UFunction* uFnSetAIVerbosity = nullptr;

	if (!uFnSetAIVerbosity)
	{
		uFnSetAIVerbosity = UFunction::FindFunction("Function OLGame.OLCheatManager.SetAIVerbosity");
	}

	UOLCheatManager_execSetAIVerbosity_Params SetAIVerbosity_Params;
	memset(&SetAIVerbosity_Params, 0, sizeof(SetAIVerbosity_Params));
	memcpy_s(&SetAIVerbosity_Params.NewVerbosity, sizeof(SetAIVerbosity_Params.NewVerbosity), &NewVerbosity, sizeof(NewVerbosity));

	uFnSetAIVerbosity->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetAIVerbosity, &SetAIVerbosity_Params, nullptr);
	uFnSetAIVerbosity->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.KillSelectedEnemy
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::KillSelectedEnemy()
{
	static UFunction* uFnKillSelectedEnemy = nullptr;

	if (!uFnKillSelectedEnemy)
	{
		uFnKillSelectedEnemy = UFunction::FindFunction("Function OLGame.OLCheatManager.KillSelectedEnemy");
	}

	UOLCheatManager_execKillSelectedEnemy_Params KillSelectedEnemy_Params;
	memset(&KillSelectedEnemy_Params, 0, sizeof(KillSelectedEnemy_Params));

	this->ProcessEvent(uFnKillSelectedEnemy, &KillSelectedEnemy_Params, nullptr);
};

// Function OLGame.OLCheatManager.KillAllEnemiesButSelected
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::KillAllEnemiesButSelected()
{
	static UFunction* uFnKillAllEnemiesButSelected = nullptr;

	if (!uFnKillAllEnemiesButSelected)
	{
		uFnKillAllEnemiesButSelected = UFunction::FindFunction("Function OLGame.OLCheatManager.KillAllEnemiesButSelected");
	}

	UOLCheatManager_execKillAllEnemiesButSelected_Params KillAllEnemiesButSelected_Params;
	memset(&KillAllEnemiesButSelected_Params, 0, sizeof(KillAllEnemiesButSelected_Params));

	this->ProcessEvent(uFnKillAllEnemiesButSelected, &KillAllEnemiesButSelected_Params, nullptr);
};

// Function OLGame.OLCheatManager.KillAllEnemies
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::KillAllEnemies()
{
	static UFunction* uFnKillAllEnemies = nullptr;

	if (!uFnKillAllEnemies)
	{
		uFnKillAllEnemies = UFunction::FindFunction("Function OLGame.OLCheatManager.KillAllEnemies");
	}

	UOLCheatManager_execKillAllEnemies_Params KillAllEnemies_Params;
	memset(&KillAllEnemies_Params, 0, sizeof(KillAllEnemies_Params));

	this->ProcessEvent(uFnKillAllEnemies, &KillAllEnemies_Params, nullptr);
};

// Function OLGame.OLCheatManager.CleanupAfterKillAll
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::CleanupAfterKillAll()
{
	static UFunction* uFnCleanupAfterKillAll = nullptr;

	if (!uFnCleanupAfterKillAll)
	{
		uFnCleanupAfterKillAll = UFunction::FindFunction("Function OLGame.OLCheatManager.CleanupAfterKillAll");
	}

	UOLCheatManager_execCleanupAfterKillAll_Params CleanupAfterKillAll_Params;
	memset(&CleanupAfterKillAll_Params, 0, sizeof(CleanupAfterKillAll_Params));

	uFnCleanupAfterKillAll->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCleanupAfterKillAll, &CleanupAfterKillAll_Params, nullptr);
	uFnCleanupAfterKillAll->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.SetLanguage
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  LanguageCode                   (CPF_Parm | CPF_NeedCtorLink)

void UOLCheatManager::SetLanguage(class FString LanguageCode)
{
	static UFunction* uFnSetLanguage = nullptr;

	if (!uFnSetLanguage)
	{
		uFnSetLanguage = UFunction::FindFunction("Function OLGame.OLCheatManager.SetLanguage");
	}

	UOLCheatManager_execSetLanguage_Params SetLanguage_Params;
	memset(&SetLanguage_Params, 0, sizeof(SetLanguage_Params));
	memcpy_s(&SetLanguage_Params.LanguageCode, sizeof(SetLanguage_Params.LanguageCode), &LanguageCode, sizeof(LanguageCode));

	uFnSetLanguage->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetLanguage, &SetLanguage_Params, nullptr);
	uFnSetLanguage->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.ReloadSoundBanks
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bFrenchVO                      (CPF_Parm)

void UOLCheatManager::ReloadSoundBanks(bool bFrenchVO)
{
	static UFunction* uFnReloadSoundBanks = nullptr;

	if (!uFnReloadSoundBanks)
	{
		uFnReloadSoundBanks = UFunction::FindFunction("Function OLGame.OLCheatManager.ReloadSoundBanks");
	}

	UOLCheatManager_execReloadSoundBanks_Params ReloadSoundBanks_Params;
	memset(&ReloadSoundBanks_Params, 0, sizeof(ReloadSoundBanks_Params));
	ReloadSoundBanks_Params.bFrenchVO = bFrenchVO;

	uFnReloadSoundBanks->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnReloadSoundBanks, &ReloadSoundBanks_Params, nullptr);
	uFnReloadSoundBanks->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.ProcessCheatInput
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   Key                            (CPF_Parm)
// bool                           bPressed                       (CPF_Parm)

bool UOLCheatManager::eventProcessCheatInput(struct FName Key, bool bPressed)
{
	static UFunction* uFnProcessCheatInput = nullptr;

	if (!uFnProcessCheatInput)
	{
		uFnProcessCheatInput = UFunction::FindFunction("Function OLGame.OLCheatManager.ProcessCheatInput");
	}

	UOLCheatManager_eventProcessCheatInput_Params ProcessCheatInput_Params;
	memset(&ProcessCheatInput_Params, 0, sizeof(ProcessCheatInput_Params));
	memcpy_s(&ProcessCheatInput_Params.Key, sizeof(ProcessCheatInput_Params.Key), &Key, sizeof(Key));
	ProcessCheatInput_Params.bPressed = bPressed;

	this->ProcessEvent(uFnProcessCheatInput, &ProcessCheatInput_Params, nullptr);

	return ProcessCheatInput_Params.ReturnValue;
};

// Function OLGame.OLCheatManager.StartGamepadCheckpoint
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::StartGamepadCheckpoint()
{
	static UFunction* uFnStartGamepadCheckpoint = nullptr;

	if (!uFnStartGamepadCheckpoint)
	{
		uFnStartGamepadCheckpoint = UFunction::FindFunction("Function OLGame.OLCheatManager.StartGamepadCheckpoint");
	}

	UOLCheatManager_execStartGamepadCheckpoint_Params StartGamepadCheckpoint_Params;
	memset(&StartGamepadCheckpoint_Params, 0, sizeof(StartGamepadCheckpoint_Params));

	uFnStartGamepadCheckpoint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStartGamepadCheckpoint, &StartGamepadCheckpoint_Params, nullptr);
	uFnStartGamepadCheckpoint->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.ScrollGamepadCPIdx
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bForward                       (CPF_Parm)

void UOLCheatManager::ScrollGamepadCPIdx(bool bForward)
{
	static UFunction* uFnScrollGamepadCPIdx = nullptr;

	if (!uFnScrollGamepadCPIdx)
	{
		uFnScrollGamepadCPIdx = UFunction::FindFunction("Function OLGame.OLCheatManager.ScrollGamepadCPIdx");
	}

	UOLCheatManager_execScrollGamepadCPIdx_Params ScrollGamepadCPIdx_Params;
	memset(&ScrollGamepadCPIdx_Params, 0, sizeof(ScrollGamepadCPIdx_Params));
	ScrollGamepadCPIdx_Params.bForward = bForward;

	uFnScrollGamepadCPIdx->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnScrollGamepadCPIdx, &ScrollGamepadCPIdx_Params, nullptr);
	uFnScrollGamepadCPIdx->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.IsViewModeUnlit
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLCheatManager::IsViewModeUnlit()
{
	static UFunction* uFnIsViewModeUnlit = nullptr;

	if (!uFnIsViewModeUnlit)
	{
		uFnIsViewModeUnlit = UFunction::FindFunction("Function OLGame.OLCheatManager.IsViewModeUnlit");
	}

	UOLCheatManager_execIsViewModeUnlit_Params IsViewModeUnlit_Params;
	memset(&IsViewModeUnlit_Params, 0, sizeof(IsViewModeUnlit_Params));

	uFnIsViewModeUnlit->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsViewModeUnlit, &IsViewModeUnlit_Params, nullptr);
	uFnIsViewModeUnlit->FunctionFlags |= 0x400;

	return IsViewModeUnlit_Params.ReturnValue;
};

// Function OLGame.OLCheatManager.ResetProfileProgression
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ResetProfileProgression()
{
	static UFunction* uFnResetProfileProgression = nullptr;

	if (!uFnResetProfileProgression)
	{
		uFnResetProfileProgression = UFunction::FindFunction("Function OLGame.OLCheatManager.ResetProfileProgression");
	}

	UOLCheatManager_execResetProfileProgression_Params ResetProfileProgression_Params;
	memset(&ResetProfileProgression_Params, 0, sizeof(ResetProfileProgression_Params));

	this->ProcessEvent(uFnResetProfileProgression, &ResetProfileProgression_Params, nullptr);
};

// Function OLGame.OLCheatManager.SetLastCheckpointName
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  CPName                         (CPF_Parm | CPF_NeedCtorLink)

void UOLCheatManager::SetLastCheckpointName(class FString CPName)
{
	static UFunction* uFnSetLastCheckpointName = nullptr;

	if (!uFnSetLastCheckpointName)
	{
		uFnSetLastCheckpointName = UFunction::FindFunction("Function OLGame.OLCheatManager.SetLastCheckpointName");
	}

	UOLCheatManager_execSetLastCheckpointName_Params SetLastCheckpointName_Params;
	memset(&SetLastCheckpointName_Params, 0, sizeof(SetLastCheckpointName_Params));
	memcpy_s(&SetLastCheckpointName_Params.CPName, sizeof(SetLastCheckpointName_Params.CPName), &CPName, sizeof(CPName));

	this->ProcessEvent(uFnSetLastCheckpointName, &SetLastCheckpointName_Params, nullptr);
};

// Function OLGame.OLCheatManager.SetLastCheckpointId
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Index                          (CPF_Parm)

void UOLCheatManager::SetLastCheckpointId(int32_t Index)
{
	static UFunction* uFnSetLastCheckpointId = nullptr;

	if (!uFnSetLastCheckpointId)
	{
		uFnSetLastCheckpointId = UFunction::FindFunction("Function OLGame.OLCheatManager.SetLastCheckpointId");
	}

	UOLCheatManager_execSetLastCheckpointId_Params SetLastCheckpointId_Params;
	memset(&SetLastCheckpointId_Params, 0, sizeof(SetLastCheckpointId_Params));
	memcpy_s(&SetLastCheckpointId_Params.Index, sizeof(SetLastCheckpointId_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnSetLastCheckpointId, &SetLastCheckpointId_Params, nullptr);
};

// Function OLGame.OLCheatManager.SetFinishedGame
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           hasFinishedGame                (CPF_Parm)
// bool                           hasFinishedDLC                 (CPF_Parm)

void UOLCheatManager::SetFinishedGame(bool hasFinishedGame, bool hasFinishedDLC)
{
	static UFunction* uFnSetFinishedGame = nullptr;

	if (!uFnSetFinishedGame)
	{
		uFnSetFinishedGame = UFunction::FindFunction("Function OLGame.OLCheatManager.SetFinishedGame");
	}

	UOLCheatManager_execSetFinishedGame_Params SetFinishedGame_Params;
	memset(&SetFinishedGame_Params, 0, sizeof(SetFinishedGame_Params));
	SetFinishedGame_Params.hasFinishedGame = hasFinishedGame;
	SetFinishedGame_Params.hasFinishedDLC = hasFinishedDLC;

	this->ProcessEvent(uFnSetFinishedGame, &SetFinishedGame_Params, nullptr);
};

// Function OLGame.OLCheatManager.OutlastPause
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::OutlastPause()
{
	static UFunction* uFnOutlastPause = nullptr;

	if (!uFnOutlastPause)
	{
		uFnOutlastPause = UFunction::FindFunction("Function OLGame.OLCheatManager.OutlastPause");
	}

	UOLCheatManager_execOutlastPause_Params OutlastPause_Params;
	memset(&OutlastPause_Params, 0, sizeof(OutlastPause_Params));

	this->ProcessEvent(uFnOutlastPause, &OutlastPause_Params, nullptr);
};

// Function OLGame.OLCheatManager.DebugClosestAI
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::DebugClosestAI()
{
	static UFunction* uFnDebugClosestAI = nullptr;

	if (!uFnDebugClosestAI)
	{
		uFnDebugClosestAI = UFunction::FindFunction("Function OLGame.OLCheatManager.DebugClosestAI");
	}

	UOLCheatManager_execDebugClosestAI_Params DebugClosestAI_Params;
	memset(&DebugClosestAI_Params, 0, sizeof(DebugClosestAI_Params));

	uFnDebugClosestAI->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDebugClosestAI, &DebugClosestAI_Params, nullptr);
	uFnDebugClosestAI->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.ResetGS
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ResetGS()
{
	static UFunction* uFnResetGS = nullptr;

	if (!uFnResetGS)
	{
		uFnResetGS = UFunction::FindFunction("Function OLGame.OLCheatManager.ResetGS");
	}

	UOLCheatManager_execResetGS_Params ResetGS_Params;
	memset(&ResetGS_Params, 0, sizeof(ResetGS_Params));

	uFnResetGS->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnResetGS, &ResetGS_Params, nullptr);
	uFnResetGS->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.DeactivateGS
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FName                   gsName                         (CPF_Parm)

void UOLCheatManager::DeactivateGS(struct FName gsName)
{
	static UFunction* uFnDeactivateGS = nullptr;

	if (!uFnDeactivateGS)
	{
		uFnDeactivateGS = UFunction::FindFunction("Function OLGame.OLCheatManager.DeactivateGS");
	}

	UOLCheatManager_execDeactivateGS_Params DeactivateGS_Params;
	memset(&DeactivateGS_Params, 0, sizeof(DeactivateGS_Params));
	memcpy_s(&DeactivateGS_Params.gsName, sizeof(DeactivateGS_Params.gsName), &gsName, sizeof(gsName));

	uFnDeactivateGS->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDeactivateGS, &DeactivateGS_Params, nullptr);
	uFnDeactivateGS->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.ActivateGS
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FName                   gsName                         (CPF_Parm)

void UOLCheatManager::ActivateGS(struct FName gsName)
{
	static UFunction* uFnActivateGS = nullptr;

	if (!uFnActivateGS)
	{
		uFnActivateGS = UFunction::FindFunction("Function OLGame.OLCheatManager.ActivateGS");
	}

	UOLCheatManager_execActivateGS_Params ActivateGS_Params;
	memset(&ActivateGS_Params, 0, sizeof(ActivateGS_Params));
	memcpy_s(&ActivateGS_Params.gsName, sizeof(ActivateGS_Params.gsName), &gsName, sizeof(gsName));

	uFnActivateGS->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnActivateGS, &ActivateGS_Params, nullptr);
	uFnActivateGS->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.DumpGS
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::DumpGS()
{
	static UFunction* uFnDumpGS = nullptr;

	if (!uFnDumpGS)
	{
		uFnDumpGS = UFunction::FindFunction("Function OLGame.OLCheatManager.DumpGS");
	}

	UOLCheatManager_execDumpGS_Params DumpGS_Params;
	memset(&DumpGS_Params, 0, sizeof(DumpGS_Params));

	this->ProcessEvent(uFnDumpGS, &DumpGS_Params, nullptr);
};

// Function OLGame.OLCheatManager.DebugPhysMaterials
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::DebugPhysMaterials()
{
	static UFunction* uFnDebugPhysMaterials = nullptr;

	if (!uFnDebugPhysMaterials)
	{
		uFnDebugPhysMaterials = UFunction::FindFunction("Function OLGame.OLCheatManager.DebugPhysMaterials");
	}

	UOLCheatManager_execDebugPhysMaterials_Params DebugPhysMaterials_Params;
	memset(&DebugPhysMaterials_Params, 0, sizeof(DebugPhysMaterials_Params));

	this->ProcessEvent(uFnDebugPhysMaterials, &DebugPhysMaterials_Params, nullptr);
};

// Function OLGame.OLCheatManager.DebugPerception
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::DebugPerception()
{
	static UFunction* uFnDebugPerception = nullptr;

	if (!uFnDebugPerception)
	{
		uFnDebugPerception = UFunction::FindFunction("Function OLGame.OLCheatManager.DebugPerception");
	}

	UOLCheatManager_execDebugPerception_Params DebugPerception_Params;
	memset(&DebugPerception_Params, 0, sizeof(DebugPerception_Params));

	this->ProcessEvent(uFnDebugPerception, &DebugPerception_Params, nullptr);
};

// Function OLGame.OLCheatManager.OldBotPhysics
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::OldBotPhysics()
{
	static UFunction* uFnOldBotPhysics = nullptr;

	if (!uFnOldBotPhysics)
	{
		uFnOldBotPhysics = UFunction::FindFunction("Function OLGame.OLCheatManager.OldBotPhysics");
	}

	UOLCheatManager_execOldBotPhysics_Params OldBotPhysics_Params;
	memset(&OldBotPhysics_Params, 0, sizeof(OldBotPhysics_Params));

	this->ProcessEvent(uFnOldBotPhysics, &OldBotPhysics_Params, nullptr);
};

// Function OLGame.OLCheatManager.NewBotPhysics
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::NewBotPhysics()
{
	static UFunction* uFnNewBotPhysics = nullptr;

	if (!uFnNewBotPhysics)
	{
		uFnNewBotPhysics = UFunction::FindFunction("Function OLGame.OLCheatManager.NewBotPhysics");
	}

	UOLCheatManager_execNewBotPhysics_Params NewBotPhysics_Params;
	memset(&NewBotPhysics_Params, 0, sizeof(NewBotPhysics_Params));

	this->ProcessEvent(uFnNewBotPhysics, &NewBotPhysics_Params, nullptr);
};

// Function OLGame.OLCheatManager.OldHeroPhysics
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::OldHeroPhysics()
{
	static UFunction* uFnOldHeroPhysics = nullptr;

	if (!uFnOldHeroPhysics)
	{
		uFnOldHeroPhysics = UFunction::FindFunction("Function OLGame.OLCheatManager.OldHeroPhysics");
	}

	UOLCheatManager_execOldHeroPhysics_Params OldHeroPhysics_Params;
	memset(&OldHeroPhysics_Params, 0, sizeof(OldHeroPhysics_Params));

	this->ProcessEvent(uFnOldHeroPhysics, &OldHeroPhysics_Params, nullptr);
};

// Function OLGame.OLCheatManager.NewHeroPhysics
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::NewHeroPhysics()
{
	static UFunction* uFnNewHeroPhysics = nullptr;

	if (!uFnNewHeroPhysics)
	{
		uFnNewHeroPhysics = UFunction::FindFunction("Function OLGame.OLCheatManager.NewHeroPhysics");
	}

	UOLCheatManager_execNewHeroPhysics_Params NewHeroPhysics_Params;
	memset(&NewHeroPhysics_Params, 0, sizeof(NewHeroPhysics_Params));

	this->ProcessEvent(uFnNewHeroPhysics, &NewHeroPhysics_Params, nullptr);
};

// Function OLGame.OLCheatManager.OldPhysics
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::OldPhysics()
{
	static UFunction* uFnOldPhysics = nullptr;

	if (!uFnOldPhysics)
	{
		uFnOldPhysics = UFunction::FindFunction("Function OLGame.OLCheatManager.OldPhysics");
	}

	UOLCheatManager_execOldPhysics_Params OldPhysics_Params;
	memset(&OldPhysics_Params, 0, sizeof(OldPhysics_Params));

	this->ProcessEvent(uFnOldPhysics, &OldPhysics_Params, nullptr);
};

// Function OLGame.OLCheatManager.newPhysics
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::newPhysics()
{
	static UFunction* uFnnewPhysics = nullptr;

	if (!uFnnewPhysics)
	{
		uFnnewPhysics = UFunction::FindFunction("Function OLGame.OLCheatManager.newPhysics");
	}

	UOLCheatManager_execnewPhysics_Params newPhysics_Params;
	memset(&newPhysics_Params, 0, sizeof(newPhysics_Params));

	this->ProcessEvent(uFnnewPhysics, &newPhysics_Params, nullptr);
};

// Function OLGame.OLCheatManager.ToggleHeroInclusionForSimplifiedPhysics
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ToggleHeroInclusionForSimplifiedPhysics()
{
	static UFunction* uFnToggleHeroInclusionForSimplifiedPhysics = nullptr;

	if (!uFnToggleHeroInclusionForSimplifiedPhysics)
	{
		uFnToggleHeroInclusionForSimplifiedPhysics = UFunction::FindFunction("Function OLGame.OLCheatManager.ToggleHeroInclusionForSimplifiedPhysics");
	}

	UOLCheatManager_execToggleHeroInclusionForSimplifiedPhysics_Params ToggleHeroInclusionForSimplifiedPhysics_Params;
	memset(&ToggleHeroInclusionForSimplifiedPhysics_Params, 0, sizeof(ToggleHeroInclusionForSimplifiedPhysics_Params));

	this->ProcessEvent(uFnToggleHeroInclusionForSimplifiedPhysics, &ToggleHeroInclusionForSimplifiedPhysics_Params, nullptr);
};

// Function OLGame.OLCheatManager.TogglePhysicsMode
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::TogglePhysicsMode()
{
	static UFunction* uFnTogglePhysicsMode = nullptr;

	if (!uFnTogglePhysicsMode)
	{
		uFnTogglePhysicsMode = UFunction::FindFunction("Function OLGame.OLCheatManager.TogglePhysicsMode");
	}

	UOLCheatManager_execTogglePhysicsMode_Params TogglePhysicsMode_Params;
	memset(&TogglePhysicsMode_Params, 0, sizeof(TogglePhysicsMode_Params));

	this->ProcessEvent(uFnTogglePhysicsMode, &TogglePhysicsMode_Params, nullptr);
};

// Function OLGame.OLCheatManager.SetSimplifiedPhysics
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bHero                          (CPF_Parm)
// bool                           bBots                          (CPF_Parm)
// bool                           bSimplified                    (CPF_Parm)

void UOLCheatManager::SetSimplifiedPhysics(bool bHero, bool bBots, bool bSimplified)
{
	static UFunction* uFnSetSimplifiedPhysics = nullptr;

	if (!uFnSetSimplifiedPhysics)
	{
		uFnSetSimplifiedPhysics = UFunction::FindFunction("Function OLGame.OLCheatManager.SetSimplifiedPhysics");
	}

	UOLCheatManager_execSetSimplifiedPhysics_Params SetSimplifiedPhysics_Params;
	memset(&SetSimplifiedPhysics_Params, 0, sizeof(SetSimplifiedPhysics_Params));
	SetSimplifiedPhysics_Params.bHero = bHero;
	SetSimplifiedPhysics_Params.bBots = bBots;
	SetSimplifiedPhysics_Params.bSimplified = bSimplified;

	uFnSetSimplifiedPhysics->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetSimplifiedPhysics, &SetSimplifiedPhysics_Params, nullptr);
	uFnSetSimplifiedPhysics->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.SetNewPhysics
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bHero                          (CPF_Parm)
// bool                           bBots                          (CPF_Parm)

void UOLCheatManager::SetNewPhysics(bool bHero, bool bBots)
{
	static UFunction* uFnSetNewPhysics = nullptr;

	if (!uFnSetNewPhysics)
	{
		uFnSetNewPhysics = UFunction::FindFunction("Function OLGame.OLCheatManager.SetNewPhysics");
	}

	UOLCheatManager_execSetNewPhysics_Params SetNewPhysics_Params;
	memset(&SetNewPhysics_Params, 0, sizeof(SetNewPhysics_Params));
	SetNewPhysics_Params.bHero = bHero;
	SetNewPhysics_Params.bBots = bBots;

	uFnSetNewPhysics->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetNewPhysics, &SetNewPhysics_Params, nullptr);
	uFnSetNewPhysics->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.SuppressAllMessages
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::SuppressAllMessages()
{
	static UFunction* uFnSuppressAllMessages = nullptr;

	if (!uFnSuppressAllMessages)
	{
		uFnSuppressAllMessages = UFunction::FindFunction("Function OLGame.OLCheatManager.SuppressAllMessages");
	}

	UOLCheatManager_execSuppressAllMessages_Params SuppressAllMessages_Params;
	memset(&SuppressAllMessages_Params, 0, sizeof(SuppressAllMessages_Params));

	this->ProcessEvent(uFnSuppressAllMessages, &SuppressAllMessages_Params, nullptr);
};

// Function OLGame.OLCheatManager.AIEvents
// [0x00024600] (FUNC_Exec | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        NumLines                       (CPF_OptionalParm | CPF_Parm)

void UOLCheatManager::AIEvents(int32_t NumLines)
{
	static UFunction* uFnAIEvents = nullptr;

	if (!uFnAIEvents)
	{
		uFnAIEvents = UFunction::FindFunction("Function OLGame.OLCheatManager.AIEvents");
	}

	UOLCheatManager_execAIEvents_Params AIEvents_Params;
	memset(&AIEvents_Params, 0, sizeof(AIEvents_Params));
	memcpy_s(&AIEvents_Params.NumLines, sizeof(AIEvents_Params.NumLines), &NumLines, sizeof(NumLines));

	uFnAIEvents->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAIEvents, &AIEvents_Params, nullptr);
	uFnAIEvents->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.AILogs
// [0x00024600] (FUNC_Exec | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        NumLines                       (CPF_OptionalParm | CPF_Parm)

void UOLCheatManager::AILogs(int32_t NumLines)
{
	static UFunction* uFnAILogs = nullptr;

	if (!uFnAILogs)
	{
		uFnAILogs = UFunction::FindFunction("Function OLGame.OLCheatManager.AILogs");
	}

	UOLCheatManager_execAILogs_Params AILogs_Params;
	memset(&AILogs_Params, 0, sizeof(AILogs_Params));
	memcpy_s(&AILogs_Params.NumLines, sizeof(AILogs_Params.NumLines), &NumLines, sizeof(NumLines));

	uFnAILogs->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAILogs, &AILogs_Params, nullptr);
	uFnAILogs->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.DrawDebug
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::DrawDebug()
{
	static UFunction* uFnDrawDebug = nullptr;

	if (!uFnDrawDebug)
	{
		uFnDrawDebug = UFunction::FindFunction("Function OLGame.OLCheatManager.DrawDebug");
	}

	UOLCheatManager_execDrawDebug_Params DrawDebug_Params;
	memset(&DrawDebug_Params, 0, sizeof(DrawDebug_Params));

	uFnDrawDebug->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDrawDebug, &DrawDebug_Params, nullptr);
	uFnDrawDebug->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.ToggleMute
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ToggleMute()
{
	static UFunction* uFnToggleMute = nullptr;

	if (!uFnToggleMute)
	{
		uFnToggleMute = UFunction::FindFunction("Function OLGame.OLCheatManager.ToggleMute");
	}

	UOLCheatManager_execToggleMute_Params ToggleMute_Params;
	memset(&ToggleMute_Params, 0, sizeof(ToggleMute_Params));

	uFnToggleMute->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnToggleMute, &ToggleMute_Params, nullptr);
	uFnToggleMute->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.SetVolumeThreshold
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          NewThreshold                   (CPF_Parm)

void UOLCheatManager::SetVolumeThreshold(float NewThreshold)
{
	static UFunction* uFnSetVolumeThreshold = nullptr;

	if (!uFnSetVolumeThreshold)
	{
		uFnSetVolumeThreshold = UFunction::FindFunction("Function OLGame.OLCheatManager.SetVolumeThreshold");
	}

	UOLCheatManager_execSetVolumeThreshold_Params SetVolumeThreshold_Params;
	memset(&SetVolumeThreshold_Params, 0, sizeof(SetVolumeThreshold_Params));
	memcpy_s(&SetVolumeThreshold_Params.NewThreshold, sizeof(SetVolumeThreshold_Params.NewThreshold), &NewThreshold, sizeof(NewThreshold));

	uFnSetVolumeThreshold->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetVolumeThreshold, &SetVolumeThreshold_Params, nullptr);
	uFnSetVolumeThreshold->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.MakeNoise
// [0x00024600] (FUNC_Exec | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          NoiseAmount                    (CPF_OptionalParm | CPF_Parm)

void UOLCheatManager::MakeNoise(float NoiseAmount)
{
	static UFunction* uFnMakeNoise = nullptr;

	if (!uFnMakeNoise)
	{
		uFnMakeNoise = UFunction::FindFunction("Function OLGame.OLCheatManager.MakeNoise");
	}

	UOLCheatManager_execMakeNoise_Params MakeNoise_Params;
	memset(&MakeNoise_Params, 0, sizeof(MakeNoise_Params));
	memcpy_s(&MakeNoise_Params.NoiseAmount, sizeof(MakeNoise_Params.NoiseAmount), &NoiseAmount, sizeof(NoiseAmount));

	uFnMakeNoise->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnMakeNoise, &MakeNoise_Params, nullptr);
	uFnMakeNoise->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.InflictDamage
// [0x00024202] (FUNC_Defined | FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          Amount                         (CPF_OptionalParm | CPF_Parm)

void UOLCheatManager::InflictDamage(float Amount)
{
	static UFunction* uFnInflictDamage = nullptr;

	if (!uFnInflictDamage)
	{
		uFnInflictDamage = UFunction::FindFunction("Function OLGame.OLCheatManager.InflictDamage");
	}

	UOLCheatManager_execInflictDamage_Params InflictDamage_Params;
	memset(&InflictDamage_Params, 0, sizeof(InflictDamage_Params));
	memcpy_s(&InflictDamage_Params.Amount, sizeof(InflictDamage_Params.Amount), &Amount, sizeof(Amount));

	this->ProcessEvent(uFnInflictDamage, &InflictDamage_Params, nullptr);
};

// Function OLGame.OLCheatManager.ResetTutorials
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ResetTutorials()
{
	static UFunction* uFnResetTutorials = nullptr;

	if (!uFnResetTutorials)
	{
		uFnResetTutorials = UFunction::FindFunction("Function OLGame.OLCheatManager.ResetTutorials");
	}

	UOLCheatManager_execResetTutorials_Params ResetTutorials_Params;
	memset(&ResetTutorials_Params, 0, sizeof(ResetTutorials_Params));

	uFnResetTutorials->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnResetTutorials, &ResetTutorials_Params, nullptr);
	uFnResetTutorials->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.ResetWorldToSavedState
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ResetWorldToSavedState()
{
	static UFunction* uFnResetWorldToSavedState = nullptr;

	if (!uFnResetWorldToSavedState)
	{
		uFnResetWorldToSavedState = UFunction::FindFunction("Function OLGame.OLCheatManager.ResetWorldToSavedState");
	}

	UOLCheatManager_execResetWorldToSavedState_Params ResetWorldToSavedState_Params;
	memset(&ResetWorldToSavedState_Params, 0, sizeof(ResetWorldToSavedState_Params));

	uFnResetWorldToSavedState->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnResetWorldToSavedState, &ResetWorldToSavedState_Params, nullptr);
	uFnResetWorldToSavedState->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.ResetWorldState
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ResetWorldState()
{
	static UFunction* uFnResetWorldState = nullptr;

	if (!uFnResetWorldState)
	{
		uFnResetWorldState = UFunction::FindFunction("Function OLGame.OLCheatManager.ResetWorldState");
	}

	UOLCheatManager_execResetWorldState_Params ResetWorldState_Params;
	memset(&ResetWorldState_Params, 0, sizeof(ResetWorldState_Params));

	uFnResetWorldState->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnResetWorldState, &ResetWorldState_Params, nullptr);
	uFnResetWorldState->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.ResetPushables
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ResetPushables()
{
	static UFunction* uFnResetPushables = nullptr;

	if (!uFnResetPushables)
	{
		uFnResetPushables = UFunction::FindFunction("Function OLGame.OLCheatManager.ResetPushables");
	}

	UOLCheatManager_execResetPushables_Params ResetPushables_Params;
	memset(&ResetPushables_Params, 0, sizeof(ResetPushables_Params));

	uFnResetPushables->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnResetPushables, &ResetPushables_Params, nullptr);
	uFnResetPushables->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.ResetDoors
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ResetDoors()
{
	static UFunction* uFnResetDoors = nullptr;

	if (!uFnResetDoors)
	{
		uFnResetDoors = UFunction::FindFunction("Function OLGame.OLCheatManager.ResetDoors");
	}

	UOLCheatManager_execResetDoors_Params ResetDoors_Params;
	memset(&ResetDoors_Params, 0, sizeof(ResetDoors_Params));

	uFnResetDoors->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnResetDoors, &ResetDoors_Params, nullptr);
	uFnResetDoors->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.GammaDown
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::GammaDown()
{
	static UFunction* uFnGammaDown = nullptr;

	if (!uFnGammaDown)
	{
		uFnGammaDown = UFunction::FindFunction("Function OLGame.OLCheatManager.GammaDown");
	}

	UOLCheatManager_execGammaDown_Params GammaDown_Params;
	memset(&GammaDown_Params, 0, sizeof(GammaDown_Params));

	uFnGammaDown->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGammaDown, &GammaDown_Params, nullptr);
	uFnGammaDown->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.GammaUp
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::GammaUp()
{
	static UFunction* uFnGammaUp = nullptr;

	if (!uFnGammaUp)
	{
		uFnGammaUp = UFunction::FindFunction("Function OLGame.OLCheatManager.GammaUp");
	}

	UOLCheatManager_execGammaUp_Params GammaUp_Params;
	memset(&GammaUp_Params, 0, sizeof(GammaUp_Params));

	uFnGammaUp->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGammaUp, &GammaUp_Params, nullptr);
	uFnGammaUp->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.SetGamma
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          newGamma                       (CPF_Parm)

void UOLCheatManager::SetGamma(float newGamma)
{
	static UFunction* uFnSetGamma = nullptr;

	if (!uFnSetGamma)
	{
		uFnSetGamma = UFunction::FindFunction("Function OLGame.OLCheatManager.SetGamma");
	}

	UOLCheatManager_execSetGamma_Params SetGamma_Params;
	memset(&SetGamma_Params, 0, sizeof(SetGamma_Params));
	memcpy_s(&SetGamma_Params.newGamma, sizeof(SetGamma_Params.newGamma), &newGamma, sizeof(newGamma));

	uFnSetGamma->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetGamma, &SetGamma_Params, nullptr);
	uFnSetGamma->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.LoadGame
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Filename                       (CPF_Parm | CPF_NeedCtorLink)

void UOLCheatManager::LoadGame(class FString Filename)
{
	static UFunction* uFnLoadGame = nullptr;

	if (!uFnLoadGame)
	{
		uFnLoadGame = UFunction::FindFunction("Function OLGame.OLCheatManager.LoadGame");
	}

	UOLCheatManager_execLoadGame_Params LoadGame_Params;
	memset(&LoadGame_Params, 0, sizeof(LoadGame_Params));
	memcpy_s(&LoadGame_Params.Filename, sizeof(LoadGame_Params.Filename), &Filename, sizeof(Filename));

	this->ProcessEvent(uFnLoadGame, &LoadGame_Params, nullptr);
};

// Function OLGame.OLCheatManager.SaveGame
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Filename                       (CPF_Parm | CPF_NeedCtorLink)

void UOLCheatManager::SaveGame(class FString Filename)
{
	static UFunction* uFnSaveGame = nullptr;

	if (!uFnSaveGame)
	{
		uFnSaveGame = UFunction::FindFunction("Function OLGame.OLCheatManager.SaveGame");
	}

	UOLCheatManager_execSaveGame_Params SaveGame_Params;
	memset(&SaveGame_Params, 0, sizeof(SaveGame_Params));
	memcpy_s(&SaveGame_Params.Filename, sizeof(SaveGame_Params.Filename), &Filename, sizeof(Filename));

	this->ProcessEvent(uFnSaveGame, &SaveGame_Params, nullptr);
};

// Function OLGame.OLCheatManager.LoseBandages
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::LoseBandages()
{
	static UFunction* uFnLoseBandages = nullptr;

	if (!uFnLoseBandages)
	{
		uFnLoseBandages = UFunction::FindFunction("Function OLGame.OLCheatManager.LoseBandages");
	}

	UOLCheatManager_execLoseBandages_Params LoseBandages_Params;
	memset(&LoseBandages_Params, 0, sizeof(LoseBandages_Params));

	uFnLoseBandages->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnLoseBandages, &LoseBandages_Params, nullptr);
	uFnLoseBandages->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.GiveItem
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ItemName                       (CPF_Parm | CPF_NeedCtorLink)

void UOLCheatManager::GiveItem(class FString ItemName)
{
	static UFunction* uFnGiveItem = nullptr;

	if (!uFnGiveItem)
	{
		uFnGiveItem = UFunction::FindFunction("Function OLGame.OLCheatManager.GiveItem");
	}

	UOLCheatManager_execGiveItem_Params GiveItem_Params;
	memset(&GiveItem_Params, 0, sizeof(GiveItem_Params));
	memcpy_s(&GiveItem_Params.ItemName, sizeof(GiveItem_Params.ItemName), &ItemName, sizeof(ItemName));

	uFnGiveItem->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGiveItem, &GiveItem_Params, nullptr);
	uFnGiveItem->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.ApplyCP
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  CPName                         (CPF_Parm | CPF_NeedCtorLink)

void UOLCheatManager::ApplyCP(class FString CPName)
{
	static UFunction* uFnApplyCP = nullptr;

	if (!uFnApplyCP)
	{
		uFnApplyCP = UFunction::FindFunction("Function OLGame.OLCheatManager.ApplyCP");
	}

	UOLCheatManager_execApplyCP_Params ApplyCP_Params;
	memset(&ApplyCP_Params, 0, sizeof(ApplyCP_Params));
	memcpy_s(&ApplyCP_Params.CPName, sizeof(ApplyCP_Params.CPName), &CPName, sizeof(CPName));

	uFnApplyCP->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnApplyCP, &ApplyCP_Params, nullptr);
	uFnApplyCP->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.cplist
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::cplist()
{
	static UFunction* uFncplist = nullptr;

	if (!uFncplist)
	{
		uFncplist = UFunction::FindFunction("Function OLGame.OLCheatManager.cplist");
	}

	UOLCheatManager_execcplist_Params cplist_Params;
	memset(&cplist_Params, 0, sizeof(cplist_Params));

	uFncplist->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFncplist, &cplist_Params, nullptr);
	uFncplist->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.cp
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  CPName                         (CPF_Parm | CPF_NeedCtorLink)

void UOLCheatManager::cp(class FString CPName)
{
	static UFunction* uFncp = nullptr;

	if (!uFncp)
	{
		uFncp = UFunction::FindFunction("Function OLGame.OLCheatManager.cp");
	}

	UOLCheatManager_execcp_Params cp_Params;
	memset(&cp_Params, 0, sizeof(cp_Params));
	memcpy_s(&cp_Params.CPName, sizeof(cp_Params.CPName), &CPName, sizeof(CPName));

	this->ProcessEvent(uFncp, &cp_Params, nullptr);
};

// Function OLGame.OLCheatManager.Checkpoint
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  CPName                         (CPF_Parm | CPF_NeedCtorLink)

void UOLCheatManager::Checkpoint(class FString CPName)
{
	static UFunction* uFnCheckpoint = nullptr;

	if (!uFnCheckpoint)
	{
		uFnCheckpoint = UFunction::FindFunction("Function OLGame.OLCheatManager.Checkpoint");
	}

	UOLCheatManager_execCheckpoint_Params Checkpoint_Params;
	memset(&Checkpoint_Params, 0, sizeof(Checkpoint_Params));
	memcpy_s(&Checkpoint_Params.CPName, sizeof(Checkpoint_Params.CPName), &CPName, sizeof(CPName));

	this->ProcessEvent(uFnCheckpoint, &Checkpoint_Params, nullptr);
};

// Function OLGame.OLCheatManager.KillFade
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::KillFade()
{
	static UFunction* uFnKillFade = nullptr;

	if (!uFnKillFade)
	{
		uFnKillFade = UFunction::FindFunction("Function OLGame.OLCheatManager.KillFade");
	}

	UOLCheatManager_execKillFade_Params KillFade_Params;
	memset(&KillFade_Params, 0, sizeof(KillFade_Params));

	this->ProcessEvent(uFnKillFade, &KillFade_Params, nullptr);
};

// Function OLGame.OLCheatManager.ToggleUnlimitedBatteries
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ToggleUnlimitedBatteries()
{
	static UFunction* uFnToggleUnlimitedBatteries = nullptr;

	if (!uFnToggleUnlimitedBatteries)
	{
		uFnToggleUnlimitedBatteries = UFunction::FindFunction("Function OLGame.OLCheatManager.ToggleUnlimitedBatteries");
	}

	UOLCheatManager_execToggleUnlimitedBatteries_Params ToggleUnlimitedBatteries_Params;
	memset(&ToggleUnlimitedBatteries_Params, 0, sizeof(ToggleUnlimitedBatteries_Params));

	this->ProcessEvent(uFnToggleUnlimitedBatteries, &ToggleUnlimitedBatteries_Params, nullptr);
};

// Function OLGame.OLCheatManager.LoseAllProfileRecordingMoment
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::LoseAllProfileRecordingMoment()
{
	static UFunction* uFnLoseAllProfileRecordingMoment = nullptr;

	if (!uFnLoseAllProfileRecordingMoment)
	{
		uFnLoseAllProfileRecordingMoment = UFunction::FindFunction("Function OLGame.OLCheatManager.LoseAllProfileRecordingMoment");
	}

	UOLCheatManager_execLoseAllProfileRecordingMoment_Params LoseAllProfileRecordingMoment_Params;
	memset(&LoseAllProfileRecordingMoment_Params, 0, sizeof(LoseAllProfileRecordingMoment_Params));

	uFnLoseAllProfileRecordingMoment->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnLoseAllProfileRecordingMoment, &LoseAllProfileRecordingMoment_Params, nullptr);
	uFnLoseAllProfileRecordingMoment->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.LoseRecordingMoment
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  moment                         (CPF_Parm | CPF_NeedCtorLink)

void UOLCheatManager::LoseRecordingMoment(class FString moment)
{
	static UFunction* uFnLoseRecordingMoment = nullptr;

	if (!uFnLoseRecordingMoment)
	{
		uFnLoseRecordingMoment = UFunction::FindFunction("Function OLGame.OLCheatManager.LoseRecordingMoment");
	}

	UOLCheatManager_execLoseRecordingMoment_Params LoseRecordingMoment_Params;
	memset(&LoseRecordingMoment_Params, 0, sizeof(LoseRecordingMoment_Params));
	memcpy_s(&LoseRecordingMoment_Params.moment, sizeof(LoseRecordingMoment_Params.moment), &moment, sizeof(moment));

	uFnLoseRecordingMoment->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnLoseRecordingMoment, &LoseRecordingMoment_Params, nullptr);
	uFnLoseRecordingMoment->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.GetRecordingMoment
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  moment                         (CPF_Parm | CPF_NeedCtorLink)

void UOLCheatManager::GetRecordingMoment(class FString moment)
{
	static UFunction* uFnGetRecordingMoment = nullptr;

	if (!uFnGetRecordingMoment)
	{
		uFnGetRecordingMoment = UFunction::FindFunction("Function OLGame.OLCheatManager.GetRecordingMoment");
	}

	UOLCheatManager_execGetRecordingMoment_Params GetRecordingMoment_Params;
	memset(&GetRecordingMoment_Params, 0, sizeof(GetRecordingMoment_Params));
	memcpy_s(&GetRecordingMoment_Params.moment, sizeof(GetRecordingMoment_Params.moment), &moment, sizeof(moment));

	uFnGetRecordingMoment->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetRecordingMoment, &GetRecordingMoment_Params, nullptr);
	uFnGetRecordingMoment->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.GetAllRecordingMoments
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::GetAllRecordingMoments()
{
	static UFunction* uFnGetAllRecordingMoments = nullptr;

	if (!uFnGetAllRecordingMoments)
	{
		uFnGetAllRecordingMoments = UFunction::FindFunction("Function OLGame.OLCheatManager.GetAllRecordingMoments");
	}

	UOLCheatManager_execGetAllRecordingMoments_Params GetAllRecordingMoments_Params;
	memset(&GetAllRecordingMoments_Params, 0, sizeof(GetAllRecordingMoments_Params));

	uFnGetAllRecordingMoments->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetAllRecordingMoments, &GetAllRecordingMoments_Params, nullptr);
	uFnGetAllRecordingMoments->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.ResetBandageTime
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ResetBandageTime()
{
	static UFunction* uFnResetBandageTime = nullptr;

	if (!uFnResetBandageTime)
	{
		uFnResetBandageTime = UFunction::FindFunction("Function OLGame.OLCheatManager.ResetBandageTime");
	}

	UOLCheatManager_execResetBandageTime_Params ResetBandageTime_Params;
	memset(&ResetBandageTime_Params, 0, sizeof(ResetBandageTime_Params));

	uFnResetBandageTime->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnResetBandageTime, &ResetBandageTime_Params, nullptr);
	uFnResetBandageTime->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.ForceHeroSkin
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Type                           (CPF_Parm)
// int32_t                        SubType                        (CPF_Parm)

void UOLCheatManager::ForceHeroSkin(int32_t Type, int32_t SubType)
{
	static UFunction* uFnForceHeroSkin = nullptr;

	if (!uFnForceHeroSkin)
	{
		uFnForceHeroSkin = UFunction::FindFunction("Function OLGame.OLCheatManager.ForceHeroSkin");
	}

	UOLCheatManager_execForceHeroSkin_Params ForceHeroSkin_Params;
	memset(&ForceHeroSkin_Params, 0, sizeof(ForceHeroSkin_Params));
	memcpy_s(&ForceHeroSkin_Params.Type, sizeof(ForceHeroSkin_Params.Type), &Type, sizeof(Type));
	memcpy_s(&ForceHeroSkin_Params.SubType, sizeof(ForceHeroSkin_Params.SubType), &SubType, sizeof(SubType));

	uFnForceHeroSkin->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnForceHeroSkin, &ForceHeroSkin_Params, nullptr);
	uFnForceHeroSkin->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.AddBandage
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::AddBandage()
{
	static UFunction* uFnAddBandage = nullptr;

	if (!uFnAddBandage)
	{
		uFnAddBandage = UFunction::FindFunction("Function OLGame.OLCheatManager.AddBandage");
	}

	UOLCheatManager_execAddBandage_Params AddBandage_Params;
	memset(&AddBandage_Params, 0, sizeof(AddBandage_Params));

	this->ProcessEvent(uFnAddBandage, &AddBandage_Params, nullptr);
};

// Function OLGame.OLCheatManager.RechargeNightVision
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::RechargeNightVision()
{
	static UFunction* uFnRechargeNightVision = nullptr;

	if (!uFnRechargeNightVision)
	{
		uFnRechargeNightVision = UFunction::FindFunction("Function OLGame.OLCheatManager.RechargeNightVision");
	}

	UOLCheatManager_execRechargeNightVision_Params RechargeNightVision_Params;
	memset(&RechargeNightVision_Params, 0, sizeof(RechargeNightVision_Params));

	this->ProcessEvent(uFnRechargeNightVision, &RechargeNightVision_Params, nullptr);
};

// Function OLGame.OLCheatManager.Ghost
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::Ghost()
{
	static UFunction* uFnGhost = nullptr;

	if (!uFnGhost)
	{
		uFnGhost = UFunction::FindFunction("Function OLGame.OLCheatManager.Ghost");
	}

	UOLCheatManager_execGhost_Params Ghost_Params;
	memset(&Ghost_Params, 0, sizeof(Ghost_Params));

	this->ProcessEvent(uFnGhost, &Ghost_Params, nullptr);
};

// Function OLGame.OLCheatManager.GhostPawn
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ghosting                       (CPF_Parm)

void UOLCheatManager::GhostPawn(bool ghosting)
{
	static UFunction* uFnGhostPawn = nullptr;

	if (!uFnGhostPawn)
	{
		uFnGhostPawn = UFunction::FindFunction("Function OLGame.OLCheatManager.GhostPawn");
	}

	UOLCheatManager_execGhostPawn_Params GhostPawn_Params;
	memset(&GhostPawn_Params, 0, sizeof(GhostPawn_Params));
	GhostPawn_Params.ghosting = ghosting;

	uFnGhostPawn->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGhostPawn, &GhostPawn_Params, nullptr);
	uFnGhostPawn->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.FasterGameSpeed
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::FasterGameSpeed()
{
	static UFunction* uFnFasterGameSpeed = nullptr;

	if (!uFnFasterGameSpeed)
	{
		uFnFasterGameSpeed = UFunction::FindFunction("Function OLGame.OLCheatManager.FasterGameSpeed");
	}

	UOLCheatManager_execFasterGameSpeed_Params FasterGameSpeed_Params;
	memset(&FasterGameSpeed_Params, 0, sizeof(FasterGameSpeed_Params));

	this->ProcessEvent(uFnFasterGameSpeed, &FasterGameSpeed_Params, nullptr);
};

// Function OLGame.OLCheatManager.SlowerGameSpeed
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::SlowerGameSpeed()
{
	static UFunction* uFnSlowerGameSpeed = nullptr;

	if (!uFnSlowerGameSpeed)
	{
		uFnSlowerGameSpeed = UFunction::FindFunction("Function OLGame.OLCheatManager.SlowerGameSpeed");
	}

	UOLCheatManager_execSlowerGameSpeed_Params SlowerGameSpeed_Params;
	memset(&SlowerGameSpeed_Params, 0, sizeof(SlowerGameSpeed_Params));

	this->ProcessEvent(uFnSlowerGameSpeed, &SlowerGameSpeed_Params, nullptr);
};

// Function OLGame.OLCheatManager.NormalGameSpeed
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::NormalGameSpeed()
{
	static UFunction* uFnNormalGameSpeed = nullptr;

	if (!uFnNormalGameSpeed)
	{
		uFnNormalGameSpeed = UFunction::FindFunction("Function OLGame.OLCheatManager.NormalGameSpeed");
	}

	UOLCheatManager_execNormalGameSpeed_Params NormalGameSpeed_Params;
	memset(&NormalGameSpeed_Params, 0, sizeof(NormalGameSpeed_Params));

	this->ProcessEvent(uFnNormalGameSpeed, &NormalGameSpeed_Params, nullptr);
};

// Function OLGame.OLCheatManager.UpdateGameSpeed
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::UpdateGameSpeed()
{
	static UFunction* uFnUpdateGameSpeed = nullptr;

	if (!uFnUpdateGameSpeed)
	{
		uFnUpdateGameSpeed = UFunction::FindFunction("Function OLGame.OLCheatManager.UpdateGameSpeed");
	}

	UOLCheatManager_execUpdateGameSpeed_Params UpdateGameSpeed_Params;
	memset(&UpdateGameSpeed_Params, 0, sizeof(UpdateGameSpeed_Params));

	this->ProcessEvent(uFnUpdateGameSpeed, &UpdateGameSpeed_Params, nullptr);
};

// Function OLGame.OLCheatManager.SingleFrame
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::SingleFrame()
{
	static UFunction* uFnSingleFrame = nullptr;

	if (!uFnSingleFrame)
	{
		uFnSingleFrame = UFunction::FindFunction("Function OLGame.OLCheatManager.SingleFrame");
	}

	UOLCheatManager_execSingleFrame_Params SingleFrame_Params;
	memset(&SingleFrame_Params, 0, sizeof(SingleFrame_Params));

	uFnSingleFrame->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSingleFrame, &SingleFrame_Params, nullptr);
	uFnSingleFrame->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.TeleportToFreeCam
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::TeleportToFreeCam()
{
	static UFunction* uFnTeleportToFreeCam = nullptr;

	if (!uFnTeleportToFreeCam)
	{
		uFnTeleportToFreeCam = UFunction::FindFunction("Function OLGame.OLCheatManager.TeleportToFreeCam");
	}

	UOLCheatManager_execTeleportToFreeCam_Params TeleportToFreeCam_Params;
	memset(&TeleportToFreeCam_Params, 0, sizeof(TeleportToFreeCam_Params));

	this->ProcessEvent(uFnTeleportToFreeCam, &TeleportToFreeCam_Params, nullptr);
};

// Function OLGame.OLCheatManager.ToggleFixedCam
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ToggleFixedCam()
{
	static UFunction* uFnToggleFixedCam = nullptr;

	if (!uFnToggleFixedCam)
	{
		uFnToggleFixedCam = UFunction::FindFunction("Function OLGame.OLCheatManager.ToggleFixedCam");
	}

	UOLCheatManager_execToggleFixedCam_Params ToggleFixedCam_Params;
	memset(&ToggleFixedCam_Params, 0, sizeof(ToggleFixedCam_Params));

	this->ProcessEvent(uFnToggleFixedCam, &ToggleFixedCam_Params, nullptr);
};

// Function OLGame.OLCheatManager.ToggleFreeCamNoPause
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ToggleFreeCamNoPause()
{
	static UFunction* uFnToggleFreeCamNoPause = nullptr;

	if (!uFnToggleFreeCamNoPause)
	{
		uFnToggleFreeCamNoPause = UFunction::FindFunction("Function OLGame.OLCheatManager.ToggleFreeCamNoPause");
	}

	UOLCheatManager_execToggleFreeCamNoPause_Params ToggleFreeCamNoPause_Params;
	memset(&ToggleFreeCamNoPause_Params, 0, sizeof(ToggleFreeCamNoPause_Params));

	this->ProcessEvent(uFnToggleFreeCamNoPause, &ToggleFreeCamNoPause_Params, nullptr);
};

// Function OLGame.OLCheatManager.ToggleFreeCam
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ToggleFreeCam()
{
	static UFunction* uFnToggleFreeCam = nullptr;

	if (!uFnToggleFreeCam)
	{
		uFnToggleFreeCam = UFunction::FindFunction("Function OLGame.OLCheatManager.ToggleFreeCam");
	}

	UOLCheatManager_execToggleFreeCam_Params ToggleFreeCam_Params;
	memset(&ToggleFreeCam_Params, 0, sizeof(ToggleFreeCam_Params));

	this->ProcessEvent(uFnToggleFreeCam, &ToggleFreeCam_Params, nullptr);
};

// Function OLGame.OLCheatManager.AutoSpike
// [0x00024202] (FUNC_Defined | FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          Spike                          (CPF_OptionalParm | CPF_Parm)
// float                          Delay                          (CPF_OptionalParm | CPF_Parm)

void UOLCheatManager::AutoSpike(float Spike, float Delay)
{
	static UFunction* uFnAutoSpike = nullptr;

	if (!uFnAutoSpike)
	{
		uFnAutoSpike = UFunction::FindFunction("Function OLGame.OLCheatManager.AutoSpike");
	}

	UOLCheatManager_execAutoSpike_Params AutoSpike_Params;
	memset(&AutoSpike_Params, 0, sizeof(AutoSpike_Params));
	memcpy_s(&AutoSpike_Params.Spike, sizeof(AutoSpike_Params.Spike), &Spike, sizeof(Spike));
	memcpy_s(&AutoSpike_Params.Delay, sizeof(AutoSpike_Params.Delay), &Delay, sizeof(Delay));

	this->ProcessEvent(uFnAutoSpike, &AutoSpike_Params, nullptr);
};

// Function OLGame.OLCheatManager.Spike
// [0x00024202] (FUNC_Defined | FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          Spike                          (CPF_OptionalParm | CPF_Parm)

void UOLCheatManager::Spike(float Spike)
{
	static UFunction* uFnSpike = nullptr;

	if (!uFnSpike)
	{
		uFnSpike = UFunction::FindFunction("Function OLGame.OLCheatManager.Spike");
	}

	UOLCheatManager_execSpike_Params Spike_Params;
	memset(&Spike_Params, 0, sizeof(Spike_Params));
	memcpy_s(&Spike_Params.Spike, sizeof(Spike_Params.Spike), &Spike, sizeof(Spike));

	this->ProcessEvent(uFnSpike, &Spike_Params, nullptr);
};

// Function OLGame.OLCheatManager.BadFPS
// [0x00024202] (FUNC_Defined | FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          slowdown                       (CPF_OptionalParm | CPF_Parm)

void UOLCheatManager::BadFPS(float slowdown)
{
	static UFunction* uFnBadFPS = nullptr;

	if (!uFnBadFPS)
	{
		uFnBadFPS = UFunction::FindFunction("Function OLGame.OLCheatManager.BadFPS");
	}

	UOLCheatManager_execBadFPS_Params BadFPS_Params;
	memset(&BadFPS_Params, 0, sizeof(BadFPS_Params));
	memcpy_s(&BadFPS_Params.slowdown, sizeof(BadFPS_Params.slowdown), &slowdown, sizeof(slowdown));

	this->ProcessEvent(uFnBadFPS, &BadFPS_Params, nullptr);
};

// Function OLGame.OLCheatManager.DebugAI
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::DebugAI()
{
	static UFunction* uFnDebugAI = nullptr;

	if (!uFnDebugAI)
	{
		uFnDebugAI = UFunction::FindFunction("Function OLGame.OLCheatManager.DebugAI");
	}

	UOLCheatManager_execDebugAI_Params DebugAI_Params;
	memset(&DebugAI_Params, 0, sizeof(DebugAI_Params));

	this->ProcessEvent(uFnDebugAI, &DebugAI_Params, nullptr);
};

// Function OLGame.OLCheatManager.ShowHeroDebug
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ShowHeroDebug()
{
	static UFunction* uFnShowHeroDebug = nullptr;

	if (!uFnShowHeroDebug)
	{
		uFnShowHeroDebug = UFunction::FindFunction("Function OLGame.OLCheatManager.ShowHeroDebug");
	}

	UOLCheatManager_execShowHeroDebug_Params ShowHeroDebug_Params;
	memset(&ShowHeroDebug_Params, 0, sizeof(ShowHeroDebug_Params));

	this->ProcessEvent(uFnShowHeroDebug, &ShowHeroDebug_Params, nullptr);
};

// Function OLGame.OLCheatManager.ShowOLProfiler
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ShowOLProfiler()
{
	static UFunction* uFnShowOLProfiler = nullptr;

	if (!uFnShowOLProfiler)
	{
		uFnShowOLProfiler = UFunction::FindFunction("Function OLGame.OLCheatManager.ShowOLProfiler");
	}

	UOLCheatManager_execShowOLProfiler_Params ShowOLProfiler_Params;
	memset(&ShowOLProfiler_Params, 0, sizeof(ShowOLProfiler_Params));

	this->ProcessEvent(uFnShowOLProfiler, &ShowOLProfiler_Params, nullptr);
};

// Function OLGame.OLCheatManager.ShowPerformance
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ShowPerformance()
{
	static UFunction* uFnShowPerformance = nullptr;

	if (!uFnShowPerformance)
	{
		uFnShowPerformance = UFunction::FindFunction("Function OLGame.OLCheatManager.ShowPerformance");
	}

	UOLCheatManager_execShowPerformance_Params ShowPerformance_Params;
	memset(&ShowPerformance_Params, 0, sizeof(ShowPerformance_Params));

	this->ProcessEvent(uFnShowPerformance, &ShowPerformance_Params, nullptr);
};

// Function OLGame.OLCheatManager.ShowCollisions
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ShowCollisions()
{
	static UFunction* uFnShowCollisions = nullptr;

	if (!uFnShowCollisions)
	{
		uFnShowCollisions = UFunction::FindFunction("Function OLGame.OLCheatManager.ShowCollisions");
	}

	UOLCheatManager_execShowCollisions_Params ShowCollisions_Params;
	memset(&ShowCollisions_Params, 0, sizeof(ShowCollisions_Params));

	this->ProcessEvent(uFnShowCollisions, &ShowCollisions_Params, nullptr);
};

// Function OLGame.OLCheatManager.ShowPaths
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ShowPaths()
{
	static UFunction* uFnShowPaths = nullptr;

	if (!uFnShowPaths)
	{
		uFnShowPaths = UFunction::FindFunction("Function OLGame.OLCheatManager.ShowPaths");
	}

	UOLCheatManager_execShowPaths_Params ShowPaths_Params;
	memset(&ShowPaths_Params, 0, sizeof(ShowPaths_Params));

	this->ProcessEvent(uFnShowPaths, &ShowPaths_Params, nullptr);
};

// Function OLGame.OLCheatManager.ShowStatLevels
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ShowStatLevels()
{
	static UFunction* uFnShowStatLevels = nullptr;

	if (!uFnShowStatLevels)
	{
		uFnShowStatLevels = UFunction::FindFunction("Function OLGame.OLCheatManager.ShowStatLevels");
	}

	UOLCheatManager_execShowStatLevels_Params ShowStatLevels_Params;
	memset(&ShowStatLevels_Params, 0, sizeof(ShowStatLevels_Params));

	this->ProcessEvent(uFnShowStatLevels, &ShowStatLevels_Params, nullptr);
};

// Function OLGame.OLCheatManager.DebugSubtitles
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::DebugSubtitles()
{
	static UFunction* uFnDebugSubtitles = nullptr;

	if (!uFnDebugSubtitles)
	{
		uFnDebugSubtitles = UFunction::FindFunction("Function OLGame.OLCheatManager.DebugSubtitles");
	}

	UOLCheatManager_execDebugSubtitles_Params DebugSubtitles_Params;
	memset(&DebugSubtitles_Params, 0, sizeof(DebugSubtitles_Params));

	this->ProcessEvent(uFnDebugSubtitles, &DebugSubtitles_Params, nullptr);
};

// Function OLGame.OLCheatManager.LogSoundEvents
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::LogSoundEvents()
{
	static UFunction* uFnLogSoundEvents = nullptr;

	if (!uFnLogSoundEvents)
	{
		uFnLogSoundEvents = UFunction::FindFunction("Function OLGame.OLCheatManager.LogSoundEvents");
	}

	UOLCheatManager_execLogSoundEvents_Params LogSoundEvents_Params;
	memset(&LogSoundEvents_Params, 0, sizeof(LogSoundEvents_Params));

	uFnLogSoundEvents->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnLogSoundEvents, &LogSoundEvents_Params, nullptr);
	uFnLogSoundEvents->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.DebugVO
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::DebugVO()
{
	static UFunction* uFnDebugVO = nullptr;

	if (!uFnDebugVO)
	{
		uFnDebugVO = UFunction::FindFunction("Function OLGame.OLCheatManager.DebugVO");
	}

	UOLCheatManager_execDebugVO_Params DebugVO_Params;
	memset(&DebugVO_Params, 0, sizeof(DebugVO_Params));

	this->ProcessEvent(uFnDebugVO, &DebugVO_Params, nullptr);
};

// Function OLGame.OLCheatManager.DebugGameState
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::DebugGameState()
{
	static UFunction* uFnDebugGameState = nullptr;

	if (!uFnDebugGameState)
	{
		uFnDebugGameState = UFunction::FindFunction("Function OLGame.OLCheatManager.DebugGameState");
	}

	UOLCheatManager_execDebugGameState_Params DebugGameState_Params;
	memset(&DebugGameState_Params, 0, sizeof(DebugGameState_Params));

	this->ProcessEvent(uFnDebugGameState, &DebugGameState_Params, nullptr);
};

// Function OLGame.OLCheatManager.DebugAIConfig
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::DebugAIConfig()
{
	static UFunction* uFnDebugAIConfig = nullptr;

	if (!uFnDebugAIConfig)
	{
		uFnDebugAIConfig = UFunction::FindFunction("Function OLGame.OLCheatManager.DebugAIConfig");
	}

	UOLCheatManager_execDebugAIConfig_Params DebugAIConfig_Params;
	memset(&DebugAIConfig_Params, 0, sizeof(DebugAIConfig_Params));

	this->ProcessEvent(uFnDebugAIConfig, &DebugAIConfig_Params, nullptr);
};

// Function OLGame.OLCheatManager.SlowStreaming
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::SlowStreaming()
{
	static UFunction* uFnSlowStreaming = nullptr;

	if (!uFnSlowStreaming)
	{
		uFnSlowStreaming = UFunction::FindFunction("Function OLGame.OLCheatManager.SlowStreaming");
	}

	UOLCheatManager_execSlowStreaming_Params SlowStreaming_Params;
	memset(&SlowStreaming_Params, 0, sizeof(SlowStreaming_Params));

	this->ProcessEvent(uFnSlowStreaming, &SlowStreaming_Params, nullptr);
};

// Function OLGame.OLCheatManager.DebugAIAnims
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::DebugAIAnims()
{
	static UFunction* uFnDebugAIAnims = nullptr;

	if (!uFnDebugAIAnims)
	{
		uFnDebugAIAnims = UFunction::FindFunction("Function OLGame.OLCheatManager.DebugAIAnims");
	}

	UOLCheatManager_execDebugAIAnims_Params DebugAIAnims_Params;
	memset(&DebugAIAnims_Params, 0, sizeof(DebugAIAnims_Params));

	this->ProcessEvent(uFnDebugAIAnims, &DebugAIAnims_Params, nullptr);
};

// Function OLGame.OLCheatManager.DebugInvestigation
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::DebugInvestigation()
{
	static UFunction* uFnDebugInvestigation = nullptr;

	if (!uFnDebugInvestigation)
	{
		uFnDebugInvestigation = UFunction::FindFunction("Function OLGame.OLCheatManager.DebugInvestigation");
	}

	UOLCheatManager_execDebugInvestigation_Params DebugInvestigation_Params;
	memset(&DebugInvestigation_Params, 0, sizeof(DebugInvestigation_Params));

	this->ProcessEvent(uFnDebugInvestigation, &DebugInvestigation_Params, nullptr);
};

// Function OLGame.OLCheatManager.DebugClearance
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::DebugClearance()
{
	static UFunction* uFnDebugClearance = nullptr;

	if (!uFnDebugClearance)
	{
		uFnDebugClearance = UFunction::FindFunction("Function OLGame.OLCheatManager.DebugClearance");
	}

	UOLCheatManager_execDebugClearance_Params DebugClearance_Params;
	memset(&DebugClearance_Params, 0, sizeof(DebugClearance_Params));

	this->ProcessEvent(uFnDebugClearance, &DebugClearance_Params, nullptr);
};

// Function OLGame.OLCheatManager.DebugSoundMeter
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::DebugSoundMeter()
{
	static UFunction* uFnDebugSoundMeter = nullptr;

	if (!uFnDebugSoundMeter)
	{
		uFnDebugSoundMeter = UFunction::FindFunction("Function OLGame.OLCheatManager.DebugSoundMeter");
	}

	UOLCheatManager_execDebugSoundMeter_Params DebugSoundMeter_Params;
	memset(&DebugSoundMeter_Params, 0, sizeof(DebugSoundMeter_Params));

	this->ProcessEvent(uFnDebugSoundMeter, &DebugSoundMeter_Params, nullptr);
};

// Function OLGame.OLCheatManager.ShowPrecomputedLightVolumes
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ShowPrecomputedLightVolumes()
{
	static UFunction* uFnShowPrecomputedLightVolumes = nullptr;

	if (!uFnShowPrecomputedLightVolumes)
	{
		uFnShowPrecomputedLightVolumes = UFunction::FindFunction("Function OLGame.OLCheatManager.ShowPrecomputedLightVolumes");
	}

	UOLCheatManager_execShowPrecomputedLightVolumes_Params ShowPrecomputedLightVolumes_Params;
	memset(&ShowPrecomputedLightVolumes_Params, 0, sizeof(ShowPrecomputedLightVolumes_Params));

	this->ProcessEvent(uFnShowPrecomputedLightVolumes, &ShowPrecomputedLightVolumes_Params, nullptr);
};

// Function OLGame.OLCheatManager.DebugTrajectory
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::DebugTrajectory()
{
	static UFunction* uFnDebugTrajectory = nullptr;

	if (!uFnDebugTrajectory)
	{
		uFnDebugTrajectory = UFunction::FindFunction("Function OLGame.OLCheatManager.DebugTrajectory");
	}

	UOLCheatManager_execDebugTrajectory_Params DebugTrajectory_Params;
	memset(&DebugTrajectory_Params, 0, sizeof(DebugTrajectory_Params));

	this->ProcessEvent(uFnDebugTrajectory, &DebugTrajectory_Params, nullptr);
};

// Function OLGame.OLCheatManager.DebugKismet
// [0x00024202] (FUNC_Defined | FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Filter                         (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)

void UOLCheatManager::DebugKismet(class FString Filter)
{
	static UFunction* uFnDebugKismet = nullptr;

	if (!uFnDebugKismet)
	{
		uFnDebugKismet = UFunction::FindFunction("Function OLGame.OLCheatManager.DebugKismet");
	}

	UOLCheatManager_execDebugKismet_Params DebugKismet_Params;
	memset(&DebugKismet_Params, 0, sizeof(DebugKismet_Params));
	memcpy_s(&DebugKismet_Params.Filter, sizeof(DebugKismet_Params.Filter), &Filter, sizeof(Filter));

	this->ProcessEvent(uFnDebugKismet, &DebugKismet_Params, nullptr);
};

// Function OLGame.OLCheatManager.DebugCamera
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::DebugCamera()
{
	static UFunction* uFnDebugCamera = nullptr;

	if (!uFnDebugCamera)
	{
		uFnDebugCamera = UFunction::FindFunction("Function OLGame.OLCheatManager.DebugCamera");
	}

	UOLCheatManager_execDebugCamera_Params DebugCamera_Params;
	memset(&DebugCamera_Params, 0, sizeof(DebugCamera_Params));

	this->ProcessEvent(uFnDebugCamera, &DebugCamera_Params, nullptr);
};

// Function OLGame.OLCheatManager.DebugLineChecks
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::DebugLineChecks()
{
	static UFunction* uFnDebugLineChecks = nullptr;

	if (!uFnDebugLineChecks)
	{
		uFnDebugLineChecks = UFunction::FindFunction("Function OLGame.OLCheatManager.DebugLineChecks");
	}

	UOLCheatManager_execDebugLineChecks_Params DebugLineChecks_Params;
	memset(&DebugLineChecks_Params, 0, sizeof(DebugLineChecks_Params));

	uFnDebugLineChecks->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDebugLineChecks, &DebugLineChecks_Params, nullptr);
	uFnDebugLineChecks->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.DumpKismetLog
// [0x00024600] (FUNC_Exec | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Filter                         (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)

void UOLCheatManager::DumpKismetLog(class FString Filter)
{
	static UFunction* uFnDumpKismetLog = nullptr;

	if (!uFnDumpKismetLog)
	{
		uFnDumpKismetLog = UFunction::FindFunction("Function OLGame.OLCheatManager.DumpKismetLog");
	}

	UOLCheatManager_execDumpKismetLog_Params DumpKismetLog_Params;
	memset(&DumpKismetLog_Params, 0, sizeof(DumpKismetLog_Params));
	memcpy_s(&DumpKismetLog_Params.Filter, sizeof(DumpKismetLog_Params.Filter), &Filter, sizeof(Filter));

	uFnDumpKismetLog->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDumpKismetLog, &DumpKismetLog_Params, nullptr);
	uFnDumpKismetLog->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.DebugSoundEnvironment
// [0x00024600] (FUNC_Exec | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Filter                         (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)

void UOLCheatManager::DebugSoundEnvironment(class FString Filter)
{
	static UFunction* uFnDebugSoundEnvironment = nullptr;

	if (!uFnDebugSoundEnvironment)
	{
		uFnDebugSoundEnvironment = UFunction::FindFunction("Function OLGame.OLCheatManager.DebugSoundEnvironment");
	}

	UOLCheatManager_execDebugSoundEnvironment_Params DebugSoundEnvironment_Params;
	memset(&DebugSoundEnvironment_Params, 0, sizeof(DebugSoundEnvironment_Params));
	memcpy_s(&DebugSoundEnvironment_Params.Filter, sizeof(DebugSoundEnvironment_Params.Filter), &Filter, sizeof(Filter));

	uFnDebugSoundEnvironment->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDebugSoundEnvironment, &DebugSoundEnvironment_Params, nullptr);
	uFnDebugSoundEnvironment->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.DebugGameplay
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::DebugGameplay()
{
	static UFunction* uFnDebugGameplay = nullptr;

	if (!uFnDebugGameplay)
	{
		uFnDebugGameplay = UFunction::FindFunction("Function OLGame.OLCheatManager.DebugGameplay");
	}

	UOLCheatManager_execDebugGameplay_Params DebugGameplay_Params;
	memset(&DebugGameplay_Params, 0, sizeof(DebugGameplay_Params));

	uFnDebugGameplay->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDebugGameplay, &DebugGameplay_Params, nullptr);
	uFnDebugGameplay->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.SaveAllCheckpoints
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::SaveAllCheckpoints()
{
	static UFunction* uFnSaveAllCheckpoints = nullptr;

	if (!uFnSaveAllCheckpoints)
	{
		uFnSaveAllCheckpoints = UFunction::FindFunction("Function OLGame.OLCheatManager.SaveAllCheckpoints");
	}

	UOLCheatManager_execSaveAllCheckpoints_Params SaveAllCheckpoints_Params;
	memset(&SaveAllCheckpoints_Params, 0, sizeof(SaveAllCheckpoints_Params));

	uFnSaveAllCheckpoints->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSaveAllCheckpoints, &SaveAllCheckpoints_Params, nullptr);
	uFnSaveAllCheckpoints->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.DeleteAllSaves
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::DeleteAllSaves()
{
	static UFunction* uFnDeleteAllSaves = nullptr;

	if (!uFnDeleteAllSaves)
	{
		uFnDeleteAllSaves = UFunction::FindFunction("Function OLGame.OLCheatManager.DeleteAllSaves");
	}

	UOLCheatManager_execDeleteAllSaves_Params DeleteAllSaves_Params;
	memset(&DeleteAllSaves_Params, 0, sizeof(DeleteAllSaves_Params));

	uFnDeleteAllSaves->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDeleteAllSaves, &DeleteAllSaves_Params, nullptr);
	uFnDeleteAllSaves->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.KillAll
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UClass*                  aClass                         (CPF_Parm)

void UOLCheatManager::KillAll(class UClass* aClass)
{
	static UFunction* uFnKillAll = nullptr;

	if (!uFnKillAll)
	{
		uFnKillAll = UFunction::FindFunction("Function OLGame.OLCheatManager.KillAll");
	}

	UOLCheatManager_execKillAll_Params KillAll_Params;
	memset(&KillAll_Params, 0, sizeof(KillAll_Params));
	memcpy_s(&KillAll_Params.aClass, sizeof(KillAll_Params.aClass), &aClass, sizeof(aClass));

	this->ProcessEvent(uFnKillAll, &KillAll_Params, nullptr);
};

// Function OLGame.OLCheatManager.God
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::God()
{
	static UFunction* uFnGod = nullptr;

	if (!uFnGod)
	{
		uFnGod = UFunction::FindFunction("Function OLGame.OLCheatManager.God");
	}

	UOLCheatManager_execGod_Params God_Params;
	memset(&God_Params, 0, sizeof(God_Params));

	uFnGod->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGod, &God_Params, nullptr);
	uFnGod->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheatManager.TakeScreenshot
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::TakeScreenshot()
{
	static UFunction* uFnTakeScreenshot = nullptr;

	if (!uFnTakeScreenshot)
	{
		uFnTakeScreenshot = UFunction::FindFunction("Function OLGame.OLCheatManager.TakeScreenshot");
	}

	UOLCheatManager_execTakeScreenshot_Params TakeScreenshot_Params;
	memset(&TakeScreenshot_Params, 0, sizeof(TakeScreenshot_Params));

	this->ProcessEvent(uFnTakeScreenshot, &TakeScreenshot_Params, nullptr);
};

// Function OLGame.OLCheatManager.CycleCollisionView
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::CycleCollisionView()
{
	static UFunction* uFnCycleCollisionView = nullptr;

	if (!uFnCycleCollisionView)
	{
		uFnCycleCollisionView = UFunction::FindFunction("Function OLGame.OLCheatManager.CycleCollisionView");
	}

	UOLCheatManager_execCycleCollisionView_Params CycleCollisionView_Params;
	memset(&CycleCollisionView_Params, 0, sizeof(CycleCollisionView_Params));

	this->ProcessEvent(uFnCycleCollisionView, &CycleCollisionView_Params, nullptr);
};

// Function OLGame.OLCheatManager.ViewShaderComplexity
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ViewShaderComplexity()
{
	static UFunction* uFnViewShaderComplexity = nullptr;

	if (!uFnViewShaderComplexity)
	{
		uFnViewShaderComplexity = UFunction::FindFunction("Function OLGame.OLCheatManager.ViewShaderComplexity");
	}

	UOLCheatManager_execViewShaderComplexity_Params ViewShaderComplexity_Params;
	memset(&ViewShaderComplexity_Params, 0, sizeof(ViewShaderComplexity_Params));

	this->ProcessEvent(uFnViewShaderComplexity, &ViewShaderComplexity_Params, nullptr);
};

// Function OLGame.OLCheatManager.ViewDetailLighting
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ViewDetailLighting()
{
	static UFunction* uFnViewDetailLighting = nullptr;

	if (!uFnViewDetailLighting)
	{
		uFnViewDetailLighting = UFunction::FindFunction("Function OLGame.OLCheatManager.ViewDetailLighting");
	}

	UOLCheatManager_execViewDetailLighting_Params ViewDetailLighting_Params;
	memset(&ViewDetailLighting_Params, 0, sizeof(ViewDetailLighting_Params));

	this->ProcessEvent(uFnViewDetailLighting, &ViewDetailLighting_Params, nullptr);
};

// Function OLGame.OLCheatManager.ViewLit
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ViewLit()
{
	static UFunction* uFnViewLit = nullptr;

	if (!uFnViewLit)
	{
		uFnViewLit = UFunction::FindFunction("Function OLGame.OLCheatManager.ViewLit");
	}

	UOLCheatManager_execViewLit_Params ViewLit_Params;
	memset(&ViewLit_Params, 0, sizeof(ViewLit_Params));

	this->ProcessEvent(uFnViewLit, &ViewLit_Params, nullptr);
};

// Function OLGame.OLCheatManager.ViewUnlit
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ViewUnlit()
{
	static UFunction* uFnViewUnlit = nullptr;

	if (!uFnViewUnlit)
	{
		uFnViewUnlit = UFunction::FindFunction("Function OLGame.OLCheatManager.ViewUnlit");
	}

	UOLCheatManager_execViewUnlit_Params ViewUnlit_Params;
	memset(&ViewUnlit_Params, 0, sizeof(ViewUnlit_Params));

	this->ProcessEvent(uFnViewUnlit, &ViewUnlit_Params, nullptr);
};

// Function OLGame.OLCheatManager.ViewWireframe
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ViewWireframe()
{
	static UFunction* uFnViewWireframe = nullptr;

	if (!uFnViewWireframe)
	{
		uFnViewWireframe = UFunction::FindFunction("Function OLGame.OLCheatManager.ViewWireframe");
	}

	UOLCheatManager_execViewWireframe_Params ViewWireframe_Params;
	memset(&ViewWireframe_Params, 0, sizeof(ViewWireframe_Params));

	this->ProcessEvent(uFnViewWireframe, &ViewWireframe_Params, nullptr);
};

// Function OLGame.OLCheatManager.ToggleGamepadCheats
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ToggleGamepadCheats()
{
	static UFunction* uFnToggleGamepadCheats = nullptr;

	if (!uFnToggleGamepadCheats)
	{
		uFnToggleGamepadCheats = UFunction::FindFunction("Function OLGame.OLCheatManager.ToggleGamepadCheats");
	}

	UOLCheatManager_execToggleGamepadCheats_Params ToggleGamepadCheats_Params;
	memset(&ToggleGamepadCheats_Params, 0, sizeof(ToggleGamepadCheats_Params));

	this->ProcessEvent(uFnToggleGamepadCheats, &ToggleGamepadCheats_Params, nullptr);
};

// Function OLGame.OLCheatManager.ToggleCheats
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLCheatManager::ToggleCheats()
{
	static UFunction* uFnToggleCheats = nullptr;

	if (!uFnToggleCheats)
	{
		uFnToggleCheats = UFunction::FindFunction("Function OLGame.OLCheatManager.ToggleCheats");
	}

	UOLCheatManager_execToggleCheats_Params ToggleCheats_Params;
	memset(&ToggleCheats_Params, 0, sizeof(ToggleCheats_Params));

	this->ProcessEvent(uFnToggleCheats, &ToggleCheats_Params, nullptr);
};

// Function OLGame.OLCheatManager.CheatMessage
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Message                        (CPF_Parm | CPF_NeedCtorLink)

void UOLCheatManager::eventCheatMessage(class FString Message)
{
	static UFunction* uFnCheatMessage = nullptr;

	if (!uFnCheatMessage)
	{
		uFnCheatMessage = UFunction::FindFunction("Function OLGame.OLCheatManager.CheatMessage");
	}

	UOLCheatManager_eventCheatMessage_Params CheatMessage_Params;
	memset(&CheatMessage_Params, 0, sizeof(CheatMessage_Params));
	memcpy_s(&CheatMessage_Params.Message, sizeof(CheatMessage_Params.Message), &Message, sizeof(Message));

	this->ProcessEvent(uFnCheatMessage, &CheatMessage_Params, nullptr);
};

// Function OLGame.OLCheatManager.GetCheatManager
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLCheatManager*         ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UOLCheatManager* UOLCheatManager::GetCheatManager()
{
	static UFunction* uFnGetCheatManager = nullptr;

	if (!uFnGetCheatManager)
	{
		uFnGetCheatManager = UFunction::FindFunction("Function OLGame.OLCheatManager.GetCheatManager");
	}

	UOLCheatManager_execGetCheatManager_Params GetCheatManager_Params;
	memset(&GetCheatManager_Params, 0, sizeof(GetCheatManager_Params));

	uFnGetCheatManager->FunctionFlags &= ~0x400;
	UOLCheatManager::StaticClass()->ProcessEvent(uFnGetCheatManager, &GetCheatManager_Params, nullptr);
	uFnGetCheatManager->FunctionFlags |= 0x400;

	return GetCheatManager_Params.ReturnValue;
};

// Function OLGame.OLCheckpoint.OnPlayerSpawn
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLCheckpoint::OnPlayerSpawn()
{
	static UFunction* uFnOnPlayerSpawn = nullptr;

	if (!uFnOnPlayerSpawn)
	{
		uFnOnPlayerSpawn = UFunction::FindFunction("Function OLGame.OLCheckpoint.OnPlayerSpawn");
	}

	AOLCheckpoint_execOnPlayerSpawn_Params OnPlayerSpawn_Params;
	memset(&OnPlayerSpawn_Params, 0, sizeof(OnPlayerSpawn_Params));

	uFnOnPlayerSpawn->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnOnPlayerSpawn, &OnPlayerSpawn_Params, nullptr);
	uFnOnPlayerSpawn->FunctionFlags |= 0x400;
};

// Function OLGame.OLCheckpointList.Script_IsUnreached
// [0x00422400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   TestCheckpoint                 (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FName                   CurrentCheckpoint              (CPF_Const | CPF_Parm | CPF_OutParm)

bool AOLCheckpointList::Script_IsUnreached(struct FName& TestCheckpoint, struct FName& CurrentCheckpoint)
{
	static UFunction* uFnScript_IsUnreached = nullptr;

	if (!uFnScript_IsUnreached)
	{
		uFnScript_IsUnreached = UFunction::FindFunction("Function OLGame.OLCheckpointList.Script_IsUnreached");
	}

	AOLCheckpointList_execScript_IsUnreached_Params Script_IsUnreached_Params;
	memset(&Script_IsUnreached_Params, 0, sizeof(Script_IsUnreached_Params));
	memcpy_s(&Script_IsUnreached_Params.TestCheckpoint, sizeof(Script_IsUnreached_Params.TestCheckpoint), &TestCheckpoint, sizeof(TestCheckpoint));
	memcpy_s(&Script_IsUnreached_Params.CurrentCheckpoint, sizeof(Script_IsUnreached_Params.CurrentCheckpoint), &CurrentCheckpoint, sizeof(CurrentCheckpoint));

	uFnScript_IsUnreached->FunctionFlags &= ~0x400;
	AOLCheckpointList::StaticClass()->ProcessEvent(uFnScript_IsUnreached, &Script_IsUnreached_Params, nullptr);
	uFnScript_IsUnreached->FunctionFlags |= 0x400;

	memcpy_s(&TestCheckpoint, sizeof(TestCheckpoint), &Script_IsUnreached_Params.TestCheckpoint, sizeof(Script_IsUnreached_Params.TestCheckpoint));
	memcpy_s(&CurrentCheckpoint, sizeof(CurrentCheckpoint), &Script_IsUnreached_Params.CurrentCheckpoint, sizeof(Script_IsUnreached_Params.CurrentCheckpoint));

	return Script_IsUnreached_Params.ReturnValue;
};

// Function OLGame.OLConsole.InputKey
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// struct FName                   Key                            (CPF_Parm)
// EInputEvent                    Event                          (CPF_Parm)
// float                          AmountDepressed                (CPF_OptionalParm | CPF_Parm)
// bool                           bGamepad                       (CPF_OptionalParm | CPF_Parm)

bool UOLConsole::InputKey(int32_t ControllerId, struct FName Key, EInputEvent Event, float AmountDepressed, bool bGamepad)
{
	static UFunction* uFnInputKey = nullptr;

	if (!uFnInputKey)
	{
		uFnInputKey = UFunction::FindFunction("Function OLGame.OLConsole.InputKey");
	}

	UOLConsole_execInputKey_Params InputKey_Params;
	memset(&InputKey_Params, 0, sizeof(InputKey_Params));
	memcpy_s(&InputKey_Params.ControllerId, sizeof(InputKey_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&InputKey_Params.Key, sizeof(InputKey_Params.Key), &Key, sizeof(Key));
	memcpy_s(&InputKey_Params.Event, sizeof(InputKey_Params.Event), &Event, sizeof(Event));
	memcpy_s(&InputKey_Params.AmountDepressed, sizeof(InputKey_Params.AmountDepressed), &AmountDepressed, sizeof(AmountDepressed));
	InputKey_Params.bGamepad = bGamepad;

	this->ProcessEvent(uFnInputKey, &InputKey_Params, nullptr);

	return InputKey_Params.ReturnValue;
};

// Function OLGame.OLConsole.AddCustomCommandsToAutoComplete
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLConsole::AddCustomCommandsToAutoComplete()
{
	static UFunction* uFnAddCustomCommandsToAutoComplete = nullptr;

	if (!uFnAddCustomCommandsToAutoComplete)
	{
		uFnAddCustomCommandsToAutoComplete = UFunction::FindFunction("Function OLGame.OLConsole.AddCustomCommandsToAutoComplete");
	}

	UOLConsole_execAddCustomCommandsToAutoComplete_Params AddCustomCommandsToAutoComplete_Params;
	memset(&AddCustomCommandsToAutoComplete_Params, 0, sizeof(AddCustomCommandsToAutoComplete_Params));

	uFnAddCustomCommandsToAutoComplete->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAddCustomCommandsToAutoComplete, &AddCustomCommandsToAutoComplete_Params, nullptr);
	uFnAddCustomCommandsToAutoComplete->FunctionFlags |= 0x400;
};

// Function OLGame.OLDamageActor.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AOLDamageActor::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function OLGame.OLDamageActor.OnToggle");
	}

	AOLDamageActor_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	memcpy_s(&OnToggle_Params.Action, sizeof(OnToggle_Params.Action), &Action, sizeof(Action));

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function OLGame.OLDLCManager.FindAndInstallDLC
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLDLCManager::FindAndInstallDLC()
{
	static UFunction* uFnFindAndInstallDLC = nullptr;

	if (!uFnFindAndInstallDLC)
	{
		uFnFindAndInstallDLC = UFunction::FindFunction("Function OLGame.OLDLCManager.FindAndInstallDLC");
	}

	UOLDLCManager_execFindAndInstallDLC_Params FindAndInstallDLC_Params;
	memset(&FindAndInstallDLC_Params, 0, sizeof(FindAndInstallDLC_Params));

	uFnFindAndInstallDLC->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindAndInstallDLC, &FindAndInstallDLC_Params, nullptr);
	uFnFindAndInstallDLC->FunctionFlags |= 0x400;

	return FindAndInstallDLC_Params.ReturnValue;
};

// Function OLGame.OLDoor.BreakDoor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AOLPawn*                 Breaker                        (CPF_Parm)
// bool                           bReversed                      (CPF_Parm)
// bool                           bNoSound                       (CPF_Parm)

void AOLDoor::BreakDoor(class AOLPawn* Breaker, bool bReversed, bool bNoSound)
{
	static UFunction* uFnBreakDoor = nullptr;

	if (!uFnBreakDoor)
	{
		uFnBreakDoor = UFunction::FindFunction("Function OLGame.OLDoor.BreakDoor");
	}

	AOLDoor_execBreakDoor_Params BreakDoor_Params;
	memset(&BreakDoor_Params, 0, sizeof(BreakDoor_Params));
	memcpy_s(&BreakDoor_Params.Breaker, sizeof(BreakDoor_Params.Breaker), &Breaker, sizeof(Breaker));
	BreakDoor_Params.bReversed = bReversed;
	BreakDoor_Params.bNoSound = bNoSound;

	uFnBreakDoor->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBreakDoor, &BreakDoor_Params, nullptr);
	uFnBreakDoor->FunctionFlags |= 0x400;
};

// Function OLGame.OLDoor.BashDoor
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bReversed                      (CPF_Parm)

void AOLDoor::eventBashDoor(bool bReversed)
{
	static UFunction* uFnBashDoor = nullptr;

	if (!uFnBashDoor)
	{
		uFnBashDoor = UFunction::FindFunction("Function OLGame.OLDoor.BashDoor");
	}

	AOLDoor_eventBashDoor_Params BashDoor_Params;
	memset(&BashDoor_Params, 0, sizeof(BashDoor_Params));
	BashDoor_Params.bReversed = bReversed;

	this->ProcessEvent(uFnBashDoor, &BashDoor_Params, nullptr);
};

// Function OLGame.OLDoor.ShouldBreak
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AOLBot*                  Bot                            (CPF_Parm)

bool AOLDoor::eventShouldBreak(class AOLBot* Bot)
{
	static UFunction* uFnShouldBreak = nullptr;

	if (!uFnShouldBreak)
	{
		uFnShouldBreak = UFunction::FindFunction("Function OLGame.OLDoor.ShouldBreak");
	}

	AOLDoor_eventShouldBreak_Params ShouldBreak_Params;
	memset(&ShouldBreak_Params, 0, sizeof(ShouldBreak_Params));
	memcpy_s(&ShouldBreak_Params.Bot, sizeof(ShouldBreak_Params.Bot), &Bot, sizeof(Bot));

	this->ProcessEvent(uFnShouldBreak, &ShouldBreak_Params, nullptr);

	return ShouldBreak_Params.ReturnValue;
};

// Function OLGame.OLDoor.InterpolationFinished
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Interp*          InterpAction                   (CPF_Parm)

void AOLDoor::eventInterpolationFinished(class USeqAct_Interp* InterpAction)
{
	static UFunction* uFnInterpolationFinished = nullptr;

	if (!uFnInterpolationFinished)
	{
		uFnInterpolationFinished = UFunction::FindFunction("Function OLGame.OLDoor.InterpolationFinished");
	}

	AOLDoor_eventInterpolationFinished_Params InterpolationFinished_Params;
	memset(&InterpolationFinished_Params, 0, sizeof(InterpolationFinished_Params));
	memcpy_s(&InterpolationFinished_Params.InterpAction, sizeof(InterpolationFinished_Params.InterpAction), &InterpAction, sizeof(InterpAction));

	this->ProcessEvent(uFnInterpolationFinished, &InterpolationFinished_Params, nullptr);
};

// Function OLGame.OLDoor.InterpolationStarted
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Interp*          InterpAction                   (CPF_Parm)
// class UInterpGroupInst*        GroupInst                      (CPF_Parm)

void AOLDoor::eventInterpolationStarted(class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst)
{
	static UFunction* uFnInterpolationStarted = nullptr;

	if (!uFnInterpolationStarted)
	{
		uFnInterpolationStarted = UFunction::FindFunction("Function OLGame.OLDoor.InterpolationStarted");
	}

	AOLDoor_eventInterpolationStarted_Params InterpolationStarted_Params;
	memset(&InterpolationStarted_Params, 0, sizeof(InterpolationStarted_Params));
	memcpy_s(&InterpolationStarted_Params.InterpAction, sizeof(InterpolationStarted_Params.InterpAction), &InterpAction, sizeof(InterpAction));
	memcpy_s(&InterpolationStarted_Params.GroupInst, sizeof(InterpolationStarted_Params.GroupInst), &GroupInst, sizeof(GroupInst));

	this->ProcessEvent(uFnInterpolationStarted, &InterpolationStarted_Params, nullptr);
};

// Function OLGame.OLDoor.StopMatineeAnim
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bHeroTriggered                 (CPF_Parm)

void AOLDoor::StopMatineeAnim(bool bHeroTriggered)
{
	static UFunction* uFnStopMatineeAnim = nullptr;

	if (!uFnStopMatineeAnim)
	{
		uFnStopMatineeAnim = UFunction::FindFunction("Function OLGame.OLDoor.StopMatineeAnim");
	}

	AOLDoor_execStopMatineeAnim_Params StopMatineeAnim_Params;
	memset(&StopMatineeAnim_Params, 0, sizeof(StopMatineeAnim_Params));
	StopMatineeAnim_Params.bHeroTriggered = bHeroTriggered;

	uFnStopMatineeAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStopMatineeAnim, &StopMatineeAnim_Params, nullptr);
	uFnStopMatineeAnim->FunctionFlags |= 0x400;
};

// Function OLGame.OLDoor.StartMatineeAnim
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bLooping                       (CPF_Parm)

void AOLDoor::StartMatineeAnim(bool bLooping)
{
	static UFunction* uFnStartMatineeAnim = nullptr;

	if (!uFnStartMatineeAnim)
	{
		uFnStartMatineeAnim = UFunction::FindFunction("Function OLGame.OLDoor.StartMatineeAnim");
	}

	AOLDoor_execStartMatineeAnim_Params StartMatineeAnim_Params;
	memset(&StartMatineeAnim_Params, 0, sizeof(StartMatineeAnim_Params));
	StartMatineeAnim_Params.bLooping = bLooping;

	uFnStartMatineeAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStartMatineeAnim, &StartMatineeAnim_Params, nullptr);
	uFnStartMatineeAnim->FunctionFlags |= 0x400;
};

// Function OLGame.OLDoor.OnDestroy
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Destroy*         Action                         (CPF_Parm)

void AOLDoor::OnDestroy(class USeqAct_Destroy* Action)
{
	static UFunction* uFnOnDestroy = nullptr;

	if (!uFnOnDestroy)
	{
		uFnOnDestroy = UFunction::FindFunction("Function OLGame.OLDoor.OnDestroy");
	}

	AOLDoor_execOnDestroy_Params OnDestroy_Params;
	memset(&OnDestroy_Params, 0, sizeof(OnDestroy_Params));
	memcpy_s(&OnDestroy_Params.Action, sizeof(OnDestroy_Params.Action), &Action, sizeof(Action));

	this->ProcessEvent(uFnOnDestroy, &OnDestroy_Params, nullptr);
};

// Function OLGame.OLDoor.SoftDestroy
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLDoor::SoftDestroy()
{
	static UFunction* uFnSoftDestroy = nullptr;

	if (!uFnSoftDestroy)
	{
		uFnSoftDestroy = UFunction::FindFunction("Function OLGame.OLDoor.SoftDestroy");
	}

	AOLDoor_execSoftDestroy_Params SoftDestroy_Params;
	memset(&SoftDestroy_Params, 0, sizeof(SoftDestroy_Params));

	uFnSoftDestroy->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSoftDestroy, &SoftDestroy_Params, nullptr);
	uFnSoftDestroy->FunctionFlags |= 0x400;
};

// Function OLGame.OLDoor.NotifyHandlesToWait
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLDoor::NotifyHandlesToWait()
{
	static UFunction* uFnNotifyHandlesToWait = nullptr;

	if (!uFnNotifyHandlesToWait)
	{
		uFnNotifyHandlesToWait = UFunction::FindFunction("Function OLGame.OLDoor.NotifyHandlesToWait");
	}

	AOLDoor_execNotifyHandlesToWait_Params NotifyHandlesToWait_Params;
	memset(&NotifyHandlesToWait_Params, 0, sizeof(NotifyHandlesToWait_Params));

	uFnNotifyHandlesToWait->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNotifyHandlesToWait, &NotifyHandlesToWait_Params, nullptr);
	uFnNotifyHandlesToWait->FunctionFlags |= 0x400;
};

// Function OLGame.OLDoor.NotifyHandlesToRepath
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLDoor::NotifyHandlesToRepath()
{
	static UFunction* uFnNotifyHandlesToRepath = nullptr;

	if (!uFnNotifyHandlesToRepath)
	{
		uFnNotifyHandlesToRepath = UFunction::FindFunction("Function OLGame.OLDoor.NotifyHandlesToRepath");
	}

	AOLDoor_execNotifyHandlesToRepath_Params NotifyHandlesToRepath_Params;
	memset(&NotifyHandlesToRepath_Params, 0, sizeof(NotifyHandlesToRepath_Params));

	uFnNotifyHandlesToRepath->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNotifyHandlesToRepath, &NotifyHandlesToRepath_Params, nullptr);
	uFnNotifyHandlesToRepath->FunctionFlags |= 0x400;
};

// Function OLGame.OLDoor.ForcePushBlockingHero
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLDoor::ForcePushBlockingHero()
{
	static UFunction* uFnForcePushBlockingHero = nullptr;

	if (!uFnForcePushBlockingHero)
	{
		uFnForcePushBlockingHero = UFunction::FindFunction("Function OLGame.OLDoor.ForcePushBlockingHero");
	}

	AOLDoor_execForcePushBlockingHero_Params ForcePushBlockingHero_Params;
	memset(&ForcePushBlockingHero_Params, 0, sizeof(ForcePushBlockingHero_Params));

	uFnForcePushBlockingHero->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnForcePushBlockingHero, &ForcePushBlockingHero_Params, nullptr);
	uFnForcePushBlockingHero->FunctionFlags |= 0x400;
};

// Function OLGame.OLDoor.FastOpen
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AOLPawn*                 OpeningPawn                    (CPF_Parm)

void AOLDoor::FastOpen(class AOLPawn* OpeningPawn)
{
	static UFunction* uFnFastOpen = nullptr;

	if (!uFnFastOpen)
	{
		uFnFastOpen = UFunction::FindFunction("Function OLGame.OLDoor.FastOpen");
	}

	AOLDoor_execFastOpen_Params FastOpen_Params;
	memset(&FastOpen_Params, 0, sizeof(FastOpen_Params));
	memcpy_s(&FastOpen_Params.OpeningPawn, sizeof(FastOpen_Params.OpeningPawn), &OpeningPawn, sizeof(OpeningPawn));

	uFnFastOpen->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFastOpen, &FastOpen_Params, nullptr);
	uFnFastOpen->FunctionFlags |= 0x400;
};

// Function OLGame.OLDoor.IsOnPullSide
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 TestLocation                   (CPF_Const | CPF_Parm | CPF_OutParm)

bool AOLDoor::IsOnPullSide(struct FVector& TestLocation)
{
	static UFunction* uFnIsOnPullSide = nullptr;

	if (!uFnIsOnPullSide)
	{
		uFnIsOnPullSide = UFunction::FindFunction("Function OLGame.OLDoor.IsOnPullSide");
	}

	AOLDoor_execIsOnPullSide_Params IsOnPullSide_Params;
	memset(&IsOnPullSide_Params, 0, sizeof(IsOnPullSide_Params));
	memcpy_s(&IsOnPullSide_Params.TestLocation, sizeof(IsOnPullSide_Params.TestLocation), &TestLocation, sizeof(TestLocation));

	uFnIsOnPullSide->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsOnPullSide, &IsOnPullSide_Params, nullptr);
	uFnIsOnPullSide->FunctionFlags |= 0x400;

	memcpy_s(&TestLocation, sizeof(TestLocation), &IsOnPullSide_Params.TestLocation, sizeof(IsOnPullSide_Params.TestLocation));

	return IsOnPullSide_Params.ReturnValue;
};

// Function OLGame.OLDoor.GetOpenAngle
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float AOLDoor::GetOpenAngle()
{
	static UFunction* uFnGetOpenAngle = nullptr;

	if (!uFnGetOpenAngle)
	{
		uFnGetOpenAngle = UFunction::FindFunction("Function OLGame.OLDoor.GetOpenAngle");
	}

	AOLDoor_execGetOpenAngle_Params GetOpenAngle_Params;
	memset(&GetOpenAngle_Params, 0, sizeof(GetOpenAngle_Params));

	uFnGetOpenAngle->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetOpenAngle, &GetOpenAngle_Params, nullptr);
	uFnGetOpenAngle->FunctionFlags |= 0x400;

	return GetOpenAngle_Params.ReturnValue;
};

// Function OLGame.OLDoor.OnStateChanged
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLDoor::OnStateChanged()
{
	static UFunction* uFnOnStateChanged = nullptr;

	if (!uFnOnStateChanged)
	{
		uFnOnStateChanged = UFunction::FindFunction("Function OLGame.OLDoor.OnStateChanged");
	}

	AOLDoor_execOnStateChanged_Params OnStateChanged_Params;
	memset(&OnStateChanged_Params, 0, sizeof(OnStateChanged_Params));

	uFnOnStateChanged->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnOnStateChanged, &OnStateChanged_Params, nullptr);
	uFnOnStateChanged->FunctionFlags |= 0x400;
};

// Function OLGame.OLDoor.TriggerEvent
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EDoorEventType                 EventType                      (CPF_Parm)
// class AOLPawn*                 Triggerer                      (CPF_Parm)

void AOLDoor::TriggerEvent(EDoorEventType EventType, class AOLPawn* Triggerer)
{
	static UFunction* uFnTriggerEvent = nullptr;

	if (!uFnTriggerEvent)
	{
		uFnTriggerEvent = UFunction::FindFunction("Function OLGame.OLDoor.TriggerEvent");
	}

	AOLDoor_execTriggerEvent_Params TriggerEvent_Params;
	memset(&TriggerEvent_Params, 0, sizeof(TriggerEvent_Params));
	memcpy_s(&TriggerEvent_Params.EventType, sizeof(TriggerEvent_Params.EventType), &EventType, sizeof(EventType));
	memcpy_s(&TriggerEvent_Params.Triggerer, sizeof(TriggerEvent_Params.Triggerer), &Triggerer, sizeof(Triggerer));

	uFnTriggerEvent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTriggerEvent, &TriggerEvent_Params, nullptr);
	uFnTriggerEvent->FunctionFlags |= 0x400;
};

// Function OLGame.OLDoor.TriggerBreakDoorCameraShake
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLDoor::TriggerBreakDoorCameraShake()
{
	static UFunction* uFnTriggerBreakDoorCameraShake = nullptr;

	if (!uFnTriggerBreakDoorCameraShake)
	{
		uFnTriggerBreakDoorCameraShake = UFunction::FindFunction("Function OLGame.OLDoor.TriggerBreakDoorCameraShake");
	}

	AOLDoor_execTriggerBreakDoorCameraShake_Params TriggerBreakDoorCameraShake_Params;
	memset(&TriggerBreakDoorCameraShake_Params, 0, sizeof(TriggerBreakDoorCameraShake_Params));

	uFnTriggerBreakDoorCameraShake->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTriggerBreakDoorCameraShake, &TriggerBreakDoorCameraShake_Params, nullptr);
	uFnTriggerBreakDoorCameraShake->FunctionFlags |= 0x400;
};

// Function OLGame.OLDoor.StopShaking
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLDoor::StopShaking()
{
	static UFunction* uFnStopShaking = nullptr;

	if (!uFnStopShaking)
	{
		uFnStopShaking = UFunction::FindFunction("Function OLGame.OLDoor.StopShaking");
	}

	AOLDoor_execStopShaking_Params StopShaking_Params;
	memset(&StopShaking_Params, 0, sizeof(StopShaking_Params));

	uFnStopShaking->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStopShaking, &StopShaking_Params, nullptr);
	uFnStopShaking->FunctionFlags |= 0x400;
};

// Function OLGame.OLDoor.StartShaking
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FDoorShakeData          ShakeParams                    (CPF_Parm)
// bool                           bSwitchToBreakingMesh          (CPF_OptionalParm | CPF_Parm)
// bool                           bReversed                      (CPF_OptionalParm | CPF_Parm)
// bool                           bFromAI                        (CPF_OptionalParm | CPF_Parm)

void AOLDoor::StartShaking(struct FDoorShakeData ShakeParams, bool bSwitchToBreakingMesh, bool bReversed, bool bFromAI)
{
	static UFunction* uFnStartShaking = nullptr;

	if (!uFnStartShaking)
	{
		uFnStartShaking = UFunction::FindFunction("Function OLGame.OLDoor.StartShaking");
	}

	AOLDoor_execStartShaking_Params StartShaking_Params;
	memset(&StartShaking_Params, 0, sizeof(StartShaking_Params));
	memcpy_s(&StartShaking_Params.ShakeParams, sizeof(StartShaking_Params.ShakeParams), &ShakeParams, sizeof(ShakeParams));
	StartShaking_Params.bSwitchToBreakingMesh = bSwitchToBreakingMesh;
	StartShaking_Params.bReversed = bReversed;
	StartShaking_Params.bFromAI = bFromAI;

	uFnStartShaking->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStartShaking, &StartShaking_Params, nullptr);
	uFnStartShaking->FunctionFlags |= 0x400;
};

// Function OLGame.OLDoor.IsBroken
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLDoor::IsBroken()
{
	static UFunction* uFnIsBroken = nullptr;

	if (!uFnIsBroken)
	{
		uFnIsBroken = UFunction::FindFunction("Function OLGame.OLDoor.IsBroken");
	}

	AOLDoor_execIsBroken_Params IsBroken_Params;
	memset(&IsBroken_Params, 0, sizeof(IsBroken_Params));

	this->ProcessEvent(uFnIsBroken, &IsBroken_Params, nullptr);

	return IsBroken_Params.ReturnValue;
};

// Function OLGame.OLDoor.UnregisterNavmeshObstacle
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLDoor::UnregisterNavmeshObstacle()
{
	static UFunction* uFnUnregisterNavmeshObstacle = nullptr;

	if (!uFnUnregisterNavmeshObstacle)
	{
		uFnUnregisterNavmeshObstacle = UFunction::FindFunction("Function OLGame.OLDoor.UnregisterNavmeshObstacle");
	}

	AOLDoor_execUnregisterNavmeshObstacle_Params UnregisterNavmeshObstacle_Params;
	memset(&UnregisterNavmeshObstacle_Params, 0, sizeof(UnregisterNavmeshObstacle_Params));

	uFnUnregisterNavmeshObstacle->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUnregisterNavmeshObstacle, &UnregisterNavmeshObstacle_Params, nullptr);
	uFnUnregisterNavmeshObstacle->FunctionFlags |= 0x400;
};

// Function OLGame.OLDoor.RegisterNavMeshObstacle
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLDoor::RegisterNavMeshObstacle()
{
	static UFunction* uFnRegisterNavMeshObstacle = nullptr;

	if (!uFnRegisterNavMeshObstacle)
	{
		uFnRegisterNavMeshObstacle = UFunction::FindFunction("Function OLGame.OLDoor.RegisterNavMeshObstacle");
	}

	AOLDoor_execRegisterNavMeshObstacle_Params RegisterNavMeshObstacle_Params;
	memset(&RegisterNavMeshObstacle_Params, 0, sizeof(RegisterNavMeshObstacle_Params));

	uFnRegisterNavMeshObstacle->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRegisterNavMeshObstacle, &RegisterNavMeshObstacle_Params, nullptr);
	uFnRegisterNavMeshObstacle->FunctionFlags |= 0x400;
};

// Function OLGame.OLDoor.ScriptGetCenterLocation
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FVector AOLDoor::ScriptGetCenterLocation()
{
	static UFunction* uFnScriptGetCenterLocation = nullptr;

	if (!uFnScriptGetCenterLocation)
	{
		uFnScriptGetCenterLocation = UFunction::FindFunction("Function OLGame.OLDoor.ScriptGetCenterLocation");
	}

	AOLDoor_execScriptGetCenterLocation_Params ScriptGetCenterLocation_Params;
	memset(&ScriptGetCenterLocation_Params, 0, sizeof(ScriptGetCenterLocation_Params));

	uFnScriptGetCenterLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnScriptGetCenterLocation, &ScriptGetCenterLocation_Params, nullptr);
	uFnScriptGetCenterLocation->FunctionFlags |= 0x400;

	return ScriptGetCenterLocation_Params.ReturnValue;
};

// Function OLGame.OLDoorChimes.UnTouch
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void AOLDoorChimes::eventUnTouch(class AActor* Other)
{
	static UFunction* uFnUnTouch = nullptr;

	if (!uFnUnTouch)
	{
		uFnUnTouch = UFunction::FindFunction("Function OLGame.OLDoorChimes.UnTouch");
	}

	AOLDoorChimes_eventUnTouch_Params UnTouch_Params;
	memset(&UnTouch_Params, 0, sizeof(UnTouch_Params));
	memcpy_s(&UnTouch_Params.Other, sizeof(UnTouch_Params.Other), &Other, sizeof(Other));

	this->ProcessEvent(uFnUnTouch, &UnTouch_Params, nullptr);
};

// Function OLGame.OLDoorChimes.Touch
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)
// class UPrimitiveComponent*     OtherComp                      (CPF_Parm | CPF_EditInline)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)

void AOLDoorChimes::eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal)
{
	static UFunction* uFnTouch = nullptr;

	if (!uFnTouch)
	{
		uFnTouch = UFunction::FindFunction("Function OLGame.OLDoorChimes.Touch");
	}

	AOLDoorChimes_eventTouch_Params Touch_Params;
	memset(&Touch_Params, 0, sizeof(Touch_Params));
	memcpy_s(&Touch_Params.Other, sizeof(Touch_Params.Other), &Other, sizeof(Other));
	memcpy_s(&Touch_Params.OtherComp, sizeof(Touch_Params.OtherComp), &OtherComp, sizeof(OtherComp));
	memcpy_s(&Touch_Params.HitLocation, sizeof(Touch_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	memcpy_s(&Touch_Params.HitNormal, sizeof(Touch_Params.HitNormal), &HitNormal, sizeof(HitNormal));

	this->ProcessEvent(uFnTouch, &Touch_Params, nullptr);
};

// Function OLGame.OLDoorChimes.PlayChimes
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLDoorChimes::eventPlayChimes()
{
	static UFunction* uFnPlayChimes = nullptr;

	if (!uFnPlayChimes)
	{
		uFnPlayChimes = UFunction::FindFunction("Function OLGame.OLDoorChimes.PlayChimes");
	}

	AOLDoorChimes_eventPlayChimes_Params PlayChimes_Params;
	memset(&PlayChimes_Params, 0, sizeof(PlayChimes_Params));

	this->ProcessEvent(uFnPlayChimes, &PlayChimes_Params, nullptr);
};

// Function OLGame.OLEngine.UsingFixedSaveLocation
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLEngine::UsingFixedSaveLocation()
{
	static UFunction* uFnUsingFixedSaveLocation = nullptr;

	if (!uFnUsingFixedSaveLocation)
	{
		uFnUsingFixedSaveLocation = UFunction::FindFunction("Function OLGame.OLEngine.UsingFixedSaveLocation");
	}

	UOLEngine_execUsingFixedSaveLocation_Params UsingFixedSaveLocation_Params;
	memset(&UsingFixedSaveLocation_Params, 0, sizeof(UsingFixedSaveLocation_Params));

	this->ProcessEvent(uFnUsingFixedSaveLocation, &UsingFixedSaveLocation_Params, nullptr);

	return UsingFixedSaveLocation_Params.ReturnValue;
};

// Function OLGame.OLEngine.SaveGameImmediate
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bSaveToDisk                    (CPF_Parm)
// class FString                  ForceSaveGameName              (CPF_Parm | CPF_NeedCtorLink)
// bool                           bNewSave                       (CPF_OptionalParm | CPF_Parm)
// class FString                  OverrideSaveCheckpointName     (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)

void UOLEngine::SaveGameImmediate(bool bSaveToDisk, class FString ForceSaveGameName, bool bNewSave, class FString OverrideSaveCheckpointName)
{
	static UFunction* uFnSaveGameImmediate = nullptr;

	if (!uFnSaveGameImmediate)
	{
		uFnSaveGameImmediate = UFunction::FindFunction("Function OLGame.OLEngine.SaveGameImmediate");
	}

	UOLEngine_execSaveGameImmediate_Params SaveGameImmediate_Params;
	memset(&SaveGameImmediate_Params, 0, sizeof(SaveGameImmediate_Params));
	SaveGameImmediate_Params.bSaveToDisk = bSaveToDisk;
	memcpy_s(&SaveGameImmediate_Params.ForceSaveGameName, sizeof(SaveGameImmediate_Params.ForceSaveGameName), &ForceSaveGameName, sizeof(ForceSaveGameName));
	SaveGameImmediate_Params.bNewSave = bNewSave;
	memcpy_s(&SaveGameImmediate_Params.OverrideSaveCheckpointName, sizeof(SaveGameImmediate_Params.OverrideSaveCheckpointName), &OverrideSaveCheckpointName, sizeof(OverrideSaveCheckpointName));

	uFnSaveGameImmediate->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSaveGameImmediate, &SaveGameImmediate_Params, nullptr);
	uFnSaveGameImmediate->FunctionFlags |= 0x400;
};

// Function OLGame.OLEngine.InitiateSaveGame
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bSaveToDisk                    (CPF_Parm)

void UOLEngine::InitiateSaveGame(bool bSaveToDisk)
{
	static UFunction* uFnInitiateSaveGame = nullptr;

	if (!uFnInitiateSaveGame)
	{
		uFnInitiateSaveGame = UFunction::FindFunction("Function OLGame.OLEngine.InitiateSaveGame");
	}

	UOLEngine_execInitiateSaveGame_Params InitiateSaveGame_Params;
	memset(&InitiateSaveGame_Params, 0, sizeof(InitiateSaveGame_Params));
	InitiateSaveGame_Params.bSaveToDisk = bSaveToDisk;

	uFnInitiateSaveGame->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnInitiateSaveGame, &InitiateSaveGame_Params, nullptr);
	uFnInitiateSaveGame->FunctionFlags |= 0x400;
};

// Function OLGame.OLEngine.HasAnyValidSaveGame
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ELoadGameResult                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

ELoadGameResult UOLEngine::HasAnyValidSaveGame()
{
	static UFunction* uFnHasAnyValidSaveGame = nullptr;

	if (!uFnHasAnyValidSaveGame)
	{
		uFnHasAnyValidSaveGame = UFunction::FindFunction("Function OLGame.OLEngine.HasAnyValidSaveGame");
	}

	UOLEngine_execHasAnyValidSaveGame_Params HasAnyValidSaveGame_Params;
	memset(&HasAnyValidSaveGame_Params, 0, sizeof(HasAnyValidSaveGame_Params));

	uFnHasAnyValidSaveGame->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHasAnyValidSaveGame, &HasAnyValidSaveGame_Params, nullptr);
	uFnHasAnyValidSaveGame->FunctionFlags |= 0x400;

	return HasAnyValidSaveGame_Params.ReturnValue;
};

// Function OLGame.OLEngine.HasValidSaveGame
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ELoadGameResult                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

ELoadGameResult UOLEngine::HasValidSaveGame()
{
	static UFunction* uFnHasValidSaveGame = nullptr;

	if (!uFnHasValidSaveGame)
	{
		uFnHasValidSaveGame = UFunction::FindFunction("Function OLGame.OLEngine.HasValidSaveGame");
	}

	UOLEngine_execHasValidSaveGame_Params HasValidSaveGame_Params;
	memset(&HasValidSaveGame_Params, 0, sizeof(HasValidSaveGame_Params));

	uFnHasValidSaveGame->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHasValidSaveGame, &HasValidSaveGame_Params, nullptr);
	uFnHasValidSaveGame->FunctionFlags |= 0x400;

	return HasValidSaveGame_Params.ReturnValue;
};

// Function OLGame.OLEngine.RefreshSaveFiles
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLEngine::RefreshSaveFiles()
{
	static UFunction* uFnRefreshSaveFiles = nullptr;

	if (!uFnRefreshSaveFiles)
	{
		uFnRefreshSaveFiles = UFunction::FindFunction("Function OLGame.OLEngine.RefreshSaveFiles");
	}

	UOLEngine_execRefreshSaveFiles_Params RefreshSaveFiles_Params;
	memset(&RefreshSaveFiles_Params, 0, sizeof(RefreshSaveFiles_Params));

	uFnRefreshSaveFiles->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRefreshSaveFiles, &RefreshSaveFiles_Params, nullptr);
	uFnRefreshSaveFiles->FunctionFlags |= 0x400;
};

// Function OLGame.OLEngine.IsGameFullyDownloaded
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLEngine::IsGameFullyDownloaded()
{
	static UFunction* uFnIsGameFullyDownloaded = nullptr;

	if (!uFnIsGameFullyDownloaded)
	{
		uFnIsGameFullyDownloaded = UFunction::FindFunction("Function OLGame.OLEngine.IsGameFullyDownloaded");
	}

	UOLEngine_execIsGameFullyDownloaded_Params IsGameFullyDownloaded_Params;
	memset(&IsGameFullyDownloaded_Params, 0, sizeof(IsGameFullyDownloaded_Params));

	uFnIsGameFullyDownloaded->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsGameFullyDownloaded, &IsGameFullyDownloaded_Params, nullptr);
	uFnIsGameFullyDownloaded->FunctionFlags |= 0x400;

	return IsGameFullyDownloaded_Params.ReturnValue;
};

// Function OLGame.OLEngine.TryStartDLCGame
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLEngine::TryStartDLCGame()
{
	static UFunction* uFnTryStartDLCGame = nullptr;

	if (!uFnTryStartDLCGame)
	{
		uFnTryStartDLCGame = UFunction::FindFunction("Function OLGame.OLEngine.TryStartDLCGame");
	}

	UOLEngine_execTryStartDLCGame_Params TryStartDLCGame_Params;
	memset(&TryStartDLCGame_Params, 0, sizeof(TryStartDLCGame_Params));

	uFnTryStartDLCGame->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTryStartDLCGame, &TryStartDLCGame_Params, nullptr);
	uFnTryStartDLCGame->FunctionFlags |= 0x400;

	return TryStartDLCGame_Params.ReturnValue;
};

// Function OLGame.OLEngine.ShouldShowNewDLCGame
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLEngine::ShouldShowNewDLCGame()
{
	static UFunction* uFnShouldShowNewDLCGame = nullptr;

	if (!uFnShouldShowNewDLCGame)
	{
		uFnShouldShowNewDLCGame = UFunction::FindFunction("Function OLGame.OLEngine.ShouldShowNewDLCGame");
	}

	UOLEngine_execShouldShowNewDLCGame_Params ShouldShowNewDLCGame_Params;
	memset(&ShouldShowNewDLCGame_Params, 0, sizeof(ShouldShowNewDLCGame_Params));

	uFnShouldShowNewDLCGame->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnShouldShowNewDLCGame, &ShouldShowNewDLCGame_Params, nullptr);
	uFnShouldShowNewDLCGame->FunctionFlags |= 0x400;

	return ShouldShowNewDLCGame_Params.ReturnValue;
};

// Function OLGame.OLEngine.RefreshDLC
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLEngine::RefreshDLC()
{
	static UFunction* uFnRefreshDLC = nullptr;

	if (!uFnRefreshDLC)
	{
		uFnRefreshDLC = UFunction::FindFunction("Function OLGame.OLEngine.RefreshDLC");
	}

	UOLEngine_execRefreshDLC_Params RefreshDLC_Params;
	memset(&RefreshDLC_Params, 0, sizeof(RefreshDLC_Params));

	uFnRefreshDLC->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRefreshDLC, &RefreshDLC_Params, nullptr);
	uFnRefreshDLC->FunctionFlags |= 0x400;

	return RefreshDLC_Params.ReturnValue;
};

// Function OLGame.OLEngine.CheckReloadForDLC
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLEngine::CheckReloadForDLC()
{
	static UFunction* uFnCheckReloadForDLC = nullptr;

	if (!uFnCheckReloadForDLC)
	{
		uFnCheckReloadForDLC = UFunction::FindFunction("Function OLGame.OLEngine.CheckReloadForDLC");
	}

	UOLEngine_execCheckReloadForDLC_Params CheckReloadForDLC_Params;
	memset(&CheckReloadForDLC_Params, 0, sizeof(CheckReloadForDLC_Params));

	uFnCheckReloadForDLC->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCheckReloadForDLC, &CheckReloadForDLC_Params, nullptr);
	uFnCheckReloadForDLC->FunctionFlags |= 0x400;

	return CheckReloadForDLC_Params.ReturnValue;
};

// Function OLGame.OLDingoEngine.Dingo_OnPressedContinue
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ControllerId                   (CPF_Parm)

void UOLDingoEngine::Dingo_OnPressedContinue(int32_t ControllerId)
{
	static UFunction* uFnDingo_OnPressedContinue = nullptr;

	if (!uFnDingo_OnPressedContinue)
	{
		uFnDingo_OnPressedContinue = UFunction::FindFunction("Function OLGame.OLDingoEngine.Dingo_OnPressedContinue");
	}

	UOLDingoEngine_execDingo_OnPressedContinue_Params Dingo_OnPressedContinue_Params;
	memset(&Dingo_OnPressedContinue_Params, 0, sizeof(Dingo_OnPressedContinue_Params));
	memcpy_s(&Dingo_OnPressedContinue_Params.ControllerId, sizeof(Dingo_OnPressedContinue_Params.ControllerId), &ControllerId, sizeof(ControllerId));

	uFnDingo_OnPressedContinue->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDingo_OnPressedContinue, &Dingo_OnPressedContinue_Params, nullptr);
	uFnDingo_OnPressedContinue->FunctionFlags |= 0x400;
};

// Function OLGame.OLDingoEngine.ReturnToPressStartScreen
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLDingoEngine::ReturnToPressStartScreen()
{
	static UFunction* uFnReturnToPressStartScreen = nullptr;

	if (!uFnReturnToPressStartScreen)
	{
		uFnReturnToPressStartScreen = UFunction::FindFunction("Function OLGame.OLDingoEngine.ReturnToPressStartScreen");
	}

	UOLDingoEngine_execReturnToPressStartScreen_Params ReturnToPressStartScreen_Params;
	memset(&ReturnToPressStartScreen_Params, 0, sizeof(ReturnToPressStartScreen_Params));

	uFnReturnToPressStartScreen->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnReturnToPressStartScreen, &ReturnToPressStartScreen_Params, nullptr);
	uFnReturnToPressStartScreen->FunctionFlags |= 0x400;
};

// Function OLGame.OLDingoEngine.ShouldOpenPressStartScreen
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLDingoEngine::ShouldOpenPressStartScreen()
{
	static UFunction* uFnShouldOpenPressStartScreen = nullptr;

	if (!uFnShouldOpenPressStartScreen)
	{
		uFnShouldOpenPressStartScreen = UFunction::FindFunction("Function OLGame.OLDingoEngine.ShouldOpenPressStartScreen");
	}

	UOLDingoEngine_execShouldOpenPressStartScreen_Params ShouldOpenPressStartScreen_Params;
	memset(&ShouldOpenPressStartScreen_Params, 0, sizeof(ShouldOpenPressStartScreen_Params));

	uFnShouldOpenPressStartScreen->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnShouldOpenPressStartScreen, &ShouldOpenPressStartScreen_Params, nullptr);
	uFnShouldOpenPressStartScreen->FunctionFlags |= 0x400;

	return ShouldOpenPressStartScreen_Params.ReturnValue;
};

// Function OLGame.OLDingoEngine.Dingo_ShowLoginUIAndInitializeUser
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FScriptDelegate         Callback                       (CPF_Parm | CPF_NeedCtorLink)

bool UOLDingoEngine::Dingo_ShowLoginUIAndInitializeUser(struct FScriptDelegate Callback)
{
	static UFunction* uFnDingo_ShowLoginUIAndInitializeUser = nullptr;

	if (!uFnDingo_ShowLoginUIAndInitializeUser)
	{
		uFnDingo_ShowLoginUIAndInitializeUser = UFunction::FindFunction("Function OLGame.OLDingoEngine.Dingo_ShowLoginUIAndInitializeUser");
	}

	UOLDingoEngine_execDingo_ShowLoginUIAndInitializeUser_Params Dingo_ShowLoginUIAndInitializeUser_Params;
	memset(&Dingo_ShowLoginUIAndInitializeUser_Params, 0, sizeof(Dingo_ShowLoginUIAndInitializeUser_Params));
	memcpy_s(&Dingo_ShowLoginUIAndInitializeUser_Params.Callback, sizeof(Dingo_ShowLoginUIAndInitializeUser_Params.Callback), &Callback, sizeof(Callback));

	this->ProcessEvent(uFnDingo_ShowLoginUIAndInitializeUser, &Dingo_ShowLoginUIAndInitializeUser_Params, nullptr);

	return Dingo_ShowLoginUIAndInitializeUser_Params.ReturnValue;
};

// Function OLGame.OLDingoEngine.DingoNative_ShowLoginUIAndInitializeUser
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLDingoEngine::DingoNative_ShowLoginUIAndInitializeUser()
{
	static UFunction* uFnDingoNative_ShowLoginUIAndInitializeUser = nullptr;

	if (!uFnDingoNative_ShowLoginUIAndInitializeUser)
	{
		uFnDingoNative_ShowLoginUIAndInitializeUser = UFunction::FindFunction("Function OLGame.OLDingoEngine.DingoNative_ShowLoginUIAndInitializeUser");
	}

	UOLDingoEngine_execDingoNative_ShowLoginUIAndInitializeUser_Params DingoNative_ShowLoginUIAndInitializeUser_Params;
	memset(&DingoNative_ShowLoginUIAndInitializeUser_Params, 0, sizeof(DingoNative_ShowLoginUIAndInitializeUser_Params));

	uFnDingoNative_ShowLoginUIAndInitializeUser->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDingoNative_ShowLoginUIAndInitializeUser, &DingoNative_ShowLoginUIAndInitializeUser_Params, nullptr);
	uFnDingoNative_ShowLoginUIAndInitializeUser->FunctionFlags |= 0x400;

	return DingoNative_ShowLoginUIAndInitializeUser_Params.ReturnValue;
};

// Function OLGame.OLDingoEngine.Dingo_ShouldShowLoginUI
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)

bool UOLDingoEngine::Dingo_ShouldShowLoginUI(int32_t ControllerId)
{
	static UFunction* uFnDingo_ShouldShowLoginUI = nullptr;

	if (!uFnDingo_ShouldShowLoginUI)
	{
		uFnDingo_ShouldShowLoginUI = UFunction::FindFunction("Function OLGame.OLDingoEngine.Dingo_ShouldShowLoginUI");
	}

	UOLDingoEngine_execDingo_ShouldShowLoginUI_Params Dingo_ShouldShowLoginUI_Params;
	memset(&Dingo_ShouldShowLoginUI_Params, 0, sizeof(Dingo_ShouldShowLoginUI_Params));
	memcpy_s(&Dingo_ShouldShowLoginUI_Params.ControllerId, sizeof(Dingo_ShouldShowLoginUI_Params.ControllerId), &ControllerId, sizeof(ControllerId));

	uFnDingo_ShouldShowLoginUI->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDingo_ShouldShowLoginUI, &Dingo_ShouldShowLoginUI_Params, nullptr);
	uFnDingo_ShouldShowLoginUI->FunctionFlags |= 0x400;

	return Dingo_ShouldShowLoginUI_Params.ReturnValue;
};

// Function OLGame.OLDingoEngine.Dingo_OnInitialPressStart
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)

int32_t UOLDingoEngine::Dingo_OnInitialPressStart(int32_t ControllerId)
{
	static UFunction* uFnDingo_OnInitialPressStart = nullptr;

	if (!uFnDingo_OnInitialPressStart)
	{
		uFnDingo_OnInitialPressStart = UFunction::FindFunction("Function OLGame.OLDingoEngine.Dingo_OnInitialPressStart");
	}

	UOLDingoEngine_execDingo_OnInitialPressStart_Params Dingo_OnInitialPressStart_Params;
	memset(&Dingo_OnInitialPressStart_Params, 0, sizeof(Dingo_OnInitialPressStart_Params));
	memcpy_s(&Dingo_OnInitialPressStart_Params.ControllerId, sizeof(Dingo_OnInitialPressStart_Params.ControllerId), &ControllerId, sizeof(ControllerId));

	uFnDingo_OnInitialPressStart->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDingo_OnInitialPressStart, &Dingo_OnInitialPressStart_Params, nullptr);
	uFnDingo_OnInitialPressStart->FunctionFlags |= 0x400;

	return Dingo_OnInitialPressStart_Params.ReturnValue;
};

// Function OLGame.OLDingoEngine.Dingo_AllowAllControllersInput
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLDingoEngine::Dingo_AllowAllControllersInput()
{
	static UFunction* uFnDingo_AllowAllControllersInput = nullptr;

	if (!uFnDingo_AllowAllControllersInput)
	{
		uFnDingo_AllowAllControllersInput = UFunction::FindFunction("Function OLGame.OLDingoEngine.Dingo_AllowAllControllersInput");
	}

	UOLDingoEngine_execDingo_AllowAllControllersInput_Params Dingo_AllowAllControllersInput_Params;
	memset(&Dingo_AllowAllControllersInput_Params, 0, sizeof(Dingo_AllowAllControllersInput_Params));

	uFnDingo_AllowAllControllersInput->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDingo_AllowAllControllersInput, &Dingo_AllowAllControllersInput_Params, nullptr);
	uFnDingo_AllowAllControllersInput->FunctionFlags |= 0x400;
};

// Function OLGame.OLDingoEngine.OnDingoUserInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bSuccess                       (CPF_Parm)

void UOLDingoEngine::eventOnDingoUserInitialized(bool bSuccess)
{
	static UFunction* uFnOnDingoUserInitialized = nullptr;

	if (!uFnOnDingoUserInitialized)
	{
		uFnOnDingoUserInitialized = UFunction::FindFunction("Function OLGame.OLDingoEngine.OnDingoUserInitialized");
	}

	UOLDingoEngine_eventOnDingoUserInitialized_Params OnDingoUserInitialized_Params;
	memset(&OnDingoUserInitialized_Params, 0, sizeof(OnDingoUserInitialized_Params));
	OnDingoUserInitialized_Params.bSuccess = bSuccess;

	this->ProcessEvent(uFnOnDingoUserInitialized, &OnDingoUserInitialized_Params, nullptr);
};

// Function OLGame.OLDingoEngine.Dingo_InitializeUser
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FScriptDelegate         Callback                       (CPF_Parm | CPF_NeedCtorLink)

void UOLDingoEngine::Dingo_InitializeUser(struct FScriptDelegate Callback)
{
	static UFunction* uFnDingo_InitializeUser = nullptr;

	if (!uFnDingo_InitializeUser)
	{
		uFnDingo_InitializeUser = UFunction::FindFunction("Function OLGame.OLDingoEngine.Dingo_InitializeUser");
	}

	UOLDingoEngine_execDingo_InitializeUser_Params Dingo_InitializeUser_Params;
	memset(&Dingo_InitializeUser_Params, 0, sizeof(Dingo_InitializeUser_Params));
	memcpy_s(&Dingo_InitializeUser_Params.Callback, sizeof(Dingo_InitializeUser_Params.Callback), &Callback, sizeof(Callback));

	this->ProcessEvent(uFnDingo_InitializeUser, &Dingo_InitializeUser_Params, nullptr);
};

// Function OLGame.OLDingoEngine.DingoNative_StartInitializeUser
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLDingoEngine::DingoNative_StartInitializeUser()
{
	static UFunction* uFnDingoNative_StartInitializeUser = nullptr;

	if (!uFnDingoNative_StartInitializeUser)
	{
		uFnDingoNative_StartInitializeUser = UFunction::FindFunction("Function OLGame.OLDingoEngine.DingoNative_StartInitializeUser");
	}

	UOLDingoEngine_execDingoNative_StartInitializeUser_Params DingoNative_StartInitializeUser_Params;
	memset(&DingoNative_StartInitializeUser_Params, 0, sizeof(DingoNative_StartInitializeUser_Params));

	uFnDingoNative_StartInitializeUser->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDingoNative_StartInitializeUser, &DingoNative_StartInitializeUser_Params, nullptr);
	uFnDingoNative_StartInitializeUser->FunctionFlags |= 0x400;
};

// Function OLGame.OLDingoEngine.DingoUserInitializedCallback
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// bool                           bSuccess                       (CPF_Parm)

void UOLDingoEngine::DingoUserInitializedCallback(bool bSuccess)
{
	static UFunction* uFnDingoUserInitializedCallback = nullptr;

	if (!uFnDingoUserInitializedCallback)
	{
		uFnDingoUserInitializedCallback = UFunction::FindFunction("Function OLGame.OLDingoEngine.DingoUserInitializedCallback");
	}

	UOLDingoEngine_execDingoUserInitializedCallback_Params DingoUserInitializedCallback_Params;
	memset(&DingoUserInitializedCallback_Params, 0, sizeof(DingoUserInitializedCallback_Params));
	DingoUserInitializedCallback_Params.bSuccess = bSuccess;

	this->ProcessEvent(uFnDingoUserInitializedCallback, &DingoUserInitializedCallback_Params, nullptr);
};

// Function OLGame.OLDingoEngine.GiveRightForRecording
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLDingoEngine::GiveRightForRecording()
{
	static UFunction* uFnGiveRightForRecording = nullptr;

	if (!uFnGiveRightForRecording)
	{
		uFnGiveRightForRecording = UFunction::FindFunction("Function OLGame.OLDingoEngine.GiveRightForRecording");
	}

	UOLDingoEngine_execGiveRightForRecording_Params GiveRightForRecording_Params;
	memset(&GiveRightForRecording_Params, 0, sizeof(GiveRightForRecording_Params));

	uFnGiveRightForRecording->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGiveRightForRecording, &GiveRightForRecording_Params, nullptr);
	uFnGiveRightForRecording->FunctionFlags |= 0x400;
};

// Function OLGame.OLDingoEngine.ClearRecordings
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLDingoEngine::ClearRecordings()
{
	static UFunction* uFnClearRecordings = nullptr;

	if (!uFnClearRecordings)
	{
		uFnClearRecordings = UFunction::FindFunction("Function OLGame.OLDingoEngine.ClearRecordings");
	}

	UOLDingoEngine_execClearRecordings_Params ClearRecordings_Params;
	memset(&ClearRecordings_Params, 0, sizeof(ClearRecordings_Params));

	uFnClearRecordings->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClearRecordings, &ClearRecordings_Params, nullptr);
	uFnClearRecordings->FunctionFlags |= 0x400;
};

// Function OLGame.OLDingoEngine.HasEnoughRightsLeftForRecording
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLDingoEngine::HasEnoughRightsLeftForRecording()
{
	static UFunction* uFnHasEnoughRightsLeftForRecording = nullptr;

	if (!uFnHasEnoughRightsLeftForRecording)
	{
		uFnHasEnoughRightsLeftForRecording = UFunction::FindFunction("Function OLGame.OLDingoEngine.HasEnoughRightsLeftForRecording");
	}

	UOLDingoEngine_execHasEnoughRightsLeftForRecording_Params HasEnoughRightsLeftForRecording_Params;
	memset(&HasEnoughRightsLeftForRecording_Params, 0, sizeof(HasEnoughRightsLeftForRecording_Params));

	uFnHasEnoughRightsLeftForRecording->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHasEnoughRightsLeftForRecording, &HasEnoughRightsLeftForRecording_Params, nullptr);
	uFnHasEnoughRightsLeftForRecording->FunctionFlags |= 0x400;

	return HasEnoughRightsLeftForRecording_Params.ReturnValue;
};

// Function OLGame.OLDingoEngine.HasRightsForRecording
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLDingoEngine::HasRightsForRecording()
{
	static UFunction* uFnHasRightsForRecording = nullptr;

	if (!uFnHasRightsForRecording)
	{
		uFnHasRightsForRecording = UFunction::FindFunction("Function OLGame.OLDingoEngine.HasRightsForRecording");
	}

	UOLDingoEngine_execHasRightsForRecording_Params HasRightsForRecording_Params;
	memset(&HasRightsForRecording_Params, 0, sizeof(HasRightsForRecording_Params));

	uFnHasRightsForRecording->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHasRightsForRecording, &HasRightsForRecording_Params, nullptr);
	uFnHasRightsForRecording->FunctionFlags |= 0x400;

	return HasRightsForRecording_Params.ReturnValue;
};

// Function OLGame.OLDingoEngine.Dingo_GetActiveGamertag
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UOLDingoEngine::Dingo_GetActiveGamertag()
{
	static UFunction* uFnDingo_GetActiveGamertag = nullptr;

	if (!uFnDingo_GetActiveGamertag)
	{
		uFnDingo_GetActiveGamertag = UFunction::FindFunction("Function OLGame.OLDingoEngine.Dingo_GetActiveGamertag");
	}

	UOLDingoEngine_execDingo_GetActiveGamertag_Params Dingo_GetActiveGamertag_Params;
	memset(&Dingo_GetActiveGamertag_Params, 0, sizeof(Dingo_GetActiveGamertag_Params));

	uFnDingo_GetActiveGamertag->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDingo_GetActiveGamertag, &Dingo_GetActiveGamertag_Params, nullptr);
	uFnDingo_GetActiveGamertag->FunctionFlags |= 0x400;

	return Dingo_GetActiveGamertag_Params.ReturnValue;
};

// Function OLGame.OLDingoEngine.Dingo_GetSaveFileIdStr
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FString                  SaveFileName                   (CPF_Parm | CPF_NeedCtorLink)

class FString UOLDingoEngine::Dingo_GetSaveFileIdStr(class FString SaveFileName)
{
	static UFunction* uFnDingo_GetSaveFileIdStr = nullptr;

	if (!uFnDingo_GetSaveFileIdStr)
	{
		uFnDingo_GetSaveFileIdStr = UFunction::FindFunction("Function OLGame.OLDingoEngine.Dingo_GetSaveFileIdStr");
	}

	UOLDingoEngine_execDingo_GetSaveFileIdStr_Params Dingo_GetSaveFileIdStr_Params;
	memset(&Dingo_GetSaveFileIdStr_Params, 0, sizeof(Dingo_GetSaveFileIdStr_Params));
	memcpy_s(&Dingo_GetSaveFileIdStr_Params.SaveFileName, sizeof(Dingo_GetSaveFileIdStr_Params.SaveFileName), &SaveFileName, sizeof(SaveFileName));

	uFnDingo_GetSaveFileIdStr->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDingo_GetSaveFileIdStr, &Dingo_GetSaveFileIdStr_Params, nullptr);
	uFnDingo_GetSaveFileIdStr->FunctionFlags |= 0x400;

	return Dingo_GetSaveFileIdStr_Params.ReturnValue;
};

// Function OLGame.OLDingoEngine.Dingo_GetSaveFileIconName
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// struct FName                   CheckpointName                 (CPF_Parm)

class FString UOLDingoEngine::Dingo_GetSaveFileIconName(struct FName CheckpointName)
{
	static UFunction* uFnDingo_GetSaveFileIconName = nullptr;

	if (!uFnDingo_GetSaveFileIconName)
	{
		uFnDingo_GetSaveFileIconName = UFunction::FindFunction("Function OLGame.OLDingoEngine.Dingo_GetSaveFileIconName");
	}

	UOLDingoEngine_execDingo_GetSaveFileIconName_Params Dingo_GetSaveFileIconName_Params;
	memset(&Dingo_GetSaveFileIconName_Params, 0, sizeof(Dingo_GetSaveFileIconName_Params));
	memcpy_s(&Dingo_GetSaveFileIconName_Params.CheckpointName, sizeof(Dingo_GetSaveFileIconName_Params.CheckpointName), &CheckpointName, sizeof(CheckpointName));

	uFnDingo_GetSaveFileIconName->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDingo_GetSaveFileIconName, &Dingo_GetSaveFileIconName_Params, nullptr);
	uFnDingo_GetSaveFileIconName->FunctionFlags |= 0x400;

	return Dingo_GetSaveFileIconName_Params.ReturnValue;
};

// Function OLGame.OLDingoEngine.Dingo_ShowHelpUI
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLDingoEngine::Dingo_ShowHelpUI()
{
	static UFunction* uFnDingo_ShowHelpUI = nullptr;

	if (!uFnDingo_ShowHelpUI)
	{
		uFnDingo_ShowHelpUI = UFunction::FindFunction("Function OLGame.OLDingoEngine.Dingo_ShowHelpUI");
	}

	UOLDingoEngine_execDingo_ShowHelpUI_Params Dingo_ShowHelpUI_Params;
	memset(&Dingo_ShowHelpUI_Params, 0, sizeof(Dingo_ShowHelpUI_Params));

	uFnDingo_ShowHelpUI->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDingo_ShowHelpUI, &Dingo_ShowHelpUI_Params, nullptr);
	uFnDingo_ShowHelpUI->FunctionFlags |= 0x400;

	return Dingo_ShowHelpUI_Params.ReturnValue;
};

// Function OLGame.OLDingoEngine.Dingo_DeleteSaveGame
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  SaveFileName                   (CPF_Parm | CPF_NeedCtorLink)

bool UOLDingoEngine::Dingo_DeleteSaveGame(class FString SaveFileName)
{
	static UFunction* uFnDingo_DeleteSaveGame = nullptr;

	if (!uFnDingo_DeleteSaveGame)
	{
		uFnDingo_DeleteSaveGame = UFunction::FindFunction("Function OLGame.OLDingoEngine.Dingo_DeleteSaveGame");
	}

	UOLDingoEngine_execDingo_DeleteSaveGame_Params Dingo_DeleteSaveGame_Params;
	memset(&Dingo_DeleteSaveGame_Params, 0, sizeof(Dingo_DeleteSaveGame_Params));
	memcpy_s(&Dingo_DeleteSaveGame_Params.SaveFileName, sizeof(Dingo_DeleteSaveGame_Params.SaveFileName), &SaveFileName, sizeof(SaveFileName));

	uFnDingo_DeleteSaveGame->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDingo_DeleteSaveGame, &Dingo_DeleteSaveGame_Params, nullptr);
	uFnDingo_DeleteSaveGame->FunctionFlags |= 0x400;

	return Dingo_DeleteSaveGame_Params.ReturnValue;
};

// Function OLGame.OLDingoEngine.Dingo_SaveGameImmediateToNewSave
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLDingoEngine::Dingo_SaveGameImmediateToNewSave()
{
	static UFunction* uFnDingo_SaveGameImmediateToNewSave = nullptr;

	if (!uFnDingo_SaveGameImmediateToNewSave)
	{
		uFnDingo_SaveGameImmediateToNewSave = UFunction::FindFunction("Function OLGame.OLDingoEngine.Dingo_SaveGameImmediateToNewSave");
	}

	UOLDingoEngine_execDingo_SaveGameImmediateToNewSave_Params Dingo_SaveGameImmediateToNewSave_Params;
	memset(&Dingo_SaveGameImmediateToNewSave_Params, 0, sizeof(Dingo_SaveGameImmediateToNewSave_Params));

	uFnDingo_SaveGameImmediateToNewSave->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDingo_SaveGameImmediateToNewSave, &Dingo_SaveGameImmediateToNewSave_Params, nullptr);
	uFnDingo_SaveGameImmediateToNewSave->FunctionFlags |= 0x400;

	return Dingo_SaveGameImmediateToNewSave_Params.ReturnValue;
};

// Function OLGame.OLDingoEngine.Dingo_SaveGameImmediate
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  SaveFileName                   (CPF_Parm | CPF_NeedCtorLink)

bool UOLDingoEngine::Dingo_SaveGameImmediate(class FString SaveFileName)
{
	static UFunction* uFnDingo_SaveGameImmediate = nullptr;

	if (!uFnDingo_SaveGameImmediate)
	{
		uFnDingo_SaveGameImmediate = UFunction::FindFunction("Function OLGame.OLDingoEngine.Dingo_SaveGameImmediate");
	}

	UOLDingoEngine_execDingo_SaveGameImmediate_Params Dingo_SaveGameImmediate_Params;
	memset(&Dingo_SaveGameImmediate_Params, 0, sizeof(Dingo_SaveGameImmediate_Params));
	memcpy_s(&Dingo_SaveGameImmediate_Params.SaveFileName, sizeof(Dingo_SaveGameImmediate_Params.SaveFileName), &SaveFileName, sizeof(SaveFileName));

	uFnDingo_SaveGameImmediate->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDingo_SaveGameImmediate, &Dingo_SaveGameImmediate_Params, nullptr);
	uFnDingo_SaveGameImmediate->FunctionFlags |= 0x400;

	return Dingo_SaveGameImmediate_Params.ReturnValue;
};

// Function OLGame.OLDingoEngine.Dingo_StartNewGameWithNewSave
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  startCP                        (CPF_Parm | CPF_NeedCtorLink)

bool UOLDingoEngine::Dingo_StartNewGameWithNewSave(class FString startCP)
{
	static UFunction* uFnDingo_StartNewGameWithNewSave = nullptr;

	if (!uFnDingo_StartNewGameWithNewSave)
	{
		uFnDingo_StartNewGameWithNewSave = UFunction::FindFunction("Function OLGame.OLDingoEngine.Dingo_StartNewGameWithNewSave");
	}

	UOLDingoEngine_execDingo_StartNewGameWithNewSave_Params Dingo_StartNewGameWithNewSave_Params;
	memset(&Dingo_StartNewGameWithNewSave_Params, 0, sizeof(Dingo_StartNewGameWithNewSave_Params));
	memcpy_s(&Dingo_StartNewGameWithNewSave_Params.startCP, sizeof(Dingo_StartNewGameWithNewSave_Params.startCP), &startCP, sizeof(startCP));

	uFnDingo_StartNewGameWithNewSave->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDingo_StartNewGameWithNewSave, &Dingo_StartNewGameWithNewSave_Params, nullptr);
	uFnDingo_StartNewGameWithNewSave->FunctionFlags |= 0x400;

	return Dingo_StartNewGameWithNewSave_Params.ReturnValue;
};

// Function OLGame.OLDingoEngine.Dingo_StartNewGameWithSave
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  startCP                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  SaveFileName                   (CPF_Parm | CPF_NeedCtorLink)

bool UOLDingoEngine::Dingo_StartNewGameWithSave(class FString startCP, class FString SaveFileName)
{
	static UFunction* uFnDingo_StartNewGameWithSave = nullptr;

	if (!uFnDingo_StartNewGameWithSave)
	{
		uFnDingo_StartNewGameWithSave = UFunction::FindFunction("Function OLGame.OLDingoEngine.Dingo_StartNewGameWithSave");
	}

	UOLDingoEngine_execDingo_StartNewGameWithSave_Params Dingo_StartNewGameWithSave_Params;
	memset(&Dingo_StartNewGameWithSave_Params, 0, sizeof(Dingo_StartNewGameWithSave_Params));
	memcpy_s(&Dingo_StartNewGameWithSave_Params.startCP, sizeof(Dingo_StartNewGameWithSave_Params.startCP), &startCP, sizeof(startCP));
	memcpy_s(&Dingo_StartNewGameWithSave_Params.SaveFileName, sizeof(Dingo_StartNewGameWithSave_Params.SaveFileName), &SaveFileName, sizeof(SaveFileName));

	uFnDingo_StartNewGameWithSave->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDingo_StartNewGameWithSave, &Dingo_StartNewGameWithSave_Params, nullptr);
	uFnDingo_StartNewGameWithSave->FunctionFlags |= 0x400;

	return Dingo_StartNewGameWithSave_Params.ReturnValue;
};

// Function OLGame.OLDingoEngine.Dingo_LoadMostRecentSaveFile
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ELoadGameResult                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

ELoadGameResult UOLDingoEngine::Dingo_LoadMostRecentSaveFile()
{
	static UFunction* uFnDingo_LoadMostRecentSaveFile = nullptr;

	if (!uFnDingo_LoadMostRecentSaveFile)
	{
		uFnDingo_LoadMostRecentSaveFile = UFunction::FindFunction("Function OLGame.OLDingoEngine.Dingo_LoadMostRecentSaveFile");
	}

	UOLDingoEngine_execDingo_LoadMostRecentSaveFile_Params Dingo_LoadMostRecentSaveFile_Params;
	memset(&Dingo_LoadMostRecentSaveFile_Params, 0, sizeof(Dingo_LoadMostRecentSaveFile_Params));

	uFnDingo_LoadMostRecentSaveFile->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDingo_LoadMostRecentSaveFile, &Dingo_LoadMostRecentSaveFile_Params, nullptr);
	uFnDingo_LoadMostRecentSaveFile->FunctionFlags |= 0x400;

	return Dingo_LoadMostRecentSaveFile_Params.ReturnValue;
};

// Function OLGame.OLDingoEngine.Dingo_LoadSaveGame
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ELoadGameResult                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  SaveFileName                   (CPF_Parm | CPF_NeedCtorLink)

ELoadGameResult UOLDingoEngine::Dingo_LoadSaveGame(class FString SaveFileName)
{
	static UFunction* uFnDingo_LoadSaveGame = nullptr;

	if (!uFnDingo_LoadSaveGame)
	{
		uFnDingo_LoadSaveGame = UFunction::FindFunction("Function OLGame.OLDingoEngine.Dingo_LoadSaveGame");
	}

	UOLDingoEngine_execDingo_LoadSaveGame_Params Dingo_LoadSaveGame_Params;
	memset(&Dingo_LoadSaveGame_Params, 0, sizeof(Dingo_LoadSaveGame_Params));
	memcpy_s(&Dingo_LoadSaveGame_Params.SaveFileName, sizeof(Dingo_LoadSaveGame_Params.SaveFileName), &SaveFileName, sizeof(SaveFileName));

	uFnDingo_LoadSaveGame->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDingo_LoadSaveGame, &Dingo_LoadSaveGame_Params, nullptr);
	uFnDingo_LoadSaveGame->FunctionFlags |= 0x400;

	return Dingo_LoadSaveGame_Params.ReturnValue;
};

// Function OLGame.OLDingoEngine.IsGameFullyDownloaded
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLDingoEngine::IsGameFullyDownloaded()
{
	static UFunction* uFnIsGameFullyDownloaded = nullptr;

	if (!uFnIsGameFullyDownloaded)
	{
		uFnIsGameFullyDownloaded = UFunction::FindFunction("Function OLGame.OLDingoEngine.IsGameFullyDownloaded");
	}

	UOLDingoEngine_execIsGameFullyDownloaded_Params IsGameFullyDownloaded_Params;
	memset(&IsGameFullyDownloaded_Params, 0, sizeof(IsGameFullyDownloaded_Params));

	uFnIsGameFullyDownloaded->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsGameFullyDownloaded, &IsGameFullyDownloaded_Params, nullptr);
	uFnIsGameFullyDownloaded->FunctionFlags |= 0x400;

	return IsGameFullyDownloaded_Params.ReturnValue;
};

// Function OLGame.OLDingoEngine.HasAnyValidSaveGame
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ELoadGameResult                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

ELoadGameResult UOLDingoEngine::HasAnyValidSaveGame()
{
	static UFunction* uFnHasAnyValidSaveGame = nullptr;

	if (!uFnHasAnyValidSaveGame)
	{
		uFnHasAnyValidSaveGame = UFunction::FindFunction("Function OLGame.OLDingoEngine.HasAnyValidSaveGame");
	}

	UOLDingoEngine_execHasAnyValidSaveGame_Params HasAnyValidSaveGame_Params;
	memset(&HasAnyValidSaveGame_Params, 0, sizeof(HasAnyValidSaveGame_Params));

	uFnHasAnyValidSaveGame->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHasAnyValidSaveGame, &HasAnyValidSaveGame_Params, nullptr);
	uFnHasAnyValidSaveGame->FunctionFlags |= 0x400;

	return HasAnyValidSaveGame_Params.ReturnValue;
};

// Function OLGame.OLDingoEngine.HasValidSaveGame
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ELoadGameResult                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

ELoadGameResult UOLDingoEngine::HasValidSaveGame()
{
	static UFunction* uFnHasValidSaveGame = nullptr;

	if (!uFnHasValidSaveGame)
	{
		uFnHasValidSaveGame = UFunction::FindFunction("Function OLGame.OLDingoEngine.HasValidSaveGame");
	}

	UOLDingoEngine_execHasValidSaveGame_Params HasValidSaveGame_Params;
	memset(&HasValidSaveGame_Params, 0, sizeof(HasValidSaveGame_Params));

	uFnHasValidSaveGame->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHasValidSaveGame, &HasValidSaveGame_Params, nullptr);
	uFnHasValidSaveGame->FunctionFlags |= 0x400;

	return HasValidSaveGame_Params.ReturnValue;
};

// Function OLGame.OLDingoEngine.RefreshSaveFiles
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLDingoEngine::RefreshSaveFiles()
{
	static UFunction* uFnRefreshSaveFiles = nullptr;

	if (!uFnRefreshSaveFiles)
	{
		uFnRefreshSaveFiles = UFunction::FindFunction("Function OLGame.OLDingoEngine.RefreshSaveFiles");
	}

	UOLDingoEngine_execRefreshSaveFiles_Params RefreshSaveFiles_Params;
	memset(&RefreshSaveFiles_Params, 0, sizeof(RefreshSaveFiles_Params));

	uFnRefreshSaveFiles->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRefreshSaveFiles, &RefreshSaveFiles_Params, nullptr);
	uFnRefreshSaveFiles->FunctionFlags |= 0x400;
};

// Function OLGame.OLOrbisEngine.SetMaxCheckpointId
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        MaxCheckpoint                  (CPF_Parm)

void UOLOrbisEngine::SetMaxCheckpointId(int32_t MaxCheckpoint)
{
	static UFunction* uFnSetMaxCheckpointId = nullptr;

	if (!uFnSetMaxCheckpointId)
	{
		uFnSetMaxCheckpointId = UFunction::FindFunction("Function OLGame.OLOrbisEngine.SetMaxCheckpointId");
	}

	UOLOrbisEngine_execSetMaxCheckpointId_Params SetMaxCheckpointId_Params;
	memset(&SetMaxCheckpointId_Params, 0, sizeof(SetMaxCheckpointId_Params));
	memcpy_s(&SetMaxCheckpointId_Params.MaxCheckpoint, sizeof(SetMaxCheckpointId_Params.MaxCheckpoint), &MaxCheckpoint, sizeof(MaxCheckpoint));

	uFnSetMaxCheckpointId->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetMaxCheckpointId, &SetMaxCheckpointId_Params, nullptr);
	uFnSetMaxCheckpointId->FunctionFlags |= 0x400;
};

// Function OLGame.OLOrbisEngine.IsGameFullyDownloaded
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLOrbisEngine::IsGameFullyDownloaded()
{
	static UFunction* uFnIsGameFullyDownloaded = nullptr;

	if (!uFnIsGameFullyDownloaded)
	{
		uFnIsGameFullyDownloaded = UFunction::FindFunction("Function OLGame.OLOrbisEngine.IsGameFullyDownloaded");
	}

	UOLOrbisEngine_execIsGameFullyDownloaded_Params IsGameFullyDownloaded_Params;
	memset(&IsGameFullyDownloaded_Params, 0, sizeof(IsGameFullyDownloaded_Params));

	uFnIsGameFullyDownloaded->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsGameFullyDownloaded, &IsGameFullyDownloaded_Params, nullptr);
	uFnIsGameFullyDownloaded->FunctionFlags |= 0x400;

	return IsGameFullyDownloaded_Params.ReturnValue;
};

// Function OLGame.OLOrbisEngine.PS4_LoadMostRecentSaveFile
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLOrbisEngine::PS4_LoadMostRecentSaveFile()
{
	static UFunction* uFnPS4_LoadMostRecentSaveFile = nullptr;

	if (!uFnPS4_LoadMostRecentSaveFile)
	{
		uFnPS4_LoadMostRecentSaveFile = UFunction::FindFunction("Function OLGame.OLOrbisEngine.PS4_LoadMostRecentSaveFile");
	}

	UOLOrbisEngine_execPS4_LoadMostRecentSaveFile_Params PS4_LoadMostRecentSaveFile_Params;
	memset(&PS4_LoadMostRecentSaveFile_Params, 0, sizeof(PS4_LoadMostRecentSaveFile_Params));

	uFnPS4_LoadMostRecentSaveFile->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPS4_LoadMostRecentSaveFile, &PS4_LoadMostRecentSaveFile_Params, nullptr);
	uFnPS4_LoadMostRecentSaveFile->FunctionFlags |= 0x400;

	return PS4_LoadMostRecentSaveFile_Params.ReturnValue;
};

// Function OLGame.OLOrbisEngine.PS4_LoadCurrentSaveFile
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLOrbisEngine::PS4_LoadCurrentSaveFile()
{
	static UFunction* uFnPS4_LoadCurrentSaveFile = nullptr;

	if (!uFnPS4_LoadCurrentSaveFile)
	{
		uFnPS4_LoadCurrentSaveFile = UFunction::FindFunction("Function OLGame.OLOrbisEngine.PS4_LoadCurrentSaveFile");
	}

	UOLOrbisEngine_execPS4_LoadCurrentSaveFile_Params PS4_LoadCurrentSaveFile_Params;
	memset(&PS4_LoadCurrentSaveFile_Params, 0, sizeof(PS4_LoadCurrentSaveFile_Params));

	uFnPS4_LoadCurrentSaveFile->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPS4_LoadCurrentSaveFile, &PS4_LoadCurrentSaveFile_Params, nullptr);
	uFnPS4_LoadCurrentSaveFile->FunctionFlags |= 0x400;

	return PS4_LoadCurrentSaveFile_Params.ReturnValue;
};

// Function OLGame.OLOrbisEngine.HasAnyValidSaveGame
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ELoadGameResult                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

ELoadGameResult UOLOrbisEngine::HasAnyValidSaveGame()
{
	static UFunction* uFnHasAnyValidSaveGame = nullptr;

	if (!uFnHasAnyValidSaveGame)
	{
		uFnHasAnyValidSaveGame = UFunction::FindFunction("Function OLGame.OLOrbisEngine.HasAnyValidSaveGame");
	}

	UOLOrbisEngine_execHasAnyValidSaveGame_Params HasAnyValidSaveGame_Params;
	memset(&HasAnyValidSaveGame_Params, 0, sizeof(HasAnyValidSaveGame_Params));

	uFnHasAnyValidSaveGame->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHasAnyValidSaveGame, &HasAnyValidSaveGame_Params, nullptr);
	uFnHasAnyValidSaveGame->FunctionFlags |= 0x400;

	return HasAnyValidSaveGame_Params.ReturnValue;
};

// Function OLGame.OLOrbisEngine.HasValidSaveGame
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ELoadGameResult                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

ELoadGameResult UOLOrbisEngine::HasValidSaveGame()
{
	static UFunction* uFnHasValidSaveGame = nullptr;

	if (!uFnHasValidSaveGame)
	{
		uFnHasValidSaveGame = UFunction::FindFunction("Function OLGame.OLOrbisEngine.HasValidSaveGame");
	}

	UOLOrbisEngine_execHasValidSaveGame_Params HasValidSaveGame_Params;
	memset(&HasValidSaveGame_Params, 0, sizeof(HasValidSaveGame_Params));

	uFnHasValidSaveGame->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHasValidSaveGame, &HasValidSaveGame_Params, nullptr);
	uFnHasValidSaveGame->FunctionFlags |= 0x400;

	return HasValidSaveGame_Params.ReturnValue;
};

// Function OLGame.OLOrbisEngine.GetNumberOfSaveGames
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLOrbisEngine::GetNumberOfSaveGames()
{
	static UFunction* uFnGetNumberOfSaveGames = nullptr;

	if (!uFnGetNumberOfSaveGames)
	{
		uFnGetNumberOfSaveGames = UFunction::FindFunction("Function OLGame.OLOrbisEngine.GetNumberOfSaveGames");
	}

	UOLOrbisEngine_execGetNumberOfSaveGames_Params GetNumberOfSaveGames_Params;
	memset(&GetNumberOfSaveGames_Params, 0, sizeof(GetNumberOfSaveGames_Params));

	uFnGetNumberOfSaveGames->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetNumberOfSaveGames, &GetNumberOfSaveGames_Params, nullptr);
	uFnGetNumberOfSaveGames->FunctionFlags |= 0x400;

	return GetNumberOfSaveGames_Params.ReturnValue;
};

// Function OLGame.OLOrbisEngine.SelectAndLoadGame
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FScriptDelegate         Callback                       (CPF_Parm | CPF_NeedCtorLink)

bool UOLOrbisEngine::SelectAndLoadGame(struct FScriptDelegate Callback)
{
	static UFunction* uFnSelectAndLoadGame = nullptr;

	if (!uFnSelectAndLoadGame)
	{
		uFnSelectAndLoadGame = UFunction::FindFunction("Function OLGame.OLOrbisEngine.SelectAndLoadGame");
	}

	UOLOrbisEngine_execSelectAndLoadGame_Params SelectAndLoadGame_Params;
	memset(&SelectAndLoadGame_Params, 0, sizeof(SelectAndLoadGame_Params));
	memcpy_s(&SelectAndLoadGame_Params.Callback, sizeof(SelectAndLoadGame_Params.Callback), &Callback, sizeof(Callback));

	this->ProcessEvent(uFnSelectAndLoadGame, &SelectAndLoadGame_Params, nullptr);

	return SelectAndLoadGame_Params.ReturnValue;
};

// Function OLGame.OLOrbisEngine.NativeSelectAndLoadGame
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLOrbisEngine::NativeSelectAndLoadGame()
{
	static UFunction* uFnNativeSelectAndLoadGame = nullptr;

	if (!uFnNativeSelectAndLoadGame)
	{
		uFnNativeSelectAndLoadGame = UFunction::FindFunction("Function OLGame.OLOrbisEngine.NativeSelectAndLoadGame");
	}

	UOLOrbisEngine_execNativeSelectAndLoadGame_Params NativeSelectAndLoadGame_Params;
	memset(&NativeSelectAndLoadGame_Params, 0, sizeof(NativeSelectAndLoadGame_Params));

	uFnNativeSelectAndLoadGame->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeSelectAndLoadGame, &NativeSelectAndLoadGame_Params, nullptr);
	uFnNativeSelectAndLoadGame->FunctionFlags |= 0x400;

	return NativeSelectAndLoadGame_Params.ReturnValue;
};

// Function OLGame.OLOrbisEngine.NewSaveLocation
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  startCP                        (CPF_Parm | CPF_NeedCtorLink)

void UOLOrbisEngine::NewSaveLocation(class FString startCP)
{
	static UFunction* uFnNewSaveLocation = nullptr;

	if (!uFnNewSaveLocation)
	{
		uFnNewSaveLocation = UFunction::FindFunction("Function OLGame.OLOrbisEngine.NewSaveLocation");
	}

	UOLOrbisEngine_execNewSaveLocation_Params NewSaveLocation_Params;
	memset(&NewSaveLocation_Params, 0, sizeof(NewSaveLocation_Params));
	memcpy_s(&NewSaveLocation_Params.startCP, sizeof(NewSaveLocation_Params.startCP), &startCP, sizeof(startCP));

	this->ProcessEvent(uFnNewSaveLocation, &NewSaveLocation_Params, nullptr);
};

// Function OLGame.OLOrbisEngine.NativeNewSaveLocation
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  startCP                        (CPF_Parm | CPF_NeedCtorLink)

void UOLOrbisEngine::NativeNewSaveLocation(class FString startCP)
{
	static UFunction* uFnNativeNewSaveLocation = nullptr;

	if (!uFnNativeNewSaveLocation)
	{
		uFnNativeNewSaveLocation = UFunction::FindFunction("Function OLGame.OLOrbisEngine.NativeNewSaveLocation");
	}

	UOLOrbisEngine_execNativeNewSaveLocation_Params NativeNewSaveLocation_Params;
	memset(&NativeNewSaveLocation_Params, 0, sizeof(NativeNewSaveLocation_Params));
	memcpy_s(&NativeNewSaveLocation_Params.startCP, sizeof(NativeNewSaveLocation_Params.startCP), &startCP, sizeof(startCP));

	uFnNativeNewSaveLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeNewSaveLocation, &NativeNewSaveLocation_Params, nullptr);
	uFnNativeNewSaveLocation->FunctionFlags |= 0x400;
};

// Function OLGame.OLOrbisEngine.SelectSaveLocation
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  startCP                        (CPF_Parm | CPF_NeedCtorLink)
// struct FScriptDelegate         Callback                       (CPF_Parm | CPF_NeedCtorLink)

bool UOLOrbisEngine::SelectSaveLocation(class FString startCP, struct FScriptDelegate Callback)
{
	static UFunction* uFnSelectSaveLocation = nullptr;

	if (!uFnSelectSaveLocation)
	{
		uFnSelectSaveLocation = UFunction::FindFunction("Function OLGame.OLOrbisEngine.SelectSaveLocation");
	}

	UOLOrbisEngine_execSelectSaveLocation_Params SelectSaveLocation_Params;
	memset(&SelectSaveLocation_Params, 0, sizeof(SelectSaveLocation_Params));
	memcpy_s(&SelectSaveLocation_Params.startCP, sizeof(SelectSaveLocation_Params.startCP), &startCP, sizeof(startCP));
	memcpy_s(&SelectSaveLocation_Params.Callback, sizeof(SelectSaveLocation_Params.Callback), &Callback, sizeof(Callback));

	this->ProcessEvent(uFnSelectSaveLocation, &SelectSaveLocation_Params, nullptr);

	return SelectSaveLocation_Params.ReturnValue;
};

// Function OLGame.OLOrbisEngine.NativeSelectSaveLocation
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  startCP                        (CPF_Parm | CPF_NeedCtorLink)

bool UOLOrbisEngine::NativeSelectSaveLocation(class FString startCP)
{
	static UFunction* uFnNativeSelectSaveLocation = nullptr;

	if (!uFnNativeSelectSaveLocation)
	{
		uFnNativeSelectSaveLocation = UFunction::FindFunction("Function OLGame.OLOrbisEngine.NativeSelectSaveLocation");
	}

	UOLOrbisEngine_execNativeSelectSaveLocation_Params NativeSelectSaveLocation_Params;
	memset(&NativeSelectSaveLocation_Params, 0, sizeof(NativeSelectSaveLocation_Params));
	memcpy_s(&NativeSelectSaveLocation_Params.startCP, sizeof(NativeSelectSaveLocation_Params.startCP), &startCP, sizeof(startCP));

	uFnNativeSelectSaveLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeSelectSaveLocation, &NativeSelectSaveLocation_Params, nullptr);
	uFnNativeSelectSaveLocation->FunctionFlags |= 0x400;

	return NativeSelectSaveLocation_Params.ReturnValue;
};

// Function OLGame.OLOrbisEngine.FinishedSaveDataDialog
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bSuccess                       (CPF_Parm)

void UOLOrbisEngine::eventFinishedSaveDataDialog(bool bSuccess)
{
	static UFunction* uFnFinishedSaveDataDialog = nullptr;

	if (!uFnFinishedSaveDataDialog)
	{
		uFnFinishedSaveDataDialog = UFunction::FindFunction("Function OLGame.OLOrbisEngine.FinishedSaveDataDialog");
	}

	UOLOrbisEngine_eventFinishedSaveDataDialog_Params FinishedSaveDataDialog_Params;
	memset(&FinishedSaveDataDialog_Params, 0, sizeof(FinishedSaveDataDialog_Params));
	FinishedSaveDataDialog_Params.bSuccess = bSuccess;

	this->ProcessEvent(uFnFinishedSaveDataDialog, &FinishedSaveDataDialog_Params, nullptr);
};

// Function OLGame.OLOrbisEngine.SaveDataDialogDoneCallback
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// bool                           bSuccess                       (CPF_Parm)

void UOLOrbisEngine::SaveDataDialogDoneCallback(bool bSuccess)
{
	static UFunction* uFnSaveDataDialogDoneCallback = nullptr;

	if (!uFnSaveDataDialogDoneCallback)
	{
		uFnSaveDataDialogDoneCallback = UFunction::FindFunction("Function OLGame.OLOrbisEngine.SaveDataDialogDoneCallback");
	}

	UOLOrbisEngine_execSaveDataDialogDoneCallback_Params SaveDataDialogDoneCallback_Params;
	memset(&SaveDataDialogDoneCallback_Params, 0, sizeof(SaveDataDialogDoneCallback_Params));
	SaveDataDialogDoneCallback_Params.bSuccess = bSuccess;

	this->ProcessEvent(uFnSaveDataDialogDoneCallback, &SaveDataDialogDoneCallback_Params, nullptr);
};

// Function OLGame.OLOrbisEngine.UsingFixedSaveLocation
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLOrbisEngine::UsingFixedSaveLocation()
{
	static UFunction* uFnUsingFixedSaveLocation = nullptr;

	if (!uFnUsingFixedSaveLocation)
	{
		uFnUsingFixedSaveLocation = UFunction::FindFunction("Function OLGame.OLOrbisEngine.UsingFixedSaveLocation");
	}

	UOLOrbisEngine_execUsingFixedSaveLocation_Params UsingFixedSaveLocation_Params;
	memset(&UsingFixedSaveLocation_Params, 0, sizeof(UsingFixedSaveLocation_Params));

	this->ProcessEvent(uFnUsingFixedSaveLocation, &UsingFixedSaveLocation_Params, nullptr);

	return UsingFixedSaveLocation_Params.ReturnValue;
};

// Function OLGame.OLWinEngine.UpdateProfileKeyBindingsFromSystem
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UOLProfileSettings*      ProfileSettings                (CPF_Parm)

bool UOLWinEngine::UpdateProfileKeyBindingsFromSystem(class UOLProfileSettings* ProfileSettings)
{
	static UFunction* uFnUpdateProfileKeyBindingsFromSystem = nullptr;

	if (!uFnUpdateProfileKeyBindingsFromSystem)
	{
		uFnUpdateProfileKeyBindingsFromSystem = UFunction::FindFunction("Function OLGame.OLWinEngine.UpdateProfileKeyBindingsFromSystem");
	}

	UOLWinEngine_execUpdateProfileKeyBindingsFromSystem_Params UpdateProfileKeyBindingsFromSystem_Params;
	memset(&UpdateProfileKeyBindingsFromSystem_Params, 0, sizeof(UpdateProfileKeyBindingsFromSystem_Params));
	memcpy_s(&UpdateProfileKeyBindingsFromSystem_Params.ProfileSettings, sizeof(UpdateProfileKeyBindingsFromSystem_Params.ProfileSettings), &ProfileSettings, sizeof(ProfileSettings));

	uFnUpdateProfileKeyBindingsFromSystem->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateProfileKeyBindingsFromSystem, &UpdateProfileKeyBindingsFromSystem_Params, nullptr);
	uFnUpdateProfileKeyBindingsFromSystem->FunctionFlags |= 0x400;

	return UpdateProfileKeyBindingsFromSystem_Params.ReturnValue;
};

// Function OLGame.OLWinEngine.UpdateProfileFromSystemSettings
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UOLProfileSettings*      ProfileSettings                (CPF_Parm)

bool UOLWinEngine::UpdateProfileFromSystemSettings(class UOLProfileSettings* ProfileSettings)
{
	static UFunction* uFnUpdateProfileFromSystemSettings = nullptr;

	if (!uFnUpdateProfileFromSystemSettings)
	{
		uFnUpdateProfileFromSystemSettings = UFunction::FindFunction("Function OLGame.OLWinEngine.UpdateProfileFromSystemSettings");
	}

	UOLWinEngine_execUpdateProfileFromSystemSettings_Params UpdateProfileFromSystemSettings_Params;
	memset(&UpdateProfileFromSystemSettings_Params, 0, sizeof(UpdateProfileFromSystemSettings_Params));
	memcpy_s(&UpdateProfileFromSystemSettings_Params.ProfileSettings, sizeof(UpdateProfileFromSystemSettings_Params.ProfileSettings), &ProfileSettings, sizeof(ProfileSettings));

	uFnUpdateProfileFromSystemSettings->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateProfileFromSystemSettings, &UpdateProfileFromSystemSettings_Params, nullptr);
	uFnUpdateProfileFromSystemSettings->FunctionFlags |= 0x400;

	return UpdateProfileFromSystemSettings_Params.ReturnValue;
};

// Function OLGame.OLWinEngine.UpdateFullscreenFromSystemSettings
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UOLProfileSettings*      ProfileSettings                (CPF_Parm)

bool UOLWinEngine::UpdateFullscreenFromSystemSettings(class UOLProfileSettings* ProfileSettings)
{
	static UFunction* uFnUpdateFullscreenFromSystemSettings = nullptr;

	if (!uFnUpdateFullscreenFromSystemSettings)
	{
		uFnUpdateFullscreenFromSystemSettings = UFunction::FindFunction("Function OLGame.OLWinEngine.UpdateFullscreenFromSystemSettings");
	}

	UOLWinEngine_execUpdateFullscreenFromSystemSettings_Params UpdateFullscreenFromSystemSettings_Params;
	memset(&UpdateFullscreenFromSystemSettings_Params, 0, sizeof(UpdateFullscreenFromSystemSettings_Params));
	memcpy_s(&UpdateFullscreenFromSystemSettings_Params.ProfileSettings, sizeof(UpdateFullscreenFromSystemSettings_Params.ProfileSettings), &ProfileSettings, sizeof(ProfileSettings));

	uFnUpdateFullscreenFromSystemSettings->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateFullscreenFromSystemSettings, &UpdateFullscreenFromSystemSettings_Params, nullptr);
	uFnUpdateFullscreenFromSystemSettings->FunctionFlags |= 0x400;

	return UpdateFullscreenFromSystemSettings_Params.ReturnValue;
};

// Function OLGame.OLWinEngine.ApplySystemSettings
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UOLProfileSettings*      ProfileSettings                (CPF_Parm)

bool UOLWinEngine::ApplySystemSettings(class UOLProfileSettings* ProfileSettings)
{
	static UFunction* uFnApplySystemSettings = nullptr;

	if (!uFnApplySystemSettings)
	{
		uFnApplySystemSettings = UFunction::FindFunction("Function OLGame.OLWinEngine.ApplySystemSettings");
	}

	UOLWinEngine_execApplySystemSettings_Params ApplySystemSettings_Params;
	memset(&ApplySystemSettings_Params, 0, sizeof(ApplySystemSettings_Params));
	memcpy_s(&ApplySystemSettings_Params.ProfileSettings, sizeof(ApplySystemSettings_Params.ProfileSettings), &ProfileSettings, sizeof(ProfileSettings));

	uFnApplySystemSettings->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnApplySystemSettings, &ApplySystemSettings_Params, nullptr);
	uFnApplySystemSettings->FunctionFlags |= 0x400;

	return ApplySystemSettings_Params.ReturnValue;
};

// Function OLGame.OLWinEngine.DebugLoadGame
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Filename                       (CPF_Parm | CPF_NeedCtorLink)

void UOLWinEngine::DebugLoadGame(class FString Filename)
{
	static UFunction* uFnDebugLoadGame = nullptr;

	if (!uFnDebugLoadGame)
	{
		uFnDebugLoadGame = UFunction::FindFunction("Function OLGame.OLWinEngine.DebugLoadGame");
	}

	UOLWinEngine_execDebugLoadGame_Params DebugLoadGame_Params;
	memset(&DebugLoadGame_Params, 0, sizeof(DebugLoadGame_Params));
	memcpy_s(&DebugLoadGame_Params.Filename, sizeof(DebugLoadGame_Params.Filename), &Filename, sizeof(Filename));

	uFnDebugLoadGame->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDebugLoadGame, &DebugLoadGame_Params, nullptr);
	uFnDebugLoadGame->FunctionFlags |= 0x400;
};

// Function OLGame.OLWinEngine.DebugSaveGame
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Filename                       (CPF_Parm | CPF_NeedCtorLink)

void UOLWinEngine::DebugSaveGame(class FString Filename)
{
	static UFunction* uFnDebugSaveGame = nullptr;

	if (!uFnDebugSaveGame)
	{
		uFnDebugSaveGame = UFunction::FindFunction("Function OLGame.OLWinEngine.DebugSaveGame");
	}

	UOLWinEngine_execDebugSaveGame_Params DebugSaveGame_Params;
	memset(&DebugSaveGame_Params, 0, sizeof(DebugSaveGame_Params));
	memcpy_s(&DebugSaveGame_Params.Filename, sizeof(DebugSaveGame_Params.Filename), &Filename, sizeof(Filename));

	uFnDebugSaveGame->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDebugSaveGame, &DebugSaveGame_Params, nullptr);
	uFnDebugSaveGame->FunctionFlags |= 0x400;
};

// Function OLGame.OLWinEngine.SaveAllCheckpoints
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLWinEngine::SaveAllCheckpoints()
{
	static UFunction* uFnSaveAllCheckpoints = nullptr;

	if (!uFnSaveAllCheckpoints)
	{
		uFnSaveAllCheckpoints = UFunction::FindFunction("Function OLGame.OLWinEngine.SaveAllCheckpoints");
	}

	UOLWinEngine_execSaveAllCheckpoints_Params SaveAllCheckpoints_Params;
	memset(&SaveAllCheckpoints_Params, 0, sizeof(SaveAllCheckpoints_Params));

	uFnSaveAllCheckpoints->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSaveAllCheckpoints, &SaveAllCheckpoints_Params, nullptr);
	uFnSaveAllCheckpoints->FunctionFlags |= 0x400;
};

// Function OLGame.OLWinEngine.RefreshSaveFiles
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLWinEngine::RefreshSaveFiles()
{
	static UFunction* uFnRefreshSaveFiles = nullptr;

	if (!uFnRefreshSaveFiles)
	{
		uFnRefreshSaveFiles = UFunction::FindFunction("Function OLGame.OLWinEngine.RefreshSaveFiles");
	}

	UOLWinEngine_execRefreshSaveFiles_Params RefreshSaveFiles_Params;
	memset(&RefreshSaveFiles_Params, 0, sizeof(RefreshSaveFiles_Params));

	uFnRefreshSaveFiles->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRefreshSaveFiles, &RefreshSaveFiles_Params, nullptr);
	uFnRefreshSaveFiles->FunctionFlags |= 0x400;
};

// Function OLGame.OLWinEngine.DeleteSaveFile
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Filename                       (CPF_Parm | CPF_NeedCtorLink)

void UOLWinEngine::DeleteSaveFile(class FString Filename)
{
	static UFunction* uFnDeleteSaveFile = nullptr;

	if (!uFnDeleteSaveFile)
	{
		uFnDeleteSaveFile = UFunction::FindFunction("Function OLGame.OLWinEngine.DeleteSaveFile");
	}

	UOLWinEngine_execDeleteSaveFile_Params DeleteSaveFile_Params;
	memset(&DeleteSaveFile_Params, 0, sizeof(DeleteSaveFile_Params));
	memcpy_s(&DeleteSaveFile_Params.Filename, sizeof(DeleteSaveFile_Params.Filename), &Filename, sizeof(Filename));

	uFnDeleteSaveFile->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDeleteSaveFile, &DeleteSaveFile_Params, nullptr);
	uFnDeleteSaveFile->FunctionFlags |= 0x400;
};

// Function OLGame.OLWinEngine.LoadSaveFile
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ELoadGameResult                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  Filename                       (CPF_Parm | CPF_NeedCtorLink)

ELoadGameResult UOLWinEngine::LoadSaveFile(class FString Filename)
{
	static UFunction* uFnLoadSaveFile = nullptr;

	if (!uFnLoadSaveFile)
	{
		uFnLoadSaveFile = UFunction::FindFunction("Function OLGame.OLWinEngine.LoadSaveFile");
	}

	UOLWinEngine_execLoadSaveFile_Params LoadSaveFile_Params;
	memset(&LoadSaveFile_Params, 0, sizeof(LoadSaveFile_Params));
	memcpy_s(&LoadSaveFile_Params.Filename, sizeof(LoadSaveFile_Params.Filename), &Filename, sizeof(Filename));

	uFnLoadSaveFile->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnLoadSaveFile, &LoadSaveFile_Params, nullptr);
	uFnLoadSaveFile->FunctionFlags |= 0x400;

	return LoadSaveFile_Params.ReturnValue;
};

// Function OLGame.OLWinEngine.HasAnyValidSaveGame
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ELoadGameResult                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

ELoadGameResult UOLWinEngine::HasAnyValidSaveGame()
{
	static UFunction* uFnHasAnyValidSaveGame = nullptr;

	if (!uFnHasAnyValidSaveGame)
	{
		uFnHasAnyValidSaveGame = UFunction::FindFunction("Function OLGame.OLWinEngine.HasAnyValidSaveGame");
	}

	UOLWinEngine_execHasAnyValidSaveGame_Params HasAnyValidSaveGame_Params;
	memset(&HasAnyValidSaveGame_Params, 0, sizeof(HasAnyValidSaveGame_Params));

	uFnHasAnyValidSaveGame->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHasAnyValidSaveGame, &HasAnyValidSaveGame_Params, nullptr);
	uFnHasAnyValidSaveGame->FunctionFlags |= 0x400;

	return HasAnyValidSaveGame_Params.ReturnValue;
};

// Function OLGame.OLWinEngine.HasValidSaveGame
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ELoadGameResult                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

ELoadGameResult UOLWinEngine::HasValidSaveGame()
{
	static UFunction* uFnHasValidSaveGame = nullptr;

	if (!uFnHasValidSaveGame)
	{
		uFnHasValidSaveGame = UFunction::FindFunction("Function OLGame.OLWinEngine.HasValidSaveGame");
	}

	UOLWinEngine_execHasValidSaveGame_Params HasValidSaveGame_Params;
	memset(&HasValidSaveGame_Params, 0, sizeof(HasValidSaveGame_Params));

	uFnHasValidSaveGame->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHasValidSaveGame, &HasValidSaveGame_Params, nullptr);
	uFnHasValidSaveGame->FunctionFlags |= 0x400;

	return HasValidSaveGame_Params.ReturnValue;
};

// Function OLGame.OLFlashLight.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AOLFlashLight::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function OLGame.OLFlashLight.OnToggle");
	}

	AOLFlashLight_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	memcpy_s(&OnToggle_Params.Action, sizeof(OnToggle_Params.Action), &Action, sizeof(Action));

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function OLGame.OLFlashLight.TurnOff
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bHideMesh                      (CPF_Parm)

void AOLFlashLight::TurnOff(bool bHideMesh)
{
	static UFunction* uFnTurnOff = nullptr;

	if (!uFnTurnOff)
	{
		uFnTurnOff = UFunction::FindFunction("Function OLGame.OLFlashLight.TurnOff");
	}

	AOLFlashLight_execTurnOff_Params TurnOff_Params;
	memset(&TurnOff_Params, 0, sizeof(TurnOff_Params));
	TurnOff_Params.bHideMesh = bHideMesh;

	uFnTurnOff->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTurnOff, &TurnOff_Params, nullptr);
	uFnTurnOff->FunctionFlags |= 0x400;
};

// Function OLGame.OLFlashLight.TurnOn
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLFlashLight::TurnOn()
{
	static UFunction* uFnTurnOn = nullptr;

	if (!uFnTurnOn)
	{
		uFnTurnOn = UFunction::FindFunction("Function OLGame.OLFlashLight.TurnOn");
	}

	AOLFlashLight_execTurnOn_Params TurnOn_Params;
	memset(&TurnOn_Params, 0, sizeof(TurnOn_Params));

	uFnTurnOn->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTurnOn, &TurnOn_Params, nullptr);
	uFnTurnOn->FunctionFlags |= 0x400;
};

// Function OLGame.OLLantern.TurnOff
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bHideMesh                      (CPF_Parm)

void AOLLantern::TurnOff(bool bHideMesh)
{
	static UFunction* uFnTurnOff = nullptr;

	if (!uFnTurnOff)
	{
		uFnTurnOff = UFunction::FindFunction("Function OLGame.OLLantern.TurnOff");
	}

	AOLLantern_execTurnOff_Params TurnOff_Params;
	memset(&TurnOff_Params, 0, sizeof(TurnOff_Params));
	TurnOff_Params.bHideMesh = bHideMesh;

	uFnTurnOff->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTurnOff, &TurnOff_Params, nullptr);
	uFnTurnOff->FunctionFlags |= 0x400;
};

// Function OLGame.OLLantern.TurnOn
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLLantern::TurnOn()
{
	static UFunction* uFnTurnOn = nullptr;

	if (!uFnTurnOn)
	{
		uFnTurnOn = UFunction::FindFunction("Function OLGame.OLLantern.TurnOn");
	}

	AOLLantern_execTurnOn_Params TurnOn_Params;
	memset(&TurnOn_Params, 0, sizeof(TurnOn_Params));

	uFnTurnOn->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTurnOn, &TurnOn_Params, nullptr);
	uFnTurnOn->FunctionFlags |= 0x400;
};

// Function OLGame.OLTorch.TurnOff
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bHideMesh                      (CPF_Parm)

void AOLTorch::TurnOff(bool bHideMesh)
{
	static UFunction* uFnTurnOff = nullptr;

	if (!uFnTurnOff)
	{
		uFnTurnOff = UFunction::FindFunction("Function OLGame.OLTorch.TurnOff");
	}

	AOLTorch_execTurnOff_Params TurnOff_Params;
	memset(&TurnOff_Params, 0, sizeof(TurnOff_Params));
	TurnOff_Params.bHideMesh = bHideMesh;

	uFnTurnOff->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTurnOff, &TurnOff_Params, nullptr);
	uFnTurnOff->FunctionFlags |= 0x400;
};

// Function OLGame.OLTorch.TurnOn
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLTorch::TurnOn()
{
	static UFunction* uFnTurnOn = nullptr;

	if (!uFnTurnOn)
	{
		uFnTurnOn = UFunction::FindFunction("Function OLGame.OLTorch.TurnOn");
	}

	AOLTorch_execTurnOn_Params TurnOn_Params;
	memset(&TurnOn_Params, 0, sizeof(TurnOn_Params));

	uFnTurnOn->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTurnOn, &TurnOn_Params, nullptr);
	uFnTurnOn->FunctionFlags |= 0x400;
};

// Function OLGame.OLFloatingObjectBase.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AOLFloatingObjectBase::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function OLGame.OLFloatingObjectBase.OnToggle");
	}

	AOLFloatingObjectBase_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	memcpy_s(&OnToggle_Params.Action, sizeof(OnToggle_Params.Action), &Action, sizeof(Action));

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function OLGame.OLFloorMaterialVolume.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AOLFloorMaterialVolume::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function OLGame.OLFloorMaterialVolume.OnToggle");
	}

	AOLFloorMaterialVolume_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	memcpy_s(&OnToggle_Params.Action, sizeof(OnToggle_Params.Action), &Action, sizeof(Action));

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function OLGame.OLFXManager.SetFXForEnemyPawn
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AOLEnemyPawn*            EnemyPawn                      (CPF_Parm)

void UOLFXManager::SetFXForEnemyPawn(class AOLEnemyPawn* EnemyPawn)
{
	static UFunction* uFnSetFXForEnemyPawn = nullptr;

	if (!uFnSetFXForEnemyPawn)
	{
		uFnSetFXForEnemyPawn = UFunction::FindFunction("Function OLGame.OLFXManager.SetFXForEnemyPawn");
	}

	UOLFXManager_execSetFXForEnemyPawn_Params SetFXForEnemyPawn_Params;
	memset(&SetFXForEnemyPawn_Params, 0, sizeof(SetFXForEnemyPawn_Params));
	memcpy_s(&SetFXForEnemyPawn_Params.EnemyPawn, sizeof(SetFXForEnemyPawn_Params.EnemyPawn), &EnemyPawn, sizeof(EnemyPawn));

	uFnSetFXForEnemyPawn->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetFXForEnemyPawn, &SetFXForEnemyPawn_Params, nullptr);
	uFnSetFXForEnemyPawn->FunctionFlags |= 0x400;
};

// Function OLGame.OLFXManager.DeactivateNightVisionEffect
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLFXManager::DeactivateNightVisionEffect()
{
	static UFunction* uFnDeactivateNightVisionEffect = nullptr;

	if (!uFnDeactivateNightVisionEffect)
	{
		uFnDeactivateNightVisionEffect = UFunction::FindFunction("Function OLGame.OLFXManager.DeactivateNightVisionEffect");
	}

	UOLFXManager_execDeactivateNightVisionEffect_Params DeactivateNightVisionEffect_Params;
	memset(&DeactivateNightVisionEffect_Params, 0, sizeof(DeactivateNightVisionEffect_Params));

	uFnDeactivateNightVisionEffect->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDeactivateNightVisionEffect, &DeactivateNightVisionEffect_Params, nullptr);
	uFnDeactivateNightVisionEffect->FunctionFlags |= 0x400;
};

// Function OLGame.OLFXManager.ActivateCamcorderEffect
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLFXManager::ActivateCamcorderEffect()
{
	static UFunction* uFnActivateCamcorderEffect = nullptr;

	if (!uFnActivateCamcorderEffect)
	{
		uFnActivateCamcorderEffect = UFunction::FindFunction("Function OLGame.OLFXManager.ActivateCamcorderEffect");
	}

	UOLFXManager_execActivateCamcorderEffect_Params ActivateCamcorderEffect_Params;
	memset(&ActivateCamcorderEffect_Params, 0, sizeof(ActivateCamcorderEffect_Params));

	uFnActivateCamcorderEffect->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnActivateCamcorderEffect, &ActivateCamcorderEffect_Params, nullptr);
	uFnActivateCamcorderEffect->FunctionFlags |= 0x400;
};

// Function OLGame.OLFXManager.ActivateNightVisionEffect
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bPowered                       (CPF_Parm)

void UOLFXManager::ActivateNightVisionEffect(bool bPowered)
{
	static UFunction* uFnActivateNightVisionEffect = nullptr;

	if (!uFnActivateNightVisionEffect)
	{
		uFnActivateNightVisionEffect = UFunction::FindFunction("Function OLGame.OLFXManager.ActivateNightVisionEffect");
	}

	UOLFXManager_execActivateNightVisionEffect_Params ActivateNightVisionEffect_Params;
	memset(&ActivateNightVisionEffect_Params, 0, sizeof(ActivateNightVisionEffect_Params));
	ActivateNightVisionEffect_Params.bPowered = bPowered;

	uFnActivateNightVisionEffect->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnActivateNightVisionEffect, &ActivateNightVisionEffect_Params, nullptr);
	uFnActivateNightVisionEffect->FunctionFlags |= 0x400;
};

// Function OLGame.OLFXManager.SetPPSFromScript
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EPPSMode                       newPPS                         (CPF_Parm)

void UOLFXManager::SetPPSFromScript(EPPSMode newPPS)
{
	static UFunction* uFnSetPPSFromScript = nullptr;

	if (!uFnSetPPSFromScript)
	{
		uFnSetPPSFromScript = UFunction::FindFunction("Function OLGame.OLFXManager.SetPPSFromScript");
	}

	UOLFXManager_execSetPPSFromScript_Params SetPPSFromScript_Params;
	memset(&SetPPSFromScript_Params, 0, sizeof(SetPPSFromScript_Params));
	memcpy_s(&SetPPSFromScript_Params.newPPS, sizeof(SetPPSFromScript_Params.newPPS), &newPPS, sizeof(newPPS));

	uFnSetPPSFromScript->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetPPSFromScript, &SetPPSFromScript_Params, nullptr);
	uFnSetPPSFromScript->FunctionFlags |= 0x400;
};

// Function OLGame.OLFXManager.GetFXManager
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLFXManager*            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UOLFXManager* UOLFXManager::GetFXManager()
{
	static UFunction* uFnGetFXManager = nullptr;

	if (!uFnGetFXManager)
	{
		uFnGetFXManager = UFunction::FindFunction("Function OLGame.OLFXManager.GetFXManager");
	}

	UOLFXManager_execGetFXManager_Params GetFXManager_Params;
	memset(&GetFXManager_Params, 0, sizeof(GetFXManager_Params));

	uFnGetFXManager->FunctionFlags &= ~0x400;
	UOLFXManager::StaticClass()->ProcessEvent(uFnGetFXManager, &GetFXManager_Params, nullptr);
	uFnGetFXManager->FunctionFlags |= 0x400;

	return GetFXManager_Params.ReturnValue;
};

// Function OLGame.OLGame.CloseHint
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLGame::eventCloseHint()
{
	static UFunction* uFnCloseHint = nullptr;

	if (!uFnCloseHint)
	{
		uFnCloseHint = UFunction::FindFunction("Function OLGame.OLGame.CloseHint");
	}

	AOLGame_eventCloseHint_Params CloseHint_Params;
	memset(&CloseHint_Params, 0, sizeof(CloseHint_Params));

	this->ProcessEvent(uFnCloseHint, &CloseHint_Params, nullptr);
};

// Function OLGame.OLGame.HideHint
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLGame::eventHideHint()
{
	static UFunction* uFnHideHint = nullptr;

	if (!uFnHideHint)
	{
		uFnHideHint = UFunction::FindFunction("Function OLGame.OLGame.HideHint");
	}

	AOLGame_eventHideHint_Params HideHint_Params;
	memset(&HideHint_Params, 0, sizeof(HideHint_Params));

	this->ProcessEvent(uFnHideHint, &HideHint_Params, nullptr);
};

// Function OLGame.OLGame.ShowHint
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  MessageText                    (CPF_Parm | CPF_NeedCtorLink)

void AOLGame::eventShowHint(class FString MessageText)
{
	static UFunction* uFnShowHint = nullptr;

	if (!uFnShowHint)
	{
		uFnShowHint = UFunction::FindFunction("Function OLGame.OLGame.ShowHint");
	}

	AOLGame_eventShowHint_Params ShowHint_Params;
	memset(&ShowHint_Params, 0, sizeof(ShowHint_Params));
	memcpy_s(&ShowHint_Params.MessageText, sizeof(ShowHint_Params.MessageText), &MessageText, sizeof(MessageText));

	this->ProcessEvent(uFnShowHint, &ShowHint_Params, nullptr);
};

// Function OLGame.OLGame.ClearPause
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLGame::eventClearPause()
{
	static UFunction* uFnClearPause = nullptr;

	if (!uFnClearPause)
	{
		uFnClearPause = UFunction::FindFunction("Function OLGame.OLGame.ClearPause");
	}

	AOLGame_eventClearPause_Params ClearPause_Params;
	memset(&ClearPause_Params, 0, sizeof(ClearPause_Params));

	this->ProcessEvent(uFnClearPause, &ClearPause_Params, nullptr);
};

// Function OLGame.OLGame.SetPause
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class APlayerController*       PC                             (CPF_Parm)
// struct FScriptDelegate         CanUnpauseDelegate             (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)

bool AOLGame::SetPause(class APlayerController* PC, struct FScriptDelegate CanUnpauseDelegate)
{
	static UFunction* uFnSetPause = nullptr;

	if (!uFnSetPause)
	{
		uFnSetPause = UFunction::FindFunction("Function OLGame.OLGame.SetPause");
	}

	AOLGame_execSetPause_Params SetPause_Params;
	memset(&SetPause_Params, 0, sizeof(SetPause_Params));
	memcpy_s(&SetPause_Params.PC, sizeof(SetPause_Params.PC), &PC, sizeof(PC));
	memcpy_s(&SetPause_Params.CanUnpauseDelegate, sizeof(SetPause_Params.CanUnpauseDelegate), &CanUnpauseDelegate, sizeof(CanUnpauseDelegate));

	this->ProcessEvent(uFnSetPause, &SetPause_Params, nullptr);

	return SetPause_Params.ReturnValue;
};

// Function OLGame.OLGame.HandleUnpaused
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLGame::HandleUnpaused()
{
	static UFunction* uFnHandleUnpaused = nullptr;

	if (!uFnHandleUnpaused)
	{
		uFnHandleUnpaused = UFunction::FindFunction("Function OLGame.OLGame.HandleUnpaused");
	}

	AOLGame_execHandleUnpaused_Params HandleUnpaused_Params;
	memset(&HandleUnpaused_Params, 0, sizeof(HandleUnpaused_Params));

	uFnHandleUnpaused->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHandleUnpaused, &HandleUnpaused_Params, nullptr);
	uFnHandleUnpaused->FunctionFlags |= 0x400;
};

// Function OLGame.OLGame.HandlePaused
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLGame::HandlePaused()
{
	static UFunction* uFnHandlePaused = nullptr;

	if (!uFnHandlePaused)
	{
		uFnHandlePaused = UFunction::FindFunction("Function OLGame.OLGame.HandlePaused");
	}

	AOLGame_execHandlePaused_Params HandlePaused_Params;
	memset(&HandlePaused_Params, 0, sizeof(HandlePaused_Params));

	uFnHandlePaused->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHandlePaused, &HandlePaused_Params, nullptr);
	uFnHandlePaused->FunctionFlags |= 0x400;
};

// Function OLGame.OLGame.SetGameSpeed
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          T                              (CPF_Parm)

void AOLGame::SetGameSpeed(float T)
{
	static UFunction* uFnSetGameSpeed = nullptr;

	if (!uFnSetGameSpeed)
	{
		uFnSetGameSpeed = UFunction::FindFunction("Function OLGame.OLGame.SetGameSpeed");
	}

	AOLGame_execSetGameSpeed_Params SetGameSpeed_Params;
	memset(&SetGameSpeed_Params, 0, sizeof(SetGameSpeed_Params));
	memcpy_s(&SetGameSpeed_Params.T, sizeof(SetGameSpeed_Params.T), &T, sizeof(T));

	this->ProcessEvent(uFnSetGameSpeed, &SetGameSpeed_Params, nullptr);
};

// Function OLGame.OLGame.TravelToStartupMap
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLGame::eventTravelToStartupMap()
{
	static UFunction* uFnTravelToStartupMap = nullptr;

	if (!uFnTravelToStartupMap)
	{
		uFnTravelToStartupMap = UFunction::FindFunction("Function OLGame.OLGame.TravelToStartupMap");
	}

	AOLGame_eventTravelToStartupMap_Params TravelToStartupMap_Params;
	memset(&TravelToStartupMap_Params, 0, sizeof(TravelToStartupMap_Params));

	this->ProcessEvent(uFnTravelToStartupMap, &TravelToStartupMap_Params, nullptr);
};

// Function OLGame.OLGame.OnTravelToStartupMap
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLGame::OnTravelToStartupMap()
{
	static UFunction* uFnOnTravelToStartupMap = nullptr;

	if (!uFnOnTravelToStartupMap)
	{
		uFnOnTravelToStartupMap = UFunction::FindFunction("Function OLGame.OLGame.OnTravelToStartupMap");
	}

	AOLGame_execOnTravelToStartupMap_Params OnTravelToStartupMap_Params;
	memset(&OnTravelToStartupMap_Params, 0, sizeof(OnTravelToStartupMap_Params));

	uFnOnTravelToStartupMap->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnOnTravelToStartupMap, &OnTravelToStartupMap_Params, nullptr);
	uFnOnTravelToStartupMap->FunctionFlags |= 0x400;
};

// Function OLGame.OLGame.RestartPlayer
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             NewPlayer                      (CPF_Parm)

void AOLGame::RestartPlayer(class AController* NewPlayer)
{
	static UFunction* uFnRestartPlayer = nullptr;

	if (!uFnRestartPlayer)
	{
		uFnRestartPlayer = UFunction::FindFunction("Function OLGame.OLGame.RestartPlayer");
	}

	AOLGame_execRestartPlayer_Params RestartPlayer_Params;
	memset(&RestartPlayer_Params, 0, sizeof(RestartPlayer_Params));
	memcpy_s(&RestartPlayer_Params.NewPlayer, sizeof(RestartPlayer_Params.NewPlayer), &NewPlayer, sizeof(NewPlayer));

	this->ProcessEvent(uFnRestartPlayer, &RestartPlayer_Params, nullptr);
};

// Function OLGame.OLGame.EvtRestartPlayer
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             NewPlayer                      (CPF_Parm)

void AOLGame::eventEvtRestartPlayer(class AController* NewPlayer)
{
	static UFunction* uFnEvtRestartPlayer = nullptr;

	if (!uFnEvtRestartPlayer)
	{
		uFnEvtRestartPlayer = UFunction::FindFunction("Function OLGame.OLGame.EvtRestartPlayer");
	}

	AOLGame_eventEvtRestartPlayer_Params EvtRestartPlayer_Params;
	memset(&EvtRestartPlayer_Params, 0, sizeof(EvtRestartPlayer_Params));
	memcpy_s(&EvtRestartPlayer_Params.NewPlayer, sizeof(EvtRestartPlayer_Params.NewPlayer), &NewPlayer, sizeof(NewPlayer));

	this->ProcessEvent(uFnEvtRestartPlayer, &EvtRestartPlayer_Params, nullptr);
};

// Function OLGame.OLGame.UpdateGameType
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLGame::UpdateGameType()
{
	static UFunction* uFnUpdateGameType = nullptr;

	if (!uFnUpdateGameType)
	{
		uFnUpdateGameType = UFunction::FindFunction("Function OLGame.OLGame.UpdateGameType");
	}

	AOLGame_execUpdateGameType_Params UpdateGameType_Params;
	memset(&UpdateGameType_Params, 0, sizeof(UpdateGameType_Params));

	uFnUpdateGameType->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateGameType, &UpdateGameType_Params, nullptr);
	uFnUpdateGameType->FunctionFlags |= 0x400;
};

// Function OLGame.OLGame.OnPlayerSpawned
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             NewPlayer                      (CPF_Parm)
// class ANavigationPoint*        StartPoint                     (CPF_Parm)

void AOLGame::eventOnPlayerSpawned(class AController* NewPlayer, class ANavigationPoint* StartPoint)
{
	static UFunction* uFnOnPlayerSpawned = nullptr;

	if (!uFnOnPlayerSpawned)
	{
		uFnOnPlayerSpawned = UFunction::FindFunction("Function OLGame.OLGame.OnPlayerSpawned");
	}

	AOLGame_eventOnPlayerSpawned_Params OnPlayerSpawned_Params;
	memset(&OnPlayerSpawned_Params, 0, sizeof(OnPlayerSpawned_Params));
	memcpy_s(&OnPlayerSpawned_Params.NewPlayer, sizeof(OnPlayerSpawned_Params.NewPlayer), &NewPlayer, sizeof(NewPlayer));
	memcpy_s(&OnPlayerSpawned_Params.StartPoint, sizeof(OnPlayerSpawned_Params.StartPoint), &StartPoint, sizeof(StartPoint));

	this->ProcessEvent(uFnOnPlayerSpawned, &OnPlayerSpawned_Params, nullptr);
};

// Function OLGame.OLGame.FindPlayerStart
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class ANavigationPoint*        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AController*             Player                         (CPF_Parm)
// uint8_t                        InTeam                         (CPF_OptionalParm | CPF_Parm)
// class FString                  IncomingName                   (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)

class ANavigationPoint* AOLGame::FindPlayerStart(class AController* Player, uint8_t InTeam, class FString IncomingName)
{
	static UFunction* uFnFindPlayerStart = nullptr;

	if (!uFnFindPlayerStart)
	{
		uFnFindPlayerStart = UFunction::FindFunction("Function OLGame.OLGame.FindPlayerStart");
	}

	AOLGame_execFindPlayerStart_Params FindPlayerStart_Params;
	memset(&FindPlayerStart_Params, 0, sizeof(FindPlayerStart_Params));
	memcpy_s(&FindPlayerStart_Params.Player, sizeof(FindPlayerStart_Params.Player), &Player, sizeof(Player));
	memcpy_s(&FindPlayerStart_Params.InTeam, sizeof(FindPlayerStart_Params.InTeam), &InTeam, sizeof(InTeam));
	memcpy_s(&FindPlayerStart_Params.IncomingName, sizeof(FindPlayerStart_Params.IncomingName), &IncomingName, sizeof(IncomingName));

	this->ProcessEvent(uFnFindPlayerStart, &FindPlayerStart_Params, nullptr);

	return FindPlayerStart_Params.ReturnValue;
};

// Function OLGame.OLGame.NewPolish
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLGame::NewPolish()
{
	static UFunction* uFnNewPolish = nullptr;

	if (!uFnNewPolish)
	{
		uFnNewPolish = UFunction::FindFunction("Function OLGame.OLGame.NewPolish");
	}

	AOLGame_execNewPolish_Params NewPolish_Params;
	memset(&NewPolish_Params, 0, sizeof(NewPolish_Params));

	uFnNewPolish->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNewPolish, &NewPolish_Params, nullptr);
	uFnNewPolish->FunctionFlags |= 0x400;
};

// Function OLGame.OLGame.NewOptim
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLGame::NewOptim()
{
	static UFunction* uFnNewOptim = nullptr;

	if (!uFnNewOptim)
	{
		uFnNewOptim = UFunction::FindFunction("Function OLGame.OLGame.NewOptim");
	}

	AOLGame_execNewOptim_Params NewOptim_Params;
	memset(&NewOptim_Params, 0, sizeof(NewOptim_Params));

	uFnNewOptim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNewOptim, &NewOptim_Params, nullptr);
	uFnNewOptim->FunctionFlags |= 0x400;
};

// Function OLGame.OLGame.NewTask
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLGame::NewTask()
{
	static UFunction* uFnNewTask = nullptr;

	if (!uFnNewTask)
	{
		uFnNewTask = UFunction::FindFunction("Function OLGame.OLGame.NewTask");
	}

	AOLGame_execNewTask_Params NewTask_Params;
	memset(&NewTask_Params, 0, sizeof(NewTask_Params));

	uFnNewTask->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNewTask, &NewTask_Params, nullptr);
	uFnNewTask->FunctionFlags |= 0x400;
};

// Function OLGame.OLGame.NewBug
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLGame::NewBug()
{
	static UFunction* uFnNewBug = nullptr;

	if (!uFnNewBug)
	{
		uFnNewBug = UFunction::FindFunction("Function OLGame.OLGame.NewBug");
	}

	AOLGame_execNewBug_Params NewBug_Params;
	memset(&NewBug_Params, 0, sizeof(NewBug_Params));

	uFnNewBug->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNewBug, &NewBug_Params, nullptr);
	uFnNewBug->FunctionFlags |= 0x400;
};

// Function OLGame.OLGame.GetDifficultyMode
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EDifficultyMode                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

EDifficultyMode AOLGame::GetDifficultyMode()
{
	static UFunction* uFnGetDifficultyMode = nullptr;

	if (!uFnGetDifficultyMode)
	{
		uFnGetDifficultyMode = UFunction::FindFunction("Function OLGame.OLGame.GetDifficultyMode");
	}

	AOLGame_execGetDifficultyMode_Params GetDifficultyMode_Params;
	memset(&GetDifficultyMode_Params, 0, sizeof(GetDifficultyMode_Params));

	uFnGetDifficultyMode->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetDifficultyMode, &GetDifficultyMode_Params, nullptr);
	uFnGetDifficultyMode->FunctionFlags |= 0x400;

	return GetDifficultyMode_Params.ReturnValue;
};

// Function OLGame.OLGame.GetFirstCheckpoint
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// EOutlastGameType               GameType                       (CPF_Parm)

class FString AOLGame::GetFirstCheckpoint(EOutlastGameType GameType)
{
	static UFunction* uFnGetFirstCheckpoint = nullptr;

	if (!uFnGetFirstCheckpoint)
	{
		uFnGetFirstCheckpoint = UFunction::FindFunction("Function OLGame.OLGame.GetFirstCheckpoint");
	}

	AOLGame_execGetFirstCheckpoint_Params GetFirstCheckpoint_Params;
	memset(&GetFirstCheckpoint_Params, 0, sizeof(GetFirstCheckpoint_Params));
	memcpy_s(&GetFirstCheckpoint_Params.GameType, sizeof(GetFirstCheckpoint_Params.GameType), &GameType, sizeof(GameType));

	uFnGetFirstCheckpoint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetFirstCheckpoint, &GetFirstCheckpoint_Params, nullptr);
	uFnGetFirstCheckpoint->FunctionFlags |= 0x400;

	return GetFirstCheckpoint_Params.ReturnValue;
};

// Function OLGame.OLGame.MatchCheckpoint
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AOLCheckpoint*           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  PortalName                     (CPF_Parm | CPF_NeedCtorLink)

class AOLCheckpoint* AOLGame::MatchCheckpoint(class FString PortalName)
{
	static UFunction* uFnMatchCheckpoint = nullptr;

	if (!uFnMatchCheckpoint)
	{
		uFnMatchCheckpoint = UFunction::FindFunction("Function OLGame.OLGame.MatchCheckpoint");
	}

	AOLGame_execMatchCheckpoint_Params MatchCheckpoint_Params;
	memset(&MatchCheckpoint_Params, 0, sizeof(MatchCheckpoint_Params));
	memcpy_s(&MatchCheckpoint_Params.PortalName, sizeof(MatchCheckpoint_Params.PortalName), &PortalName, sizeof(PortalName));

	uFnMatchCheckpoint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnMatchCheckpoint, &MatchCheckpoint_Params, nullptr);
	uFnMatchCheckpoint->FunctionFlags |= 0x400;

	return MatchCheckpoint_Params.ReturnValue;
};

// Function OLGame.OLGame.SetCurrentCheckpoint
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FName                   CheckpointName                 (CPF_Parm)

void AOLGame::SetCurrentCheckpoint(struct FName CheckpointName)
{
	static UFunction* uFnSetCurrentCheckpoint = nullptr;

	if (!uFnSetCurrentCheckpoint)
	{
		uFnSetCurrentCheckpoint = UFunction::FindFunction("Function OLGame.OLGame.SetCurrentCheckpoint");
	}

	AOLGame_execSetCurrentCheckpoint_Params SetCurrentCheckpoint_Params;
	memset(&SetCurrentCheckpoint_Params, 0, sizeof(SetCurrentCheckpoint_Params));
	memcpy_s(&SetCurrentCheckpoint_Params.CheckpointName, sizeof(SetCurrentCheckpoint_Params.CheckpointName), &CheckpointName, sizeof(CheckpointName));

	uFnSetCurrentCheckpoint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetCurrentCheckpoint, &SetCurrentCheckpoint_Params, nullptr);
	uFnSetCurrentCheckpoint->FunctionFlags |= 0x400;
};

// Function OLGame.OLGame.CheckpointReached
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FName                   CheckpointName                 (CPF_Parm)

void AOLGame::CheckpointReached(struct FName CheckpointName)
{
	static UFunction* uFnCheckpointReached = nullptr;

	if (!uFnCheckpointReached)
	{
		uFnCheckpointReached = UFunction::FindFunction("Function OLGame.OLGame.CheckpointReached");
	}

	AOLGame_execCheckpointReached_Params CheckpointReached_Params;
	memset(&CheckpointReached_Params, 0, sizeof(CheckpointReached_Params));
	memcpy_s(&CheckpointReached_Params.CheckpointName, sizeof(CheckpointReached_Params.CheckpointName), &CheckpointName, sizeof(CheckpointName));

	uFnCheckpointReached->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCheckpointReached, &CheckpointReached_Params, nullptr);
	uFnCheckpointReached->FunctionFlags |= 0x400;
};

// Function OLGame.OLGame.AllowCheats
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class APlayerController*       P                              (CPF_Parm)

bool AOLGame::AllowCheats(class APlayerController* P)
{
	static UFunction* uFnAllowCheats = nullptr;

	if (!uFnAllowCheats)
	{
		uFnAllowCheats = UFunction::FindFunction("Function OLGame.OLGame.AllowCheats");
	}

	AOLGame_execAllowCheats_Params AllowCheats_Params;
	memset(&AllowCheats_Params, 0, sizeof(AllowCheats_Params));
	memcpy_s(&AllowCheats_Params.P, sizeof(AllowCheats_Params.P), &P, sizeof(P));

	this->ProcessEvent(uFnAllowCheats, &AllowCheats_Params, nullptr);

	return AllowCheats_Params.ReturnValue;
};

// Function OLGame.OLGame.GenerateNewHint
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLGame::GenerateNewHint()
{
	static UFunction* uFnGenerateNewHint = nullptr;

	if (!uFnGenerateNewHint)
	{
		uFnGenerateNewHint = UFunction::FindFunction("Function OLGame.OLGame.GenerateNewHint");
	}

	AOLGame_execGenerateNewHint_Params GenerateNewHint_Params;
	memset(&GenerateNewHint_Params, 0, sizeof(GenerateNewHint_Params));

	uFnGenerateNewHint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGenerateNewHint, &GenerateNewHint_Params, nullptr);
	uFnGenerateNewHint->FunctionFlags |= 0x400;
};

// Function OLGame.OLGame.IsDLCInstalled
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLGame::IsDLCInstalled()
{
	static UFunction* uFnIsDLCInstalled = nullptr;

	if (!uFnIsDLCInstalled)
	{
		uFnIsDLCInstalled = UFunction::FindFunction("Function OLGame.OLGame.IsDLCInstalled");
	}

	AOLGame_execIsDLCInstalled_Params IsDLCInstalled_Params;
	memset(&IsDLCInstalled_Params, 0, sizeof(IsDLCInstalled_Params));

	uFnIsDLCInstalled->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsDLCInstalled, &IsDLCInstalled_Params, nullptr);
	uFnIsDLCInstalled->FunctionFlags |= 0x400;

	return IsDLCInstalled_Params.ReturnValue;
};

// Function OLGame.OLGame.IsPlayingDLC
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLGame::IsPlayingDLC()
{
	static UFunction* uFnIsPlayingDLC = nullptr;

	if (!uFnIsPlayingDLC)
	{
		uFnIsPlayingDLC = UFunction::FindFunction("Function OLGame.OLGame.IsPlayingDLC");
	}

	AOLGame_execIsPlayingDLC_Params IsPlayingDLC_Params;
	memset(&IsPlayingDLC_Params, 0, sizeof(IsPlayingDLC_Params));

	uFnIsPlayingDLC->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsPlayingDLC, &IsPlayingDLC_Params, nullptr);
	uFnIsPlayingDLC->FunctionFlags |= 0x400;

	return IsPlayingDLC_Params.ReturnValue;
};

// Function OLGame.OLGame.IsCensored
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLGame::IsCensored()
{
	static UFunction* uFnIsCensored = nullptr;

	if (!uFnIsCensored)
	{
		uFnIsCensored = UFunction::FindFunction("Function OLGame.OLGame.IsCensored");
	}

	AOLGame_execIsCensored_Params IsCensored_Params;
	memset(&IsCensored_Params, 0, sizeof(IsCensored_Params));

	uFnIsCensored->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsCensored, &IsCensored_Params, nullptr);
	uFnIsCensored->FunctionFlags |= 0x400;

	return IsCensored_Params.ReturnValue;
};

// Function OLGame.OLGame.IsPlaytest
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLGame::IsPlaytest()
{
	static UFunction* uFnIsPlaytest = nullptr;

	if (!uFnIsPlaytest)
	{
		uFnIsPlaytest = UFunction::FindFunction("Function OLGame.OLGame.IsPlaytest");
	}

	AOLGame_execIsPlaytest_Params IsPlaytest_Params;
	memset(&IsPlaytest_Params, 0, sizeof(IsPlaytest_Params));

	uFnIsPlaytest->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsPlaytest, &IsPlaytest_Params, nullptr);
	uFnIsPlaytest->FunctionFlags |= 0x400;

	return IsPlaytest_Params.ReturnValue;
};

// Function OLGame.OLGame.IsDemo
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLGame::IsDemo()
{
	static UFunction* uFnIsDemo = nullptr;

	if (!uFnIsDemo)
	{
		uFnIsDemo = UFunction::FindFunction("Function OLGame.OLGame.IsDemo");
	}

	AOLGame_execIsDemo_Params IsDemo_Params;
	memset(&IsDemo_Params, 0, sizeof(IsDemo_Params));

	uFnIsDemo->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsDemo, &IsDemo_Params, nullptr);
	uFnIsDemo->FunctionFlags |= 0x400;

	return IsDemo_Params.ReturnValue;
};

// Function OLGame.OLGame.SetGameType
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UClass*                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  MapName                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Portal                         (CPF_Parm | CPF_NeedCtorLink)

class UClass* AOLGame::eventSetGameType(class FString MapName, class FString Options, class FString Portal)
{
	static UFunction* uFnSetGameType = nullptr;

	if (!uFnSetGameType)
	{
		uFnSetGameType = UFunction::FindFunction("Function OLGame.OLGame.SetGameType");
	}

	AOLGame_eventSetGameType_Params SetGameType_Params;
	memset(&SetGameType_Params, 0, sizeof(SetGameType_Params));
	memcpy_s(&SetGameType_Params.MapName, sizeof(SetGameType_Params.MapName), &MapName, sizeof(MapName));
	memcpy_s(&SetGameType_Params.Options, sizeof(SetGameType_Params.Options), &Options, sizeof(Options));
	memcpy_s(&SetGameType_Params.Portal, sizeof(SetGameType_Params.Portal), &Portal, sizeof(Portal));

	AOLGame::StaticClass()->ProcessEvent(uFnSetGameType, &SetGameType_Params, nullptr);

	return SetGameType_Params.ReturnValue;
};

// Function OLGame.OLGameplayMarker.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AOLGameplayMarker::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function OLGame.OLGameplayMarker.OnToggle");
	}

	AOLGameplayMarker_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	memcpy_s(&OnToggle_Params.Action, sizeof(OnToggle_Params.Action), &Action, sizeof(Action));

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function OLGame.OLGameplayMarker.PostBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLGameplayMarker::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function OLGame.OLGameplayMarker.PostBeginPlay");
	}

	AOLGameplayMarker_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function OLGame.OLCSA.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AOLCSA::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function OLGame.OLCSA.OnToggle");
	}

	AOLCSA_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	memcpy_s(&OnToggle_Params.Action, sizeof(OnToggle_Params.Action), &Action, sizeof(Action));

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function OLGame.OLCSA.SetEnabled
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bNewEnabled                    (CPF_Parm)

void AOLCSA::SetEnabled(bool bNewEnabled)
{
	static UFunction* uFnSetEnabled = nullptr;

	if (!uFnSetEnabled)
	{
		uFnSetEnabled = UFunction::FindFunction("Function OLGame.OLCSA.SetEnabled");
	}

	AOLCSA_execSetEnabled_Params SetEnabled_Params;
	memset(&SetEnabled_Params, 0, sizeof(SetEnabled_Params));
	SetEnabled_Params.bNewEnabled = bNewEnabled;

	uFnSetEnabled->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetEnabled, &SetEnabled_Params, nullptr);
	uFnSetEnabled->FunctionFlags |= 0x400;
};

// Function OLGame.OLRecordingMarker.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AOLRecordingMarker::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function OLGame.OLRecordingMarker.OnToggle");
	}

	AOLRecordingMarker_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	memcpy_s(&OnToggle_Params.Action, sizeof(OnToggle_Params.Action), &Action, sizeof(Action));

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function OLGame.OLRTPCDistanceModifier.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AOLRTPCDistanceModifier::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function OLGame.OLRTPCDistanceModifier.OnToggle");
	}

	AOLRTPCDistanceModifier_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	memcpy_s(&OnToggle_Params.Action, sizeof(OnToggle_Params.Action), &Action, sizeof(Action));

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function OLGame.OLRTPCDistanceModifier.StopSound
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLRTPCDistanceModifier::StopSound()
{
	static UFunction* uFnStopSound = nullptr;

	if (!uFnStopSound)
	{
		uFnStopSound = UFunction::FindFunction("Function OLGame.OLRTPCDistanceModifier.StopSound");
	}

	AOLRTPCDistanceModifier_execStopSound_Params StopSound_Params;
	memset(&StopSound_Params, 0, sizeof(StopSound_Params));

	uFnStopSound->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStopSound, &StopSound_Params, nullptr);
	uFnStopSound->FunctionFlags |= 0x400;
};

// Function OLGame.OLRTPCDistanceModifier.StartSound
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLRTPCDistanceModifier::StartSound()
{
	static UFunction* uFnStartSound = nullptr;

	if (!uFnStartSound)
	{
		uFnStartSound = UFunction::FindFunction("Function OLGame.OLRTPCDistanceModifier.StartSound");
	}

	AOLRTPCDistanceModifier_execStartSound_Params StartSound_Params;
	memset(&StartSound_Params, 0, sizeof(StartSound_Params));

	uFnStartSound->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStartSound, &StartSound_Params, nullptr);
	uFnStartSound->FunctionFlags |= 0x400;
};

// Function OLGame.OLRTPCPlayerLookModifier.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AOLRTPCPlayerLookModifier::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function OLGame.OLRTPCPlayerLookModifier.OnToggle");
	}

	AOLRTPCPlayerLookModifier_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	memcpy_s(&OnToggle_Params.Action, sizeof(OnToggle_Params.Action), &Action, sizeof(Action));

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function OLGame.OLRTPCPlayerLookModifier.StopSound
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLRTPCPlayerLookModifier::StopSound()
{
	static UFunction* uFnStopSound = nullptr;

	if (!uFnStopSound)
	{
		uFnStopSound = UFunction::FindFunction("Function OLGame.OLRTPCPlayerLookModifier.StopSound");
	}

	AOLRTPCPlayerLookModifier_execStopSound_Params StopSound_Params;
	memset(&StopSound_Params, 0, sizeof(StopSound_Params));

	uFnStopSound->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStopSound, &StopSound_Params, nullptr);
	uFnStopSound->FunctionFlags |= 0x400;
};

// Function OLGame.OLRTPCPlayerLookModifier.StartSound
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLRTPCPlayerLookModifier::StartSound()
{
	static UFunction* uFnStartSound = nullptr;

	if (!uFnStartSound)
	{
		uFnStartSound = UFunction::FindFunction("Function OLGame.OLRTPCPlayerLookModifier.StartSound");
	}

	AOLRTPCPlayerLookModifier_execStartSound_Params StartSound_Params;
	memset(&StartSound_Params, 0, sizeof(StartSound_Params));

	uFnStartSound->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStartSound, &StartSound_Params, nullptr);
	uFnStartSound->FunctionFlags |= 0x400;
};

// Function OLGame.OLGameplayStaticMeshActor.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AOLGameplayStaticMeshActor::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function OLGame.OLGameplayStaticMeshActor.OnToggle");
	}

	AOLGameplayStaticMeshActor_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	memcpy_s(&OnToggle_Params.Action, sizeof(OnToggle_Params.Action), &Action, sizeof(Action));

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function OLGame.OLGameplayVolume.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AOLGameplayVolume::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function OLGame.OLGameplayVolume.OnToggle");
	}

	AOLGameplayVolume_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	memcpy_s(&OnToggle_Params.Action, sizeof(OnToggle_Params.Action), &Action, sizeof(Action));

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function OLGame.OLDamageBlockingVolume.Touch
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)
// class UPrimitiveComponent*     OtherComp                      (CPF_Parm | CPF_EditInline)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)

void AOLDamageBlockingVolume::eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal)
{
	static UFunction* uFnTouch = nullptr;

	if (!uFnTouch)
	{
		uFnTouch = UFunction::FindFunction("Function OLGame.OLDamageBlockingVolume.Touch");
	}

	AOLDamageBlockingVolume_eventTouch_Params Touch_Params;
	memset(&Touch_Params, 0, sizeof(Touch_Params));
	memcpy_s(&Touch_Params.Other, sizeof(Touch_Params.Other), &Other, sizeof(Other));
	memcpy_s(&Touch_Params.OtherComp, sizeof(Touch_Params.OtherComp), &OtherComp, sizeof(OtherComp));
	memcpy_s(&Touch_Params.HitLocation, sizeof(Touch_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	memcpy_s(&Touch_Params.HitNormal, sizeof(Touch_Params.HitNormal), &HitNormal, sizeof(HitNormal));

	this->ProcessEvent(uFnTouch, &Touch_Params, nullptr);
};

// Function OLGame.OLDarknessVolume.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AOLDarknessVolume::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function OLGame.OLDarknessVolume.OnToggle");
	}

	AOLDarknessVolume_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	memcpy_s(&OnToggle_Params.Action, sizeof(OnToggle_Params.Action), &Action, sizeof(Action));

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function OLGame.OLElectrifiedVolume.Touch
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)
// class UPrimitiveComponent*     OtherComp                      (CPF_Parm | CPF_EditInline)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)

void AOLElectrifiedVolume::eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal)
{
	static UFunction* uFnTouch = nullptr;

	if (!uFnTouch)
	{
		uFnTouch = UFunction::FindFunction("Function OLGame.OLElectrifiedVolume.Touch");
	}

	AOLElectrifiedVolume_eventTouch_Params Touch_Params;
	memset(&Touch_Params, 0, sizeof(Touch_Params));
	memcpy_s(&Touch_Params.Other, sizeof(Touch_Params.Other), &Other, sizeof(Other));
	memcpy_s(&Touch_Params.OtherComp, sizeof(Touch_Params.OtherComp), &OtherComp, sizeof(OtherComp));
	memcpy_s(&Touch_Params.HitLocation, sizeof(Touch_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	memcpy_s(&Touch_Params.HitNormal, sizeof(Touch_Params.HitNormal), &HitNormal, sizeof(HitNormal));

	this->ProcessEvent(uFnTouch, &Touch_Params, nullptr);
};

// Function OLGame.OLPhysicsVolume.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AOLPhysicsVolume::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function OLGame.OLPhysicsVolume.OnToggle");
	}

	AOLPhysicsVolume_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	memcpy_s(&OnToggle_Params.Action, sizeof(OnToggle_Params.Action), &Action, sizeof(Action));

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function OLGame.OLPhysicsVolume.UpdateCollisionState
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPhysicsVolume::UpdateCollisionState()
{
	static UFunction* uFnUpdateCollisionState = nullptr;

	if (!uFnUpdateCollisionState)
	{
		uFnUpdateCollisionState = UFunction::FindFunction("Function OLGame.OLPhysicsVolume.UpdateCollisionState");
	}

	AOLPhysicsVolume_execUpdateCollisionState_Params UpdateCollisionState_Params;
	memset(&UpdateCollisionState_Params, 0, sizeof(UpdateCollisionState_Params));

	uFnUpdateCollisionState->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateCollisionState, &UpdateCollisionState_Params, nullptr);
	uFnUpdateCollisionState->FunctionFlags |= 0x400;
};

// Function OLGame.OLGameStateList.ResetAllGameState
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLGameStateList::ResetAllGameState()
{
	static UFunction* uFnResetAllGameState = nullptr;

	if (!uFnResetAllGameState)
	{
		uFnResetAllGameState = UFunction::FindFunction("Function OLGame.OLGameStateList.ResetAllGameState");
	}

	AOLGameStateList_execResetAllGameState_Params ResetAllGameState_Params;
	memset(&ResetAllGameState_Params, 0, sizeof(ResetAllGameState_Params));

	uFnResetAllGameState->FunctionFlags &= ~0x400;
	AOLGameStateList::StaticClass()->ProcessEvent(uFnResetAllGameState, &ResetAllGameState_Params, nullptr);
	uFnResetAllGameState->FunctionFlags |= 0x400;
};

// Function OLGame.OLGameStateList.DumpGameState
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLGameStateList::DumpGameState()
{
	static UFunction* uFnDumpGameState = nullptr;

	if (!uFnDumpGameState)
	{
		uFnDumpGameState = UFunction::FindFunction("Function OLGame.OLGameStateList.DumpGameState");
	}

	AOLGameStateList_execDumpGameState_Params DumpGameState_Params;
	memset(&DumpGameState_Params, 0, sizeof(DumpGameState_Params));

	uFnDumpGameState->FunctionFlags &= ~0x400;
	AOLGameStateList::StaticClass()->ProcessEvent(uFnDumpGameState, &DumpGameState_Params, nullptr);
	uFnDumpGameState->FunctionFlags |= 0x400;
};

// Function OLGame.OLGameViewportClient.DrawTransition
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UCanvas*                 Canvas                         (CPF_Parm)

void UOLGameViewportClient::DrawTransition(class UCanvas* Canvas)
{
	static UFunction* uFnDrawTransition = nullptr;

	if (!uFnDrawTransition)
	{
		uFnDrawTransition = UFunction::FindFunction("Function OLGame.OLGameViewportClient.DrawTransition");
	}

	UOLGameViewportClient_execDrawTransition_Params DrawTransition_Params;
	memset(&DrawTransition_Params, 0, sizeof(DrawTransition_Params));
	memcpy_s(&DrawTransition_Params.Canvas, sizeof(DrawTransition_Params.Canvas), &Canvas, sizeof(Canvas));

	this->ProcessEvent(uFnDrawTransition, &DrawTransition_Params, nullptr);
};

// Function OLGame.OLHidingBarrel.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AOLHidingBarrel::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function OLGame.OLHidingBarrel.OnToggle");
	}

	AOLHidingBarrel_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	memcpy_s(&OnToggle_Params.Action, sizeof(OnToggle_Params.Action), &Action, sizeof(Action));

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function OLGame.OLHidingBarrel.TriggerEvent
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EBarrelEventType               EventType                      (CPF_Parm)
// class AOLPawn*                 Triggerer                      (CPF_Parm)

void AOLHidingBarrel::TriggerEvent(EBarrelEventType EventType, class AOLPawn* Triggerer)
{
	static UFunction* uFnTriggerEvent = nullptr;

	if (!uFnTriggerEvent)
	{
		uFnTriggerEvent = UFunction::FindFunction("Function OLGame.OLHidingBarrel.TriggerEvent");
	}

	AOLHidingBarrel_execTriggerEvent_Params TriggerEvent_Params;
	memset(&TriggerEvent_Params, 0, sizeof(TriggerEvent_Params));
	memcpy_s(&TriggerEvent_Params.EventType, sizeof(TriggerEvent_Params.EventType), &EventType, sizeof(EventType));
	memcpy_s(&TriggerEvent_Params.Triggerer, sizeof(TriggerEvent_Params.Triggerer), &Triggerer, sizeof(Triggerer));

	uFnTriggerEvent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTriggerEvent, &TriggerEvent_Params, nullptr);
	uFnTriggerEvent->FunctionFlags |= 0x400;
};

// Function OLGame.OLHUD.SetLargeImageSize
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        imageWidth                     (CPF_Parm)
// int32_t                        imageHeight                    (CPF_Parm)
// int32_t                        X                              (CPF_Parm)
// int32_t                        Y                              (CPF_Parm)

void AOLHUD::eventSetLargeImageSize(int32_t imageWidth, int32_t imageHeight, int32_t X, int32_t Y)
{
	static UFunction* uFnSetLargeImageSize = nullptr;

	if (!uFnSetLargeImageSize)
	{
		uFnSetLargeImageSize = UFunction::FindFunction("Function OLGame.OLHUD.SetLargeImageSize");
	}

	AOLHUD_eventSetLargeImageSize_Params SetLargeImageSize_Params;
	memset(&SetLargeImageSize_Params, 0, sizeof(SetLargeImageSize_Params));
	memcpy_s(&SetLargeImageSize_Params.imageWidth, sizeof(SetLargeImageSize_Params.imageWidth), &imageWidth, sizeof(imageWidth));
	memcpy_s(&SetLargeImageSize_Params.imageHeight, sizeof(SetLargeImageSize_Params.imageHeight), &imageHeight, sizeof(imageHeight));
	memcpy_s(&SetLargeImageSize_Params.X, sizeof(SetLargeImageSize_Params.X), &X, sizeof(X));
	memcpy_s(&SetLargeImageSize_Params.Y, sizeof(SetLargeImageSize_Params.Y), &Y, sizeof(Y));

	this->ProcessEvent(uFnSetLargeImageSize, &SetLargeImageSize_Params, nullptr);
};

// Function OLGame.OLHUD.Tick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaSeconds                   (CPF_Parm)

void AOLHUD::eventTick(float DeltaSeconds)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function OLGame.OLHUD.Tick");
	}

	AOLHUD_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaSeconds, sizeof(Tick_Params.DeltaSeconds), &DeltaSeconds, sizeof(DeltaSeconds));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function OLGame.OLHUD.NotifyAltEnter
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHUD::eventNotifyAltEnter()
{
	static UFunction* uFnNotifyAltEnter = nullptr;

	if (!uFnNotifyAltEnter)
	{
		uFnNotifyAltEnter = UFunction::FindFunction("Function OLGame.OLHUD.NotifyAltEnter");
	}

	AOLHUD_eventNotifyAltEnter_Params NotifyAltEnter_Params;
	memset(&NotifyAltEnter_Params, 0, sizeof(NotifyAltEnter_Params));

	this->ProcessEvent(uFnNotifyAltEnter, &NotifyAltEnter_Params, nullptr);
};

// Function OLGame.OLHUD.GamepadConfigChanged
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHUD::GamepadConfigChanged()
{
	static UFunction* uFnGamepadConfigChanged = nullptr;

	if (!uFnGamepadConfigChanged)
	{
		uFnGamepadConfigChanged = UFunction::FindFunction("Function OLGame.OLHUD.GamepadConfigChanged");
	}

	AOLHUD_execGamepadConfigChanged_Params GamepadConfigChanged_Params;
	memset(&GamepadConfigChanged_Params, 0, sizeof(GamepadConfigChanged_Params));

	this->ProcessEvent(uFnGamepadConfigChanged, &GamepadConfigChanged_Params, nullptr);
};

// Function OLGame.OLHUD.OnLostFocusPause
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bEnable                        (CPF_Parm)

void AOLHUD::eventOnLostFocusPause(bool bEnable)
{
	static UFunction* uFnOnLostFocusPause = nullptr;

	if (!uFnOnLostFocusPause)
	{
		uFnOnLostFocusPause = UFunction::FindFunction("Function OLGame.OLHUD.OnLostFocusPause");
	}

	AOLHUD_eventOnLostFocusPause_Params OnLostFocusPause_Params;
	memset(&OnLostFocusPause_Params, 0, sizeof(OnLostFocusPause_Params));
	OnLostFocusPause_Params.bEnable = bEnable;

	this->ProcessEvent(uFnOnLostFocusPause, &OnLostFocusPause_Params, nullptr);
};

// Function OLGame.OLHUD.ShowHUDMessages
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHUD::ShowHUDMessages()
{
	static UFunction* uFnShowHUDMessages = nullptr;

	if (!uFnShowHUDMessages)
	{
		uFnShowHUDMessages = UFunction::FindFunction("Function OLGame.OLHUD.ShowHUDMessages");
	}

	AOLHUD_execShowHUDMessages_Params ShowHUDMessages_Params;
	memset(&ShowHUDMessages_Params, 0, sizeof(ShowHUDMessages_Params));

	this->ProcessEvent(uFnShowHUDMessages, &ShowHUDMessages_Params, nullptr);
};

// Function OLGame.OLHUD.HideHUDMessages
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHUD::HideHUDMessages()
{
	static UFunction* uFnHideHUDMessages = nullptr;

	if (!uFnHideHUDMessages)
	{
		uFnHideHUDMessages = UFunction::FindFunction("Function OLGame.OLHUD.HideHUDMessages");
	}

	AOLHUD_execHideHUDMessages_Params HideHUDMessages_Params;
	memset(&HideHUDMessages_Params, 0, sizeof(HideHUDMessages_Params));

	this->ProcessEvent(uFnHideHUDMessages, &HideHUDMessages_Params, nullptr);
};

// Function OLGame.OLHUD.ShowingSubtitle
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLHUD::eventShowingSubtitle()
{
	static UFunction* uFnShowingSubtitle = nullptr;

	if (!uFnShowingSubtitle)
	{
		uFnShowingSubtitle = UFunction::FindFunction("Function OLGame.OLHUD.ShowingSubtitle");
	}

	AOLHUD_eventShowingSubtitle_Params ShowingSubtitle_Params;
	memset(&ShowingSubtitle_Params, 0, sizeof(ShowingSubtitle_Params));

	this->ProcessEvent(uFnShowingSubtitle, &ShowingSubtitle_Params, nullptr);

	return ShowingSubtitle_Params.ReturnValue;
};

// Function OLGame.OLHUD.HideSubtitle
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHUD::eventHideSubtitle()
{
	static UFunction* uFnHideSubtitle = nullptr;

	if (!uFnHideSubtitle)
	{
		uFnHideSubtitle = UFunction::FindFunction("Function OLGame.OLHUD.HideSubtitle");
	}

	AOLHUD_eventHideSubtitle_Params HideSubtitle_Params;
	memset(&HideSubtitle_Params, 0, sizeof(HideSubtitle_Params));

	this->ProcessEvent(uFnHideSubtitle, &HideSubtitle_Params, nullptr);
};

// Function OLGame.OLHUD.SetSubtitleHeight
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           High                           (CPF_Parm)

void AOLHUD::eventSetSubtitleHeight(bool High)
{
	static UFunction* uFnSetSubtitleHeight = nullptr;

	if (!uFnSetSubtitleHeight)
	{
		uFnSetSubtitleHeight = UFunction::FindFunction("Function OLGame.OLHUD.SetSubtitleHeight");
	}

	AOLHUD_eventSetSubtitleHeight_Params SetSubtitleHeight_Params;
	memset(&SetSubtitleHeight_Params, 0, sizeof(SetSubtitleHeight_Params));
	SetSubtitleHeight_Params.High = High;

	this->ProcessEvent(uFnSetSubtitleHeight, &SetSubtitleHeight_Params, nullptr);
};

// Function OLGame.OLHUD.ShowSubtitle
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  MessageText                    (CPF_Parm | CPF_NeedCtorLink)

void AOLHUD::eventShowSubtitle(class FString MessageText)
{
	static UFunction* uFnShowSubtitle = nullptr;

	if (!uFnShowSubtitle)
	{
		uFnShowSubtitle = UFunction::FindFunction("Function OLGame.OLHUD.ShowSubtitle");
	}

	AOLHUD_eventShowSubtitle_Params ShowSubtitle_Params;
	memset(&ShowSubtitle_Params, 0, sizeof(ShowSubtitle_Params));
	memcpy_s(&ShowSubtitle_Params.MessageText, sizeof(ShowSubtitle_Params.MessageText), &MessageText, sizeof(MessageText));

	this->ProcessEvent(uFnShowSubtitle, &ShowSubtitle_Params, nullptr);
};

// Function OLGame.OLHUD.HideObjective
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHUD::eventHideObjective()
{
	static UFunction* uFnHideObjective = nullptr;

	if (!uFnHideObjective)
	{
		uFnHideObjective = UFunction::FindFunction("Function OLGame.OLHUD.HideObjective");
	}

	AOLHUD_eventHideObjective_Params HideObjective_Params;
	memset(&HideObjective_Params, 0, sizeof(HideObjective_Params));

	this->ProcessEvent(uFnHideObjective, &HideObjective_Params, nullptr);
};

// Function OLGame.OLHUD.ShowObjective
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ObjectiveText                  (CPF_Parm | CPF_NeedCtorLink)

void AOLHUD::eventShowObjective(class FString ObjectiveText)
{
	static UFunction* uFnShowObjective = nullptr;

	if (!uFnShowObjective)
	{
		uFnShowObjective = UFunction::FindFunction("Function OLGame.OLHUD.ShowObjective");
	}

	AOLHUD_eventShowObjective_Params ShowObjective_Params;
	memset(&ShowObjective_Params, 0, sizeof(ShowObjective_Params));
	memcpy_s(&ShowObjective_Params.ObjectiveText, sizeof(ShowObjective_Params.ObjectiveText), &ObjectiveText, sizeof(ObjectiveText));

	this->ProcessEvent(uFnShowObjective, &ShowObjective_Params, nullptr);
};

// Function OLGame.OLHUD.HideMessage
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHUD::eventHideMessage()
{
	static UFunction* uFnHideMessage = nullptr;

	if (!uFnHideMessage)
	{
		uFnHideMessage = UFunction::FindFunction("Function OLGame.OLHUD.HideMessage");
	}

	AOLHUD_eventHideMessage_Params HideMessage_Params;
	memset(&HideMessage_Params, 0, sizeof(HideMessage_Params));

	this->ProcessEvent(uFnHideMessage, &HideMessage_Params, nullptr);
};

// Function OLGame.OLHUD.ShowMessage
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EHUDMessageType                MessageType                    (CPF_Parm)
// EHUDMessagePriority            MessagePriority                (CPF_Parm)
// class FString                  MessageText                    (CPF_Parm | CPF_NeedCtorLink)

void AOLHUD::eventShowMessage(EHUDMessageType MessageType, EHUDMessagePriority MessagePriority, class FString MessageText)
{
	static UFunction* uFnShowMessage = nullptr;

	if (!uFnShowMessage)
	{
		uFnShowMessage = UFunction::FindFunction("Function OLGame.OLHUD.ShowMessage");
	}

	AOLHUD_eventShowMessage_Params ShowMessage_Params;
	memset(&ShowMessage_Params, 0, sizeof(ShowMessage_Params));
	memcpy_s(&ShowMessage_Params.MessageType, sizeof(ShowMessage_Params.MessageType), &MessageType, sizeof(MessageType));
	memcpy_s(&ShowMessage_Params.MessagePriority, sizeof(ShowMessage_Params.MessagePriority), &MessagePriority, sizeof(MessagePriority));
	memcpy_s(&ShowMessage_Params.MessageText, sizeof(ShowMessage_Params.MessageText), &MessageText, sizeof(MessageText));

	this->ProcessEvent(uFnShowMessage, &ShowMessage_Params, nullptr);
};

// Function OLGame.OLHUD.ResetMessageScreenForResize
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHUD::eventResetMessageScreenForResize()
{
	static UFunction* uFnResetMessageScreenForResize = nullptr;

	if (!uFnResetMessageScreenForResize)
	{
		uFnResetMessageScreenForResize = UFunction::FindFunction("Function OLGame.OLHUD.ResetMessageScreenForResize");
	}

	AOLHUD_eventResetMessageScreenForResize_Params ResetMessageScreenForResize_Params;
	memset(&ResetMessageScreenForResize_Params, 0, sizeof(ResetMessageScreenForResize_Params));

	this->ProcessEvent(uFnResetMessageScreenForResize, &ResetMessageScreenForResize_Params, nullptr);
};

// Function OLGame.OLHUD.SetCleanTextData
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  TextName                       (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Title                          (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Text                           (CPF_Parm | CPF_NeedCtorLink)

void AOLHUD::eventSetCleanTextData(class FString TextName, class FString Title, class FString Text)
{
	static UFunction* uFnSetCleanTextData = nullptr;

	if (!uFnSetCleanTextData)
	{
		uFnSetCleanTextData = UFunction::FindFunction("Function OLGame.OLHUD.SetCleanTextData");
	}

	AOLHUD_eventSetCleanTextData_Params SetCleanTextData_Params;
	memset(&SetCleanTextData_Params, 0, sizeof(SetCleanTextData_Params));
	memcpy_s(&SetCleanTextData_Params.TextName, sizeof(SetCleanTextData_Params.TextName), &TextName, sizeof(TextName));
	memcpy_s(&SetCleanTextData_Params.Title, sizeof(SetCleanTextData_Params.Title), &Title, sizeof(Title));
	memcpy_s(&SetCleanTextData_Params.Text, sizeof(SetCleanTextData_Params.Text), &Text, sizeof(Text));

	this->ProcessEvent(uFnSetCleanTextData, &SetCleanTextData_Params, nullptr);
};

// Function OLGame.OLHUD.SetPausedPromptMessage
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Messsage                       (CPF_Parm | CPF_NeedCtorLink)
// bool                           bBackToMainMenu                (CPF_Parm)

void AOLHUD::eventSetPausedPromptMessage(class FString Messsage, bool bBackToMainMenu)
{
	static UFunction* uFnSetPausedPromptMessage = nullptr;

	if (!uFnSetPausedPromptMessage)
	{
		uFnSetPausedPromptMessage = UFunction::FindFunction("Function OLGame.OLHUD.SetPausedPromptMessage");
	}

	AOLHUD_eventSetPausedPromptMessage_Params SetPausedPromptMessage_Params;
	memset(&SetPausedPromptMessage_Params, 0, sizeof(SetPausedPromptMessage_Params));
	memcpy_s(&SetPausedPromptMessage_Params.Messsage, sizeof(SetPausedPromptMessage_Params.Messsage), &Messsage, sizeof(Messsage));
	SetPausedPromptMessage_Params.bBackToMainMenu = bBackToMainMenu;

	this->ProcessEvent(uFnSetPausedPromptMessage, &SetPausedPromptMessage_Params, nullptr);
};

// Function OLGame.OLHUD.ShowMenuType
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EMenuType                      MenuType                       (CPF_Parm)

void AOLHUD::eventShowMenuType(EMenuType MenuType)
{
	static UFunction* uFnShowMenuType = nullptr;

	if (!uFnShowMenuType)
	{
		uFnShowMenuType = UFunction::FindFunction("Function OLGame.OLHUD.ShowMenuType");
	}

	AOLHUD_eventShowMenuType_Params ShowMenuType_Params;
	memset(&ShowMenuType_Params, 0, sizeof(ShowMenuType_Params));
	memcpy_s(&ShowMenuType_Params.MenuType, sizeof(ShowMenuType_Params.MenuType), &MenuType, sizeof(MenuType));

	this->ProcessEvent(uFnShowMenuType, &ShowMenuType_Params, nullptr);
};

// Function OLGame.OLHUD.ShowPausedPromptMenu
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHUD::eventShowPausedPromptMenu()
{
	static UFunction* uFnShowPausedPromptMenu = nullptr;

	if (!uFnShowPausedPromptMenu)
	{
		uFnShowPausedPromptMenu = UFunction::FindFunction("Function OLGame.OLHUD.ShowPausedPromptMenu");
	}

	AOLHUD_eventShowPausedPromptMenu_Params ShowPausedPromptMenu_Params;
	memset(&ShowPausedPromptMenu_Params, 0, sizeof(ShowPausedPromptMenu_Params));

	this->ProcessEvent(uFnShowPausedPromptMenu, &ShowPausedPromptMenu_Params, nullptr);
};

// Function OLGame.OLHUD.PostSoundEventEnter
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHUD::PostSoundEventEnter()
{
	static UFunction* uFnPostSoundEventEnter = nullptr;

	if (!uFnPostSoundEventEnter)
	{
		uFnPostSoundEventEnter = UFunction::FindFunction("Function OLGame.OLHUD.PostSoundEventEnter");
	}

	AOLHUD_execPostSoundEventEnter_Params PostSoundEventEnter_Params;
	memset(&PostSoundEventEnter_Params, 0, sizeof(PostSoundEventEnter_Params));

	uFnPostSoundEventEnter->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPostSoundEventEnter, &PostSoundEventEnter_Params, nullptr);
	uFnPostSoundEventEnter->FunctionFlags |= 0x400;
};

// Function OLGame.OLHUD.PostSoundEventSelect
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHUD::PostSoundEventSelect()
{
	static UFunction* uFnPostSoundEventSelect = nullptr;

	if (!uFnPostSoundEventSelect)
	{
		uFnPostSoundEventSelect = UFunction::FindFunction("Function OLGame.OLHUD.PostSoundEventSelect");
	}

	AOLHUD_execPostSoundEventSelect_Params PostSoundEventSelect_Params;
	memset(&PostSoundEventSelect_Params, 0, sizeof(PostSoundEventSelect_Params));

	uFnPostSoundEventSelect->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPostSoundEventSelect, &PostSoundEventSelect_Params, nullptr);
	uFnPostSoundEventSelect->FunctionFlags |= 0x400;
};

// Function OLGame.OLHUD.MuteSelectSound
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          MuteTime                       (CPF_OptionalParm | CPF_Parm)

void AOLHUD::MuteSelectSound(float MuteTime)
{
	static UFunction* uFnMuteSelectSound = nullptr;

	if (!uFnMuteSelectSound)
	{
		uFnMuteSelectSound = UFunction::FindFunction("Function OLGame.OLHUD.MuteSelectSound");
	}

	AOLHUD_execMuteSelectSound_Params MuteSelectSound_Params;
	memset(&MuteSelectSound_Params, 0, sizeof(MuteSelectSound_Params));
	memcpy_s(&MuteSelectSound_Params.MuteTime, sizeof(MuteSelectSound_Params.MuteTime), &MuteTime, sizeof(MuteTime));

	uFnMuteSelectSound->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnMuteSelectSound, &MuteSelectSound_Params, nullptr);
	uFnMuteSelectSound->FunctionFlags |= 0x400;
};

// Function OLGame.OLHUD.CanShowSubMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EMenuType                      MenuType                       (CPF_Parm)

bool AOLHUD::CanShowSubMenu(EMenuType MenuType)
{
	static UFunction* uFnCanShowSubMenu = nullptr;

	if (!uFnCanShowSubMenu)
	{
		uFnCanShowSubMenu = UFunction::FindFunction("Function OLGame.OLHUD.CanShowSubMenu");
	}

	AOLHUD_execCanShowSubMenu_Params CanShowSubMenu_Params;
	memset(&CanShowSubMenu_Params, 0, sizeof(CanShowSubMenu_Params));
	memcpy_s(&CanShowSubMenu_Params.MenuType, sizeof(CanShowSubMenu_Params.MenuType), &MenuType, sizeof(MenuType));

	uFnCanShowSubMenu->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCanShowSubMenu, &CanShowSubMenu_Params, nullptr);
	uFnCanShowSubMenu->FunctionFlags |= 0x400;

	return CanShowSubMenu_Params.ReturnValue;
};

// Function OLGame.OLHUD.HideMenu
// [0x00020A02] (FUNC_Defined | FUNC_Exec | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHUD::HideMenu()
{
	static UFunction* uFnHideMenu = nullptr;

	if (!uFnHideMenu)
	{
		uFnHideMenu = UFunction::FindFunction("Function OLGame.OLHUD.HideMenu");
	}

	AOLHUD_execHideMenu_Params HideMenu_Params;
	memset(&HideMenu_Params, 0, sizeof(HideMenu_Params));

	this->ProcessEvent(uFnHideMenu, &HideMenu_Params, nullptr);
};

// Function OLGame.OLHUD.ShowMenu
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHUD::ShowMenu()
{
	static UFunction* uFnShowMenu = nullptr;

	if (!uFnShowMenu)
	{
		uFnShowMenu = UFunction::FindFunction("Function OLGame.OLHUD.ShowMenu");
	}

	AOLHUD_execShowMenu_Params ShowMenu_Params;
	memset(&ShowMenu_Params, 0, sizeof(ShowMenu_Params));

	this->ProcessEvent(uFnShowMenu, &ShowMenu_Params, nullptr);
};

// Function OLGame.OLHUD.ShowMainMenu
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHUD::ShowMainMenu()
{
	static UFunction* uFnShowMainMenu = nullptr;

	if (!uFnShowMainMenu)
	{
		uFnShowMainMenu = UFunction::FindFunction("Function OLGame.OLHUD.ShowMainMenu");
	}

	AOLHUD_execShowMainMenu_Params ShowMainMenu_Params;
	memset(&ShowMainMenu_Params, 0, sizeof(ShowMainMenu_Params));

	this->ProcessEvent(uFnShowMainMenu, &ShowMainMenu_Params, nullptr);
};

// Function OLGame.OLHUD.ReturnToPressStartMenu
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHUD::eventReturnToPressStartMenu()
{
	static UFunction* uFnReturnToPressStartMenu = nullptr;

	if (!uFnReturnToPressStartMenu)
	{
		uFnReturnToPressStartMenu = UFunction::FindFunction("Function OLGame.OLHUD.ReturnToPressStartMenu");
	}

	AOLHUD_eventReturnToPressStartMenu_Params ReturnToPressStartMenu_Params;
	memset(&ReturnToPressStartMenu_Params, 0, sizeof(ReturnToPressStartMenu_Params));

	this->ProcessEvent(uFnReturnToPressStartMenu, &ReturnToPressStartMenu_Params, nullptr);
};

// Function OLGame.OLHUD.ClosePauseMenu
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHUD::eventClosePauseMenu()
{
	static UFunction* uFnClosePauseMenu = nullptr;

	if (!uFnClosePauseMenu)
	{
		uFnClosePauseMenu = UFunction::FindFunction("Function OLGame.OLHUD.ClosePauseMenu");
	}

	AOLHUD_eventClosePauseMenu_Params ClosePauseMenu_Params;
	memset(&ClosePauseMenu_Params, 0, sizeof(ClosePauseMenu_Params));

	this->ProcessEvent(uFnClosePauseMenu, &ClosePauseMenu_Params, nullptr);
};

// Function OLGame.OLHUD.SimulateBackInput
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHUD::eventSimulateBackInput()
{
	static UFunction* uFnSimulateBackInput = nullptr;

	if (!uFnSimulateBackInput)
	{
		uFnSimulateBackInput = UFunction::FindFunction("Function OLGame.OLHUD.SimulateBackInput");
	}

	AOLHUD_eventSimulateBackInput_Params SimulateBackInput_Params;
	memset(&SimulateBackInput_Params, 0, sizeof(SimulateBackInput_Params));

	this->ProcessEvent(uFnSimulateBackInput, &SimulateBackInput_Params, nullptr);
};

// Function OLGame.OLHUD.ReloadMenu
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHUD::ReloadMenu()
{
	static UFunction* uFnReloadMenu = nullptr;

	if (!uFnReloadMenu)
	{
		uFnReloadMenu = UFunction::FindFunction("Function OLGame.OLHUD.ReloadMenu");
	}

	AOLHUD_execReloadMenu_Params ReloadMenu_Params;
	memset(&ReloadMenu_Params, 0, sizeof(ReloadMenu_Params));

	this->ProcessEvent(uFnReloadMenu, &ReloadMenu_Params, nullptr);
};

// Function OLGame.OLHUD.InputTypeChanged
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHUD::eventInputTypeChanged()
{
	static UFunction* uFnInputTypeChanged = nullptr;

	if (!uFnInputTypeChanged)
	{
		uFnInputTypeChanged = UFunction::FindFunction("Function OLGame.OLHUD.InputTypeChanged");
	}

	AOLHUD_eventInputTypeChanged_Params InputTypeChanged_Params;
	memset(&InputTypeChanged_Params, 0, sizeof(InputTypeChanged_Params));

	this->ProcessEvent(uFnInputTypeChanged, &InputTypeChanged_Params, nullptr);
};

// Function OLGame.OLHUD.SetPCQTELabels
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  upStr                          (CPF_Parm | CPF_NeedCtorLink)
// class FString                  leftStr                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  downStr                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  rightStr                       (CPF_Parm | CPF_NeedCtorLink)

void AOLHUD::eventSetPCQTELabels(class FString upStr, class FString leftStr, class FString downStr, class FString rightStr)
{
	static UFunction* uFnSetPCQTELabels = nullptr;

	if (!uFnSetPCQTELabels)
	{
		uFnSetPCQTELabels = UFunction::FindFunction("Function OLGame.OLHUD.SetPCQTELabels");
	}

	AOLHUD_eventSetPCQTELabels_Params SetPCQTELabels_Params;
	memset(&SetPCQTELabels_Params, 0, sizeof(SetPCQTELabels_Params));
	memcpy_s(&SetPCQTELabels_Params.upStr, sizeof(SetPCQTELabels_Params.upStr), &upStr, sizeof(upStr));
	memcpy_s(&SetPCQTELabels_Params.leftStr, sizeof(SetPCQTELabels_Params.leftStr), &leftStr, sizeof(leftStr));
	memcpy_s(&SetPCQTELabels_Params.downStr, sizeof(SetPCQTELabels_Params.downStr), &downStr, sizeof(downStr));
	memcpy_s(&SetPCQTELabels_Params.rightStr, sizeof(SetPCQTELabels_Params.rightStr), &rightStr, sizeof(rightStr));

	this->ProcessEvent(uFnSetPCQTELabels, &SetPCQTELabels_Params, nullptr);
};

// Function OLGame.OLHUD.CleanReadPreviousPage
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHUD::eventCleanReadPreviousPage()
{
	static UFunction* uFnCleanReadPreviousPage = nullptr;

	if (!uFnCleanReadPreviousPage)
	{
		uFnCleanReadPreviousPage = UFunction::FindFunction("Function OLGame.OLHUD.CleanReadPreviousPage");
	}

	AOLHUD_eventCleanReadPreviousPage_Params CleanReadPreviousPage_Params;
	memset(&CleanReadPreviousPage_Params, 0, sizeof(CleanReadPreviousPage_Params));

	this->ProcessEvent(uFnCleanReadPreviousPage, &CleanReadPreviousPage_Params, nullptr);
};

// Function OLGame.OLHUD.CleanReadNextPage
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHUD::eventCleanReadNextPage()
{
	static UFunction* uFnCleanReadNextPage = nullptr;

	if (!uFnCleanReadNextPage)
	{
		uFnCleanReadNextPage = UFunction::FindFunction("Function OLGame.OLHUD.CleanReadNextPage");
	}

	AOLHUD_eventCleanReadNextPage_Params CleanReadNextPage_Params;
	memset(&CleanReadNextPage_Params, 0, sizeof(CleanReadNextPage_Params));

	this->ProcessEvent(uFnCleanReadNextPage, &CleanReadNextPage_Params, nullptr);
};

// Function OLGame.OLHUD.CloseCleanTextMenu
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHUD::eventCloseCleanTextMenu()
{
	static UFunction* uFnCloseCleanTextMenu = nullptr;

	if (!uFnCloseCleanTextMenu)
	{
		uFnCloseCleanTextMenu = UFunction::FindFunction("Function OLGame.OLHUD.CloseCleanTextMenu");
	}

	AOLHUD_eventCloseCleanTextMenu_Params CloseCleanTextMenu_Params;
	memset(&CloseCleanTextMenu_Params, 0, sizeof(CloseCleanTextMenu_Params));

	this->ProcessEvent(uFnCloseCleanTextMenu, &CloseCleanTextMenu_Params, nullptr);
};

// Function OLGame.OLHUD.IsAMenuOpen
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLHUD::eventIsAMenuOpen()
{
	static UFunction* uFnIsAMenuOpen = nullptr;

	if (!uFnIsAMenuOpen)
	{
		uFnIsAMenuOpen = UFunction::FindFunction("Function OLGame.OLHUD.IsAMenuOpen");
	}

	AOLHUD_eventIsAMenuOpen_Params IsAMenuOpen_Params;
	memset(&IsAMenuOpen_Params, 0, sizeof(IsAMenuOpen_Params));

	this->ProcessEvent(uFnIsAMenuOpen, &IsAMenuOpen_Params, nullptr);

	return IsAMenuOpen_Params.ReturnValue;
};

// Function OLGame.OLHUD.IsInCleanTextMenu
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLHUD::eventIsInCleanTextMenu()
{
	static UFunction* uFnIsInCleanTextMenu = nullptr;

	if (!uFnIsInCleanTextMenu)
	{
		uFnIsInCleanTextMenu = UFunction::FindFunction("Function OLGame.OLHUD.IsInCleanTextMenu");
	}

	AOLHUD_eventIsInCleanTextMenu_Params IsInCleanTextMenu_Params;
	memset(&IsInCleanTextMenu_Params, 0, sizeof(IsInCleanTextMenu_Params));

	this->ProcessEvent(uFnIsInCleanTextMenu, &IsInCleanTextMenu_Params, nullptr);

	return IsInCleanTextMenu_Params.ReturnValue;
};

// Function OLGame.OLHUD.IsInCreditsMenu
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLHUD::eventIsInCreditsMenu()
{
	static UFunction* uFnIsInCreditsMenu = nullptr;

	if (!uFnIsInCreditsMenu)
	{
		uFnIsInCreditsMenu = UFunction::FindFunction("Function OLGame.OLHUD.IsInCreditsMenu");
	}

	AOLHUD_eventIsInCreditsMenu_Params IsInCreditsMenu_Params;
	memset(&IsInCreditsMenu_Params, 0, sizeof(IsInCreditsMenu_Params));

	this->ProcessEvent(uFnIsInCreditsMenu, &IsInCreditsMenu_Params, nullptr);

	return IsInCreditsMenu_Params.ReturnValue;
};

// Function OLGame.OLHUD.IsOnMainMenuScreen
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLHUD::eventIsOnMainMenuScreen()
{
	static UFunction* uFnIsOnMainMenuScreen = nullptr;

	if (!uFnIsOnMainMenuScreen)
	{
		uFnIsOnMainMenuScreen = UFunction::FindFunction("Function OLGame.OLHUD.IsOnMainMenuScreen");
	}

	AOLHUD_eventIsOnMainMenuScreen_Params IsOnMainMenuScreen_Params;
	memset(&IsOnMainMenuScreen_Params, 0, sizeof(IsOnMainMenuScreen_Params));

	this->ProcessEvent(uFnIsOnMainMenuScreen, &IsOnMainMenuScreen_Params, nullptr);

	return IsOnMainMenuScreen_Params.ReturnValue;
};

// Function OLGame.OLHUD.IsMainMenuOpen
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLHUD::eventIsMainMenuOpen()
{
	static UFunction* uFnIsMainMenuOpen = nullptr;

	if (!uFnIsMainMenuOpen)
	{
		uFnIsMainMenuOpen = UFunction::FindFunction("Function OLGame.OLHUD.IsMainMenuOpen");
	}

	AOLHUD_eventIsMainMenuOpen_Params IsMainMenuOpen_Params;
	memset(&IsMainMenuOpen_Params, 0, sizeof(IsMainMenuOpen_Params));

	this->ProcessEvent(uFnIsMainMenuOpen, &IsMainMenuOpen_Params, nullptr);

	return IsMainMenuOpen_Params.ReturnValue;
};

// Function OLGame.OLHUD.IsInPausedPromptMenu
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLHUD::eventIsInPausedPromptMenu()
{
	static UFunction* uFnIsInPausedPromptMenu = nullptr;

	if (!uFnIsInPausedPromptMenu)
	{
		uFnIsInPausedPromptMenu = UFunction::FindFunction("Function OLGame.OLHUD.IsInPausedPromptMenu");
	}

	AOLHUD_eventIsInPausedPromptMenu_Params IsInPausedPromptMenu_Params;
	memset(&IsInPausedPromptMenu_Params, 0, sizeof(IsInPausedPromptMenu_Params));

	this->ProcessEvent(uFnIsInPausedPromptMenu, &IsInPausedPromptMenu_Params, nullptr);

	return IsInPausedPromptMenu_Params.ReturnValue;
};

// Function OLGame.OLHUD.IsInPauseMenu
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLHUD::eventIsInPauseMenu()
{
	static UFunction* uFnIsInPauseMenu = nullptr;

	if (!uFnIsInPauseMenu)
	{
		uFnIsInPauseMenu = UFunction::FindFunction("Function OLGame.OLHUD.IsInPauseMenu");
	}

	AOLHUD_eventIsInPauseMenu_Params IsInPauseMenu_Params;
	memset(&IsInPauseMenu_Params, 0, sizeof(IsInPauseMenu_Params));

	this->ProcessEvent(uFnIsInPauseMenu, &IsInPauseMenu_Params, nullptr);

	return IsInPauseMenu_Params.ReturnValue;
};

// Function OLGame.OLHUD.CanUnpauseInPauseMenu
// [0x00120002] (FUNC_Defined | FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLHUD::CanUnpauseInPauseMenu()
{
	static UFunction* uFnCanUnpauseInPauseMenu = nullptr;

	if (!uFnCanUnpauseInPauseMenu)
	{
		uFnCanUnpauseInPauseMenu = UFunction::FindFunction("Function OLGame.OLHUD.CanUnpauseInPauseMenu");
	}

	AOLHUD_execCanUnpauseInPauseMenu_Params CanUnpauseInPauseMenu_Params;
	memset(&CanUnpauseInPauseMenu_Params, 0, sizeof(CanUnpauseInPauseMenu_Params));

	this->ProcessEvent(uFnCanUnpauseInPauseMenu, &CanUnpauseInPauseMenu_Params, nullptr);

	return CanUnpauseInPauseMenu_Params.ReturnValue;
};

// Function OLGame.OLHUD.ShowDebugInfo
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// float                          out_YL                         (CPF_Parm | CPF_OutParm)
// float                          out_YPos                       (CPF_Parm | CPF_OutParm)

void AOLHUD::ShowDebugInfo(float& out_YL, float& out_YPos)
{
	static UFunction* uFnShowDebugInfo = nullptr;

	if (!uFnShowDebugInfo)
	{
		uFnShowDebugInfo = UFunction::FindFunction("Function OLGame.OLHUD.ShowDebugInfo");
	}

	AOLHUD_execShowDebugInfo_Params ShowDebugInfo_Params;
	memset(&ShowDebugInfo_Params, 0, sizeof(ShowDebugInfo_Params));
	memcpy_s(&ShowDebugInfo_Params.out_YL, sizeof(ShowDebugInfo_Params.out_YL), &out_YL, sizeof(out_YL));
	memcpy_s(&ShowDebugInfo_Params.out_YPos, sizeof(ShowDebugInfo_Params.out_YPos), &out_YPos, sizeof(out_YPos));

	this->ProcessEvent(uFnShowDebugInfo, &ShowDebugInfo_Params, nullptr);

	memcpy_s(&out_YL, sizeof(out_YL), &ShowDebugInfo_Params.out_YL, sizeof(ShowDebugInfo_Params.out_YL));
	memcpy_s(&out_YPos, sizeof(out_YPos), &ShowDebugInfo_Params.out_YPos, sizeof(ShowDebugInfo_Params.out_YPos));
};

// Function OLGame.OLHUD.ShouldDisplayDebugMessages
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLHUD::ShouldDisplayDebugMessages()
{
	static UFunction* uFnShouldDisplayDebugMessages = nullptr;

	if (!uFnShouldDisplayDebugMessages)
	{
		uFnShouldDisplayDebugMessages = UFunction::FindFunction("Function OLGame.OLHUD.ShouldDisplayDebugMessages");
	}

	AOLHUD_execShouldDisplayDebugMessages_Params ShouldDisplayDebugMessages_Params;
	memset(&ShouldDisplayDebugMessages_Params, 0, sizeof(ShouldDisplayDebugMessages_Params));

	uFnShouldDisplayDebugMessages->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnShouldDisplayDebugMessages, &ShouldDisplayDebugMessages_Params, nullptr);
	uFnShouldDisplayDebugMessages->FunctionFlags |= 0x400;

	return ShouldDisplayDebugMessages_Params.ReturnValue;
};

// Function OLGame.OLHUD.DebugNextAI
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHUD::DebugNextAI()
{
	static UFunction* uFnDebugNextAI = nullptr;

	if (!uFnDebugNextAI)
	{
		uFnDebugNextAI = UFunction::FindFunction("Function OLGame.OLHUD.DebugNextAI");
	}

	AOLHUD_execDebugNextAI_Params DebugNextAI_Params;
	memset(&DebugNextAI_Params, 0, sizeof(DebugNextAI_Params));

	this->ProcessEvent(uFnDebugNextAI, &DebugNextAI_Params, nullptr);
};

// Function OLGame.OLHUD.DebugPrevAI
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHUD::DebugPrevAI()
{
	static UFunction* uFnDebugPrevAI = nullptr;

	if (!uFnDebugPrevAI)
	{
		uFnDebugPrevAI = UFunction::FindFunction("Function OLGame.OLHUD.DebugPrevAI");
	}

	AOLHUD_execDebugPrevAI_Params DebugPrevAI_Params;
	memset(&DebugPrevAI_Params, 0, sizeof(DebugPrevAI_Params));

	this->ProcessEvent(uFnDebugPrevAI, &DebugPrevAI_Params, nullptr);
};

// Function OLGame.OLHUD.NotifyGameSaved
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHUD::NotifyGameSaved()
{
	static UFunction* uFnNotifyGameSaved = nullptr;

	if (!uFnNotifyGameSaved)
	{
		uFnNotifyGameSaved = UFunction::FindFunction("Function OLGame.OLHUD.NotifyGameSaved");
	}

	AOLHUD_execNotifyGameSaved_Params NotifyGameSaved_Params;
	memset(&NotifyGameSaved_Params, 0, sizeof(NotifyGameSaved_Params));

	uFnNotifyGameSaved->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNotifyGameSaved, &NotifyGameSaved_Params, nullptr);
	uFnNotifyGameSaved->FunctionFlags |= 0x400;
};

// Function OLGame.OLHUD.SetGammaCalibrationActive
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bActive                        (CPF_Parm)

void AOLHUD::SetGammaCalibrationActive(bool bActive)
{
	static UFunction* uFnSetGammaCalibrationActive = nullptr;

	if (!uFnSetGammaCalibrationActive)
	{
		uFnSetGammaCalibrationActive = UFunction::FindFunction("Function OLGame.OLHUD.SetGammaCalibrationActive");
	}

	AOLHUD_execSetGammaCalibrationActive_Params SetGammaCalibrationActive_Params;
	memset(&SetGammaCalibrationActive_Params, 0, sizeof(SetGammaCalibrationActive_Params));
	SetGammaCalibrationActive_Params.bActive = bActive;

	uFnSetGammaCalibrationActive->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetGammaCalibrationActive, &SetGammaCalibrationActive_Params, nullptr);
	uFnSetGammaCalibrationActive->FunctionFlags |= 0x400;
};

// Function OLGame.OLHUD.ShowingFullScreenOverlay
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLHUD::ShowingFullScreenOverlay()
{
	static UFunction* uFnShowingFullScreenOverlay = nullptr;

	if (!uFnShowingFullScreenOverlay)
	{
		uFnShowingFullScreenOverlay = UFunction::FindFunction("Function OLGame.OLHUD.ShowingFullScreenOverlay");
	}

	AOLHUD_execShowingFullScreenOverlay_Params ShowingFullScreenOverlay_Params;
	memset(&ShowingFullScreenOverlay_Params, 0, sizeof(ShowingFullScreenOverlay_Params));

	uFnShowingFullScreenOverlay->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnShowingFullScreenOverlay, &ShowingFullScreenOverlay_Params, nullptr);
	uFnShowingFullScreenOverlay->FunctionFlags |= 0x400;

	return ShowingFullScreenOverlay_Params.ReturnValue;
};

// Function OLGame.OLHUD.Draw
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHUD::Draw()
{
	static UFunction* uFnDraw = nullptr;

	if (!uFnDraw)
	{
		uFnDraw = UFunction::FindFunction("Function OLGame.OLHUD.Draw");
	}

	AOLHUD_execDraw_Params Draw_Params;
	memset(&Draw_Params, 0, sizeof(Draw_Params));

	uFnDraw->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDraw, &Draw_Params, nullptr);
	uFnDraw->FunctionFlags |= 0x400;
};

// Function OLGame.OLInteractiveSkeletalFoliageActor.Touch
// [0x00020D00] (FUNC_Simulated | FUNC_Native | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)
// class UPrimitiveComponent*     OtherComp                      (CPF_Parm | CPF_EditInline)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)

void AOLInteractiveSkeletalFoliageActor::eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal)
{
	static UFunction* uFnTouch = nullptr;

	if (!uFnTouch)
	{
		uFnTouch = UFunction::FindFunction("Function OLGame.OLInteractiveSkeletalFoliageActor.Touch");
	}

	AOLInteractiveSkeletalFoliageActor_eventTouch_Params Touch_Params;
	memset(&Touch_Params, 0, sizeof(Touch_Params));
	memcpy_s(&Touch_Params.Other, sizeof(Touch_Params.Other), &Other, sizeof(Other));
	memcpy_s(&Touch_Params.OtherComp, sizeof(Touch_Params.OtherComp), &OtherComp, sizeof(OtherComp));
	memcpy_s(&Touch_Params.HitLocation, sizeof(Touch_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	memcpy_s(&Touch_Params.HitNormal, sizeof(Touch_Params.HitNormal), &HitNormal, sizeof(HitNormal));

	uFnTouch->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTouch, &Touch_Params, nullptr);
	uFnTouch->FunctionFlags |= 0x400;
};

// Function OLGame.OLMainHud.WidgetInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   WidgetName                     (CPF_Parm)
// struct FName                   WidgetPath                     (CPF_Parm)
// class UGFxObject*              Widget                         (CPF_Parm)

bool UOLMainHud::eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget)
{
	static UFunction* uFnWidgetInitialized = nullptr;

	if (!uFnWidgetInitialized)
	{
		uFnWidgetInitialized = UFunction::FindFunction("Function OLGame.OLMainHud.WidgetInitialized");
	}

	UOLMainHud_eventWidgetInitialized_Params WidgetInitialized_Params;
	memset(&WidgetInitialized_Params, 0, sizeof(WidgetInitialized_Params));
	memcpy_s(&WidgetInitialized_Params.WidgetName, sizeof(WidgetInitialized_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&WidgetInitialized_Params.WidgetPath, sizeof(WidgetInitialized_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));
	memcpy_s(&WidgetInitialized_Params.Widget, sizeof(WidgetInitialized_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnWidgetInitialized, &WidgetInitialized_Params, nullptr);

	return WidgetInitialized_Params.ReturnValue;
};

// Function OLGame.OLPawn.DisplayDebug
// [0x00420102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm | CPF_OutParm)
// float                          out_YPos                       (CPF_Parm | CPF_OutParm)

void AOLPawn::DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos)
{
	static UFunction* uFnDisplayDebug = nullptr;

	if (!uFnDisplayDebug)
	{
		uFnDisplayDebug = UFunction::FindFunction("Function OLGame.OLPawn.DisplayDebug");
	}

	AOLPawn_execDisplayDebug_Params DisplayDebug_Params;
	memset(&DisplayDebug_Params, 0, sizeof(DisplayDebug_Params));
	memcpy_s(&DisplayDebug_Params.HUD, sizeof(DisplayDebug_Params.HUD), &HUD, sizeof(HUD));
	memcpy_s(&DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL), &out_YL, sizeof(out_YL));
	memcpy_s(&DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos), &out_YPos, sizeof(out_YPos));

	this->ProcessEvent(uFnDisplayDebug, &DisplayDebug_Params, nullptr);

	memcpy_s(&out_YL, sizeof(out_YL), &DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL));
	memcpy_s(&out_YPos, sizeof(out_YPos), &DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos));
};

// Function OLGame.OLPawn.IsFirstPerson
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLPawn::IsFirstPerson()
{
	static UFunction* uFnIsFirstPerson = nullptr;

	if (!uFnIsFirstPerson)
	{
		uFnIsFirstPerson = UFunction::FindFunction("Function OLGame.OLPawn.IsFirstPerson");
	}

	AOLPawn_execIsFirstPerson_Params IsFirstPerson_Params;
	memset(&IsFirstPerson_Params, 0, sizeof(IsFirstPerson_Params));

	this->ProcessEvent(uFnIsFirstPerson, &IsFirstPerson_Params, nullptr);

	return IsFirstPerson_Params.ReturnValue;
};

// Function OLGame.OLPawn.PlayLanded
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 landingLocation                (CPF_Parm)
// float                          ImpactVel                      (CPF_Parm)

void AOLPawn::PlayLanded(struct FVector landingLocation, float ImpactVel)
{
	static UFunction* uFnPlayLanded = nullptr;

	if (!uFnPlayLanded)
	{
		uFnPlayLanded = UFunction::FindFunction("Function OLGame.OLPawn.PlayLanded");
	}

	AOLPawn_execPlayLanded_Params PlayLanded_Params;
	memset(&PlayLanded_Params, 0, sizeof(PlayLanded_Params));
	memcpy_s(&PlayLanded_Params.landingLocation, sizeof(PlayLanded_Params.landingLocation), &landingLocation, sizeof(landingLocation));
	memcpy_s(&PlayLanded_Params.ImpactVel, sizeof(PlayLanded_Params.ImpactVel), &ImpactVel, sizeof(ImpactVel));

	this->ProcessEvent(uFnPlayLanded, &PlayLanded_Params, nullptr);
};

// Function OLGame.OLPawn.Landed
// [0x00820802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)
// class AActor*                  FloorActor                     (CPF_Parm)

void AOLPawn::eventLanded(struct FVector HitLocation, struct FVector HitNormal, class AActor* FloorActor)
{
	static UFunction* uFnLanded = nullptr;

	if (!uFnLanded)
	{
		uFnLanded = UFunction::FindFunction("Function OLGame.OLPawn.Landed");
	}

	AOLPawn_eventLanded_Params Landed_Params;
	memset(&Landed_Params, 0, sizeof(Landed_Params));
	memcpy_s(&Landed_Params.HitLocation, sizeof(Landed_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	memcpy_s(&Landed_Params.HitNormal, sizeof(Landed_Params.HitNormal), &HitNormal, sizeof(HitNormal));
	memcpy_s(&Landed_Params.FloorActor, sizeof(Landed_Params.FloorActor), &FloorActor, sizeof(FloorActor));

	this->ProcessEvent(uFnLanded, &Landed_Params, nullptr);
};

// Function OLGame.OLPawn.Destroyed
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPawn::eventDestroyed()
{
	static UFunction* uFnDestroyed = nullptr;

	if (!uFnDestroyed)
	{
		uFnDestroyed = UFunction::FindFunction("Function OLGame.OLPawn.Destroyed");
	}

	AOLPawn_eventDestroyed_Params Destroyed_Params;
	memset(&Destroyed_Params, 0, sizeof(Destroyed_Params));

	this->ProcessEvent(uFnDestroyed, &Destroyed_Params, nullptr);
};

// Function OLGame.OLPawn.MAT_BeginAIGroup
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 StartLoc                       (CPF_Parm)
// struct FRotator                StartRot                       (CPF_Parm)
// float                          BlendTime                      (CPF_Parm)
// bool                           bDiscardSideAdjustments        (CPF_Parm)

void AOLPawn::eventMAT_BeginAIGroup(struct FVector StartLoc, struct FRotator StartRot, float BlendTime, bool bDiscardSideAdjustments)
{
	static UFunction* uFnMAT_BeginAIGroup = nullptr;

	if (!uFnMAT_BeginAIGroup)
	{
		uFnMAT_BeginAIGroup = UFunction::FindFunction("Function OLGame.OLPawn.MAT_BeginAIGroup");
	}

	AOLPawn_eventMAT_BeginAIGroup_Params MAT_BeginAIGroup_Params;
	memset(&MAT_BeginAIGroup_Params, 0, sizeof(MAT_BeginAIGroup_Params));
	memcpy_s(&MAT_BeginAIGroup_Params.StartLoc, sizeof(MAT_BeginAIGroup_Params.StartLoc), &StartLoc, sizeof(StartLoc));
	memcpy_s(&MAT_BeginAIGroup_Params.StartRot, sizeof(MAT_BeginAIGroup_Params.StartRot), &StartRot, sizeof(StartRot));
	memcpy_s(&MAT_BeginAIGroup_Params.BlendTime, sizeof(MAT_BeginAIGroup_Params.BlendTime), &BlendTime, sizeof(BlendTime));
	MAT_BeginAIGroup_Params.bDiscardSideAdjustments = bDiscardSideAdjustments;

	this->ProcessEvent(uFnMAT_BeginAIGroup, &MAT_BeginAIGroup_Params, nullptr);
};

// Function OLGame.OLPawn.AdjustToMatineeStageMark
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 StartLoc                       (CPF_Parm)
// struct FRotator                StartRot                       (CPF_Parm)
// float                          BlendTime                      (CPF_Parm)
// bool                           bDiscardSideAdjustments        (CPF_Parm)

void AOLPawn::AdjustToMatineeStageMark(struct FVector StartLoc, struct FRotator StartRot, float BlendTime, bool bDiscardSideAdjustments)
{
	static UFunction* uFnAdjustToMatineeStageMark = nullptr;

	if (!uFnAdjustToMatineeStageMark)
	{
		uFnAdjustToMatineeStageMark = UFunction::FindFunction("Function OLGame.OLPawn.AdjustToMatineeStageMark");
	}

	AOLPawn_execAdjustToMatineeStageMark_Params AdjustToMatineeStageMark_Params;
	memset(&AdjustToMatineeStageMark_Params, 0, sizeof(AdjustToMatineeStageMark_Params));
	memcpy_s(&AdjustToMatineeStageMark_Params.StartLoc, sizeof(AdjustToMatineeStageMark_Params.StartLoc), &StartLoc, sizeof(StartLoc));
	memcpy_s(&AdjustToMatineeStageMark_Params.StartRot, sizeof(AdjustToMatineeStageMark_Params.StartRot), &StartRot, sizeof(StartRot));
	memcpy_s(&AdjustToMatineeStageMark_Params.BlendTime, sizeof(AdjustToMatineeStageMark_Params.BlendTime), &BlendTime, sizeof(BlendTime));
	AdjustToMatineeStageMark_Params.bDiscardSideAdjustments = bDiscardSideAdjustments;

	uFnAdjustToMatineeStageMark->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAdjustToMatineeStageMark, &AdjustToMatineeStageMark_Params, nullptr);
	uFnAdjustToMatineeStageMark->FunctionFlags |= 0x400;
};

// Function OLGame.OLPawn.PostInitAnimTree
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USkeletalMeshComponent*  SkelComp                       (CPF_Parm | CPF_EditInline)

void AOLPawn::eventPostInitAnimTree(class USkeletalMeshComponent* SkelComp)
{
	static UFunction* uFnPostInitAnimTree = nullptr;

	if (!uFnPostInitAnimTree)
	{
		uFnPostInitAnimTree = UFunction::FindFunction("Function OLGame.OLPawn.PostInitAnimTree");
	}

	AOLPawn_eventPostInitAnimTree_Params PostInitAnimTree_Params;
	memset(&PostInitAnimTree_Params, 0, sizeof(PostInitAnimTree_Params));
	memcpy_s(&PostInitAnimTree_Params.SkelComp, sizeof(PostInitAnimTree_Params.SkelComp), &SkelComp, sizeof(SkelComp));

	this->ProcessEvent(uFnPostInitAnimTree, &PostInitAnimTree_Params, nullptr);
};

// Function OLGame.OLPawn.PlayVOLine
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UAkEvent*                LineToPlay                     (CPF_Parm)
// struct FName                   BoneName                       (CPF_OptionalParm | CPF_Parm)

void AOLPawn::PlayVOLine(class UAkEvent* LineToPlay, struct FName BoneName)
{
	static UFunction* uFnPlayVOLine = nullptr;

	if (!uFnPlayVOLine)
	{
		uFnPlayVOLine = UFunction::FindFunction("Function OLGame.OLPawn.PlayVOLine");
	}

	AOLPawn_execPlayVOLine_Params PlayVOLine_Params;
	memset(&PlayVOLine_Params, 0, sizeof(PlayVOLine_Params));
	memcpy_s(&PlayVOLine_Params.LineToPlay, sizeof(PlayVOLine_Params.LineToPlay), &LineToPlay, sizeof(LineToPlay));
	memcpy_s(&PlayVOLine_Params.BoneName, sizeof(PlayVOLine_Params.BoneName), &BoneName, sizeof(BoneName));

	uFnPlayVOLine->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPlayVOLine, &PlayVOLine_Params, nullptr);
	uFnPlayVOLine->FunctionFlags |= 0x400;
};

// Function OLGame.OLPawn.GetMaterialBelowFeet
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FName                   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        footIndex                      (CPF_Parm)
// bool                           bForceUpdate                   (CPF_OptionalParm | CPF_Parm)

struct FName AOLPawn::GetMaterialBelowFeet(int32_t footIndex, bool bForceUpdate)
{
	static UFunction* uFnGetMaterialBelowFeet = nullptr;

	if (!uFnGetMaterialBelowFeet)
	{
		uFnGetMaterialBelowFeet = UFunction::FindFunction("Function OLGame.OLPawn.GetMaterialBelowFeet");
	}

	AOLPawn_execGetMaterialBelowFeet_Params GetMaterialBelowFeet_Params;
	memset(&GetMaterialBelowFeet_Params, 0, sizeof(GetMaterialBelowFeet_Params));
	memcpy_s(&GetMaterialBelowFeet_Params.footIndex, sizeof(GetMaterialBelowFeet_Params.footIndex), &footIndex, sizeof(footIndex));
	GetMaterialBelowFeet_Params.bForceUpdate = bForceUpdate;

	uFnGetMaterialBelowFeet->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetMaterialBelowFeet, &GetMaterialBelowFeet_Params, nullptr);
	uFnGetMaterialBelowFeet->FunctionFlags |= 0x400;

	return GetMaterialBelowFeet_Params.ReturnValue;
};

// Function OLGame.OLPawn.ClientRestart
// [0x00820102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:

void AOLPawn::ClientRestart()
{
	static UFunction* uFnClientRestart = nullptr;

	if (!uFnClientRestart)
	{
		uFnClientRestart = UFunction::FindFunction("Function OLGame.OLPawn.ClientRestart");
	}

	AOLPawn_execClientRestart_Params ClientRestart_Params;
	memset(&ClientRestart_Params, 0, sizeof(ClientRestart_Params));

	this->ProcessEvent(uFnClientRestart, &ClientRestart_Params, nullptr);
};

// Function OLGame.OLPawn.PlayFootStepSound
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        FootDown                       (CPF_Parm)
// class UAnimNotify_Footstep*    footstepNotify                 (CPF_Parm)

void AOLPawn::eventPlayFootStepSound(int32_t FootDown, class UAnimNotify_Footstep* footstepNotify)
{
	static UFunction* uFnPlayFootStepSound = nullptr;

	if (!uFnPlayFootStepSound)
	{
		uFnPlayFootStepSound = UFunction::FindFunction("Function OLGame.OLPawn.PlayFootStepSound");
	}

	AOLPawn_eventPlayFootStepSound_Params PlayFootStepSound_Params;
	memset(&PlayFootStepSound_Params, 0, sizeof(PlayFootStepSound_Params));
	memcpy_s(&PlayFootStepSound_Params.FootDown, sizeof(PlayFootStepSound_Params.FootDown), &FootDown, sizeof(FootDown));
	memcpy_s(&PlayFootStepSound_Params.footstepNotify, sizeof(PlayFootStepSound_Params.footstepNotify), &footstepNotify, sizeof(footstepNotify));

	this->ProcessEvent(uFnPlayFootStepSound, &PlayFootStepSound_Params, nullptr);
};

// Function OLGame.OLPawn.OnFootstep
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        FootDown                       (CPF_Parm)
// class UAnimNotify_Footstep*    footstepNotify                 (CPF_Parm)

void AOLPawn::OnFootstep(int32_t FootDown, class UAnimNotify_Footstep* footstepNotify)
{
	static UFunction* uFnOnFootstep = nullptr;

	if (!uFnOnFootstep)
	{
		uFnOnFootstep = UFunction::FindFunction("Function OLGame.OLPawn.OnFootstep");
	}

	AOLPawn_execOnFootstep_Params OnFootstep_Params;
	memset(&OnFootstep_Params, 0, sizeof(OnFootstep_Params));
	memcpy_s(&OnFootstep_Params.FootDown, sizeof(OnFootstep_Params.FootDown), &FootDown, sizeof(FootDown));
	memcpy_s(&OnFootstep_Params.footstepNotify, sizeof(OnFootstep_Params.footstepNotify), &footstepNotify, sizeof(footstepNotify));

	uFnOnFootstep->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnOnFootstep, &OnFootstep_Params, nullptr);
	uFnOnFootstep->FunctionFlags |= 0x400;
};

// Function OLGame.OLPawn.SpawnFootstepDecal
// [0x00820802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// EFootstepDecalType             DecalType                      (CPF_Parm)
// bool                           bLeftFoot                      (CPF_Parm)
// float                          Alpha                          (CPF_Parm)

void AOLPawn::eventSpawnFootstepDecal(EFootstepDecalType DecalType, bool bLeftFoot, float Alpha)
{
	static UFunction* uFnSpawnFootstepDecal = nullptr;

	if (!uFnSpawnFootstepDecal)
	{
		uFnSpawnFootstepDecal = UFunction::FindFunction("Function OLGame.OLPawn.SpawnFootstepDecal");
	}

	AOLPawn_eventSpawnFootstepDecal_Params SpawnFootstepDecal_Params;
	memset(&SpawnFootstepDecal_Params, 0, sizeof(SpawnFootstepDecal_Params));
	memcpy_s(&SpawnFootstepDecal_Params.DecalType, sizeof(SpawnFootstepDecal_Params.DecalType), &DecalType, sizeof(DecalType));
	SpawnFootstepDecal_Params.bLeftFoot = bLeftFoot;
	memcpy_s(&SpawnFootstepDecal_Params.Alpha, sizeof(SpawnFootstepDecal_Params.Alpha), &Alpha, sizeof(Alpha));

	this->ProcessEvent(uFnSpawnFootstepDecal, &SpawnFootstepDecal_Params, nullptr);
};

// Function OLGame.OLPawn.ProcessNewFootstepDecal
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class UDecalComponent*         NewDecalComp                   (CPF_Parm | CPF_EditInline)
// EFootstepDecalType             DecalType                      (CPF_Parm)
// float                          DecalThickness                 (CPF_Parm)
// bool                           bLeftFoot                      (CPF_Parm)
// struct FVector                 DecalLocation                  (CPF_Parm | CPF_OutParm)

void AOLPawn::ProcessNewFootstepDecal(class UDecalComponent* NewDecalComp, EFootstepDecalType DecalType, float DecalThickness, bool bLeftFoot, struct FVector& DecalLocation)
{
	static UFunction* uFnProcessNewFootstepDecal = nullptr;

	if (!uFnProcessNewFootstepDecal)
	{
		uFnProcessNewFootstepDecal = UFunction::FindFunction("Function OLGame.OLPawn.ProcessNewFootstepDecal");
	}

	AOLPawn_execProcessNewFootstepDecal_Params ProcessNewFootstepDecal_Params;
	memset(&ProcessNewFootstepDecal_Params, 0, sizeof(ProcessNewFootstepDecal_Params));
	memcpy_s(&ProcessNewFootstepDecal_Params.NewDecalComp, sizeof(ProcessNewFootstepDecal_Params.NewDecalComp), &NewDecalComp, sizeof(NewDecalComp));
	memcpy_s(&ProcessNewFootstepDecal_Params.DecalType, sizeof(ProcessNewFootstepDecal_Params.DecalType), &DecalType, sizeof(DecalType));
	memcpy_s(&ProcessNewFootstepDecal_Params.DecalThickness, sizeof(ProcessNewFootstepDecal_Params.DecalThickness), &DecalThickness, sizeof(DecalThickness));
	ProcessNewFootstepDecal_Params.bLeftFoot = bLeftFoot;
	memcpy_s(&ProcessNewFootstepDecal_Params.DecalLocation, sizeof(ProcessNewFootstepDecal_Params.DecalLocation), &DecalLocation, sizeof(DecalLocation));

	uFnProcessNewFootstepDecal->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnProcessNewFootstepDecal, &ProcessNewFootstepDecal_Params, nullptr);
	uFnProcessNewFootstepDecal->FunctionFlags |= 0x400;

	memcpy_s(&DecalLocation, sizeof(DecalLocation), &ProcessNewFootstepDecal_Params.DecalLocation, sizeof(ProcessNewFootstepDecal_Params.DecalLocation));
};

// Function OLGame.OLPawn.GetFootstepDecalTransform
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           bLeftFoot                      (CPF_Parm)
// struct FVector                 DecalLocation                  (CPF_Parm | CPF_OutParm)
// struct FRotator                DecalRotation                  (CPF_Parm | CPF_OutParm)

void AOLPawn::GetFootstepDecalTransform(bool bLeftFoot, struct FVector& DecalLocation, struct FRotator& DecalRotation)
{
	static UFunction* uFnGetFootstepDecalTransform = nullptr;

	if (!uFnGetFootstepDecalTransform)
	{
		uFnGetFootstepDecalTransform = UFunction::FindFunction("Function OLGame.OLPawn.GetFootstepDecalTransform");
	}

	AOLPawn_execGetFootstepDecalTransform_Params GetFootstepDecalTransform_Params;
	memset(&GetFootstepDecalTransform_Params, 0, sizeof(GetFootstepDecalTransform_Params));
	GetFootstepDecalTransform_Params.bLeftFoot = bLeftFoot;
	memcpy_s(&GetFootstepDecalTransform_Params.DecalLocation, sizeof(GetFootstepDecalTransform_Params.DecalLocation), &DecalLocation, sizeof(DecalLocation));
	memcpy_s(&GetFootstepDecalTransform_Params.DecalRotation, sizeof(GetFootstepDecalTransform_Params.DecalRotation), &DecalRotation, sizeof(DecalRotation));

	uFnGetFootstepDecalTransform->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetFootstepDecalTransform, &GetFootstepDecalTransform_Params, nullptr);
	uFnGetFootstepDecalTransform->FunctionFlags |= 0x400;

	memcpy_s(&DecalLocation, sizeof(DecalLocation), &GetFootstepDecalTransform_Params.DecalLocation, sizeof(GetFootstepDecalTransform_Params.DecalLocation));
	memcpy_s(&DecalRotation, sizeof(DecalRotation), &GetFootstepDecalTransform_Params.DecalRotation, sizeof(GetFootstepDecalTransform_Params.DecalRotation));
};

// Function OLGame.OLPawn.FaceRotation
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FRotator                NewRotation                    (CPF_Parm)
// float                          DeltaTime                      (CPF_Parm)

void AOLPawn::FaceRotation(struct FRotator NewRotation, float DeltaTime)
{
	static UFunction* uFnFaceRotation = nullptr;

	if (!uFnFaceRotation)
	{
		uFnFaceRotation = UFunction::FindFunction("Function OLGame.OLPawn.FaceRotation");
	}

	AOLPawn_execFaceRotation_Params FaceRotation_Params;
	memset(&FaceRotation_Params, 0, sizeof(FaceRotation_Params));
	memcpy_s(&FaceRotation_Params.NewRotation, sizeof(FaceRotation_Params.NewRotation), &NewRotation, sizeof(NewRotation));
	memcpy_s(&FaceRotation_Params.DeltaTime, sizeof(FaceRotation_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnFaceRotation, &FaceRotation_Params, nullptr);
};

// Function OLGame.OLPawn.GetEyeHeight
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float AOLPawn::GetEyeHeight()
{
	static UFunction* uFnGetEyeHeight = nullptr;

	if (!uFnGetEyeHeight)
	{
		uFnGetEyeHeight = UFunction::FindFunction("Function OLGame.OLPawn.GetEyeHeight");
	}

	AOLPawn_execGetEyeHeight_Params GetEyeHeight_Params;
	memset(&GetEyeHeight_Params, 0, sizeof(GetEyeHeight_Params));

	this->ProcessEvent(uFnGetEyeHeight, &GetEyeHeight_Params, nullptr);

	return GetEyeHeight_Params.ReturnValue;
};

// Function OLGame.OLPawn.GetPawnAmbientSound
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USoundCue*               ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class USoundCue* AOLPawn::GetPawnAmbientSound()
{
	static UFunction* uFnGetPawnAmbientSound = nullptr;

	if (!uFnGetPawnAmbientSound)
	{
		uFnGetPawnAmbientSound = UFunction::FindFunction("Function OLGame.OLPawn.GetPawnAmbientSound");
	}

	AOLPawn_execGetPawnAmbientSound_Params GetPawnAmbientSound_Params;
	memset(&GetPawnAmbientSound_Params, 0, sizeof(GetPawnAmbientSound_Params));

	this->ProcessEvent(uFnGetPawnAmbientSound, &GetPawnAmbientSound_Params, nullptr);

	return GetPawnAmbientSound_Params.ReturnValue;
};

// Function OLGame.OLPawn.SetPawnAmbientSound
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USoundCue*               NewAmbientSound                (CPF_Parm)

void AOLPawn::SetPawnAmbientSound(class USoundCue* NewAmbientSound)
{
	static UFunction* uFnSetPawnAmbientSound = nullptr;

	if (!uFnSetPawnAmbientSound)
	{
		uFnSetPawnAmbientSound = UFunction::FindFunction("Function OLGame.OLPawn.SetPawnAmbientSound");
	}

	AOLPawn_execSetPawnAmbientSound_Params SetPawnAmbientSound_Params;
	memset(&SetPawnAmbientSound_Params, 0, sizeof(SetPawnAmbientSound_Params));
	memcpy_s(&SetPawnAmbientSound_Params.NewAmbientSound, sizeof(SetPawnAmbientSound_Params.NewAmbientSound), &NewAmbientSound, sizeof(NewAmbientSound));

	this->ProcessEvent(uFnSetPawnAmbientSound, &SetPawnAmbientSound_Params, nullptr);
};

// Function OLGame.OLPawn.Died
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AController*             Killer                         (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)

bool AOLPawn::Died(class AController* Killer, class UClass* DamageType, struct FVector HitLocation)
{
	static UFunction* uFnDied = nullptr;

	if (!uFnDied)
	{
		uFnDied = UFunction::FindFunction("Function OLGame.OLPawn.Died");
	}

	AOLPawn_execDied_Params Died_Params;
	memset(&Died_Params, 0, sizeof(Died_Params));
	memcpy_s(&Died_Params.Killer, sizeof(Died_Params.Killer), &Killer, sizeof(Killer));
	memcpy_s(&Died_Params.DamageType, sizeof(Died_Params.DamageType), &DamageType, sizeof(DamageType));
	memcpy_s(&Died_Params.HitLocation, sizeof(Died_Params.HitLocation), &HitLocation, sizeof(HitLocation));

	this->ProcessEvent(uFnDied, &Died_Params, nullptr);

	return Died_Params.ReturnValue;
};

// Function OLGame.OLPawn.EncroachedBy
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void AOLPawn::eventEncroachedBy(class AActor* Other)
{
	static UFunction* uFnEncroachedBy = nullptr;

	if (!uFnEncroachedBy)
	{
		uFnEncroachedBy = UFunction::FindFunction("Function OLGame.OLPawn.EncroachedBy");
	}

	AOLPawn_eventEncroachedBy_Params EncroachedBy_Params;
	memset(&EncroachedBy_Params, 0, sizeof(EncroachedBy_Params));
	memcpy_s(&EncroachedBy_Params.Other, sizeof(EncroachedBy_Params.Other), &Other, sizeof(Other));

	this->ProcessEvent(uFnEncroachedBy, &EncroachedBy_Params, nullptr);
};

// Function OLGame.OLPawn.SetPawnRBChannels
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bRagdollMode                   (CPF_Parm)

void AOLPawn::SetPawnRBChannels(bool bRagdollMode)
{
	static UFunction* uFnSetPawnRBChannels = nullptr;

	if (!uFnSetPawnRBChannels)
	{
		uFnSetPawnRBChannels = UFunction::FindFunction("Function OLGame.OLPawn.SetPawnRBChannels");
	}

	AOLPawn_execSetPawnRBChannels_Params SetPawnRBChannels_Params;
	memset(&SetPawnRBChannels_Params, 0, sizeof(SetPawnRBChannels_Params));
	SetPawnRBChannels_Params.bRagdollMode = bRagdollMode;

	this->ProcessEvent(uFnSetPawnRBChannels, &SetPawnRBChannels_Params, nullptr);
};

// Function OLGame.OLPawn.OnAnimEnd
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UAnimNodeSequence*       SeqNode                        (CPF_Parm)
// float                          PlayedTime                     (CPF_Parm)
// float                          ExcessTime                     (CPF_Parm)

void AOLPawn::eventOnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime)
{
	static UFunction* uFnOnAnimEnd = nullptr;

	if (!uFnOnAnimEnd)
	{
		uFnOnAnimEnd = UFunction::FindFunction("Function OLGame.OLPawn.OnAnimEnd");
	}

	AOLPawn_eventOnAnimEnd_Params OnAnimEnd_Params;
	memset(&OnAnimEnd_Params, 0, sizeof(OnAnimEnd_Params));
	memcpy_s(&OnAnimEnd_Params.SeqNode, sizeof(OnAnimEnd_Params.SeqNode), &SeqNode, sizeof(SeqNode));
	memcpy_s(&OnAnimEnd_Params.PlayedTime, sizeof(OnAnimEnd_Params.PlayedTime), &PlayedTime, sizeof(PlayedTime));
	memcpy_s(&OnAnimEnd_Params.ExcessTime, sizeof(OnAnimEnd_Params.ExcessTime), &ExcessTime, sizeof(ExcessTime));

	this->ProcessEvent(uFnOnAnimEnd, &OnAnimEnd_Params, nullptr);
};

// Function OLGame.OLPawn.ReattachMesh
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPawn::ReattachMesh()
{
	static UFunction* uFnReattachMesh = nullptr;

	if (!uFnReattachMesh)
	{
		uFnReattachMesh = UFunction::FindFunction("Function OLGame.OLPawn.ReattachMesh");
	}

	AOLPawn_execReattachMesh_Params ReattachMesh_Params;
	memset(&ReattachMesh_Params, 0, sizeof(ReattachMesh_Params));

	this->ProcessEvent(uFnReattachMesh, &ReattachMesh_Params, nullptr);
};

// Function OLGame.OLPawn.UpdateShadowSettings
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bWantShadow                    (CPF_Parm)

void AOLPawn::UpdateShadowSettings(bool bWantShadow)
{
	static UFunction* uFnUpdateShadowSettings = nullptr;

	if (!uFnUpdateShadowSettings)
	{
		uFnUpdateShadowSettings = UFunction::FindFunction("Function OLGame.OLPawn.UpdateShadowSettings");
	}

	AOLPawn_execUpdateShadowSettings_Params UpdateShadowSettings_Params;
	memset(&UpdateShadowSettings_Params, 0, sizeof(UpdateShadowSettings_Params));
	UpdateShadowSettings_Params.bWantShadow = bWantShadow;

	this->ProcessEvent(uFnUpdateShadowSettings, &UpdateShadowSettings_Params, nullptr);
};

// Function OLGame.OLPawn.PostBeginPlay
// [0x00820102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:

void AOLPawn::PostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function OLGame.OLPawn.PostBeginPlay");
	}

	AOLPawn_execPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function OLGame.OLPawn.ProceduralAdjustNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          Duration                       (CPF_Parm)

void AOLPawn::ProceduralAdjustNotify(float Duration)
{
	static UFunction* uFnProceduralAdjustNotify = nullptr;

	if (!uFnProceduralAdjustNotify)
	{
		uFnProceduralAdjustNotify = UFunction::FindFunction("Function OLGame.OLPawn.ProceduralAdjustNotify");
	}

	AOLPawn_execProceduralAdjustNotify_Params ProceduralAdjustNotify_Params;
	memset(&ProceduralAdjustNotify_Params, 0, sizeof(ProceduralAdjustNotify_Params));
	memcpy_s(&ProceduralAdjustNotify_Params.Duration, sizeof(ProceduralAdjustNotify_Params.Duration), &Duration, sizeof(Duration));

	uFnProceduralAdjustNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnProceduralAdjustNotify, &ProceduralAdjustNotify_Params, nullptr);
	uFnProceduralAdjustNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLPawn.EnableCollisionNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPawn::EnableCollisionNotify()
{
	static UFunction* uFnEnableCollisionNotify = nullptr;

	if (!uFnEnableCollisionNotify)
	{
		uFnEnableCollisionNotify = UFunction::FindFunction("Function OLGame.OLPawn.EnableCollisionNotify");
	}

	AOLPawn_execEnableCollisionNotify_Params EnableCollisionNotify_Params;
	memset(&EnableCollisionNotify_Params, 0, sizeof(EnableCollisionNotify_Params));

	uFnEnableCollisionNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnEnableCollisionNotify, &EnableCollisionNotify_Params, nullptr);
	uFnEnableCollisionNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLPawn.RestoreCollisionSizeNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPawn::RestoreCollisionSizeNotify()
{
	static UFunction* uFnRestoreCollisionSizeNotify = nullptr;

	if (!uFnRestoreCollisionSizeNotify)
	{
		uFnRestoreCollisionSizeNotify = UFunction::FindFunction("Function OLGame.OLPawn.RestoreCollisionSizeNotify");
	}

	AOLPawn_execRestoreCollisionSizeNotify_Params RestoreCollisionSizeNotify_Params;
	memset(&RestoreCollisionSizeNotify_Params, 0, sizeof(RestoreCollisionSizeNotify_Params));

	uFnRestoreCollisionSizeNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRestoreCollisionSizeNotify, &RestoreCollisionSizeNotify_Params, nullptr);
	uFnRestoreCollisionSizeNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLPawn.ChangeCollisionSizeNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPawn::ChangeCollisionSizeNotify()
{
	static UFunction* uFnChangeCollisionSizeNotify = nullptr;

	if (!uFnChangeCollisionSizeNotify)
	{
		uFnChangeCollisionSizeNotify = UFunction::FindFunction("Function OLGame.OLPawn.ChangeCollisionSizeNotify");
	}

	AOLPawn_execChangeCollisionSizeNotify_Params ChangeCollisionSizeNotify_Params;
	memset(&ChangeCollisionSizeNotify_Params, 0, sizeof(ChangeCollisionSizeNotify_Params));

	uFnChangeCollisionSizeNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnChangeCollisionSizeNotify, &ChangeCollisionSizeNotify_Params, nullptr);
	uFnChangeCollisionSizeNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLPawn.MoveInterruptibleNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPawn::MoveInterruptibleNotify()
{
	static UFunction* uFnMoveInterruptibleNotify = nullptr;

	if (!uFnMoveInterruptibleNotify)
	{
		uFnMoveInterruptibleNotify = UFunction::FindFunction("Function OLGame.OLPawn.MoveInterruptibleNotify");
	}

	AOLPawn_execMoveInterruptibleNotify_Params MoveInterruptibleNotify_Params;
	memset(&MoveInterruptibleNotify_Params, 0, sizeof(MoveInterruptibleNotify_Params));

	uFnMoveInterruptibleNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnMoveInterruptibleNotify, &MoveInterruptibleNotify_Params, nullptr);
	uFnMoveInterruptibleNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLPawn.NativePostBeginPlay
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPawn::NativePostBeginPlay()
{
	static UFunction* uFnNativePostBeginPlay = nullptr;

	if (!uFnNativePostBeginPlay)
	{
		uFnNativePostBeginPlay = UFunction::FindFunction("Function OLGame.OLPawn.NativePostBeginPlay");
	}

	AOLPawn_execNativePostBeginPlay_Params NativePostBeginPlay_Params;
	memset(&NativePostBeginPlay_Params, 0, sizeof(NativePostBeginPlay_Params));

	uFnNativePostBeginPlay->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativePostBeginPlay, &NativePostBeginPlay_Params, nullptr);
	uFnNativePostBeginPlay->FunctionFlags |= 0x400;
};

// Function OLGame.OLPawn.NativeOnAnimEnd
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UAnimNodeSequence*       SeqNode                        (CPF_Parm)
// float                          PlayedTime                     (CPF_Parm)
// float                          ExcessTime                     (CPF_Parm)

void AOLPawn::NativeOnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime)
{
	static UFunction* uFnNativeOnAnimEnd = nullptr;

	if (!uFnNativeOnAnimEnd)
	{
		uFnNativeOnAnimEnd = UFunction::FindFunction("Function OLGame.OLPawn.NativeOnAnimEnd");
	}

	AOLPawn_execNativeOnAnimEnd_Params NativeOnAnimEnd_Params;
	memset(&NativeOnAnimEnd_Params, 0, sizeof(NativeOnAnimEnd_Params));
	memcpy_s(&NativeOnAnimEnd_Params.SeqNode, sizeof(NativeOnAnimEnd_Params.SeqNode), &SeqNode, sizeof(SeqNode));
	memcpy_s(&NativeOnAnimEnd_Params.PlayedTime, sizeof(NativeOnAnimEnd_Params.PlayedTime), &PlayedTime, sizeof(PlayedTime));
	memcpy_s(&NativeOnAnimEnd_Params.ExcessTime, sizeof(NativeOnAnimEnd_Params.ExcessTime), &ExcessTime, sizeof(ExcessTime));

	uFnNativeOnAnimEnd->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeOnAnimEnd, &NativeOnAnimEnd_Params, nullptr);
	uFnNativeOnAnimEnd->FunctionFlags |= 0x400;
};

// Function OLGame.OLPawn.StartSpecialMove
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ESpecialMoveType               moveType                       (CPF_Parm)
// struct FVector                 targetPosition                 (CPF_OptionalParm | CPF_Parm)
// struct FVector                 TargetDirection                (CPF_OptionalParm | CPF_Parm)
// EAdjustPositionTargetType      TargetType                     (CPF_OptionalParm | CPF_Parm)

void AOLPawn::StartSpecialMove(ESpecialMoveType moveType, struct FVector targetPosition, struct FVector TargetDirection, EAdjustPositionTargetType TargetType)
{
	static UFunction* uFnStartSpecialMove = nullptr;

	if (!uFnStartSpecialMove)
	{
		uFnStartSpecialMove = UFunction::FindFunction("Function OLGame.OLPawn.StartSpecialMove");
	}

	AOLPawn_execStartSpecialMove_Params StartSpecialMove_Params;
	memset(&StartSpecialMove_Params, 0, sizeof(StartSpecialMove_Params));
	memcpy_s(&StartSpecialMove_Params.moveType, sizeof(StartSpecialMove_Params.moveType), &moveType, sizeof(moveType));
	memcpy_s(&StartSpecialMove_Params.targetPosition, sizeof(StartSpecialMove_Params.targetPosition), &targetPosition, sizeof(targetPosition));
	memcpy_s(&StartSpecialMove_Params.TargetDirection, sizeof(StartSpecialMove_Params.TargetDirection), &TargetDirection, sizeof(TargetDirection));
	memcpy_s(&StartSpecialMove_Params.TargetType, sizeof(StartSpecialMove_Params.TargetType), &TargetType, sizeof(TargetType));

	uFnStartSpecialMove->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStartSpecialMove, &StartSpecialMove_Params, nullptr);
	uFnStartSpecialMove->FunctionFlags |= 0x400;
};

// Function OLGame.OLPawn.IsSpecialMoveCompleted
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLPawn::IsSpecialMoveCompleted()
{
	static UFunction* uFnIsSpecialMoveCompleted = nullptr;

	if (!uFnIsSpecialMoveCompleted)
	{
		uFnIsSpecialMoveCompleted = UFunction::FindFunction("Function OLGame.OLPawn.IsSpecialMoveCompleted");
	}

	AOLPawn_execIsSpecialMoveCompleted_Params IsSpecialMoveCompleted_Params;
	memset(&IsSpecialMoveCompleted_Params, 0, sizeof(IsSpecialMoveCompleted_Params));

	uFnIsSpecialMoveCompleted->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsSpecialMoveCompleted, &IsSpecialMoveCompleted_Params, nullptr);
	uFnIsSpecialMoveCompleted->FunctionFlags |= 0x400;

	return IsSpecialMoveCompleted_Params.ReturnValue;
};

// Function OLGame.OLPawn.NativeDestroyed
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPawn::NativeDestroyed()
{
	static UFunction* uFnNativeDestroyed = nullptr;

	if (!uFnNativeDestroyed)
	{
		uFnNativeDestroyed = UFunction::FindFunction("Function OLGame.OLPawn.NativeDestroyed");
	}

	AOLPawn_execNativeDestroyed_Params NativeDestroyed_Params;
	memset(&NativeDestroyed_Params, 0, sizeof(NativeDestroyed_Params));

	uFnNativeDestroyed->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeDestroyed, &NativeDestroyed_Params, nullptr);
	uFnNativeDestroyed->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.UnTouch
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void AOLHero::eventUnTouch(class AActor* Other)
{
	static UFunction* uFnUnTouch = nullptr;

	if (!uFnUnTouch)
	{
		uFnUnTouch = UFunction::FindFunction("Function OLGame.OLHero.UnTouch");
	}

	AOLHero_eventUnTouch_Params UnTouch_Params;
	memset(&UnTouch_Params, 0, sizeof(UnTouch_Params));
	memcpy_s(&UnTouch_Params.Other, sizeof(UnTouch_Params.Other), &Other, sizeof(Other));

	this->ProcessEvent(uFnUnTouch, &UnTouch_Params, nullptr);
};

// Function OLGame.OLHero.Touch
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)
// class UPrimitiveComponent*     OtherComp                      (CPF_Parm | CPF_EditInline)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)

void AOLHero::eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal)
{
	static UFunction* uFnTouch = nullptr;

	if (!uFnTouch)
	{
		uFnTouch = UFunction::FindFunction("Function OLGame.OLHero.Touch");
	}

	AOLHero_eventTouch_Params Touch_Params;
	memset(&Touch_Params, 0, sizeof(Touch_Params));
	memcpy_s(&Touch_Params.Other, sizeof(Touch_Params.Other), &Other, sizeof(Other));
	memcpy_s(&Touch_Params.OtherComp, sizeof(Touch_Params.OtherComp), &OtherComp, sizeof(OtherComp));
	memcpy_s(&Touch_Params.HitLocation, sizeof(Touch_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	memcpy_s(&Touch_Params.HitNormal, sizeof(Touch_Params.HitNormal), &HitNormal, sizeof(HitNormal));

	this->ProcessEvent(uFnTouch, &Touch_Params, nullptr);
};

// Function OLGame.OLHero.NativeUnTouch
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void AOLHero::NativeUnTouch(class AActor* Other)
{
	static UFunction* uFnNativeUnTouch = nullptr;

	if (!uFnNativeUnTouch)
	{
		uFnNativeUnTouch = UFunction::FindFunction("Function OLGame.OLHero.NativeUnTouch");
	}

	AOLHero_execNativeUnTouch_Params NativeUnTouch_Params;
	memset(&NativeUnTouch_Params, 0, sizeof(NativeUnTouch_Params));
	memcpy_s(&NativeUnTouch_Params.Other, sizeof(NativeUnTouch_Params.Other), &Other, sizeof(Other));

	uFnNativeUnTouch->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeUnTouch, &NativeUnTouch_Params, nullptr);
	uFnNativeUnTouch->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.NativeTouch
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)
// class UPrimitiveComponent*     OtherComp                      (CPF_Parm | CPF_EditInline)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)

void AOLHero::NativeTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal)
{
	static UFunction* uFnNativeTouch = nullptr;

	if (!uFnNativeTouch)
	{
		uFnNativeTouch = UFunction::FindFunction("Function OLGame.OLHero.NativeTouch");
	}

	AOLHero_execNativeTouch_Params NativeTouch_Params;
	memset(&NativeTouch_Params, 0, sizeof(NativeTouch_Params));
	memcpy_s(&NativeTouch_Params.Other, sizeof(NativeTouch_Params.Other), &Other, sizeof(Other));
	memcpy_s(&NativeTouch_Params.OtherComp, sizeof(NativeTouch_Params.OtherComp), &OtherComp, sizeof(OtherComp));
	memcpy_s(&NativeTouch_Params.HitLocation, sizeof(NativeTouch_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	memcpy_s(&NativeTouch_Params.HitNormal, sizeof(NativeTouch_Params.HitNormal), &HitNormal, sizeof(HitNormal));

	uFnNativeTouch->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeTouch, &NativeTouch_Params, nullptr);
	uFnNativeTouch->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.IsInMainMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLHero::IsInMainMenu()
{
	static UFunction* uFnIsInMainMenu = nullptr;

	if (!uFnIsInMainMenu)
	{
		uFnIsInMainMenu = UFunction::FindFunction("Function OLGame.OLHero.IsInMainMenu");
	}

	AOLHero_execIsInMainMenu_Params IsInMainMenu_Params;
	memset(&IsInMainMenu_Params, 0, sizeof(IsInMainMenu_Params));

	uFnIsInMainMenu->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsInMainMenu, &IsInMainMenu_Params, nullptr);
	uFnIsInMainMenu->FunctionFlags |= 0x400;

	return IsInMainMenu_Params.ReturnValue;
};

// Function OLGame.OLHero.UpdateDifficultyBasedValues
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::UpdateDifficultyBasedValues()
{
	static UFunction* uFnUpdateDifficultyBasedValues = nullptr;

	if (!uFnUpdateDifficultyBasedValues)
	{
		uFnUpdateDifficultyBasedValues = UFunction::FindFunction("Function OLGame.OLHero.UpdateDifficultyBasedValues");
	}

	AOLHero_execUpdateDifficultyBasedValues_Params UpdateDifficultyBasedValues_Params;
	memset(&UpdateDifficultyBasedValues_Params, 0, sizeof(UpdateDifficultyBasedValues_Params));

	this->ProcessEvent(uFnUpdateDifficultyBasedValues, &UpdateDifficultyBasedValues_Params, nullptr);
};

// Function OLGame.OLHero.HandleTeleport
// [0x00024102] (FUNC_Defined | FUNC_Simulated | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// TArray<class UObject*>         DestList                       (CPF_Parm | CPF_NeedCtorLink)
// bool                           bUpdateRotation                (CPF_Parm)
// bool                           bCheckOverlap                  (CPF_Parm)
// float                          TeleportDistance               (CPF_OptionalParm | CPF_Parm)
// TArray<class AVolume*>         TeleportVolumes                (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)
// int32_t                        PreferredDestIndex             (CPF_OptionalParm | CPF_Parm)

bool AOLHero::HandleTeleport(TArray<class UObject*> DestList, bool bUpdateRotation, bool bCheckOverlap, float TeleportDistance, TArray<class AVolume*> TeleportVolumes, int32_t PreferredDestIndex)
{
	static UFunction* uFnHandleTeleport = nullptr;

	if (!uFnHandleTeleport)
	{
		uFnHandleTeleport = UFunction::FindFunction("Function OLGame.OLHero.HandleTeleport");
	}

	AOLHero_execHandleTeleport_Params HandleTeleport_Params;
	memset(&HandleTeleport_Params, 0, sizeof(HandleTeleport_Params));
	memcpy_s(&HandleTeleport_Params.DestList, sizeof(HandleTeleport_Params.DestList), &DestList, sizeof(DestList));
	HandleTeleport_Params.bUpdateRotation = bUpdateRotation;
	HandleTeleport_Params.bCheckOverlap = bCheckOverlap;
	memcpy_s(&HandleTeleport_Params.TeleportDistance, sizeof(HandleTeleport_Params.TeleportDistance), &TeleportDistance, sizeof(TeleportDistance));
	memcpy_s(&HandleTeleport_Params.TeleportVolumes, sizeof(HandleTeleport_Params.TeleportVolumes), &TeleportVolumes, sizeof(TeleportVolumes));
	memcpy_s(&HandleTeleport_Params.PreferredDestIndex, sizeof(HandleTeleport_Params.PreferredDestIndex), &PreferredDestIndex, sizeof(PreferredDestIndex));

	this->ProcessEvent(uFnHandleTeleport, &HandleTeleport_Params, nullptr);

	return HandleTeleport_Params.ReturnValue;
};

// Function OLGame.OLHero.OutsideWorldBounds
// [0x00020922] (FUNC_Defined | FUNC_Singular | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::eventOutsideWorldBounds()
{
	static UFunction* uFnOutsideWorldBounds = nullptr;

	if (!uFnOutsideWorldBounds)
	{
		uFnOutsideWorldBounds = UFunction::FindFunction("Function OLGame.OLHero.OutsideWorldBounds");
	}

	AOLHero_eventOutsideWorldBounds_Params OutsideWorldBounds_Params;
	memset(&OutsideWorldBounds_Params, 0, sizeof(OutsideWorldBounds_Params));

	this->ProcessEvent(uFnOutsideWorldBounds, &OutsideWorldBounds_Params, nullptr);
};

// Function OLGame.OLHero.FellOutOfWorld
// [0x00020900] (FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UClass*                  dmgType                        (CPF_Parm)

void AOLHero::eventFellOutOfWorld(class UClass* dmgType)
{
	static UFunction* uFnFellOutOfWorld = nullptr;

	if (!uFnFellOutOfWorld)
	{
		uFnFellOutOfWorld = UFunction::FindFunction("Function OLGame.OLHero.FellOutOfWorld");
	}

	AOLHero_eventFellOutOfWorld_Params FellOutOfWorld_Params;
	memset(&FellOutOfWorld_Params, 0, sizeof(FellOutOfWorld_Params));
	memcpy_s(&FellOutOfWorld_Params.dmgType, sizeof(FellOutOfWorld_Params.dmgType), &dmgType, sizeof(dmgType));

	this->ProcessEvent(uFnFellOutOfWorld, &FellOutOfWorld_Params, nullptr);
};

// Function OLGame.OLHero.MakeFootstepNoise
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        footIndex                      (CPF_Parm)

void AOLHero::MakeFootstepNoise(int32_t footIndex)
{
	static UFunction* uFnMakeFootstepNoise = nullptr;

	if (!uFnMakeFootstepNoise)
	{
		uFnMakeFootstepNoise = UFunction::FindFunction("Function OLGame.OLHero.MakeFootstepNoise");
	}

	AOLHero_execMakeFootstepNoise_Params MakeFootstepNoise_Params;
	memset(&MakeFootstepNoise_Params, 0, sizeof(MakeFootstepNoise_Params));
	memcpy_s(&MakeFootstepNoise_Params.footIndex, sizeof(MakeFootstepNoise_Params.footIndex), &footIndex, sizeof(footIndex));

	uFnMakeFootstepNoise->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnMakeFootstepNoise, &MakeFootstepNoise_Params, nullptr);
	uFnMakeFootstepNoise->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.SetMeshVisibility
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bVisible                       (CPF_Parm)

void AOLHero::SetMeshVisibility(bool bVisible)
{
	static UFunction* uFnSetMeshVisibility = nullptr;

	if (!uFnSetMeshVisibility)
	{
		uFnSetMeshVisibility = UFunction::FindFunction("Function OLGame.OLHero.SetMeshVisibility");
	}

	AOLHero_execSetMeshVisibility_Params SetMeshVisibility_Params;
	memset(&SetMeshVisibility_Params, 0, sizeof(SetMeshVisibility_Params));
	SetMeshVisibility_Params.bVisible = bVisible;

	this->ProcessEvent(uFnSetMeshVisibility, &SetMeshVisibility_Params, nullptr);
};

// Function OLGame.OLHero.EndViewTarget
// [0x00020900] (FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       PC                             (CPF_Parm)

void AOLHero::eventEndViewTarget(class APlayerController* PC)
{
	static UFunction* uFnEndViewTarget = nullptr;

	if (!uFnEndViewTarget)
	{
		uFnEndViewTarget = UFunction::FindFunction("Function OLGame.OLHero.EndViewTarget");
	}

	AOLHero_eventEndViewTarget_Params EndViewTarget_Params;
	memset(&EndViewTarget_Params, 0, sizeof(EndViewTarget_Params));
	memcpy_s(&EndViewTarget_Params.PC, sizeof(EndViewTarget_Params.PC), &PC, sizeof(PC));

	this->ProcessEvent(uFnEndViewTarget, &EndViewTarget_Params, nullptr);
};

// Function OLGame.OLHero.BecomeViewTarget
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       PC                             (CPF_Parm)

void AOLHero::eventBecomeViewTarget(class APlayerController* PC)
{
	static UFunction* uFnBecomeViewTarget = nullptr;

	if (!uFnBecomeViewTarget)
	{
		uFnBecomeViewTarget = UFunction::FindFunction("Function OLGame.OLHero.BecomeViewTarget");
	}

	AOLHero_eventBecomeViewTarget_Params BecomeViewTarget_Params;
	memset(&BecomeViewTarget_Params, 0, sizeof(BecomeViewTarget_Params));
	memcpy_s(&BecomeViewTarget_Params.PC, sizeof(BecomeViewTarget_Params.PC), &PC, sizeof(PC));

	this->ProcessEvent(uFnBecomeViewTarget, &BecomeViewTarget_Params, nullptr);
};

// Function OLGame.OLHero.PlayLanded
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 landingLocation                (CPF_Parm)
// float                          ImpactVel                      (CPF_Parm)

void AOLHero::PlayLanded(struct FVector landingLocation, float ImpactVel)
{
	static UFunction* uFnPlayLanded = nullptr;

	if (!uFnPlayLanded)
	{
		uFnPlayLanded = UFunction::FindFunction("Function OLGame.OLHero.PlayLanded");
	}

	AOLHero_execPlayLanded_Params PlayLanded_Params;
	memset(&PlayLanded_Params, 0, sizeof(PlayLanded_Params));
	memcpy_s(&PlayLanded_Params.landingLocation, sizeof(PlayLanded_Params.landingLocation), &landingLocation, sizeof(landingLocation));
	memcpy_s(&PlayLanded_Params.ImpactVel, sizeof(PlayLanded_Params.ImpactVel), &ImpactVel, sizeof(ImpactVel));

	this->ProcessEvent(uFnPlayLanded, &PlayLanded_Params, nullptr);
};

// Function OLGame.OLHero.NativePlayLanded
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 landingLocation                (CPF_Parm)
// float                          ImpactVel                      (CPF_Parm)

void AOLHero::NativePlayLanded(struct FVector landingLocation, float ImpactVel)
{
	static UFunction* uFnNativePlayLanded = nullptr;

	if (!uFnNativePlayLanded)
	{
		uFnNativePlayLanded = UFunction::FindFunction("Function OLGame.OLHero.NativePlayLanded");
	}

	AOLHero_execNativePlayLanded_Params NativePlayLanded_Params;
	memset(&NativePlayLanded_Params, 0, sizeof(NativePlayLanded_Params));
	memcpy_s(&NativePlayLanded_Params.landingLocation, sizeof(NativePlayLanded_Params.landingLocation), &landingLocation, sizeof(landingLocation));
	memcpy_s(&NativePlayLanded_Params.ImpactVel, sizeof(NativePlayLanded_Params.ImpactVel), &ImpactVel, sizeof(ImpactVel));

	uFnNativePlayLanded->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativePlayLanded, &NativePlayLanded_Params, nullptr);
	uFnNativePlayLanded->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.TakeFallingDamage
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 fallLocation                   (CPF_Parm)

void AOLHero::TakeFallingDamage(struct FVector fallLocation)
{
	static UFunction* uFnTakeFallingDamage = nullptr;

	if (!uFnTakeFallingDamage)
	{
		uFnTakeFallingDamage = UFunction::FindFunction("Function OLGame.OLHero.TakeFallingDamage");
	}

	AOLHero_execTakeFallingDamage_Params TakeFallingDamage_Params;
	memset(&TakeFallingDamage_Params, 0, sizeof(TakeFallingDamage_Params));
	memcpy_s(&TakeFallingDamage_Params.fallLocation, sizeof(TakeFallingDamage_Params.fallLocation), &fallLocation, sizeof(fallLocation));

	this->ProcessEvent(uFnTakeFallingDamage, &TakeFallingDamage_Params, nullptr);
};

// Function OLGame.OLHero.HealDamage
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Amount                         (CPF_Parm)
// class AController*             Healer                         (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)

bool AOLHero::eventHealDamage(int32_t Amount, class AController* Healer, class UClass* DamageType)
{
	static UFunction* uFnHealDamage = nullptr;

	if (!uFnHealDamage)
	{
		uFnHealDamage = UFunction::FindFunction("Function OLGame.OLHero.HealDamage");
	}

	AOLHero_eventHealDamage_Params HealDamage_Params;
	memset(&HealDamage_Params, 0, sizeof(HealDamage_Params));
	memcpy_s(&HealDamage_Params.Amount, sizeof(HealDamage_Params.Amount), &Amount, sizeof(Amount));
	memcpy_s(&HealDamage_Params.Healer, sizeof(HealDamage_Params.Healer), &Healer, sizeof(Healer));
	memcpy_s(&HealDamage_Params.DamageType, sizeof(HealDamage_Params.DamageType), &DamageType, sizeof(DamageType));

	this->ProcessEvent(uFnHealDamage, &HealDamage_Params, nullptr);

	return HealDamage_Params.ReturnValue;
};

// Function OLGame.OLHero.TakeDamage
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Damage                         (CPF_Parm)
// class AController*             InstigatedBy                   (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm | CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_OptionalParm | CPF_Parm)

void AOLHero::eventTakeDamage(int32_t Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser)
{
	static UFunction* uFnTakeDamage = nullptr;

	if (!uFnTakeDamage)
	{
		uFnTakeDamage = UFunction::FindFunction("Function OLGame.OLHero.TakeDamage");
	}

	AOLHero_eventTakeDamage_Params TakeDamage_Params;
	memset(&TakeDamage_Params, 0, sizeof(TakeDamage_Params));
	memcpy_s(&TakeDamage_Params.Damage, sizeof(TakeDamage_Params.Damage), &Damage, sizeof(Damage));
	memcpy_s(&TakeDamage_Params.InstigatedBy, sizeof(TakeDamage_Params.InstigatedBy), &InstigatedBy, sizeof(InstigatedBy));
	memcpy_s(&TakeDamage_Params.HitLocation, sizeof(TakeDamage_Params.HitLocation), &HitLocation, sizeof(HitLocation));
	memcpy_s(&TakeDamage_Params.Momentum, sizeof(TakeDamage_Params.Momentum), &Momentum, sizeof(Momentum));
	memcpy_s(&TakeDamage_Params.DamageType, sizeof(TakeDamage_Params.DamageType), &DamageType, sizeof(DamageType));
	memcpy_s(&TakeDamage_Params.HitInfo, sizeof(TakeDamage_Params.HitInfo), &HitInfo, sizeof(HitInfo));
	memcpy_s(&TakeDamage_Params.DamageCauser, sizeof(TakeDamage_Params.DamageCauser), &DamageCauser, sizeof(DamageCauser));

	this->ProcessEvent(uFnTakeDamage, &TakeDamage_Params, nullptr);
};

// Function OLGame.OLHero.DisplayDebug
// [0x00420102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm | CPF_OutParm)
// float                          out_YPos                       (CPF_Parm | CPF_OutParm)

void AOLHero::DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos)
{
	static UFunction* uFnDisplayDebug = nullptr;

	if (!uFnDisplayDebug)
	{
		uFnDisplayDebug = UFunction::FindFunction("Function OLGame.OLHero.DisplayDebug");
	}

	AOLHero_execDisplayDebug_Params DisplayDebug_Params;
	memset(&DisplayDebug_Params, 0, sizeof(DisplayDebug_Params));
	memcpy_s(&DisplayDebug_Params.HUD, sizeof(DisplayDebug_Params.HUD), &HUD, sizeof(HUD));
	memcpy_s(&DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL), &out_YL, sizeof(out_YL));
	memcpy_s(&DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos), &out_YPos, sizeof(out_YPos));

	this->ProcessEvent(uFnDisplayDebug, &DisplayDebug_Params, nullptr);

	memcpy_s(&out_YL, sizeof(out_YL), &DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL));
	memcpy_s(&out_YPos, sizeof(out_YPos), &DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos));
};

// Function OLGame.OLHero.PostInitAnimTree
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USkeletalMeshComponent*  SkelComp                       (CPF_Parm | CPF_EditInline)

void AOLHero::eventPostInitAnimTree(class USkeletalMeshComponent* SkelComp)
{
	static UFunction* uFnPostInitAnimTree = nullptr;

	if (!uFnPostInitAnimTree)
	{
		uFnPostInitAnimTree = UFunction::FindFunction("Function OLGame.OLHero.PostInitAnimTree");
	}

	AOLHero_eventPostInitAnimTree_Params PostInitAnimTree_Params;
	memset(&PostInitAnimTree_Params, 0, sizeof(PostInitAnimTree_Params));
	memcpy_s(&PostInitAnimTree_Params.SkelComp, sizeof(PostInitAnimTree_Params.SkelComp), &SkelComp, sizeof(SkelComp));

	this->ProcessEvent(uFnPostInitAnimTree, &PostInitAnimTree_Params, nullptr);
};

// Function OLGame.OLHero.NativeInitAnimTree
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USkeletalMeshComponent*  SkelComp                       (CPF_Parm | CPF_EditInline)

void AOLHero::NativeInitAnimTree(class USkeletalMeshComponent* SkelComp)
{
	static UFunction* uFnNativeInitAnimTree = nullptr;

	if (!uFnNativeInitAnimTree)
	{
		uFnNativeInitAnimTree = UFunction::FindFunction("Function OLGame.OLHero.NativeInitAnimTree");
	}

	AOLHero_execNativeInitAnimTree_Params NativeInitAnimTree_Params;
	memset(&NativeInitAnimTree_Params, 0, sizeof(NativeInitAnimTree_Params));
	memcpy_s(&NativeInitAnimTree_Params.SkelComp, sizeof(NativeInitAnimTree_Params.SkelComp), &SkelComp, sizeof(SkelComp));

	uFnNativeInitAnimTree->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeInitAnimTree, &NativeInitAnimTree_Params, nullptr);
	uFnNativeInitAnimTree->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.PossessedBy
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             C                              (CPF_Parm)
// bool                           bVehicleTransition             (CPF_Parm)

void AOLHero::PossessedBy(class AController* C, bool bVehicleTransition)
{
	static UFunction* uFnPossessedBy = nullptr;

	if (!uFnPossessedBy)
	{
		uFnPossessedBy = UFunction::FindFunction("Function OLGame.OLHero.PossessedBy");
	}

	AOLHero_execPossessedBy_Params PossessedBy_Params;
	memset(&PossessedBy_Params, 0, sizeof(PossessedBy_Params));
	memcpy_s(&PossessedBy_Params.C, sizeof(PossessedBy_Params.C), &C, sizeof(C));
	PossessedBy_Params.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent(uFnPossessedBy, &PossessedBy_Params, nullptr);
};

// Function OLGame.OLHero.RefreshInventory
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::RefreshInventory()
{
	static UFunction* uFnRefreshInventory = nullptr;

	if (!uFnRefreshInventory)
	{
		uFnRefreshInventory = UFunction::FindFunction("Function OLGame.OLHero.RefreshInventory");
	}

	AOLHero_execRefreshInventory_Params RefreshInventory_Params;
	memset(&RefreshInventory_Params, 0, sizeof(RefreshInventory_Params));

	uFnRefreshInventory->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRefreshInventory, &RefreshInventory_Params, nullptr);
	uFnRefreshInventory->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.SetHeroWalkableFloor
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          Angle                          (CPF_Parm)

void AOLHero::SetHeroWalkableFloor(float Angle)
{
	static UFunction* uFnSetHeroWalkableFloor = nullptr;

	if (!uFnSetHeroWalkableFloor)
	{
		uFnSetHeroWalkableFloor = UFunction::FindFunction("Function OLGame.OLHero.SetHeroWalkableFloor");
	}

	AOLHero_execSetHeroWalkableFloor_Params SetHeroWalkableFloor_Params;
	memset(&SetHeroWalkableFloor_Params, 0, sizeof(SetHeroWalkableFloor_Params));
	memcpy_s(&SetHeroWalkableFloor_Params.Angle, sizeof(SetHeroWalkableFloor_Params.Angle), &Angle, sizeof(Angle));

	uFnSetHeroWalkableFloor->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetHeroWalkableFloor, &SetHeroWalkableFloor_Params, nullptr);
	uFnSetHeroWalkableFloor->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.TryForceEnterRaft
// [0x00024600] (FUNC_Exec | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ignoreAssertIfUnsucessful      (CPF_OptionalParm | CPF_Parm)

void AOLHero::TryForceEnterRaft(bool ignoreAssertIfUnsucessful)
{
	static UFunction* uFnTryForceEnterRaft = nullptr;

	if (!uFnTryForceEnterRaft)
	{
		uFnTryForceEnterRaft = UFunction::FindFunction("Function OLGame.OLHero.TryForceEnterRaft");
	}

	AOLHero_execTryForceEnterRaft_Params TryForceEnterRaft_Params;
	memset(&TryForceEnterRaft_Params, 0, sizeof(TryForceEnterRaft_Params));
	TryForceEnterRaft_Params.ignoreAssertIfUnsucessful = ignoreAssertIfUnsucessful;

	uFnTryForceEnterRaft->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTryForceEnterRaft, &TryForceEnterRaft_Params, nullptr);
	uFnTryForceEnterRaft->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.OverrideRaftAttachmentMode
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bManuallyControlled            (CPF_Parm)

void AOLHero::OverrideRaftAttachmentMode(bool bManuallyControlled)
{
	static UFunction* uFnOverrideRaftAttachmentMode = nullptr;

	if (!uFnOverrideRaftAttachmentMode)
	{
		uFnOverrideRaftAttachmentMode = UFunction::FindFunction("Function OLGame.OLHero.OverrideRaftAttachmentMode");
	}

	AOLHero_execOverrideRaftAttachmentMode_Params OverrideRaftAttachmentMode_Params;
	memset(&OverrideRaftAttachmentMode_Params, 0, sizeof(OverrideRaftAttachmentMode_Params));
	OverrideRaftAttachmentMode_Params.bManuallyControlled = bManuallyControlled;

	uFnOverrideRaftAttachmentMode->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnOverrideRaftAttachmentMode, &OverrideRaftAttachmentMode_Params, nullptr);
	uFnOverrideRaftAttachmentMode->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.AllowRiverMovement
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::AllowRiverMovement()
{
	static UFunction* uFnAllowRiverMovement = nullptr;

	if (!uFnAllowRiverMovement)
	{
		uFnAllowRiverMovement = UFunction::FindFunction("Function OLGame.OLHero.AllowRiverMovement");
	}

	AOLHero_execAllowRiverMovement_Params AllowRiverMovement_Params;
	memset(&AllowRiverMovement_Params, 0, sizeof(AllowRiverMovement_Params));

	uFnAllowRiverMovement->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAllowRiverMovement, &AllowRiverMovement_Params, nullptr);
	uFnAllowRiverMovement->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.DisallowRiverMovement
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bClearVelocity                 (CPF_Parm)

void AOLHero::DisallowRiverMovement(bool bClearVelocity)
{
	static UFunction* uFnDisallowRiverMovement = nullptr;

	if (!uFnDisallowRiverMovement)
	{
		uFnDisallowRiverMovement = UFunction::FindFunction("Function OLGame.OLHero.DisallowRiverMovement");
	}

	AOLHero_execDisallowRiverMovement_Params DisallowRiverMovement_Params;
	memset(&DisallowRiverMovement_Params, 0, sizeof(DisallowRiverMovement_Params));
	DisallowRiverMovement_Params.bClearVelocity = bClearVelocity;

	uFnDisallowRiverMovement->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDisallowRiverMovement, &DisallowRiverMovement_Params, nullptr);
	uFnDisallowRiverMovement->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.QuickHeroTest
// [0x00020600] (FUNC_Exec | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::QuickHeroTest()
{
	static UFunction* uFnQuickHeroTest = nullptr;

	if (!uFnQuickHeroTest)
	{
		uFnQuickHeroTest = UFunction::FindFunction("Function OLGame.OLHero.QuickHeroTest");
	}

	AOLHero_execQuickHeroTest_Params QuickHeroTest_Params;
	memset(&QuickHeroTest_Params, 0, sizeof(QuickHeroTest_Params));

	uFnQuickHeroTest->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnQuickHeroTest, &QuickHeroTest_Params, nullptr);
	uFnQuickHeroTest->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.CanBeGrabbedUnder
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLHero::CanBeGrabbedUnder()
{
	static UFunction* uFnCanBeGrabbedUnder = nullptr;

	if (!uFnCanBeGrabbedUnder)
	{
		uFnCanBeGrabbedUnder = UFunction::FindFunction("Function OLGame.OLHero.CanBeGrabbedUnder");
	}

	AOLHero_execCanBeGrabbedUnder_Params CanBeGrabbedUnder_Params;
	memset(&CanBeGrabbedUnder_Params, 0, sizeof(CanBeGrabbedUnder_Params));

	uFnCanBeGrabbedUnder->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCanBeGrabbedUnder, &CanBeGrabbedUnder_Params, nullptr);
	uFnCanBeGrabbedUnder->FunctionFlags |= 0x400;

	return CanBeGrabbedUnder_Params.ReturnValue;
};

// Function OLGame.OLHero.CanBeFatalitized
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLHero::CanBeFatalitized()
{
	static UFunction* uFnCanBeFatalitized = nullptr;

	if (!uFnCanBeFatalitized)
	{
		uFnCanBeFatalitized = UFunction::FindFunction("Function OLGame.OLHero.CanBeFatalitized");
	}

	AOLHero_execCanBeFatalitized_Params CanBeFatalitized_Params;
	memset(&CanBeFatalitized_Params, 0, sizeof(CanBeFatalitized_Params));

	uFnCanBeFatalitized->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCanBeFatalitized, &CanBeFatalitized_Params, nullptr);
	uFnCanBeFatalitized->FunctionFlags |= 0x400;

	return CanBeFatalitized_Params.ReturnValue;
};

// Function OLGame.OLHero.CanBeAttacked
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLHero::CanBeAttacked()
{
	static UFunction* uFnCanBeAttacked = nullptr;

	if (!uFnCanBeAttacked)
	{
		uFnCanBeAttacked = UFunction::FindFunction("Function OLGame.OLHero.CanBeAttacked");
	}

	AOLHero_execCanBeAttacked_Params CanBeAttacked_Params;
	memset(&CanBeAttacked_Params, 0, sizeof(CanBeAttacked_Params));

	uFnCanBeAttacked->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCanBeAttacked, &CanBeAttacked_Params, nullptr);
	uFnCanBeAttacked->FunctionFlags |= 0x400;

	return CanBeAttacked_Params.ReturnValue;
};

// Function OLGame.OLHero.BarrelEntryNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::BarrelEntryNotify()
{
	static UFunction* uFnBarrelEntryNotify = nullptr;

	if (!uFnBarrelEntryNotify)
	{
		uFnBarrelEntryNotify = UFunction::FindFunction("Function OLGame.OLHero.BarrelEntryNotify");
	}

	AOLHero_execBarrelEntryNotify_Params BarrelEntryNotify_Params;
	memset(&BarrelEntryNotify_Params, 0, sizeof(BarrelEntryNotify_Params));

	uFnBarrelEntryNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBarrelEntryNotify, &BarrelEntryNotify_Params, nullptr);
	uFnBarrelEntryNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.LandingMaybeStayCrouched
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::LandingMaybeStayCrouched()
{
	static UFunction* uFnLandingMaybeStayCrouched = nullptr;

	if (!uFnLandingMaybeStayCrouched)
	{
		uFnLandingMaybeStayCrouched = UFunction::FindFunction("Function OLGame.OLHero.LandingMaybeStayCrouched");
	}

	AOLHero_execLandingMaybeStayCrouched_Params LandingMaybeStayCrouched_Params;
	memset(&LandingMaybeStayCrouched_Params, 0, sizeof(LandingMaybeStayCrouched_Params));

	uFnLandingMaybeStayCrouched->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnLandingMaybeStayCrouched, &LandingMaybeStayCrouched_Params, nullptr);
	uFnLandingMaybeStayCrouched->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.EndOfHandWatchingNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::EndOfHandWatchingNotify()
{
	static UFunction* uFnEndOfHandWatchingNotify = nullptr;

	if (!uFnEndOfHandWatchingNotify)
	{
		uFnEndOfHandWatchingNotify = UFunction::FindFunction("Function OLGame.OLHero.EndOfHandWatchingNotify");
	}

	AOLHero_execEndOfHandWatchingNotify_Params EndOfHandWatchingNotify_Params;
	memset(&EndOfHandWatchingNotify_Params, 0, sizeof(EndOfHandWatchingNotify_Params));

	uFnEndOfHandWatchingNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnEndOfHandWatchingNotify, &EndOfHandWatchingNotify_Params, nullptr);
	uFnEndOfHandWatchingNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.HandContactNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::HandContactNotify()
{
	static UFunction* uFnHandContactNotify = nullptr;

	if (!uFnHandContactNotify)
	{
		uFnHandContactNotify = UFunction::FindFunction("Function OLGame.OLHero.HandContactNotify");
	}

	AOLHero_execHandContactNotify_Params HandContactNotify_Params;
	memset(&HandContactNotify_Params, 0, sizeof(HandContactNotify_Params));

	uFnHandContactNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHandContactNotify, &HandContactNotify_Params, nullptr);
	uFnHandContactNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.InventoryToggleNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::InventoryToggleNotify()
{
	static UFunction* uFnInventoryToggleNotify = nullptr;

	if (!uFnInventoryToggleNotify)
	{
		uFnInventoryToggleNotify = UFunction::FindFunction("Function OLGame.OLHero.InventoryToggleNotify");
	}

	AOLHero_execInventoryToggleNotify_Params InventoryToggleNotify_Params;
	memset(&InventoryToggleNotify_Params, 0, sizeof(InventoryToggleNotify_Params));

	uFnInventoryToggleNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnInventoryToggleNotify, &InventoryToggleNotify_Params, nullptr);
	uFnInventoryToggleNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.BodyBandageHideAllIfNotVisibleNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::BodyBandageHideAllIfNotVisibleNotify()
{
	static UFunction* uFnBodyBandageHideAllIfNotVisibleNotify = nullptr;

	if (!uFnBodyBandageHideAllIfNotVisibleNotify)
	{
		uFnBodyBandageHideAllIfNotVisibleNotify = UFunction::FindFunction("Function OLGame.OLHero.BodyBandageHideAllIfNotVisibleNotify");
	}

	AOLHero_execBodyBandageHideAllIfNotVisibleNotify_Params BodyBandageHideAllIfNotVisibleNotify_Params;
	memset(&BodyBandageHideAllIfNotVisibleNotify_Params, 0, sizeof(BodyBandageHideAllIfNotVisibleNotify_Params));

	uFnBodyBandageHideAllIfNotVisibleNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBodyBandageHideAllIfNotVisibleNotify, &BodyBandageHideAllIfNotVisibleNotify_Params, nullptr);
	uFnBodyBandageHideAllIfNotVisibleNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.BodyBandageHideAllNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::BodyBandageHideAllNotify()
{
	static UFunction* uFnBodyBandageHideAllNotify = nullptr;

	if (!uFnBodyBandageHideAllNotify)
	{
		uFnBodyBandageHideAllNotify = UFunction::FindFunction("Function OLGame.OLHero.BodyBandageHideAllNotify");
	}

	AOLHero_execBodyBandageHideAllNotify_Params BodyBandageHideAllNotify_Params;
	memset(&BodyBandageHideAllNotify_Params, 0, sizeof(BodyBandageHideAllNotify_Params));

	uFnBodyBandageHideAllNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBodyBandageHideAllNotify, &BodyBandageHideAllNotify_Params, nullptr);
	uFnBodyBandageHideAllNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.BodyBandageStepNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::BodyBandageStepNotify()
{
	static UFunction* uFnBodyBandageStepNotify = nullptr;

	if (!uFnBodyBandageStepNotify)
	{
		uFnBodyBandageStepNotify = UFunction::FindFunction("Function OLGame.OLHero.BodyBandageStepNotify");
	}

	AOLHero_execBodyBandageStepNotify_Params BodyBandageStepNotify_Params;
	memset(&BodyBandageStepNotify_Params, 0, sizeof(BodyBandageStepNotify_Params));

	uFnBodyBandageStepNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBodyBandageStepNotify, &BodyBandageStepNotify_Params, nullptr);
	uFnBodyBandageStepNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.ShowPickupNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::ShowPickupNotify()
{
	static UFunction* uFnShowPickupNotify = nullptr;

	if (!uFnShowPickupNotify)
	{
		uFnShowPickupNotify = UFunction::FindFunction("Function OLGame.OLHero.ShowPickupNotify");
	}

	AOLHero_execShowPickupNotify_Params ShowPickupNotify_Params;
	memset(&ShowPickupNotify_Params, 0, sizeof(ShowPickupNotify_Params));

	uFnShowPickupNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnShowPickupNotify, &ShowPickupNotify_Params, nullptr);
	uFnShowPickupNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.HidePickupNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::HidePickupNotify()
{
	static UFunction* uFnHidePickupNotify = nullptr;

	if (!uFnHidePickupNotify)
	{
		uFnHidePickupNotify = UFunction::FindFunction("Function OLGame.OLHero.HidePickupNotify");
	}

	AOLHero_execHidePickupNotify_Params HidePickupNotify_Params;
	memset(&HidePickupNotify_Params, 0, sizeof(HidePickupNotify_Params));

	uFnHidePickupNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHidePickupNotify, &HidePickupNotify_Params, nullptr);
	uFnHidePickupNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.BandageDetachNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::BandageDetachNotify()
{
	static UFunction* uFnBandageDetachNotify = nullptr;

	if (!uFnBandageDetachNotify)
	{
		uFnBandageDetachNotify = UFunction::FindFunction("Function OLGame.OLHero.BandageDetachNotify");
	}

	AOLHero_execBandageDetachNotify_Params BandageDetachNotify_Params;
	memset(&BandageDetachNotify_Params, 0, sizeof(BandageDetachNotify_Params));

	uFnBandageDetachNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBandageDetachNotify, &BandageDetachNotify_Params, nullptr);
	uFnBandageDetachNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.BandageAttachNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::BandageAttachNotify()
{
	static UFunction* uFnBandageAttachNotify = nullptr;

	if (!uFnBandageAttachNotify)
	{
		uFnBandageAttachNotify = UFunction::FindFunction("Function OLGame.OLHero.BandageAttachNotify");
	}

	AOLHero_execBandageAttachNotify_Params BandageAttachNotify_Params;
	memset(&BandageAttachNotify_Params, 0, sizeof(BandageAttachNotify_Params));

	uFnBandageAttachNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBandageAttachNotify, &BandageAttachNotify_Params, nullptr);
	uFnBandageAttachNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.CSAActivationNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::CSAActivationNotify()
{
	static UFunction* uFnCSAActivationNotify = nullptr;

	if (!uFnCSAActivationNotify)
	{
		uFnCSAActivationNotify = UFunction::FindFunction("Function OLGame.OLHero.CSAActivationNotify");
	}

	AOLHero_execCSAActivationNotify_Params CSAActivationNotify_Params;
	memset(&CSAActivationNotify_Params, 0, sizeof(CSAActivationNotify_Params));

	uFnCSAActivationNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCSAActivationNotify, &CSAActivationNotify_Params, nullptr);
	uFnCSAActivationNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.BarrelCoverDetachNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::BarrelCoverDetachNotify()
{
	static UFunction* uFnBarrelCoverDetachNotify = nullptr;

	if (!uFnBarrelCoverDetachNotify)
	{
		uFnBarrelCoverDetachNotify = UFunction::FindFunction("Function OLGame.OLHero.BarrelCoverDetachNotify");
	}

	AOLHero_execBarrelCoverDetachNotify_Params BarrelCoverDetachNotify_Params;
	memset(&BarrelCoverDetachNotify_Params, 0, sizeof(BarrelCoverDetachNotify_Params));

	uFnBarrelCoverDetachNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBarrelCoverDetachNotify, &BarrelCoverDetachNotify_Params, nullptr);
	uFnBarrelCoverDetachNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.BarrelCoverAttachNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::BarrelCoverAttachNotify()
{
	static UFunction* uFnBarrelCoverAttachNotify = nullptr;

	if (!uFnBarrelCoverAttachNotify)
	{
		uFnBarrelCoverAttachNotify = UFunction::FindFunction("Function OLGame.OLHero.BarrelCoverAttachNotify");
	}

	AOLHero_execBarrelCoverAttachNotify_Params BarrelCoverAttachNotify_Params;
	memset(&BarrelCoverAttachNotify_Params, 0, sizeof(BarrelCoverAttachNotify_Params));

	uFnBarrelCoverAttachNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBarrelCoverAttachNotify, &BarrelCoverAttachNotify_Params, nullptr);
	uFnBarrelCoverAttachNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.GlassesPickedUpNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::GlassesPickedUpNotify()
{
	static UFunction* uFnGlassesPickedUpNotify = nullptr;

	if (!uFnGlassesPickedUpNotify)
	{
		uFnGlassesPickedUpNotify = UFunction::FindFunction("Function OLGame.OLHero.GlassesPickedUpNotify");
	}

	AOLHero_execGlassesPickedUpNotify_Params GlassesPickedUpNotify_Params;
	memset(&GlassesPickedUpNotify_Params, 0, sizeof(GlassesPickedUpNotify_Params));

	uFnGlassesPickedUpNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGlassesPickedUpNotify, &GlassesPickedUpNotify_Params, nullptr);
	uFnGlassesPickedUpNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.PutBackGlassesNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::PutBackGlassesNotify()
{
	static UFunction* uFnPutBackGlassesNotify = nullptr;

	if (!uFnPutBackGlassesNotify)
	{
		uFnPutBackGlassesNotify = UFunction::FindFunction("Function OLGame.OLHero.PutBackGlassesNotify");
	}

	AOLHero_execPutBackGlassesNotify_Params PutBackGlassesNotify_Params;
	memset(&PutBackGlassesNotify_Params, 0, sizeof(PutBackGlassesNotify_Params));

	uFnPutBackGlassesNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPutBackGlassesNotify, &PutBackGlassesNotify_Params, nullptr);
	uFnPutBackGlassesNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.LoseGlassesNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::LoseGlassesNotify()
{
	static UFunction* uFnLoseGlassesNotify = nullptr;

	if (!uFnLoseGlassesNotify)
	{
		uFnLoseGlassesNotify = UFunction::FindFunction("Function OLGame.OLHero.LoseGlassesNotify");
	}

	AOLHero_execLoseGlassesNotify_Params LoseGlassesNotify_Params;
	memset(&LoseGlassesNotify_Params, 0, sizeof(LoseGlassesNotify_Params));

	uFnLoseGlassesNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnLoseGlassesNotify, &LoseGlassesNotify_Params, nullptr);
	uFnLoseGlassesNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.PostRaftBrokenNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::PostRaftBrokenNotify()
{
	static UFunction* uFnPostRaftBrokenNotify = nullptr;

	if (!uFnPostRaftBrokenNotify)
	{
		uFnPostRaftBrokenNotify = UFunction::FindFunction("Function OLGame.OLHero.PostRaftBrokenNotify");
	}

	AOLHero_execPostRaftBrokenNotify_Params PostRaftBrokenNotify_Params;
	memset(&PostRaftBrokenNotify_Params, 0, sizeof(PostRaftBrokenNotify_Params));

	uFnPostRaftBrokenNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPostRaftBrokenNotify, &PostRaftBrokenNotify_Params, nullptr);
	uFnPostRaftBrokenNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.RaftDetachNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::RaftDetachNotify()
{
	static UFunction* uFnRaftDetachNotify = nullptr;

	if (!uFnRaftDetachNotify)
	{
		uFnRaftDetachNotify = UFunction::FindFunction("Function OLGame.OLHero.RaftDetachNotify");
	}

	AOLHero_execRaftDetachNotify_Params RaftDetachNotify_Params;
	memset(&RaftDetachNotify_Params, 0, sizeof(RaftDetachNotify_Params));

	uFnRaftDetachNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRaftDetachNotify, &RaftDetachNotify_Params, nullptr);
	uFnRaftDetachNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.RaftAttachNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::RaftAttachNotify()
{
	static UFunction* uFnRaftAttachNotify = nullptr;

	if (!uFnRaftAttachNotify)
	{
		uFnRaftAttachNotify = UFunction::FindFunction("Function OLGame.OLHero.RaftAttachNotify");
	}

	AOLHero_execRaftAttachNotify_Params RaftAttachNotify_Params;
	memset(&RaftAttachNotify_Params, 0, sizeof(RaftAttachNotify_Params));

	uFnRaftAttachNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRaftAttachNotify, &RaftAttachNotify_Params, nullptr);
	uFnRaftAttachNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.ExitingWaterNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::ExitingWaterNotify()
{
	static UFunction* uFnExitingWaterNotify = nullptr;

	if (!uFnExitingWaterNotify)
	{
		uFnExitingWaterNotify = UFunction::FindFunction("Function OLGame.OLHero.ExitingWaterNotify");
	}

	AOLHero_execExitingWaterNotify_Params ExitingWaterNotify_Params;
	memset(&ExitingWaterNotify_Params, 0, sizeof(ExitingWaterNotify_Params));

	uFnExitingWaterNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnExitingWaterNotify, &ExitingWaterNotify_Params, nullptr);
	uFnExitingWaterNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.EnteringWaterNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::EnteringWaterNotify()
{
	static UFunction* uFnEnteringWaterNotify = nullptr;

	if (!uFnEnteringWaterNotify)
	{
		uFnEnteringWaterNotify = UFunction::FindFunction("Function OLGame.OLHero.EnteringWaterNotify");
	}

	AOLHero_execEnteringWaterNotify_Params EnteringWaterNotify_Params;
	memset(&EnteringWaterNotify_Params, 0, sizeof(EnteringWaterNotify_Params));

	uFnEnteringWaterNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnEnteringWaterNotify, &EnteringWaterNotify_Params, nullptr);
	uFnEnteringWaterNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.SlideUnderCommitStanceNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::SlideUnderCommitStanceNotify()
{
	static UFunction* uFnSlideUnderCommitStanceNotify = nullptr;

	if (!uFnSlideUnderCommitStanceNotify)
	{
		uFnSlideUnderCommitStanceNotify = UFunction::FindFunction("Function OLGame.OLHero.SlideUnderCommitStanceNotify");
	}

	AOLHero_execSlideUnderCommitStanceNotify_Params SlideUnderCommitStanceNotify_Params;
	memset(&SlideUnderCommitStanceNotify_Params, 0, sizeof(SlideUnderCommitStanceNotify_Params));

	uFnSlideUnderCommitStanceNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSlideUnderCommitStanceNotify, &SlideUnderCommitStanceNotify_Params, nullptr);
	uFnSlideUnderCommitStanceNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.HideCamcorderNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::HideCamcorderNotify()
{
	static UFunction* uFnHideCamcorderNotify = nullptr;

	if (!uFnHideCamcorderNotify)
	{
		uFnHideCamcorderNotify = UFunction::FindFunction("Function OLGame.OLHero.HideCamcorderNotify");
	}

	AOLHero_execHideCamcorderNotify_Params HideCamcorderNotify_Params;
	memset(&HideCamcorderNotify_Params, 0, sizeof(HideCamcorderNotify_Params));

	uFnHideCamcorderNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHideCamcorderNotify, &HideCamcorderNotify_Params, nullptr);
	uFnHideCamcorderNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.SetCamcorderVisibleNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::SetCamcorderVisibleNotify()
{
	static UFunction* uFnSetCamcorderVisibleNotify = nullptr;

	if (!uFnSetCamcorderVisibleNotify)
	{
		uFnSetCamcorderVisibleNotify = UFunction::FindFunction("Function OLGame.OLHero.SetCamcorderVisibleNotify");
	}

	AOLHero_execSetCamcorderVisibleNotify_Params SetCamcorderVisibleNotify_Params;
	memset(&SetCamcorderVisibleNotify_Params, 0, sizeof(SetCamcorderVisibleNotify_Params));

	uFnSetCamcorderVisibleNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetCamcorderVisibleNotify, &SetCamcorderVisibleNotify_Params, nullptr);
	uFnSetCamcorderVisibleNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.ResetNeckOffsetNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::ResetNeckOffsetNotify()
{
	static UFunction* uFnResetNeckOffsetNotify = nullptr;

	if (!uFnResetNeckOffsetNotify)
	{
		uFnResetNeckOffsetNotify = UFunction::FindFunction("Function OLGame.OLHero.ResetNeckOffsetNotify");
	}

	AOLHero_execResetNeckOffsetNotify_Params ResetNeckOffsetNotify_Params;
	memset(&ResetNeckOffsetNotify_Params, 0, sizeof(ResetNeckOffsetNotify_Params));

	uFnResetNeckOffsetNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnResetNeckOffsetNotify, &ResetNeckOffsetNotify_Params, nullptr);
	uFnResetNeckOffsetNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.DecapitatedNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::DecapitatedNotify()
{
	static UFunction* uFnDecapitatedNotify = nullptr;

	if (!uFnDecapitatedNotify)
	{
		uFnDecapitatedNotify = UFunction::FindFunction("Function OLGame.OLHero.DecapitatedNotify");
	}

	AOLHero_execDecapitatedNotify_Params DecapitatedNotify_Params;
	memset(&DecapitatedNotify_Params, 0, sizeof(DecapitatedNotify_Params));

	uFnDecapitatedNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDecapitatedNotify, &DecapitatedNotify_Params, nullptr);
	uFnDecapitatedNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.GroinInjuryNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::GroinInjuryNotify()
{
	static UFunction* uFnGroinInjuryNotify = nullptr;

	if (!uFnGroinInjuryNotify)
	{
		uFnGroinInjuryNotify = UFunction::FindFunction("Function OLGame.OLHero.GroinInjuryNotify");
	}

	AOLHero_execGroinInjuryNotify_Params GroinInjuryNotify_Params;
	memset(&GroinInjuryNotify_Params, 0, sizeof(GroinInjuryNotify_Params));

	uFnGroinInjuryNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGroinInjuryNotify, &GroinInjuryNotify_Params, nullptr);
	uFnGroinInjuryNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.DieNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::DieNotify()
{
	static UFunction* uFnDieNotify = nullptr;

	if (!uFnDieNotify)
	{
		uFnDieNotify = UFunction::FindFunction("Function OLGame.OLHero.DieNotify");
	}

	AOLHero_execDieNotify_Params DieNotify_Params;
	memset(&DieNotify_Params, 0, sizeof(DieNotify_Params));

	uFnDieNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDieNotify, &DieNotify_Params, nullptr);
	uFnDieNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.OverrideCameraSettingsNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLAnimNotify_OverrideCameraParams* camParamsNotify                (CPF_Parm)

void AOLHero::OverrideCameraSettingsNotify(class UOLAnimNotify_OverrideCameraParams* camParamsNotify)
{
	static UFunction* uFnOverrideCameraSettingsNotify = nullptr;

	if (!uFnOverrideCameraSettingsNotify)
	{
		uFnOverrideCameraSettingsNotify = UFunction::FindFunction("Function OLGame.OLHero.OverrideCameraSettingsNotify");
	}

	AOLHero_execOverrideCameraSettingsNotify_Params OverrideCameraSettingsNotify_Params;
	memset(&OverrideCameraSettingsNotify_Params, 0, sizeof(OverrideCameraSettingsNotify_Params));
	memcpy_s(&OverrideCameraSettingsNotify_Params.camParamsNotify, sizeof(OverrideCameraSettingsNotify_Params.camParamsNotify), &camParamsNotify, sizeof(camParamsNotify));

	uFnOverrideCameraSettingsNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnOverrideCameraSettingsNotify, &OverrideCameraSettingsNotify_Params, nullptr);
	uFnOverrideCameraSettingsNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.BandageUsedNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::BandageUsedNotify()
{
	static UFunction* uFnBandageUsedNotify = nullptr;

	if (!uFnBandageUsedNotify)
	{
		uFnBandageUsedNotify = UFunction::FindFunction("Function OLGame.OLHero.BandageUsedNotify");
	}

	AOLHero_execBandageUsedNotify_Params BandageUsedNotify_Params;
	memset(&BandageUsedNotify_Params, 0, sizeof(BandageUsedNotify_Params));

	uFnBandageUsedNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBandageUsedNotify, &BandageUsedNotify_Params, nullptr);
	uFnBandageUsedNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.BatteriesReloadedNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::BatteriesReloadedNotify()
{
	static UFunction* uFnBatteriesReloadedNotify = nullptr;

	if (!uFnBatteriesReloadedNotify)
	{
		uFnBatteriesReloadedNotify = UFunction::FindFunction("Function OLGame.OLHero.BatteriesReloadedNotify");
	}

	AOLHero_execBatteriesReloadedNotify_Params BatteriesReloadedNotify_Params;
	memset(&BatteriesReloadedNotify_Params, 0, sizeof(BatteriesReloadedNotify_Params));

	uFnBatteriesReloadedNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBatteriesReloadedNotify, &BatteriesReloadedNotify_Params, nullptr);
	uFnBatteriesReloadedNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.CamcorderLoweredNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::CamcorderLoweredNotify()
{
	static UFunction* uFnCamcorderLoweredNotify = nullptr;

	if (!uFnCamcorderLoweredNotify)
	{
		uFnCamcorderLoweredNotify = UFunction::FindFunction("Function OLGame.OLHero.CamcorderLoweredNotify");
	}

	AOLHero_execCamcorderLoweredNotify_Params CamcorderLoweredNotify_Params;
	memset(&CamcorderLoweredNotify_Params, 0, sizeof(CamcorderLoweredNotify_Params));

	uFnCamcorderLoweredNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCamcorderLoweredNotify, &CamcorderLoweredNotify_Params, nullptr);
	uFnCamcorderLoweredNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.CamcorderRaisedNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::CamcorderRaisedNotify()
{
	static UFunction* uFnCamcorderRaisedNotify = nullptr;

	if (!uFnCamcorderRaisedNotify)
	{
		uFnCamcorderRaisedNotify = UFunction::FindFunction("Function OLGame.OLHero.CamcorderRaisedNotify");
	}

	AOLHero_execCamcorderRaisedNotify_Params CamcorderRaisedNotify_Params;
	memset(&CamcorderRaisedNotify_Params, 0, sizeof(CamcorderRaisedNotify_Params));

	uFnCamcorderRaisedNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCamcorderRaisedNotify, &CamcorderRaisedNotify_Params, nullptr);
	uFnCamcorderRaisedNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.CamcorderAvailableNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::CamcorderAvailableNotify()
{
	static UFunction* uFnCamcorderAvailableNotify = nullptr;

	if (!uFnCamcorderAvailableNotify)
	{
		uFnCamcorderAvailableNotify = UFunction::FindFunction("Function OLGame.OLHero.CamcorderAvailableNotify");
	}

	AOLHero_execCamcorderAvailableNotify_Params CamcorderAvailableNotify_Params;
	memset(&CamcorderAvailableNotify_Params, 0, sizeof(CamcorderAvailableNotify_Params));

	uFnCamcorderAvailableNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCamcorderAvailableNotify, &CamcorderAvailableNotify_Params, nullptr);
	uFnCamcorderAvailableNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.WardrobeDoorEndNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::WardrobeDoorEndNotify()
{
	static UFunction* uFnWardrobeDoorEndNotify = nullptr;

	if (!uFnWardrobeDoorEndNotify)
	{
		uFnWardrobeDoorEndNotify = UFunction::FindFunction("Function OLGame.OLHero.WardrobeDoorEndNotify");
	}

	AOLHero_execWardrobeDoorEndNotify_Params WardrobeDoorEndNotify_Params;
	memset(&WardrobeDoorEndNotify_Params, 0, sizeof(WardrobeDoorEndNotify_Params));

	uFnWardrobeDoorEndNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnWardrobeDoorEndNotify, &WardrobeDoorEndNotify_Params, nullptr);
	uFnWardrobeDoorEndNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.WardrobeDoorNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::WardrobeDoorNotify()
{
	static UFunction* uFnWardrobeDoorNotify = nullptr;

	if (!uFnWardrobeDoorNotify)
	{
		uFnWardrobeDoorNotify = UFunction::FindFunction("Function OLGame.OLHero.WardrobeDoorNotify");
	}

	AOLHero_execWardrobeDoorNotify_Params WardrobeDoorNotify_Params;
	memset(&WardrobeDoorNotify_Params, 0, sizeof(WardrobeDoorNotify_Params));

	uFnWardrobeDoorNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnWardrobeDoorNotify, &WardrobeDoorNotify_Params, nullptr);
	uFnWardrobeDoorNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.BarrelInteractionEndNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::BarrelInteractionEndNotify()
{
	static UFunction* uFnBarrelInteractionEndNotify = nullptr;

	if (!uFnBarrelInteractionEndNotify)
	{
		uFnBarrelInteractionEndNotify = UFunction::FindFunction("Function OLGame.OLHero.BarrelInteractionEndNotify");
	}

	AOLHero_execBarrelInteractionEndNotify_Params BarrelInteractionEndNotify_Params;
	memset(&BarrelInteractionEndNotify_Params, 0, sizeof(BarrelInteractionEndNotify_Params));

	uFnBarrelInteractionEndNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBarrelInteractionEndNotify, &BarrelInteractionEndNotify_Params, nullptr);
	uFnBarrelInteractionEndNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.BarrelInteractionNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::BarrelInteractionNotify()
{
	static UFunction* uFnBarrelInteractionNotify = nullptr;

	if (!uFnBarrelInteractionNotify)
	{
		uFnBarrelInteractionNotify = UFunction::FindFunction("Function OLGame.OLHero.BarrelInteractionNotify");
	}

	AOLHero_execBarrelInteractionNotify_Params BarrelInteractionNotify_Params;
	memset(&BarrelInteractionNotify_Params, 0, sizeof(BarrelInteractionNotify_Params));

	uFnBarrelInteractionNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBarrelInteractionNotify, &BarrelInteractionNotify_Params, nullptr);
	uFnBarrelInteractionNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.BasementWindowEndNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::BasementWindowEndNotify()
{
	static UFunction* uFnBasementWindowEndNotify = nullptr;

	if (!uFnBasementWindowEndNotify)
	{
		uFnBasementWindowEndNotify = UFunction::FindFunction("Function OLGame.OLHero.BasementWindowEndNotify");
	}

	AOLHero_execBasementWindowEndNotify_Params BasementWindowEndNotify_Params;
	memset(&BasementWindowEndNotify_Params, 0, sizeof(BasementWindowEndNotify_Params));

	uFnBasementWindowEndNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBasementWindowEndNotify, &BasementWindowEndNotify_Params, nullptr);
	uFnBasementWindowEndNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.BasementWindowNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::BasementWindowNotify()
{
	static UFunction* uFnBasementWindowNotify = nullptr;

	if (!uFnBasementWindowNotify)
	{
		uFnBasementWindowNotify = UFunction::FindFunction("Function OLGame.OLHero.BasementWindowNotify");
	}

	AOLHero_execBasementWindowNotify_Params BasementWindowNotify_Params;
	memset(&BasementWindowNotify_Params, 0, sizeof(BasementWindowNotify_Params));

	uFnBasementWindowNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBasementWindowNotify, &BasementWindowNotify_Params, nullptr);
	uFnBasementWindowNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.WindowAnimEndNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::WindowAnimEndNotify()
{
	static UFunction* uFnWindowAnimEndNotify = nullptr;

	if (!uFnWindowAnimEndNotify)
	{
		uFnWindowAnimEndNotify = UFunction::FindFunction("Function OLGame.OLHero.WindowAnimEndNotify");
	}

	AOLHero_execWindowAnimEndNotify_Params WindowAnimEndNotify_Params;
	memset(&WindowAnimEndNotify_Params, 0, sizeof(WindowAnimEndNotify_Params));

	uFnWindowAnimEndNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnWindowAnimEndNotify, &WindowAnimEndNotify_Params, nullptr);
	uFnWindowAnimEndNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.WindowAnimStartNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::WindowAnimStartNotify()
{
	static UFunction* uFnWindowAnimStartNotify = nullptr;

	if (!uFnWindowAnimStartNotify)
	{
		uFnWindowAnimStartNotify = UFunction::FindFunction("Function OLGame.OLHero.WindowAnimStartNotify");
	}

	AOLHero_execWindowAnimStartNotify_Params WindowAnimStartNotify_Params;
	memset(&WindowAnimStartNotify_Params, 0, sizeof(WindowAnimStartNotify_Params));

	uFnWindowAnimStartNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnWindowAnimStartNotify, &WindowAnimStartNotify_Params, nullptr);
	uFnWindowAnimStartNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.TryInteractDoorOpen
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::TryInteractDoorOpen()
{
	static UFunction* uFnTryInteractDoorOpen = nullptr;

	if (!uFnTryInteractDoorOpen)
	{
		uFnTryInteractDoorOpen = UFunction::FindFunction("Function OLGame.OLHero.TryInteractDoorOpen");
	}

	AOLHero_execTryInteractDoorOpen_Params TryInteractDoorOpen_Params;
	memset(&TryInteractDoorOpen_Params, 0, sizeof(TryInteractDoorOpen_Params));

	uFnTryInteractDoorOpen->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTryInteractDoorOpen, &TryInteractDoorOpen_Params, nullptr);
	uFnTryInteractDoorOpen->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.DoorAnimNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::DoorAnimNotify()
{
	static UFunction* uFnDoorAnimNotify = nullptr;

	if (!uFnDoorAnimNotify)
	{
		uFnDoorAnimNotify = UFunction::FindFunction("Function OLGame.OLHero.DoorAnimNotify");
	}

	AOLHero_execDoorAnimNotify_Params DoorAnimNotify_Params;
	memset(&DoorAnimNotify_Params, 0, sizeof(DoorAnimNotify_Params));

	uFnDoorAnimNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDoorAnimNotify, &DoorAnimNotify_Params, nullptr);
	uFnDoorAnimNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.DropNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::DropNotify()
{
	static UFunction* uFnDropNotify = nullptr;

	if (!uFnDropNotify)
	{
		uFnDropNotify = UFunction::FindFunction("Function OLGame.OLHero.DropNotify");
	}

	AOLHero_execDropNotify_Params DropNotify_Params;
	memset(&DropNotify_Params, 0, sizeof(DropNotify_Params));

	uFnDropNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDropNotify, &DropNotify_Params, nullptr);
	uFnDropNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.PickupNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::PickupNotify()
{
	static UFunction* uFnPickupNotify = nullptr;

	if (!uFnPickupNotify)
	{
		uFnPickupNotify = UFunction::FindFunction("Function OLGame.OLHero.PickupNotify");
	}

	AOLHero_execPickupNotify_Params PickupNotify_Params;
	memset(&PickupNotify_Params, 0, sizeof(PickupNotify_Params));

	uFnPickupNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPickupNotify, &PickupNotify_Params, nullptr);
	uFnPickupNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.TryGrabFromUnder
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AOLEnemyPawn*            Attacker                       (CPF_Parm)
// struct FVector                 StartLocation                  (CPF_Parm)
// struct FVector                 AttackStartLocation            (CPF_Parm)

bool AOLHero::TryGrabFromUnder(class AOLEnemyPawn* Attacker, struct FVector StartLocation, struct FVector AttackStartLocation)
{
	static UFunction* uFnTryGrabFromUnder = nullptr;

	if (!uFnTryGrabFromUnder)
	{
		uFnTryGrabFromUnder = UFunction::FindFunction("Function OLGame.OLHero.TryGrabFromUnder");
	}

	AOLHero_execTryGrabFromUnder_Params TryGrabFromUnder_Params;
	memset(&TryGrabFromUnder_Params, 0, sizeof(TryGrabFromUnder_Params));
	memcpy_s(&TryGrabFromUnder_Params.Attacker, sizeof(TryGrabFromUnder_Params.Attacker), &Attacker, sizeof(Attacker));
	memcpy_s(&TryGrabFromUnder_Params.StartLocation, sizeof(TryGrabFromUnder_Params.StartLocation), &StartLocation, sizeof(StartLocation));
	memcpy_s(&TryGrabFromUnder_Params.AttackStartLocation, sizeof(TryGrabFromUnder_Params.AttackStartLocation), &AttackStartLocation, sizeof(AttackStartLocation));

	uFnTryGrabFromUnder->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTryGrabFromUnder, &TryGrabFromUnder_Params, nullptr);
	uFnTryGrabFromUnder->FunctionFlags |= 0x400;

	return TryGrabFromUnder_Params.ReturnValue;
};

// Function OLGame.OLHero.TryGrabFromBed
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AOLEnemyPawn*            Attacker                       (CPF_Parm)

bool AOLHero::TryGrabFromBed(class AOLEnemyPawn* Attacker)
{
	static UFunction* uFnTryGrabFromBed = nullptr;

	if (!uFnTryGrabFromBed)
	{
		uFnTryGrabFromBed = UFunction::FindFunction("Function OLGame.OLHero.TryGrabFromBed");
	}

	AOLHero_execTryGrabFromBed_Params TryGrabFromBed_Params;
	memset(&TryGrabFromBed_Params, 0, sizeof(TryGrabFromBed_Params));
	memcpy_s(&TryGrabFromBed_Params.Attacker, sizeof(TryGrabFromBed_Params.Attacker), &Attacker, sizeof(Attacker));

	uFnTryGrabFromBed->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTryGrabFromBed, &TryGrabFromBed_Params, nullptr);
	uFnTryGrabFromBed->FunctionFlags |= 0x400;

	return TryGrabFromBed_Params.ReturnValue;
};

// Function OLGame.OLHero.TryGrabFromLocker
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AOLEnemyPawn*            Attacker                       (CPF_Parm)

bool AOLHero::TryGrabFromLocker(class AOLEnemyPawn* Attacker)
{
	static UFunction* uFnTryGrabFromLocker = nullptr;

	if (!uFnTryGrabFromLocker)
	{
		uFnTryGrabFromLocker = UFunction::FindFunction("Function OLGame.OLHero.TryGrabFromLocker");
	}

	AOLHero_execTryGrabFromLocker_Params TryGrabFromLocker_Params;
	memset(&TryGrabFromLocker_Params, 0, sizeof(TryGrabFromLocker_Params));
	memcpy_s(&TryGrabFromLocker_Params.Attacker, sizeof(TryGrabFromLocker_Params.Attacker), &Attacker, sizeof(Attacker));

	uFnTryGrabFromLocker->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTryGrabFromLocker, &TryGrabFromLocker_Params, nullptr);
	uFnTryGrabFromLocker->FunctionFlags |= 0x400;

	return TryGrabFromLocker_Params.ReturnValue;
};

// Function OLGame.OLHero.ExitCinematicMode
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_ToggleCinematicMode* seqAction                      (CPF_Parm)

void AOLHero::ExitCinematicMode(class USeqAct_ToggleCinematicMode* seqAction)
{
	static UFunction* uFnExitCinematicMode = nullptr;

	if (!uFnExitCinematicMode)
	{
		uFnExitCinematicMode = UFunction::FindFunction("Function OLGame.OLHero.ExitCinematicMode");
	}

	AOLHero_execExitCinematicMode_Params ExitCinematicMode_Params;
	memset(&ExitCinematicMode_Params, 0, sizeof(ExitCinematicMode_Params));
	memcpy_s(&ExitCinematicMode_Params.seqAction, sizeof(ExitCinematicMode_Params.seqAction), &seqAction, sizeof(seqAction));

	uFnExitCinematicMode->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnExitCinematicMode, &ExitCinematicMode_Params, nullptr);
	uFnExitCinematicMode->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.EnterCinematicMode
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_ToggleCinematicMode* seqAction                      (CPF_Parm)

void AOLHero::EnterCinematicMode(class USeqAct_ToggleCinematicMode* seqAction)
{
	static UFunction* uFnEnterCinematicMode = nullptr;

	if (!uFnEnterCinematicMode)
	{
		uFnEnterCinematicMode = UFunction::FindFunction("Function OLGame.OLHero.EnterCinematicMode");
	}

	AOLHero_execEnterCinematicMode_Params EnterCinematicMode_Params;
	memset(&EnterCinematicMode_Params, 0, sizeof(EnterCinematicMode_Params));
	memcpy_s(&EnterCinematicMode_Params.seqAction, sizeof(EnterCinematicMode_Params.seqAction), &seqAction, sizeof(seqAction));

	uFnEnterCinematicMode->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnEnterCinematicMode, &EnterCinematicMode_Params, nullptr);
	uFnEnterCinematicMode->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.StartSpecialMove
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ESpecialMoveType               moveType                       (CPF_Parm)
// struct FVector                 targetPosition                 (CPF_OptionalParm | CPF_Parm)
// struct FVector                 TargetDirection                (CPF_OptionalParm | CPF_Parm)
// EAdjustPositionTargetType      TargetType                     (CPF_OptionalParm | CPF_Parm)

void AOLHero::StartSpecialMove(ESpecialMoveType moveType, struct FVector targetPosition, struct FVector TargetDirection, EAdjustPositionTargetType TargetType)
{
	static UFunction* uFnStartSpecialMove = nullptr;

	if (!uFnStartSpecialMove)
	{
		uFnStartSpecialMove = UFunction::FindFunction("Function OLGame.OLHero.StartSpecialMove");
	}

	AOLHero_execStartSpecialMove_Params StartSpecialMove_Params;
	memset(&StartSpecialMove_Params, 0, sizeof(StartSpecialMove_Params));
	memcpy_s(&StartSpecialMove_Params.moveType, sizeof(StartSpecialMove_Params.moveType), &moveType, sizeof(moveType));
	memcpy_s(&StartSpecialMove_Params.targetPosition, sizeof(StartSpecialMove_Params.targetPosition), &targetPosition, sizeof(targetPosition));
	memcpy_s(&StartSpecialMove_Params.TargetDirection, sizeof(StartSpecialMove_Params.TargetDirection), &TargetDirection, sizeof(TargetDirection));
	memcpy_s(&StartSpecialMove_Params.TargetType, sizeof(StartSpecialMove_Params.TargetType), &TargetType, sizeof(TargetType));

	uFnStartSpecialMove->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStartSpecialMove, &StartSpecialMove_Params, nullptr);
	uFnStartSpecialMove->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.RespawnHero
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::RespawnHero()
{
	static UFunction* uFnRespawnHero = nullptr;

	if (!uFnRespawnHero)
	{
		uFnRespawnHero = UFunction::FindFunction("Function OLGame.OLHero.RespawnHero");
	}

	AOLHero_execRespawnHero_Params RespawnHero_Params;
	memset(&RespawnHero_Params, 0, sizeof(RespawnHero_Params));

	uFnRespawnHero->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRespawnHero, &RespawnHero_Params, nullptr);
	uFnRespawnHero->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.OnPossess
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::OnPossess()
{
	static UFunction* uFnOnPossess = nullptr;

	if (!uFnOnPossess)
	{
		uFnOnPossess = UFunction::FindFunction("Function OLGame.OLHero.OnPossess");
	}

	AOLHero_execOnPossess_Params OnPossess_Params;
	memset(&OnPossess_Params, 0, sizeof(OnPossess_Params));

	uFnOnPossess->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnOnPossess, &OnPossess_Params, nullptr);
	uFnOnPossess->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.ConditionalMakeDoorChimesNoise
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AOLDoorChimes*           DoorChimes                     (CPF_Parm)

void AOLHero::ConditionalMakeDoorChimesNoise(class AOLDoorChimes* DoorChimes)
{
	static UFunction* uFnConditionalMakeDoorChimesNoise = nullptr;

	if (!uFnConditionalMakeDoorChimesNoise)
	{
		uFnConditionalMakeDoorChimesNoise = UFunction::FindFunction("Function OLGame.OLHero.ConditionalMakeDoorChimesNoise");
	}

	AOLHero_execConditionalMakeDoorChimesNoise_Params ConditionalMakeDoorChimesNoise_Params;
	memset(&ConditionalMakeDoorChimesNoise_Params, 0, sizeof(ConditionalMakeDoorChimesNoise_Params));
	memcpy_s(&ConditionalMakeDoorChimesNoise_Params.DoorChimes, sizeof(ConditionalMakeDoorChimesNoise_Params.DoorChimes), &DoorChimes, sizeof(DoorChimes));

	uFnConditionalMakeDoorChimesNoise->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnConditionalMakeDoorChimesNoise, &ConditionalMakeDoorChimesNoise_Params, nullptr);
	uFnConditionalMakeDoorChimesNoise->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.TakeKnockbackDamage
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Damage                         (CPF_Parm)
// class AActor*                  InstigatedBy                   (CPF_Parm)
// float                          Knockback                      (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)

void AOLHero::TakeKnockbackDamage(int32_t Damage, class AActor* InstigatedBy, float Knockback, struct FVector HitNormal)
{
	static UFunction* uFnTakeKnockbackDamage = nullptr;

	if (!uFnTakeKnockbackDamage)
	{
		uFnTakeKnockbackDamage = UFunction::FindFunction("Function OLGame.OLHero.TakeKnockbackDamage");
	}

	AOLHero_execTakeKnockbackDamage_Params TakeKnockbackDamage_Params;
	memset(&TakeKnockbackDamage_Params, 0, sizeof(TakeKnockbackDamage_Params));
	memcpy_s(&TakeKnockbackDamage_Params.Damage, sizeof(TakeKnockbackDamage_Params.Damage), &Damage, sizeof(Damage));
	memcpy_s(&TakeKnockbackDamage_Params.InstigatedBy, sizeof(TakeKnockbackDamage_Params.InstigatedBy), &InstigatedBy, sizeof(InstigatedBy));
	memcpy_s(&TakeKnockbackDamage_Params.Knockback, sizeof(TakeKnockbackDamage_Params.Knockback), &Knockback, sizeof(Knockback));
	memcpy_s(&TakeKnockbackDamage_Params.HitNormal, sizeof(TakeKnockbackDamage_Params.HitNormal), &HitNormal, sizeof(HitNormal));

	uFnTakeKnockbackDamage->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTakeKnockbackDamage, &TakeKnockbackDamage_Params, nullptr);
	uFnTakeKnockbackDamage->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.TakeElectricDamage
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Damage                         (CPF_Parm)
// float                          Knockback                      (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)
// class UAkEvent*                ElectricSoundEvent             (CPF_Parm)

void AOLHero::TakeElectricDamage(int32_t Damage, float Knockback, struct FVector HitNormal, class UAkEvent* ElectricSoundEvent)
{
	static UFunction* uFnTakeElectricDamage = nullptr;

	if (!uFnTakeElectricDamage)
	{
		uFnTakeElectricDamage = UFunction::FindFunction("Function OLGame.OLHero.TakeElectricDamage");
	}

	AOLHero_execTakeElectricDamage_Params TakeElectricDamage_Params;
	memset(&TakeElectricDamage_Params, 0, sizeof(TakeElectricDamage_Params));
	memcpy_s(&TakeElectricDamage_Params.Damage, sizeof(TakeElectricDamage_Params.Damage), &Damage, sizeof(Damage));
	memcpy_s(&TakeElectricDamage_Params.Knockback, sizeof(TakeElectricDamage_Params.Knockback), &Knockback, sizeof(Knockback));
	memcpy_s(&TakeElectricDamage_Params.HitNormal, sizeof(TakeElectricDamage_Params.HitNormal), &HitNormal, sizeof(HitNormal));
	memcpy_s(&TakeElectricDamage_Params.ElectricSoundEvent, sizeof(TakeElectricDamage_Params.ElectricSoundEvent), &ElectricSoundEvent, sizeof(ElectricSoundEvent));

	uFnTakeElectricDamage->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTakeElectricDamage, &TakeElectricDamage_Params, nullptr);
	uFnTakeElectricDamage->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.NativeTakeFallingDamage
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 fallLocation                   (CPF_Parm)

void AOLHero::NativeTakeFallingDamage(struct FVector fallLocation)
{
	static UFunction* uFnNativeTakeFallingDamage = nullptr;

	if (!uFnNativeTakeFallingDamage)
	{
		uFnNativeTakeFallingDamage = UFunction::FindFunction("Function OLGame.OLHero.NativeTakeFallingDamage");
	}

	AOLHero_execNativeTakeFallingDamage_Params NativeTakeFallingDamage_Params;
	memset(&NativeTakeFallingDamage_Params, 0, sizeof(NativeTakeFallingDamage_Params));
	memcpy_s(&NativeTakeFallingDamage_Params.fallLocation, sizeof(NativeTakeFallingDamage_Params.fallLocation), &fallLocation, sizeof(fallLocation));

	uFnNativeTakeFallingDamage->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeTakeFallingDamage, &NativeTakeFallingDamage_Params, nullptr);
	uFnNativeTakeFallingDamage->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.NativeTakeDamage
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Damage                         (CPF_Parm)
// class AActor*                  InstigatedBy                   (CPF_Parm)
// EDamageType                    DamageType                     (CPF_Parm)
// struct FVector                 OverrideDamageDirection        (CPF_OptionalParm | CPF_Parm)
// bool                           bNonFatal                      (CPF_OptionalParm | CPF_Parm)

void AOLHero::NativeTakeDamage(int32_t Damage, class AActor* InstigatedBy, EDamageType DamageType, struct FVector OverrideDamageDirection, bool bNonFatal)
{
	static UFunction* uFnNativeTakeDamage = nullptr;

	if (!uFnNativeTakeDamage)
	{
		uFnNativeTakeDamage = UFunction::FindFunction("Function OLGame.OLHero.NativeTakeDamage");
	}

	AOLHero_execNativeTakeDamage_Params NativeTakeDamage_Params;
	memset(&NativeTakeDamage_Params, 0, sizeof(NativeTakeDamage_Params));
	memcpy_s(&NativeTakeDamage_Params.Damage, sizeof(NativeTakeDamage_Params.Damage), &Damage, sizeof(Damage));
	memcpy_s(&NativeTakeDamage_Params.InstigatedBy, sizeof(NativeTakeDamage_Params.InstigatedBy), &InstigatedBy, sizeof(InstigatedBy));
	memcpy_s(&NativeTakeDamage_Params.DamageType, sizeof(NativeTakeDamage_Params.DamageType), &DamageType, sizeof(DamageType));
	memcpy_s(&NativeTakeDamage_Params.OverrideDamageDirection, sizeof(NativeTakeDamage_Params.OverrideDamageDirection), &OverrideDamageDirection, sizeof(OverrideDamageDirection));
	NativeTakeDamage_Params.bNonFatal = bNonFatal;

	uFnNativeTakeDamage->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeTakeDamage, &NativeTakeDamage_Params, nullptr);
	uFnNativeTakeDamage->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.NativeDisplayDebug
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class UCanvas*                 Canvas                         (CPF_Parm)
// float                          out_YL                         (CPF_Parm | CPF_OutParm)
// float                          out_YPos                       (CPF_Parm | CPF_OutParm)

void AOLHero::NativeDisplayDebug(class UCanvas* Canvas, float& out_YL, float& out_YPos)
{
	static UFunction* uFnNativeDisplayDebug = nullptr;

	if (!uFnNativeDisplayDebug)
	{
		uFnNativeDisplayDebug = UFunction::FindFunction("Function OLGame.OLHero.NativeDisplayDebug");
	}

	AOLHero_execNativeDisplayDebug_Params NativeDisplayDebug_Params;
	memset(&NativeDisplayDebug_Params, 0, sizeof(NativeDisplayDebug_Params));
	memcpy_s(&NativeDisplayDebug_Params.Canvas, sizeof(NativeDisplayDebug_Params.Canvas), &Canvas, sizeof(Canvas));
	memcpy_s(&NativeDisplayDebug_Params.out_YL, sizeof(NativeDisplayDebug_Params.out_YL), &out_YL, sizeof(out_YL));
	memcpy_s(&NativeDisplayDebug_Params.out_YPos, sizeof(NativeDisplayDebug_Params.out_YPos), &out_YPos, sizeof(out_YPos));

	uFnNativeDisplayDebug->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeDisplayDebug, &NativeDisplayDebug_Params, nullptr);
	uFnNativeDisplayDebug->FunctionFlags |= 0x400;

	memcpy_s(&out_YL, sizeof(out_YL), &NativeDisplayDebug_Params.out_YL, sizeof(NativeDisplayDebug_Params.out_YL));
	memcpy_s(&out_YPos, sizeof(out_YPos), &NativeDisplayDebug_Params.out_YPos, sizeof(NativeDisplayDebug_Params.out_YPos));
};

// Function OLGame.OLHero.GetCamera
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 out_CamLoc                     (CPF_Parm | CPF_OutParm)
// struct FRotator                out_CamRot                     (CPF_Parm | CPF_OutParm)
// float                          out_FOV                        (CPF_Parm | CPF_OutParm)

void AOLHero::GetCamera(struct FVector& out_CamLoc, struct FRotator& out_CamRot, float& out_FOV)
{
	static UFunction* uFnGetCamera = nullptr;

	if (!uFnGetCamera)
	{
		uFnGetCamera = UFunction::FindFunction("Function OLGame.OLHero.GetCamera");
	}

	AOLHero_execGetCamera_Params GetCamera_Params;
	memset(&GetCamera_Params, 0, sizeof(GetCamera_Params));
	memcpy_s(&GetCamera_Params.out_CamLoc, sizeof(GetCamera_Params.out_CamLoc), &out_CamLoc, sizeof(out_CamLoc));
	memcpy_s(&GetCamera_Params.out_CamRot, sizeof(GetCamera_Params.out_CamRot), &out_CamRot, sizeof(out_CamRot));
	memcpy_s(&GetCamera_Params.out_FOV, sizeof(GetCamera_Params.out_FOV), &out_FOV, sizeof(out_FOV));

	uFnGetCamera->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetCamera, &GetCamera_Params, nullptr);
	uFnGetCamera->FunctionFlags |= 0x400;

	memcpy_s(&out_CamLoc, sizeof(out_CamLoc), &GetCamera_Params.out_CamLoc, sizeof(GetCamera_Params.out_CamLoc));
	memcpy_s(&out_CamRot, sizeof(out_CamRot), &GetCamera_Params.out_CamRot, sizeof(GetCamera_Params.out_CamRot));
	memcpy_s(&out_FOV, sizeof(out_FOV), &GetCamera_Params.out_FOV, sizeof(GetCamera_Params.out_FOV));
};

// Function OLGame.OLHero.NativeOnAnimEnd
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UAnimNodeSequence*       SeqNode                        (CPF_Parm)
// float                          PlayedTime                     (CPF_Parm)
// float                          ExcessTime                     (CPF_Parm)

void AOLHero::NativeOnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime)
{
	static UFunction* uFnNativeOnAnimEnd = nullptr;

	if (!uFnNativeOnAnimEnd)
	{
		uFnNativeOnAnimEnd = UFunction::FindFunction("Function OLGame.OLHero.NativeOnAnimEnd");
	}

	AOLHero_execNativeOnAnimEnd_Params NativeOnAnimEnd_Params;
	memset(&NativeOnAnimEnd_Params, 0, sizeof(NativeOnAnimEnd_Params));
	memcpy_s(&NativeOnAnimEnd_Params.SeqNode, sizeof(NativeOnAnimEnd_Params.SeqNode), &SeqNode, sizeof(SeqNode));
	memcpy_s(&NativeOnAnimEnd_Params.PlayedTime, sizeof(NativeOnAnimEnd_Params.PlayedTime), &PlayedTime, sizeof(PlayedTime));
	memcpy_s(&NativeOnAnimEnd_Params.ExcessTime, sizeof(NativeOnAnimEnd_Params.ExcessTime), &ExcessTime, sizeof(ExcessTime));

	uFnNativeOnAnimEnd->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeOnAnimEnd, &NativeOnAnimEnd_Params, nullptr);
	uFnNativeOnAnimEnd->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.NativePostBeginPlay
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::NativePostBeginPlay()
{
	static UFunction* uFnNativePostBeginPlay = nullptr;

	if (!uFnNativePostBeginPlay)
	{
		uFnNativePostBeginPlay = UFunction::FindFunction("Function OLGame.OLHero.NativePostBeginPlay");
	}

	AOLHero_execNativePostBeginPlay_Params NativePostBeginPlay_Params;
	memset(&NativePostBeginPlay_Params, 0, sizeof(NativePostBeginPlay_Params));

	uFnNativePostBeginPlay->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativePostBeginPlay, &NativePostBeginPlay_Params, nullptr);
	uFnNativePostBeginPlay->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.NativeDestroyed
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::NativeDestroyed()
{
	static UFunction* uFnNativeDestroyed = nullptr;

	if (!uFnNativeDestroyed)
	{
		uFnNativeDestroyed = UFunction::FindFunction("Function OLGame.OLHero.NativeDestroyed");
	}

	AOLHero_execNativeDestroyed_Params NativeDestroyed_Params;
	memset(&NativeDestroyed_Params, 0, sizeof(NativeDestroyed_Params));

	uFnNativeDestroyed->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeDestroyed, &NativeDestroyed_Params, nullptr);
	uFnNativeDestroyed->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.HandleSeamlessTeleport
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::HandleSeamlessTeleport()
{
	static UFunction* uFnHandleSeamlessTeleport = nullptr;

	if (!uFnHandleSeamlessTeleport)
	{
		uFnHandleSeamlessTeleport = UFunction::FindFunction("Function OLGame.OLHero.HandleSeamlessTeleport");
	}

	AOLHero_execHandleSeamlessTeleport_Params HandleSeamlessTeleport_Params;
	memset(&HandleSeamlessTeleport_Params, 0, sizeof(HandleSeamlessTeleport_Params));

	uFnHandleSeamlessTeleport->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHandleSeamlessTeleport, &HandleSeamlessTeleport_Params, nullptr);
	uFnHandleSeamlessTeleport->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.ResetAfterTeleport
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::ResetAfterTeleport()
{
	static UFunction* uFnResetAfterTeleport = nullptr;

	if (!uFnResetAfterTeleport)
	{
		uFnResetAfterTeleport = UFunction::FindFunction("Function OLGame.OLHero.ResetAfterTeleport");
	}

	AOLHero_execResetAfterTeleport_Params ResetAfterTeleport_Params;
	memset(&ResetAfterTeleport_Params, 0, sizeof(ResetAfterTeleport_Params));

	uFnResetAfterTeleport->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnResetAfterTeleport, &ResetAfterTeleport_Params, nullptr);
	uFnResetAfterTeleport->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.IsSprinting
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLHero::IsSprinting()
{
	static UFunction* uFnIsSprinting = nullptr;

	if (!uFnIsSprinting)
	{
		uFnIsSprinting = UFunction::FindFunction("Function OLGame.OLHero.IsSprinting");
	}

	AOLHero_execIsSprinting_Params IsSprinting_Params;
	memset(&IsSprinting_Params, 0, sizeof(IsSprinting_Params));

	uFnIsSprinting->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsSprinting, &IsSprinting_Params, nullptr);
	uFnIsSprinting->FunctionFlags |= 0x400;

	return IsSprinting_Params.ReturnValue;
};

// Function OLGame.OLHero.IsRunning
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLHero::IsRunning()
{
	static UFunction* uFnIsRunning = nullptr;

	if (!uFnIsRunning)
	{
		uFnIsRunning = UFunction::FindFunction("Function OLGame.OLHero.IsRunning");
	}

	AOLHero_execIsRunning_Params IsRunning_Params;
	memset(&IsRunning_Params, 0, sizeof(IsRunning_Params));

	uFnIsRunning->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsRunning, &IsRunning_Params, nullptr);
	uFnIsRunning->FunctionFlags |= 0x400;

	return IsRunning_Params.ReturnValue;
};

// Function OLGame.OLHero.TryRun
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLHero::TryRun()
{
	static UFunction* uFnTryRun = nullptr;

	if (!uFnTryRun)
	{
		uFnTryRun = UFunction::FindFunction("Function OLGame.OLHero.TryRun");
	}

	AOLHero_execTryRun_Params TryRun_Params;
	memset(&TryRun_Params, 0, sizeof(TryRun_Params));

	uFnTryRun->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTryRun, &TryRun_Params, nullptr);
	uFnTryRun->FunctionFlags |= 0x400;

	return TryRun_Params.ReturnValue;
};

// Function OLGame.OLHero.Walk
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLHero::Walk()
{
	static UFunction* uFnWalk = nullptr;

	if (!uFnWalk)
	{
		uFnWalk = UFunction::FindFunction("Function OLGame.OLHero.Walk");
	}

	AOLHero_execWalk_Params Walk_Params;
	memset(&Walk_Params, 0, sizeof(Walk_Params));

	uFnWalk->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnWalk, &Walk_Params, nullptr);
	uFnWalk->FunctionFlags |= 0x400;
};

// Function OLGame.OLHero.GetViewRotation
// [0x00020D00] (FUNC_Simulated | FUNC_Native | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FRotator                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FRotator AOLHero::eventGetViewRotation()
{
	static UFunction* uFnGetViewRotation = nullptr;

	if (!uFnGetViewRotation)
	{
		uFnGetViewRotation = UFunction::FindFunction("Function OLGame.OLHero.GetViewRotation");
	}

	AOLHero_eventGetViewRotation_Params GetViewRotation_Params;
	memset(&GetViewRotation_Params, 0, sizeof(GetViewRotation_Params));

	uFnGetViewRotation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetViewRotation, &GetViewRotation_Params, nullptr);
	uFnGetViewRotation->FunctionFlags |= 0x400;

	return GetViewRotation_Params.ReturnValue;
};

// Function OLGame.OLHero.GetPawnViewLocation
// [0x00020500] (FUNC_Simulated | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FVector AOLHero::GetPawnViewLocation()
{
	static UFunction* uFnGetPawnViewLocation = nullptr;

	if (!uFnGetPawnViewLocation)
	{
		uFnGetPawnViewLocation = UFunction::FindFunction("Function OLGame.OLHero.GetPawnViewLocation");
	}

	AOLHero_execGetPawnViewLocation_Params GetPawnViewLocation_Params;
	memset(&GetPawnViewLocation_Params, 0, sizeof(GetPawnViewLocation_Params));

	uFnGetPawnViewLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetPawnViewLocation, &GetPawnViewLocation_Params, nullptr);
	uFnGetPawnViewLocation->FunctionFlags |= 0x400;

	return GetPawnViewLocation_Params.ReturnValue;
};

// Function OLGame.OLPickableDocument.RefreshUI
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLPickableDocument::eventRefreshUI()
{
	static UFunction* uFnRefreshUI = nullptr;

	if (!uFnRefreshUI)
	{
		uFnRefreshUI = UFunction::FindFunction("Function OLGame.OLPickableDocument.RefreshUI");
	}

	UOLPickableDocument_eventRefreshUI_Params RefreshUI_Params;
	memset(&RefreshUI_Params, 0, sizeof(RefreshUI_Params));

	this->ProcessEvent(uFnRefreshUI, &RefreshUI_Params, nullptr);

	return RefreshUI_Params.ReturnValue;
};

// Function OLGame.OLPickableDocument.WidgetInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   WidgetName                     (CPF_Parm)
// struct FName                   WidgetPath                     (CPF_Parm)
// class UGFxObject*              Widget                         (CPF_Parm)

bool UOLPickableDocument::eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget)
{
	static UFunction* uFnWidgetInitialized = nullptr;

	if (!uFnWidgetInitialized)
	{
		uFnWidgetInitialized = UFunction::FindFunction("Function OLGame.OLPickableDocument.WidgetInitialized");
	}

	UOLPickableDocument_eventWidgetInitialized_Params WidgetInitialized_Params;
	memset(&WidgetInitialized_Params, 0, sizeof(WidgetInitialized_Params));
	memcpy_s(&WidgetInitialized_Params.WidgetName, sizeof(WidgetInitialized_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&WidgetInitialized_Params.WidgetPath, sizeof(WidgetInitialized_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));
	memcpy_s(&WidgetInitialized_Params.Widget, sizeof(WidgetInitialized_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnWidgetInitialized, &WidgetInitialized_Params, nullptr);

	return WidgetInitialized_Params.ReturnValue;
};

// Function OLGame.OLPickableObject.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AOLPickableObject::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function OLGame.OLPickableObject.OnToggle");
	}

	AOLPickableObject_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	memcpy_s(&OnToggle_Params.Action, sizeof(OnToggle_Params.Action), &Action, sizeof(Action));

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function OLGame.OLCollectiblePickup.PostBeginPlay
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLCollectiblePickup::PostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function OLGame.OLCollectiblePickup.PostBeginPlay");
	}

	AOLCollectiblePickup_execPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function OLGame.OLCollectiblePickup.ShouldShowCollectible
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLCollectiblePickup::ShouldShowCollectible()
{
	static UFunction* uFnShouldShowCollectible = nullptr;

	if (!uFnShouldShowCollectible)
	{
		uFnShouldShowCollectible = UFunction::FindFunction("Function OLGame.OLCollectiblePickup.ShouldShowCollectible");
	}

	AOLCollectiblePickup_execShouldShowCollectible_Params ShouldShowCollectible_Params;
	memset(&ShouldShowCollectible_Params, 0, sizeof(ShouldShowCollectible_Params));

	uFnShouldShowCollectible->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnShouldShowCollectible, &ShouldShowCollectible_Params, nullptr);
	uFnShouldShowCollectible->FunctionFlags |= 0x400;

	return ShouldShowCollectible_Params.ReturnValue;
};

// Function OLGame.OLPlayerInput.IsKeyPressed
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   Key                            (CPF_Parm)

bool UOLPlayerInput::IsKeyPressed(struct FName Key)
{
	static UFunction* uFnIsKeyPressed = nullptr;

	if (!uFnIsKeyPressed)
	{
		uFnIsKeyPressed = UFunction::FindFunction("Function OLGame.OLPlayerInput.IsKeyPressed");
	}

	UOLPlayerInput_execIsKeyPressed_Params IsKeyPressed_Params;
	memset(&IsKeyPressed_Params, 0, sizeof(IsKeyPressed_Params));
	memcpy_s(&IsKeyPressed_Params.Key, sizeof(IsKeyPressed_Params.Key), &Key, sizeof(Key));

	uFnIsKeyPressed->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsKeyPressed, &IsKeyPressed_Params, nullptr);
	uFnIsKeyPressed->FunctionFlags |= 0x400;

	return IsKeyPressed_Params.ReturnValue;
};

// Function OLGame.OLPlayerInput.UnBindNoSave
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Command                        (CPF_Parm | CPF_NeedCtorLink)

void UOLPlayerInput::eventUnBindNoSave(class FString Command)
{
	static UFunction* uFnUnBindNoSave = nullptr;

	if (!uFnUnBindNoSave)
	{
		uFnUnBindNoSave = UFunction::FindFunction("Function OLGame.OLPlayerInput.UnBindNoSave");
	}

	UOLPlayerInput_eventUnBindNoSave_Params UnBindNoSave_Params;
	memset(&UnBindNoSave_Params, 0, sizeof(UnBindNoSave_Params));
	memcpy_s(&UnBindNoSave_Params.Command, sizeof(UnBindNoSave_Params.Command), &Command, sizeof(Command));

	this->ProcessEvent(uFnUnBindNoSave, &UnBindNoSave_Params, nullptr);
};

// Function OLGame.OLPlayerInput.PreProcessInput
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void UOLPlayerInput::PreProcessInput(float DeltaTime)
{
	static UFunction* uFnPreProcessInput = nullptr;

	if (!uFnPreProcessInput)
	{
		uFnPreProcessInput = UFunction::FindFunction("Function OLGame.OLPlayerInput.PreProcessInput");
	}

	UOLPlayerInput_execPreProcessInput_Params PreProcessInput_Params;
	memset(&PreProcessInput_Params, 0, sizeof(PreProcessInput_Params));
	memcpy_s(&PreProcessInput_Params.DeltaTime, sizeof(PreProcessInput_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnPreProcessInput, &PreProcessInput_Params, nullptr);
};

// Function OLGame.OLPlayerInput.StopLeanRight
// [0x00020302] (FUNC_Defined | FUNC_Simulated | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLPlayerInput::StopLeanRight()
{
	static UFunction* uFnStopLeanRight = nullptr;

	if (!uFnStopLeanRight)
	{
		uFnStopLeanRight = UFunction::FindFunction("Function OLGame.OLPlayerInput.StopLeanRight");
	}

	UOLPlayerInput_execStopLeanRight_Params StopLeanRight_Params;
	memset(&StopLeanRight_Params, 0, sizeof(StopLeanRight_Params));

	this->ProcessEvent(uFnStopLeanRight, &StopLeanRight_Params, nullptr);
};

// Function OLGame.OLPlayerInput.StopLeanLeft
// [0x00020302] (FUNC_Defined | FUNC_Simulated | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLPlayerInput::StopLeanLeft()
{
	static UFunction* uFnStopLeanLeft = nullptr;

	if (!uFnStopLeanLeft)
	{
		uFnStopLeanLeft = UFunction::FindFunction("Function OLGame.OLPlayerInput.StopLeanLeft");
	}

	UOLPlayerInput_execStopLeanLeft_Params StopLeanLeft_Params;
	memset(&StopLeanLeft_Params, 0, sizeof(StopLeanLeft_Params));

	this->ProcessEvent(uFnStopLeanLeft, &StopLeanLeft_Params, nullptr);
};

// Function OLGame.OLPlayerInput.StartLeanRight
// [0x00020302] (FUNC_Defined | FUNC_Simulated | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLPlayerInput::StartLeanRight()
{
	static UFunction* uFnStartLeanRight = nullptr;

	if (!uFnStartLeanRight)
	{
		uFnStartLeanRight = UFunction::FindFunction("Function OLGame.OLPlayerInput.StartLeanRight");
	}

	UOLPlayerInput_execStartLeanRight_Params StartLeanRight_Params;
	memset(&StartLeanRight_Params, 0, sizeof(StartLeanRight_Params));

	this->ProcessEvent(uFnStartLeanRight, &StartLeanRight_Params, nullptr);
};

// Function OLGame.OLPlayerInput.StartLeanLeft
// [0x00020302] (FUNC_Defined | FUNC_Simulated | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLPlayerInput::StartLeanLeft()
{
	static UFunction* uFnStartLeanLeft = nullptr;

	if (!uFnStartLeanLeft)
	{
		uFnStartLeanLeft = UFunction::FindFunction("Function OLGame.OLPlayerInput.StartLeanLeft");
	}

	UOLPlayerInput_execStartLeanLeft_Params StartLeanLeft_Params;
	memset(&StartLeanLeft_Params, 0, sizeof(StartLeanLeft_Params));

	this->ProcessEvent(uFnStartLeanLeft, &StartLeanLeft_Params, nullptr);
};

// Function OLGame.OLPlayerInput.StopRun
// [0x00020302] (FUNC_Defined | FUNC_Simulated | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLPlayerInput::StopRun()
{
	static UFunction* uFnStopRun = nullptr;

	if (!uFnStopRun)
	{
		uFnStopRun = UFunction::FindFunction("Function OLGame.OLPlayerInput.StopRun");
	}

	UOLPlayerInput_execStopRun_Params StopRun_Params;
	memset(&StopRun_Params, 0, sizeof(StopRun_Params));

	this->ProcessEvent(uFnStopRun, &StopRun_Params, nullptr);
};

// Function OLGame.OLPlayerInput.ChangeCamCorderHudDisplay
// [0x00020302] (FUNC_Defined | FUNC_Simulated | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLPlayerInput::ChangeCamCorderHudDisplay()
{
	static UFunction* uFnChangeCamCorderHudDisplay = nullptr;

	if (!uFnChangeCamCorderHudDisplay)
	{
		uFnChangeCamCorderHudDisplay = UFunction::FindFunction("Function OLGame.OLPlayerInput.ChangeCamCorderHudDisplay");
	}

	UOLPlayerInput_execChangeCamCorderHudDisplay_Params ChangeCamCorderHudDisplay_Params;
	memset(&ChangeCamCorderHudDisplay_Params, 0, sizeof(ChangeCamCorderHudDisplay_Params));

	this->ProcessEvent(uFnChangeCamCorderHudDisplay, &ChangeCamCorderHudDisplay_Params, nullptr);
};

// Function OLGame.OLPlayerInput.NativeChangeCamCorderHudDisplay
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLPlayerInput::NativeChangeCamCorderHudDisplay()
{
	static UFunction* uFnNativeChangeCamCorderHudDisplay = nullptr;

	if (!uFnNativeChangeCamCorderHudDisplay)
	{
		uFnNativeChangeCamCorderHudDisplay = UFunction::FindFunction("Function OLGame.OLPlayerInput.NativeChangeCamCorderHudDisplay");
	}

	UOLPlayerInput_execNativeChangeCamCorderHudDisplay_Params NativeChangeCamCorderHudDisplay_Params;
	memset(&NativeChangeCamCorderHudDisplay_Params, 0, sizeof(NativeChangeCamCorderHudDisplay_Params));

	uFnNativeChangeCamCorderHudDisplay->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeChangeCamCorderHudDisplay, &NativeChangeCamCorderHudDisplay_Params, nullptr);
	uFnNativeChangeCamCorderHudDisplay->FunctionFlags |= 0x400;
};

// Function OLGame.OLPlayerInput.StartRun
// [0x00020302] (FUNC_Defined | FUNC_Simulated | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLPlayerInput::StartRun()
{
	static UFunction* uFnStartRun = nullptr;

	if (!uFnStartRun)
	{
		uFnStartRun = UFunction::FindFunction("Function OLGame.OLPlayerInput.StartRun");
	}

	UOLPlayerInput_execStartRun_Params StartRun_Params;
	memset(&StartRun_Params, 0, sizeof(StartRun_Params));

	this->ProcessEvent(uFnStartRun, &StartRun_Params, nullptr);
};

// Function OLGame.OLPlayerInput.StartRunNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLPlayerInput::StartRunNative()
{
	static UFunction* uFnStartRunNative = nullptr;

	if (!uFnStartRunNative)
	{
		uFnStartRunNative = UFunction::FindFunction("Function OLGame.OLPlayerInput.StartRunNative");
	}

	UOLPlayerInput_execStartRunNative_Params StartRunNative_Params;
	memset(&StartRunNative_Params, 0, sizeof(StartRunNative_Params));

	uFnStartRunNative->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStartRunNative, &StartRunNative_Params, nullptr);
	uFnStartRunNative->FunctionFlags |= 0x400;
};

// Function OLGame.OLPlayerInput.ToggleDuck
// [0x00020302] (FUNC_Defined | FUNC_Simulated | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLPlayerInput::ToggleDuck()
{
	static UFunction* uFnToggleDuck = nullptr;

	if (!uFnToggleDuck)
	{
		uFnToggleDuck = UFunction::FindFunction("Function OLGame.OLPlayerInput.ToggleDuck");
	}

	UOLPlayerInput_execToggleDuck_Params ToggleDuck_Params;
	memset(&ToggleDuck_Params, 0, sizeof(ToggleDuck_Params));

	this->ProcessEvent(uFnToggleDuck, &ToggleDuck_Params, nullptr);
};

// Function OLGame.OLPlayerInput.UnDuck
// [0x00020302] (FUNC_Defined | FUNC_Simulated | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLPlayerInput::UnDuck()
{
	static UFunction* uFnUnDuck = nullptr;

	if (!uFnUnDuck)
	{
		uFnUnDuck = UFunction::FindFunction("Function OLGame.OLPlayerInput.UnDuck");
	}

	UOLPlayerInput_execUnDuck_Params UnDuck_Params;
	memset(&UnDuck_Params, 0, sizeof(UnDuck_Params));

	this->ProcessEvent(uFnUnDuck, &UnDuck_Params, nullptr);
};

// Function OLGame.OLPlayerInput.Duck
// [0x00020302] (FUNC_Defined | FUNC_Simulated | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLPlayerInput::Duck()
{
	static UFunction* uFnDuck = nullptr;

	if (!uFnDuck)
	{
		uFnDuck = UFunction::FindFunction("Function OLGame.OLPlayerInput.Duck");
	}

	UOLPlayerInput_execDuck_Params Duck_Params;
	memset(&Duck_Params, 0, sizeof(Duck_Params));

	this->ProcessEvent(uFnDuck, &Duck_Params, nullptr);
};

// Function OLGame.OLPlayerInput.ResetInput
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLPlayerInput::ResetInput()
{
	static UFunction* uFnResetInput = nullptr;

	if (!uFnResetInput)
	{
		uFnResetInput = UFunction::FindFunction("Function OLGame.OLPlayerInput.ResetInput");
	}

	UOLPlayerInput_execResetInput_Params ResetInput_Params;
	memset(&ResetInput_Params, 0, sizeof(ResetInput_Params));

	uFnResetInput->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnResetInput, &ResetInput_Params, nullptr);
	uFnResetInput->FunctionFlags |= 0x400;
};

// Function OLGame.OLProfileSettings.AutoDetectPerformanceSettings
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLProfileSettings::AutoDetectPerformanceSettings()
{
	static UFunction* uFnAutoDetectPerformanceSettings = nullptr;

	if (!uFnAutoDetectPerformanceSettings)
	{
		uFnAutoDetectPerformanceSettings = UFunction::FindFunction("Function OLGame.OLProfileSettings.AutoDetectPerformanceSettings");
	}

	UOLProfileSettings_execAutoDetectPerformanceSettings_Params AutoDetectPerformanceSettings_Params;
	memset(&AutoDetectPerformanceSettings_Params, 0, sizeof(AutoDetectPerformanceSettings_Params));

	uFnAutoDetectPerformanceSettings->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAutoDetectPerformanceSettings, &AutoDetectPerformanceSettings_Params, nullptr);
	uFnAutoDetectPerformanceSettings->FunctionFlags |= 0x400;
};

// Function OLGame.OLProfileSettings.MatchMonitorResolution
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bLimitForPerformance           (CPF_Parm)

void UOLProfileSettings::MatchMonitorResolution(bool bLimitForPerformance)
{
	static UFunction* uFnMatchMonitorResolution = nullptr;

	if (!uFnMatchMonitorResolution)
	{
		uFnMatchMonitorResolution = UFunction::FindFunction("Function OLGame.OLProfileSettings.MatchMonitorResolution");
	}

	UOLProfileSettings_execMatchMonitorResolution_Params MatchMonitorResolution_Params;
	memset(&MatchMonitorResolution_Params, 0, sizeof(MatchMonitorResolution_Params));
	MatchMonitorResolution_Params.bLimitForPerformance = bLimitForPerformance;

	uFnMatchMonitorResolution->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnMatchMonitorResolution, &MatchMonitorResolution_Params, nullptr);
	uFnMatchMonitorResolution->FunctionFlags |= 0x400;
};

// Function OLGame.OLProfileSettings.SetLanguageFromSteam
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLProfileSettings::SetLanguageFromSteam()
{
	static UFunction* uFnSetLanguageFromSteam = nullptr;

	if (!uFnSetLanguageFromSteam)
	{
		uFnSetLanguageFromSteam = UFunction::FindFunction("Function OLGame.OLProfileSettings.SetLanguageFromSteam");
	}

	UOLProfileSettings_execSetLanguageFromSteam_Params SetLanguageFromSteam_Params;
	memset(&SetLanguageFromSteam_Params, 0, sizeof(SetLanguageFromSteam_Params));

	uFnSetLanguageFromSteam->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetLanguageFromSteam, &SetLanguageFromSteam_Params, nullptr);
	uFnSetLanguageFromSteam->FunctionFlags |= 0x400;
};

// Function OLGame.OLProfileSettings.SetToDefaults
// [0x00020C00] (FUNC_Native | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLProfileSettings::eventSetToDefaults()
{
	static UFunction* uFnSetToDefaults = nullptr;

	if (!uFnSetToDefaults)
	{
		uFnSetToDefaults = UFunction::FindFunction("Function OLGame.OLProfileSettings.SetToDefaults");
	}

	UOLProfileSettings_eventSetToDefaults_Params SetToDefaults_Params;
	memset(&SetToDefaults_Params, 0, sizeof(SetToDefaults_Params));

	uFnSetToDefaults->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetToDefaults, &SetToDefaults_Params, nullptr);
	uFnSetToDefaults->FunctionFlags |= 0x400;
};

// Function OLGame.OLProfileSettings.GetProfileSettingResolutions
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProfileSettingId               (CPF_Parm)
// TArray<struct FName>           ResolutionNames                (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// TArray<struct FIntPoint>       Resolutions                    (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOLProfileSettings::GetProfileSettingResolutions(int32_t ProfileSettingId, TArray<struct FName>& ResolutionNames, TArray<struct FIntPoint>& Resolutions)
{
	static UFunction* uFnGetProfileSettingResolutions = nullptr;

	if (!uFnGetProfileSettingResolutions)
	{
		uFnGetProfileSettingResolutions = UFunction::FindFunction("Function OLGame.OLProfileSettings.GetProfileSettingResolutions");
	}

	UOLProfileSettings_execGetProfileSettingResolutions_Params GetProfileSettingResolutions_Params;
	memset(&GetProfileSettingResolutions_Params, 0, sizeof(GetProfileSettingResolutions_Params));
	memcpy_s(&GetProfileSettingResolutions_Params.ProfileSettingId, sizeof(GetProfileSettingResolutions_Params.ProfileSettingId), &ProfileSettingId, sizeof(ProfileSettingId));
	memcpy_s(&GetProfileSettingResolutions_Params.ResolutionNames, sizeof(GetProfileSettingResolutions_Params.ResolutionNames), &ResolutionNames, sizeof(ResolutionNames));
	memcpy_s(&GetProfileSettingResolutions_Params.Resolutions, sizeof(GetProfileSettingResolutions_Params.Resolutions), &Resolutions, sizeof(Resolutions));

	uFnGetProfileSettingResolutions->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetProfileSettingResolutions, &GetProfileSettingResolutions_Params, nullptr);
	uFnGetProfileSettingResolutions->FunctionFlags |= 0x400;

	memcpy_s(&ResolutionNames, sizeof(ResolutionNames), &GetProfileSettingResolutions_Params.ResolutionNames, sizeof(GetProfileSettingResolutions_Params.ResolutionNames));
	memcpy_s(&Resolutions, sizeof(Resolutions), &GetProfileSettingResolutions_Params.Resolutions, sizeof(GetProfileSettingResolutions_Params.Resolutions));

	return GetProfileSettingResolutions_Params.ReturnValue;
};

// Function OLGame.OLProfileSettings.GetProfileSettingValues
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ProfileSettingId               (CPF_Parm)
// TArray<struct FName>           Values                         (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOLProfileSettings::GetProfileSettingValues(int32_t ProfileSettingId, TArray<struct FName>& Values)
{
	static UFunction* uFnGetProfileSettingValues = nullptr;

	if (!uFnGetProfileSettingValues)
	{
		uFnGetProfileSettingValues = UFunction::FindFunction("Function OLGame.OLProfileSettings.GetProfileSettingValues");
	}

	UOLProfileSettings_execGetProfileSettingValues_Params GetProfileSettingValues_Params;
	memset(&GetProfileSettingValues_Params, 0, sizeof(GetProfileSettingValues_Params));
	memcpy_s(&GetProfileSettingValues_Params.ProfileSettingId, sizeof(GetProfileSettingValues_Params.ProfileSettingId), &ProfileSettingId, sizeof(ProfileSettingId));
	memcpy_s(&GetProfileSettingValues_Params.Values, sizeof(GetProfileSettingValues_Params.Values), &Values, sizeof(Values));

	uFnGetProfileSettingValues->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetProfileSettingValues, &GetProfileSettingValues_Params, nullptr);
	uFnGetProfileSettingValues->FunctionFlags |= 0x400;

	memcpy_s(&Values, sizeof(Values), &GetProfileSettingValues_Params.Values, sizeof(GetProfileSettingValues_Params.Values));

	return GetProfileSettingValues_Params.ReturnValue;
};

// Function OLGame.OLProfileSettings.GetGammaSetting
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float UOLProfileSettings::GetGammaSetting()
{
	static UFunction* uFnGetGammaSetting = nullptr;

	if (!uFnGetGammaSetting)
	{
		uFnGetGammaSetting = UFunction::FindFunction("Function OLGame.OLProfileSettings.GetGammaSetting");
	}

	UOLProfileSettings_execGetGammaSetting_Params GetGammaSetting_Params;
	memset(&GetGammaSetting_Params, 0, sizeof(GetGammaSetting_Params));

	this->ProcessEvent(uFnGetGammaSetting, &GetGammaSetting_Params, nullptr);

	return GetGammaSetting_Params.ReturnValue;
};

// Function OLGame.OLPushableObject.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AOLPushableObject::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function OLGame.OLPushableObject.OnToggle");
	}

	AOLPushableObject_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	memcpy_s(&OnToggle_Params.Action, sizeof(OnToggle_Params.Action), &Action, sizeof(Action));

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function OLGame.OLPushableObject.OnTeleport
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Teleport*        Action                         (CPF_Parm)

void AOLPushableObject::OnTeleport(class USeqAct_Teleport* Action)
{
	static UFunction* uFnOnTeleport = nullptr;

	if (!uFnOnTeleport)
	{
		uFnOnTeleport = UFunction::FindFunction("Function OLGame.OLPushableObject.OnTeleport");
	}

	AOLPushableObject_execOnTeleport_Params OnTeleport_Params;
	memset(&OnTeleport_Params, 0, sizeof(OnTeleport_Params));
	memcpy_s(&OnTeleport_Params.Action, sizeof(OnTeleport_Params.Action), &Action, sizeof(Action));

	this->ProcessEvent(uFnOnTeleport, &OnTeleport_Params, nullptr);
};

// Function OLGame.OLPushableObject.PostOnTeleport
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPushableObject::PostOnTeleport()
{
	static UFunction* uFnPostOnTeleport = nullptr;

	if (!uFnPostOnTeleport)
	{
		uFnPostOnTeleport = UFunction::FindFunction("Function OLGame.OLPushableObject.PostOnTeleport");
	}

	AOLPushableObject_execPostOnTeleport_Params PostOnTeleport_Params;
	memset(&PostOnTeleport_Params, 0, sizeof(PostOnTeleport_Params));

	uFnPostOnTeleport->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPostOnTeleport, &PostOnTeleport_Params, nullptr);
	uFnPostOnTeleport->FunctionFlags |= 0x400;
};

// Function OLGame.OLPushableObject.PreOnTeleport
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLPushableObject::PreOnTeleport()
{
	static UFunction* uFnPreOnTeleport = nullptr;

	if (!uFnPreOnTeleport)
	{
		uFnPreOnTeleport = UFunction::FindFunction("Function OLGame.OLPushableObject.PreOnTeleport");
	}

	AOLPushableObject_execPreOnTeleport_Params PreOnTeleport_Params;
	memset(&PreOnTeleport_Params, 0, sizeof(PreOnTeleport_Params));

	uFnPreOnTeleport->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPreOnTeleport, &PreOnTeleport_Params, nullptr);
	uFnPreOnTeleport->FunctionFlags |= 0x400;
};

// Function OLGame.OLRecordingUtils.ShowCleanText
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        Type                           (CPF_Parm)
// int32_t                        Index                          (CPF_Parm)
// int32_t                        SortingType                    (CPF_Parm)

void UOLRecordingUtils::ShowCleanText(uint8_t Type, int32_t Index, int32_t SortingType)
{
	static UFunction* uFnShowCleanText = nullptr;

	if (!uFnShowCleanText)
	{
		uFnShowCleanText = UFunction::FindFunction("Function OLGame.OLRecordingUtils.ShowCleanText");
	}

	UOLRecordingUtils_execShowCleanText_Params ShowCleanText_Params;
	memset(&ShowCleanText_Params, 0, sizeof(ShowCleanText_Params));
	memcpy_s(&ShowCleanText_Params.Type, sizeof(ShowCleanText_Params.Type), &Type, sizeof(Type));
	memcpy_s(&ShowCleanText_Params.Index, sizeof(ShowCleanText_Params.Index), &Index, sizeof(Index));
	memcpy_s(&ShowCleanText_Params.SortingType, sizeof(ShowCleanText_Params.SortingType), &SortingType, sizeof(SortingType));

	uFnShowCleanText->FunctionFlags &= ~0x400;
	UOLRecordingUtils::StaticClass()->ProcessEvent(uFnShowCleanText, &ShowCleanText_Params, nullptr);
	uFnShowCleanText->FunctionFlags |= 0x400;
};

// Function OLGame.OLRecordingUtils.CleanMemory
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLRecordingUtils::CleanMemory()
{
	static UFunction* uFnCleanMemory = nullptr;

	if (!uFnCleanMemory)
	{
		uFnCleanMemory = UFunction::FindFunction("Function OLGame.OLRecordingUtils.CleanMemory");
	}

	UOLRecordingUtils_execCleanMemory_Params CleanMemory_Params;
	memset(&CleanMemory_Params, 0, sizeof(CleanMemory_Params));

	uFnCleanMemory->FunctionFlags &= ~0x400;
	UOLRecordingUtils::StaticClass()->ProcessEvent(uFnCleanMemory, &CleanMemory_Params, nullptr);
	uFnCleanMemory->FunctionFlags |= 0x400;
};

// Function OLGame.OLRecordingUtils.ConditionalResetMovieOverrideDuration
// [0x00422400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        Type                           (CPF_Parm)
// int32_t                        Index                          (CPF_Parm)
// int32_t                        SortingType                    (CPF_Parm)
// TArray<class UTexture*>        Textures                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UOLRecordingUtils::ConditionalResetMovieOverrideDuration(uint8_t Type, int32_t Index, int32_t SortingType, TArray<class UTexture*>& Textures)
{
	static UFunction* uFnConditionalResetMovieOverrideDuration = nullptr;

	if (!uFnConditionalResetMovieOverrideDuration)
	{
		uFnConditionalResetMovieOverrideDuration = UFunction::FindFunction("Function OLGame.OLRecordingUtils.ConditionalResetMovieOverrideDuration");
	}

	UOLRecordingUtils_execConditionalResetMovieOverrideDuration_Params ConditionalResetMovieOverrideDuration_Params;
	memset(&ConditionalResetMovieOverrideDuration_Params, 0, sizeof(ConditionalResetMovieOverrideDuration_Params));
	memcpy_s(&ConditionalResetMovieOverrideDuration_Params.Type, sizeof(ConditionalResetMovieOverrideDuration_Params.Type), &Type, sizeof(Type));
	memcpy_s(&ConditionalResetMovieOverrideDuration_Params.Index, sizeof(ConditionalResetMovieOverrideDuration_Params.Index), &Index, sizeof(Index));
	memcpy_s(&ConditionalResetMovieOverrideDuration_Params.SortingType, sizeof(ConditionalResetMovieOverrideDuration_Params.SortingType), &SortingType, sizeof(SortingType));
	memcpy_s(&ConditionalResetMovieOverrideDuration_Params.Textures, sizeof(ConditionalResetMovieOverrideDuration_Params.Textures), &Textures, sizeof(Textures));

	uFnConditionalResetMovieOverrideDuration->FunctionFlags &= ~0x400;
	UOLRecordingUtils::StaticClass()->ProcessEvent(uFnConditionalResetMovieOverrideDuration, &ConditionalResetMovieOverrideDuration_Params, nullptr);
	uFnConditionalResetMovieOverrideDuration->FunctionFlags |= 0x400;

	memcpy_s(&Textures, sizeof(Textures), &ConditionalResetMovieOverrideDuration_Params.Textures, sizeof(ConditionalResetMovieOverrideDuration_Params.Textures));
};

// Function OLGame.OLRecordingUtils.HasMovieEnded
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLRecordingUtils::HasMovieEnded()
{
	static UFunction* uFnHasMovieEnded = nullptr;

	if (!uFnHasMovieEnded)
	{
		uFnHasMovieEnded = UFunction::FindFunction("Function OLGame.OLRecordingUtils.HasMovieEnded");
	}

	UOLRecordingUtils_execHasMovieEnded_Params HasMovieEnded_Params;
	memset(&HasMovieEnded_Params, 0, sizeof(HasMovieEnded_Params));

	uFnHasMovieEnded->FunctionFlags &= ~0x400;
	UOLRecordingUtils::StaticClass()->ProcessEvent(uFnHasMovieEnded, &HasMovieEnded_Params, nullptr);
	uFnHasMovieEnded->FunctionFlags |= 0x400;

	return HasMovieEnded_Params.ReturnValue;
};

// Function OLGame.OLRecordingUtils.StopMovieTexture
// [0x00422400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           bPause                         (CPF_Parm)
// class UAkEvent*                loopStop                       (CPF_Parm)
// TArray<class UTexture*>        Textures                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UOLRecordingUtils::StopMovieTexture(bool bPause, class UAkEvent* loopStop, TArray<class UTexture*>& Textures)
{
	static UFunction* uFnStopMovieTexture = nullptr;

	if (!uFnStopMovieTexture)
	{
		uFnStopMovieTexture = UFunction::FindFunction("Function OLGame.OLRecordingUtils.StopMovieTexture");
	}

	UOLRecordingUtils_execStopMovieTexture_Params StopMovieTexture_Params;
	memset(&StopMovieTexture_Params, 0, sizeof(StopMovieTexture_Params));
	StopMovieTexture_Params.bPause = bPause;
	memcpy_s(&StopMovieTexture_Params.loopStop, sizeof(StopMovieTexture_Params.loopStop), &loopStop, sizeof(loopStop));
	memcpy_s(&StopMovieTexture_Params.Textures, sizeof(StopMovieTexture_Params.Textures), &Textures, sizeof(Textures));

	uFnStopMovieTexture->FunctionFlags &= ~0x400;
	UOLRecordingUtils::StaticClass()->ProcessEvent(uFnStopMovieTexture, &StopMovieTexture_Params, nullptr);
	uFnStopMovieTexture->FunctionFlags |= 0x400;

	memcpy_s(&Textures, sizeof(Textures), &StopMovieTexture_Params.Textures, sizeof(StopMovieTexture_Params.Textures));
};

// Function OLGame.OLRecordingUtils.PlayMovieTexture
// [0x00422400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class UAkEvent*                LoopStart                      (CPF_Parm)
// TArray<class UTexture*>        Textures                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UOLRecordingUtils::PlayMovieTexture(class UAkEvent* LoopStart, TArray<class UTexture*>& Textures)
{
	static UFunction* uFnPlayMovieTexture = nullptr;

	if (!uFnPlayMovieTexture)
	{
		uFnPlayMovieTexture = UFunction::FindFunction("Function OLGame.OLRecordingUtils.PlayMovieTexture");
	}

	UOLRecordingUtils_execPlayMovieTexture_Params PlayMovieTexture_Params;
	memset(&PlayMovieTexture_Params, 0, sizeof(PlayMovieTexture_Params));
	memcpy_s(&PlayMovieTexture_Params.LoopStart, sizeof(PlayMovieTexture_Params.LoopStart), &LoopStart, sizeof(LoopStart));
	memcpy_s(&PlayMovieTexture_Params.Textures, sizeof(PlayMovieTexture_Params.Textures), &Textures, sizeof(Textures));

	uFnPlayMovieTexture->FunctionFlags &= ~0x400;
	UOLRecordingUtils::StaticClass()->ProcessEvent(uFnPlayMovieTexture, &PlayMovieTexture_Params, nullptr);
	uFnPlayMovieTexture->FunctionFlags |= 0x400;

	memcpy_s(&Textures, sizeof(Textures), &PlayMovieTexture_Params.Textures, sizeof(PlayMovieTexture_Params.Textures));
};

// Function OLGame.OLRecordingUtils.ResizeFullSizeImage
// [0x00422400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class UGFxMoviePlayer*         menu                           (CPF_Parm)
// uint8_t                        Type                           (CPF_Parm)
// int32_t                        Index                          (CPF_Parm)
// int32_t                        SortingType                    (CPF_Parm)
// TArray<class UTexture*>        Textures                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UOLRecordingUtils::ResizeFullSizeImage(class UGFxMoviePlayer* menu, uint8_t Type, int32_t Index, int32_t SortingType, TArray<class UTexture*>& Textures)
{
	static UFunction* uFnResizeFullSizeImage = nullptr;

	if (!uFnResizeFullSizeImage)
	{
		uFnResizeFullSizeImage = UFunction::FindFunction("Function OLGame.OLRecordingUtils.ResizeFullSizeImage");
	}

	UOLRecordingUtils_execResizeFullSizeImage_Params ResizeFullSizeImage_Params;
	memset(&ResizeFullSizeImage_Params, 0, sizeof(ResizeFullSizeImage_Params));
	memcpy_s(&ResizeFullSizeImage_Params.menu, sizeof(ResizeFullSizeImage_Params.menu), &menu, sizeof(menu));
	memcpy_s(&ResizeFullSizeImage_Params.Type, sizeof(ResizeFullSizeImage_Params.Type), &Type, sizeof(Type));
	memcpy_s(&ResizeFullSizeImage_Params.Index, sizeof(ResizeFullSizeImage_Params.Index), &Index, sizeof(Index));
	memcpy_s(&ResizeFullSizeImage_Params.SortingType, sizeof(ResizeFullSizeImage_Params.SortingType), &SortingType, sizeof(SortingType));
	memcpy_s(&ResizeFullSizeImage_Params.Textures, sizeof(ResizeFullSizeImage_Params.Textures), &Textures, sizeof(Textures));

	uFnResizeFullSizeImage->FunctionFlags &= ~0x400;
	UOLRecordingUtils::StaticClass()->ProcessEvent(uFnResizeFullSizeImage, &ResizeFullSizeImage_Params, nullptr);
	uFnResizeFullSizeImage->FunctionFlags |= 0x400;

	memcpy_s(&Textures, sizeof(Textures), &ResizeFullSizeImage_Params.Textures, sizeof(ResizeFullSizeImage_Params.Textures));
};

// Function OLGame.OLRecordingUtils.PlayMovieVO
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UAkEvent*                VO                             (CPF_Parm)

void UOLRecordingUtils::PlayMovieVO(class UAkEvent* VO)
{
	static UFunction* uFnPlayMovieVO = nullptr;

	if (!uFnPlayMovieVO)
	{
		uFnPlayMovieVO = UFunction::FindFunction("Function OLGame.OLRecordingUtils.PlayMovieVO");
	}

	UOLRecordingUtils_execPlayMovieVO_Params PlayMovieVO_Params;
	memset(&PlayMovieVO_Params, 0, sizeof(PlayMovieVO_Params));
	memcpy_s(&PlayMovieVO_Params.VO, sizeof(PlayMovieVO_Params.VO), &VO, sizeof(VO));

	uFnPlayMovieVO->FunctionFlags &= ~0x400;
	UOLRecordingUtils::StaticClass()->ProcessEvent(uFnPlayMovieVO, &PlayMovieVO_Params, nullptr);
	uFnPlayMovieVO->FunctionFlags |= 0x400;
};

// Function OLGame.OLRecordingUtils.StopMovieVO
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UAkEvent*                VO                             (CPF_Parm)

void UOLRecordingUtils::StopMovieVO(class UAkEvent* VO)
{
	static UFunction* uFnStopMovieVO = nullptr;

	if (!uFnStopMovieVO)
	{
		uFnStopMovieVO = UFunction::FindFunction("Function OLGame.OLRecordingUtils.StopMovieVO");
	}

	UOLRecordingUtils_execStopMovieVO_Params StopMovieVO_Params;
	memset(&StopMovieVO_Params, 0, sizeof(StopMovieVO_Params));
	memcpy_s(&StopMovieVO_Params.VO, sizeof(StopMovieVO_Params.VO), &VO, sizeof(VO));

	uFnStopMovieVO->FunctionFlags &= ~0x400;
	UOLRecordingUtils::StaticClass()->ProcessEvent(uFnStopMovieVO, &StopMovieVO_Params, nullptr);
	uFnStopMovieVO->FunctionFlags |= 0x400;
};

// Function OLGame.OLRecordingUtils.LoadMovieLoopStop
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UAkEvent*                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        Type                           (CPF_Parm)
// int32_t                        Index                          (CPF_Parm)
// int32_t                        SortingType                    (CPF_Parm)

class UAkEvent* UOLRecordingUtils::LoadMovieLoopStop(uint8_t Type, int32_t Index, int32_t SortingType)
{
	static UFunction* uFnLoadMovieLoopStop = nullptr;

	if (!uFnLoadMovieLoopStop)
	{
		uFnLoadMovieLoopStop = UFunction::FindFunction("Function OLGame.OLRecordingUtils.LoadMovieLoopStop");
	}

	UOLRecordingUtils_execLoadMovieLoopStop_Params LoadMovieLoopStop_Params;
	memset(&LoadMovieLoopStop_Params, 0, sizeof(LoadMovieLoopStop_Params));
	memcpy_s(&LoadMovieLoopStop_Params.Type, sizeof(LoadMovieLoopStop_Params.Type), &Type, sizeof(Type));
	memcpy_s(&LoadMovieLoopStop_Params.Index, sizeof(LoadMovieLoopStop_Params.Index), &Index, sizeof(Index));
	memcpy_s(&LoadMovieLoopStop_Params.SortingType, sizeof(LoadMovieLoopStop_Params.SortingType), &SortingType, sizeof(SortingType));

	uFnLoadMovieLoopStop->FunctionFlags &= ~0x400;
	UOLRecordingUtils::StaticClass()->ProcessEvent(uFnLoadMovieLoopStop, &LoadMovieLoopStop_Params, nullptr);
	uFnLoadMovieLoopStop->FunctionFlags |= 0x400;

	return LoadMovieLoopStop_Params.ReturnValue;
};

// Function OLGame.OLRecordingUtils.LoadMovieLoopStart
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UAkEvent*                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        Type                           (CPF_Parm)
// int32_t                        Index                          (CPF_Parm)
// int32_t                        SortingType                    (CPF_Parm)

class UAkEvent* UOLRecordingUtils::LoadMovieLoopStart(uint8_t Type, int32_t Index, int32_t SortingType)
{
	static UFunction* uFnLoadMovieLoopStart = nullptr;

	if (!uFnLoadMovieLoopStart)
	{
		uFnLoadMovieLoopStart = UFunction::FindFunction("Function OLGame.OLRecordingUtils.LoadMovieLoopStart");
	}

	UOLRecordingUtils_execLoadMovieLoopStart_Params LoadMovieLoopStart_Params;
	memset(&LoadMovieLoopStart_Params, 0, sizeof(LoadMovieLoopStart_Params));
	memcpy_s(&LoadMovieLoopStart_Params.Type, sizeof(LoadMovieLoopStart_Params.Type), &Type, sizeof(Type));
	memcpy_s(&LoadMovieLoopStart_Params.Index, sizeof(LoadMovieLoopStart_Params.Index), &Index, sizeof(Index));
	memcpy_s(&LoadMovieLoopStart_Params.SortingType, sizeof(LoadMovieLoopStart_Params.SortingType), &SortingType, sizeof(SortingType));

	uFnLoadMovieLoopStart->FunctionFlags &= ~0x400;
	UOLRecordingUtils::StaticClass()->ProcessEvent(uFnLoadMovieLoopStart, &LoadMovieLoopStart_Params, nullptr);
	uFnLoadMovieLoopStart->FunctionFlags |= 0x400;

	return LoadMovieLoopStart_Params.ReturnValue;
};

// Function OLGame.OLRecordingUtils.LoadMovieVO
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UAkEvent*                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        Type                           (CPF_Parm)
// int32_t                        Index                          (CPF_Parm)
// int32_t                        SortingType                    (CPF_Parm)

class UAkEvent* UOLRecordingUtils::LoadMovieVO(uint8_t Type, int32_t Index, int32_t SortingType)
{
	static UFunction* uFnLoadMovieVO = nullptr;

	if (!uFnLoadMovieVO)
	{
		uFnLoadMovieVO = UFunction::FindFunction("Function OLGame.OLRecordingUtils.LoadMovieVO");
	}

	UOLRecordingUtils_execLoadMovieVO_Params LoadMovieVO_Params;
	memset(&LoadMovieVO_Params, 0, sizeof(LoadMovieVO_Params));
	memcpy_s(&LoadMovieVO_Params.Type, sizeof(LoadMovieVO_Params.Type), &Type, sizeof(Type));
	memcpy_s(&LoadMovieVO_Params.Index, sizeof(LoadMovieVO_Params.Index), &Index, sizeof(Index));
	memcpy_s(&LoadMovieVO_Params.SortingType, sizeof(LoadMovieVO_Params.SortingType), &SortingType, sizeof(SortingType));

	uFnLoadMovieVO->FunctionFlags &= ~0x400;
	UOLRecordingUtils::StaticClass()->ProcessEvent(uFnLoadMovieVO, &LoadMovieVO_Params, nullptr);
	uFnLoadMovieVO->FunctionFlags |= 0x400;

	return LoadMovieVO_Params.ReturnValue;
};

// Function OLGame.OLRecordingUtils.GetFullSizeRecordingTexture
// [0x00422400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class UTexture*                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        Type                           (CPF_Parm)
// int32_t                        Index                          (CPF_Parm)
// int32_t                        SortingType                    (CPF_Parm)
// TArray<class UTexture*>        Textures                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

class UTexture* UOLRecordingUtils::GetFullSizeRecordingTexture(uint8_t Type, int32_t Index, int32_t SortingType, TArray<class UTexture*>& Textures)
{
	static UFunction* uFnGetFullSizeRecordingTexture = nullptr;

	if (!uFnGetFullSizeRecordingTexture)
	{
		uFnGetFullSizeRecordingTexture = UFunction::FindFunction("Function OLGame.OLRecordingUtils.GetFullSizeRecordingTexture");
	}

	UOLRecordingUtils_execGetFullSizeRecordingTexture_Params GetFullSizeRecordingTexture_Params;
	memset(&GetFullSizeRecordingTexture_Params, 0, sizeof(GetFullSizeRecordingTexture_Params));
	memcpy_s(&GetFullSizeRecordingTexture_Params.Type, sizeof(GetFullSizeRecordingTexture_Params.Type), &Type, sizeof(Type));
	memcpy_s(&GetFullSizeRecordingTexture_Params.Index, sizeof(GetFullSizeRecordingTexture_Params.Index), &Index, sizeof(Index));
	memcpy_s(&GetFullSizeRecordingTexture_Params.SortingType, sizeof(GetFullSizeRecordingTexture_Params.SortingType), &SortingType, sizeof(SortingType));
	memcpy_s(&GetFullSizeRecordingTexture_Params.Textures, sizeof(GetFullSizeRecordingTexture_Params.Textures), &Textures, sizeof(Textures));

	uFnGetFullSizeRecordingTexture->FunctionFlags &= ~0x400;
	UOLRecordingUtils::StaticClass()->ProcessEvent(uFnGetFullSizeRecordingTexture, &GetFullSizeRecordingTexture_Params, nullptr);
	uFnGetFullSizeRecordingTexture->FunctionFlags |= 0x400;

	memcpy_s(&Textures, sizeof(Textures), &GetFullSizeRecordingTexture_Params.Textures, sizeof(GetFullSizeRecordingTexture_Params.Textures));

	return GetFullSizeRecordingTexture_Params.ReturnValue;
};

// Function OLGame.OLRecordingUtils.GetRecordingTexture
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UTexture*                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        Type                           (CPF_Parm)
// int32_t                        Index                          (CPF_Parm)
// int32_t                        SortingType                    (CPF_Parm)

class UTexture* UOLRecordingUtils::GetRecordingTexture(uint8_t Type, int32_t Index, int32_t SortingType)
{
	static UFunction* uFnGetRecordingTexture = nullptr;

	if (!uFnGetRecordingTexture)
	{
		uFnGetRecordingTexture = UFunction::FindFunction("Function OLGame.OLRecordingUtils.GetRecordingTexture");
	}

	UOLRecordingUtils_execGetRecordingTexture_Params GetRecordingTexture_Params;
	memset(&GetRecordingTexture_Params, 0, sizeof(GetRecordingTexture_Params));
	memcpy_s(&GetRecordingTexture_Params.Type, sizeof(GetRecordingTexture_Params.Type), &Type, sizeof(Type));
	memcpy_s(&GetRecordingTexture_Params.Index, sizeof(GetRecordingTexture_Params.Index), &Index, sizeof(Index));
	memcpy_s(&GetRecordingTexture_Params.SortingType, sizeof(GetRecordingTexture_Params.SortingType), &SortingType, sizeof(SortingType));

	uFnGetRecordingTexture->FunctionFlags &= ~0x400;
	UOLRecordingUtils::StaticClass()->ProcessEvent(uFnGetRecordingTexture, &GetRecordingTexture_Params, nullptr);
	uFnGetRecordingTexture->FunctionFlags |= 0x400;

	return GetRecordingTexture_Params.ReturnValue;
};

// Function OLGame.OLRecordingUtils.GetCategoryTexture
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UTexture*                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        Type                           (CPF_Parm)
// int32_t                        SortingType                    (CPF_Parm)

class UTexture* UOLRecordingUtils::GetCategoryTexture(uint8_t Type, int32_t SortingType)
{
	static UFunction* uFnGetCategoryTexture = nullptr;

	if (!uFnGetCategoryTexture)
	{
		uFnGetCategoryTexture = UFunction::FindFunction("Function OLGame.OLRecordingUtils.GetCategoryTexture");
	}

	UOLRecordingUtils_execGetCategoryTexture_Params GetCategoryTexture_Params;
	memset(&GetCategoryTexture_Params, 0, sizeof(GetCategoryTexture_Params));
	memcpy_s(&GetCategoryTexture_Params.Type, sizeof(GetCategoryTexture_Params.Type), &Type, sizeof(Type));
	memcpy_s(&GetCategoryTexture_Params.SortingType, sizeof(GetCategoryTexture_Params.SortingType), &SortingType, sizeof(SortingType));

	uFnGetCategoryTexture->FunctionFlags &= ~0x400;
	UOLRecordingUtils::StaticClass()->ProcessEvent(uFnGetCategoryTexture, &GetCategoryTexture_Params, nullptr);
	uFnGetCategoryTexture->FunctionFlags |= 0x400;

	return GetCategoryTexture_Params.ReturnValue;
};

// Function OLGame.OLRecordingUtils.GetRecordings
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// TArray<class FString>          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// uint8_t                        Type                           (CPF_Parm)
// int32_t                        Section                        (CPF_Parm)

TArray<class FString> UOLRecordingUtils::GetRecordings(uint8_t Type, int32_t Section)
{
	static UFunction* uFnGetRecordings = nullptr;

	if (!uFnGetRecordings)
	{
		uFnGetRecordings = UFunction::FindFunction("Function OLGame.OLRecordingUtils.GetRecordings");
	}

	UOLRecordingUtils_execGetRecordings_Params GetRecordings_Params;
	memset(&GetRecordings_Params, 0, sizeof(GetRecordings_Params));
	memcpy_s(&GetRecordings_Params.Type, sizeof(GetRecordings_Params.Type), &Type, sizeof(Type));
	memcpy_s(&GetRecordings_Params.Section, sizeof(GetRecordings_Params.Section), &Section, sizeof(Section));

	uFnGetRecordings->FunctionFlags &= ~0x400;
	UOLRecordingUtils::StaticClass()->ProcessEvent(uFnGetRecordings, &GetRecordings_Params, nullptr);
	uFnGetRecordings->FunctionFlags |= 0x400;

	return GetRecordings_Params.ReturnValue;
};

// Function OLGame.OLRecordingUtils.GetRecordingSections
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// TArray<class FString>          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// uint8_t                        Type                           (CPF_Parm)

TArray<class FString> UOLRecordingUtils::GetRecordingSections(uint8_t Type)
{
	static UFunction* uFnGetRecordingSections = nullptr;

	if (!uFnGetRecordingSections)
	{
		uFnGetRecordingSections = UFunction::FindFunction("Function OLGame.OLRecordingUtils.GetRecordingSections");
	}

	UOLRecordingUtils_execGetRecordingSections_Params GetRecordingSections_Params;
	memset(&GetRecordingSections_Params, 0, sizeof(GetRecordingSections_Params));
	memcpy_s(&GetRecordingSections_Params.Type, sizeof(GetRecordingSections_Params.Type), &Type, sizeof(Type));

	uFnGetRecordingSections->FunctionFlags &= ~0x400;
	UOLRecordingUtils::StaticClass()->ProcessEvent(uFnGetRecordingSections, &GetRecordingSections_Params, nullptr);
	uFnGetRecordingSections->FunctionFlags |= 0x400;

	return GetRecordingSections_Params.ReturnValue;
};

// Function OLGame.OLRecordingUtils.GetPathName
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class UObject*                 Obj                            (CPF_Parm)

class FString UOLRecordingUtils::GetPathName(class UObject* Obj)
{
	static UFunction* uFnGetPathName = nullptr;

	if (!uFnGetPathName)
	{
		uFnGetPathName = UFunction::FindFunction("Function OLGame.OLRecordingUtils.GetPathName");
	}

	UOLRecordingUtils_execGetPathName_Params GetPathName_Params;
	memset(&GetPathName_Params, 0, sizeof(GetPathName_Params));
	memcpy_s(&GetPathName_Params.Obj, sizeof(GetPathName_Params.Obj), &Obj, sizeof(Obj));

	uFnGetPathName->FunctionFlags &= ~0x400;
	UOLRecordingUtils::StaticClass()->ProcessEvent(uFnGetPathName, &GetPathName_Params, nullptr);
	uFnGetPathName->FunctionFlags |= 0x400;

	return GetPathName_Params.ReturnValue;
};

// Function OLGame.OLRecordingUtils.HasRecordings
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLRecordingUtils::HasRecordings()
{
	static UFunction* uFnHasRecordings = nullptr;

	if (!uFnHasRecordings)
	{
		uFnHasRecordings = UFunction::FindFunction("Function OLGame.OLRecordingUtils.HasRecordings");
	}

	UOLRecordingUtils_execHasRecordings_Params HasRecordings_Params;
	memset(&HasRecordings_Params, 0, sizeof(HasRecordings_Params));

	uFnHasRecordings->FunctionFlags &= ~0x400;
	UOLRecordingUtils::StaticClass()->ProcessEvent(uFnHasRecordings, &HasRecordings_Params, nullptr);
	uFnHasRecordings->FunctionFlags |= 0x400;

	return HasRecordings_Params.ReturnValue;
};

// Function OLGame.OLRecordingUtils.IsVideoRecording
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint8_t                        Type                           (CPF_Parm)
// int32_t                        Index                          (CPF_Parm)
// int32_t                        SortingType                    (CPF_Parm)

bool UOLRecordingUtils::IsVideoRecording(uint8_t Type, int32_t Index, int32_t SortingType)
{
	static UFunction* uFnIsVideoRecording = nullptr;

	if (!uFnIsVideoRecording)
	{
		uFnIsVideoRecording = UFunction::FindFunction("Function OLGame.OLRecordingUtils.IsVideoRecording");
	}

	UOLRecordingUtils_execIsVideoRecording_Params IsVideoRecording_Params;
	memset(&IsVideoRecording_Params, 0, sizeof(IsVideoRecording_Params));
	memcpy_s(&IsVideoRecording_Params.Type, sizeof(IsVideoRecording_Params.Type), &Type, sizeof(Type));
	memcpy_s(&IsVideoRecording_Params.Index, sizeof(IsVideoRecording_Params.Index), &Index, sizeof(Index));
	memcpy_s(&IsVideoRecording_Params.SortingType, sizeof(IsVideoRecording_Params.SortingType), &SortingType, sizeof(SortingType));

	uFnIsVideoRecording->FunctionFlags &= ~0x400;
	UOLRecordingUtils::StaticClass()->ProcessEvent(uFnIsVideoRecording, &IsVideoRecording_Params, nullptr);
	uFnIsVideoRecording->FunctionFlags |= 0x400;

	return IsVideoRecording_Params.ReturnValue;
};

// Function OLGame.OLSeqAct_Checkpoint.Activated
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLSeqAct_Checkpoint::eventActivated()
{
	static UFunction* uFnActivated = nullptr;

	if (!uFnActivated)
	{
		uFnActivated = UFunction::FindFunction("Function OLGame.OLSeqAct_Checkpoint.Activated");
	}

	UOLSeqAct_Checkpoint_eventActivated_Params Activated_Params;
	memset(&Activated_Params, 0, sizeof(Activated_Params));

	this->ProcessEvent(uFnActivated, &Activated_Params, nullptr);
};

// Function OLGame.OLSoundConnector.OnToggle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AOLSoundConnector::OnToggle(class USeqAct_Toggle* Action)
{
	static UFunction* uFnOnToggle = nullptr;

	if (!uFnOnToggle)
	{
		uFnOnToggle = UFunction::FindFunction("Function OLGame.OLSoundConnector.OnToggle");
	}

	AOLSoundConnector_execOnToggle_Params OnToggle_Params;
	memset(&OnToggle_Params, 0, sizeof(OnToggle_Params));
	memcpy_s(&OnToggle_Params.Action, sizeof(OnToggle_Params.Action), &Action, sizeof(Action));

	this->ProcessEvent(uFnOnToggle, &OnToggle_Params, nullptr);
};

// Function OLGame.OLSoundEnvironmentManager.GetSoundEnvManager
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLSoundEnvironmentManager* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UOLSoundEnvironmentManager* UOLSoundEnvironmentManager::GetSoundEnvManager()
{
	static UFunction* uFnGetSoundEnvManager = nullptr;

	if (!uFnGetSoundEnvManager)
	{
		uFnGetSoundEnvManager = UFunction::FindFunction("Function OLGame.OLSoundEnvironmentManager.GetSoundEnvManager");
	}

	UOLSoundEnvironmentManager_execGetSoundEnvManager_Params GetSoundEnvManager_Params;
	memset(&GetSoundEnvManager_Params, 0, sizeof(GetSoundEnvManager_Params));

	uFnGetSoundEnvManager->FunctionFlags &= ~0x400;
	UOLSoundEnvironmentManager::StaticClass()->ProcessEvent(uFnGetSoundEnvManager, &GetSoundEnvManager_Params, nullptr);
	uFnGetSoundEnvManager->FunctionFlags |= 0x400;

	return GetSoundEnvManager_Params.ReturnValue;
};

// Function OLGame.OLSoundEnvironmentManager.Cleanup
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLSoundEnvironmentManager::Cleanup()
{
	static UFunction* uFnCleanup = nullptr;

	if (!uFnCleanup)
	{
		uFnCleanup = UFunction::FindFunction("Function OLGame.OLSoundEnvironmentManager.Cleanup");
	}

	UOLSoundEnvironmentManager_execCleanup_Params Cleanup_Params;
	memset(&Cleanup_Params, 0, sizeof(Cleanup_Params));

	uFnCleanup->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCleanup, &Cleanup_Params, nullptr);
	uFnCleanup->FunctionFlags |= 0x400;
};

// Function OLGame.OLSoundEnvironmentVolume.PostBeginPlay
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLSoundEnvironmentVolume::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function OLGame.OLSoundEnvironmentVolume.PostBeginPlay");
	}

	AOLSoundEnvironmentVolume_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function OLGame.OLTutorialManager.SetTutorialsEnabled
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bEnabled                       (CPF_Parm)

void UOLTutorialManager::SetTutorialsEnabled(bool bEnabled)
{
	static UFunction* uFnSetTutorialsEnabled = nullptr;

	if (!uFnSetTutorialsEnabled)
	{
		uFnSetTutorialsEnabled = UFunction::FindFunction("Function OLGame.OLTutorialManager.SetTutorialsEnabled");
	}

	UOLTutorialManager_execSetTutorialsEnabled_Params SetTutorialsEnabled_Params;
	memset(&SetTutorialsEnabled_Params, 0, sizeof(SetTutorialsEnabled_Params));
	SetTutorialsEnabled_Params.bEnabled = bEnabled;

	uFnSetTutorialsEnabled->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetTutorialsEnabled, &SetTutorialsEnabled_Params, nullptr);
	uFnSetTutorialsEnabled->FunctionFlags |= 0x400;
};

// Function OLGame.OLTutorialManager.Clear
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLTutorialManager::Clear()
{
	static UFunction* uFnClear = nullptr;

	if (!uFnClear)
	{
		uFnClear = UFunction::FindFunction("Function OLGame.OLTutorialManager.Clear");
	}

	UOLTutorialManager_execClear_Params Clear_Params;
	memset(&Clear_Params, 0, sizeof(Clear_Params));

	uFnClear->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClear, &Clear_Params, nullptr);
	uFnClear->FunctionFlags |= 0x400;
};

// Function OLGame.OLUtils.TriggerSoundEvent
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UAkEvent*                SoundEvent                     (CPF_Parm)

void UOLUtils::TriggerSoundEvent(class UAkEvent* SoundEvent)
{
	static UFunction* uFnTriggerSoundEvent = nullptr;

	if (!uFnTriggerSoundEvent)
	{
		uFnTriggerSoundEvent = UFunction::FindFunction("Function OLGame.OLUtils.TriggerSoundEvent");
	}

	UOLUtils_execTriggerSoundEvent_Params TriggerSoundEvent_Params;
	memset(&TriggerSoundEvent_Params, 0, sizeof(TriggerSoundEvent_Params));
	memcpy_s(&TriggerSoundEvent_Params.SoundEvent, sizeof(TriggerSoundEvent_Params.SoundEvent), &SoundEvent, sizeof(SoundEvent));

	uFnTriggerSoundEvent->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnTriggerSoundEvent, &TriggerSoundEvent_Params, nullptr);
	uFnTriggerSoundEvent->FunctionFlags |= 0x400;
};

// Function OLGame.OLUtils.ShouldSubtitlesBeHigh
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUtils::ShouldSubtitlesBeHigh()
{
	static UFunction* uFnShouldSubtitlesBeHigh = nullptr;

	if (!uFnShouldSubtitlesBeHigh)
	{
		uFnShouldSubtitlesBeHigh = UFunction::FindFunction("Function OLGame.OLUtils.ShouldSubtitlesBeHigh");
	}

	UOLUtils_execShouldSubtitlesBeHigh_Params ShouldSubtitlesBeHigh_Params;
	memset(&ShouldSubtitlesBeHigh_Params, 0, sizeof(ShouldSubtitlesBeHigh_Params));

	uFnShouldSubtitlesBeHigh->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnShouldSubtitlesBeHigh, &ShouldSubtitlesBeHigh_Params, nullptr);
	uFnShouldSubtitlesBeHigh->FunctionFlags |= 0x400;

	return ShouldSubtitlesBeHigh_Params.ReturnValue;
};

// Function OLGame.OLUtils.IsKeyBoundToCommand
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   Key                            (CPF_Parm)
// class FString                  Command                        (CPF_Parm | CPF_NeedCtorLink)

bool UOLUtils::IsKeyBoundToCommand(struct FName Key, class FString Command)
{
	static UFunction* uFnIsKeyBoundToCommand = nullptr;

	if (!uFnIsKeyBoundToCommand)
	{
		uFnIsKeyBoundToCommand = UFunction::FindFunction("Function OLGame.OLUtils.IsKeyBoundToCommand");
	}

	UOLUtils_execIsKeyBoundToCommand_Params IsKeyBoundToCommand_Params;
	memset(&IsKeyBoundToCommand_Params, 0, sizeof(IsKeyBoundToCommand_Params));
	memcpy_s(&IsKeyBoundToCommand_Params.Key, sizeof(IsKeyBoundToCommand_Params.Key), &Key, sizeof(Key));
	memcpy_s(&IsKeyBoundToCommand_Params.Command, sizeof(IsKeyBoundToCommand_Params.Command), &Command, sizeof(Command));

	uFnIsKeyBoundToCommand->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnIsKeyBoundToCommand, &IsKeyBoundToCommand_Params, nullptr);
	uFnIsKeyBoundToCommand->FunctionFlags |= 0x400;

	return IsKeyBoundToCommand_Params.ReturnValue;
};

// Function OLGame.OLUtils.HasValidMovie
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UGFxObject*              GFxObject                      (CPF_Parm)

bool UOLUtils::HasValidMovie(class UGFxObject* GFxObject)
{
	static UFunction* uFnHasValidMovie = nullptr;

	if (!uFnHasValidMovie)
	{
		uFnHasValidMovie = UFunction::FindFunction("Function OLGame.OLUtils.HasValidMovie");
	}

	UOLUtils_execHasValidMovie_Params HasValidMovie_Params;
	memset(&HasValidMovie_Params, 0, sizeof(HasValidMovie_Params));
	memcpy_s(&HasValidMovie_Params.GFxObject, sizeof(HasValidMovie_Params.GFxObject), &GFxObject, sizeof(GFxObject));

	uFnHasValidMovie->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnHasValidMovie, &HasValidMovie_Params, nullptr);
	uFnHasValidMovie->FunctionFlags |= 0x400;

	return HasValidMovie_Params.ReturnValue;
};

// Function OLGame.OLUtils.ElapsedRealTime
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          Time                           (CPF_Parm)

float UOLUtils::ElapsedRealTime(float Time)
{
	static UFunction* uFnElapsedRealTime = nullptr;

	if (!uFnElapsedRealTime)
	{
		uFnElapsedRealTime = UFunction::FindFunction("Function OLGame.OLUtils.ElapsedRealTime");
	}

	UOLUtils_execElapsedRealTime_Params ElapsedRealTime_Params;
	memset(&ElapsedRealTime_Params, 0, sizeof(ElapsedRealTime_Params));
	memcpy_s(&ElapsedRealTime_Params.Time, sizeof(ElapsedRealTime_Params.Time), &Time, sizeof(Time));

	uFnElapsedRealTime->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnElapsedRealTime, &ElapsedRealTime_Params, nullptr);
	uFnElapsedRealTime->FunctionFlags |= 0x400;

	return ElapsedRealTime_Params.ReturnValue;
};

// Function OLGame.OLUtils.ElapsedTime
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          Time                           (CPF_Parm)

float UOLUtils::ElapsedTime(float Time)
{
	static UFunction* uFnElapsedTime = nullptr;

	if (!uFnElapsedTime)
	{
		uFnElapsedTime = UFunction::FindFunction("Function OLGame.OLUtils.ElapsedTime");
	}

	UOLUtils_execElapsedTime_Params ElapsedTime_Params;
	memset(&ElapsedTime_Params, 0, sizeof(ElapsedTime_Params));
	memcpy_s(&ElapsedTime_Params.Time, sizeof(ElapsedTime_Params.Time), &Time, sizeof(Time));

	uFnElapsedTime->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnElapsedTime, &ElapsedTime_Params, nullptr);
	uFnElapsedTime->FunctionFlags |= 0x400;

	return ElapsedTime_Params.ReturnValue;
};

// Function OLGame.OLUtils.GetRealTimeSeconds
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float UOLUtils::GetRealTimeSeconds()
{
	static UFunction* uFnGetRealTimeSeconds = nullptr;

	if (!uFnGetRealTimeSeconds)
	{
		uFnGetRealTimeSeconds = UFunction::FindFunction("Function OLGame.OLUtils.GetRealTimeSeconds");
	}

	UOLUtils_execGetRealTimeSeconds_Params GetRealTimeSeconds_Params;
	memset(&GetRealTimeSeconds_Params, 0, sizeof(GetRealTimeSeconds_Params));

	uFnGetRealTimeSeconds->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnGetRealTimeSeconds, &GetRealTimeSeconds_Params, nullptr);
	uFnGetRealTimeSeconds->FunctionFlags |= 0x400;

	return GetRealTimeSeconds_Params.ReturnValue;
};

// Function OLGame.OLUtils.GetWorldTimeSeconds
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float UOLUtils::GetWorldTimeSeconds()
{
	static UFunction* uFnGetWorldTimeSeconds = nullptr;

	if (!uFnGetWorldTimeSeconds)
	{
		uFnGetWorldTimeSeconds = UFunction::FindFunction("Function OLGame.OLUtils.GetWorldTimeSeconds");
	}

	UOLUtils_execGetWorldTimeSeconds_Params GetWorldTimeSeconds_Params;
	memset(&GetWorldTimeSeconds_Params, 0, sizeof(GetWorldTimeSeconds_Params));

	uFnGetWorldTimeSeconds->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnGetWorldTimeSeconds, &GetWorldTimeSeconds_Params, nullptr);
	uFnGetWorldTimeSeconds->FunctionFlags |= 0x400;

	return GetWorldTimeSeconds_Params.ReturnValue;
};

// Function OLGame.OLUtils.LoadTexture
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UTexture2D*              ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  Path                           (CPF_Parm | CPF_NeedCtorLink)
// class UObject*                 Owner                          (CPF_Parm)

class UTexture2D* UOLUtils::LoadTexture(class FString Path, class UObject* Owner)
{
	static UFunction* uFnLoadTexture = nullptr;

	if (!uFnLoadTexture)
	{
		uFnLoadTexture = UFunction::FindFunction("Function OLGame.OLUtils.LoadTexture");
	}

	UOLUtils_execLoadTexture_Params LoadTexture_Params;
	memset(&LoadTexture_Params, 0, sizeof(LoadTexture_Params));
	memcpy_s(&LoadTexture_Params.Path, sizeof(LoadTexture_Params.Path), &Path, sizeof(Path));
	memcpy_s(&LoadTexture_Params.Owner, sizeof(LoadTexture_Params.Owner), &Owner, sizeof(Owner));

	uFnLoadTexture->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnLoadTexture, &LoadTexture_Params, nullptr);
	uFnLoadTexture->FunctionFlags |= 0x400;

	return LoadTexture_Params.ReturnValue;
};

// Function OLGame.OLUtils.GetChapterIndex
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   CheckpointName                 (CPF_Parm)

int32_t UOLUtils::GetChapterIndex(struct FName CheckpointName)
{
	static UFunction* uFnGetChapterIndex = nullptr;

	if (!uFnGetChapterIndex)
	{
		uFnGetChapterIndex = UFunction::FindFunction("Function OLGame.OLUtils.GetChapterIndex");
	}

	UOLUtils_execGetChapterIndex_Params GetChapterIndex_Params;
	memset(&GetChapterIndex_Params, 0, sizeof(GetChapterIndex_Params));
	memcpy_s(&GetChapterIndex_Params.CheckpointName, sizeof(GetChapterIndex_Params.CheckpointName), &CheckpointName, sizeof(CheckpointName));

	uFnGetChapterIndex->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnGetChapterIndex, &GetChapterIndex_Params, nullptr);
	uFnGetChapterIndex->FunctionFlags |= 0x400;

	return GetChapterIndex_Params.ReturnValue;
};

// Function OLGame.OLUtils.GetChapterName
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// struct FName                   CheckpointName                 (CPF_Parm)

class FString UOLUtils::GetChapterName(struct FName CheckpointName)
{
	static UFunction* uFnGetChapterName = nullptr;

	if (!uFnGetChapterName)
	{
		uFnGetChapterName = UFunction::FindFunction("Function OLGame.OLUtils.GetChapterName");
	}

	UOLUtils_execGetChapterName_Params GetChapterName_Params;
	memset(&GetChapterName_Params, 0, sizeof(GetChapterName_Params));
	memcpy_s(&GetChapterName_Params.CheckpointName, sizeof(GetChapterName_Params.CheckpointName), &CheckpointName, sizeof(CheckpointName));

	uFnGetChapterName->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnGetChapterName, &GetChapterName_Params, nullptr);
	uFnGetChapterName->FunctionFlags |= 0x400;

	return GetChapterName_Params.ReturnValue;
};

// Function OLGame.OLUtils.GetCheckpointName
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// int32_t                        Index                          (CPF_Parm)

class FString UOLUtils::GetCheckpointName(int32_t Index)
{
	static UFunction* uFnGetCheckpointName = nullptr;

	if (!uFnGetCheckpointName)
	{
		uFnGetCheckpointName = UFunction::FindFunction("Function OLGame.OLUtils.GetCheckpointName");
	}

	UOLUtils_execGetCheckpointName_Params GetCheckpointName_Params;
	memset(&GetCheckpointName_Params, 0, sizeof(GetCheckpointName_Params));
	memcpy_s(&GetCheckpointName_Params.Index, sizeof(GetCheckpointName_Params.Index), &Index, sizeof(Index));

	uFnGetCheckpointName->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnGetCheckpointName, &GetCheckpointName_Params, nullptr);
	uFnGetCheckpointName->FunctionFlags |= 0x400;

	return GetCheckpointName_Params.ReturnValue;
};

// Function OLGame.OLUtils.GetCheckpointIndexFromString
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  CheckpointName                 (CPF_Parm | CPF_NeedCtorLink)

int32_t UOLUtils::GetCheckpointIndexFromString(class FString CheckpointName)
{
	static UFunction* uFnGetCheckpointIndexFromString = nullptr;

	if (!uFnGetCheckpointIndexFromString)
	{
		uFnGetCheckpointIndexFromString = UFunction::FindFunction("Function OLGame.OLUtils.GetCheckpointIndexFromString");
	}

	UOLUtils_execGetCheckpointIndexFromString_Params GetCheckpointIndexFromString_Params;
	memset(&GetCheckpointIndexFromString_Params, 0, sizeof(GetCheckpointIndexFromString_Params));
	memcpy_s(&GetCheckpointIndexFromString_Params.CheckpointName, sizeof(GetCheckpointIndexFromString_Params.CheckpointName), &CheckpointName, sizeof(CheckpointName));

	uFnGetCheckpointIndexFromString->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnGetCheckpointIndexFromString, &GetCheckpointIndexFromString_Params, nullptr);
	uFnGetCheckpointIndexFromString->FunctionFlags |= 0x400;

	return GetCheckpointIndexFromString_Params.ReturnValue;
};

// Function OLGame.OLUtils.GetCheckpointIndex
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   CheckpointName                 (CPF_Parm)

int32_t UOLUtils::GetCheckpointIndex(struct FName CheckpointName)
{
	static UFunction* uFnGetCheckpointIndex = nullptr;

	if (!uFnGetCheckpointIndex)
	{
		uFnGetCheckpointIndex = UFunction::FindFunction("Function OLGame.OLUtils.GetCheckpointIndex");
	}

	UOLUtils_execGetCheckpointIndex_Params GetCheckpointIndex_Params;
	memset(&GetCheckpointIndex_Params, 0, sizeof(GetCheckpointIndex_Params));
	memcpy_s(&GetCheckpointIndex_Params.CheckpointName, sizeof(GetCheckpointIndex_Params.CheckpointName), &CheckpointName, sizeof(CheckpointName));

	uFnGetCheckpointIndex->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnGetCheckpointIndex, &GetCheckpointIndex_Params, nullptr);
	uFnGetCheckpointIndex->FunctionFlags |= 0x400;

	return GetCheckpointIndex_Params.ReturnValue;
};

// Function OLGame.OLUtils.GetOrbisEngine
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLOrbisEngine*          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UOLOrbisEngine* UOLUtils::GetOrbisEngine()
{
	static UFunction* uFnGetOrbisEngine = nullptr;

	if (!uFnGetOrbisEngine)
	{
		uFnGetOrbisEngine = UFunction::FindFunction("Function OLGame.OLUtils.GetOrbisEngine");
	}

	UOLUtils_execGetOrbisEngine_Params GetOrbisEngine_Params;
	memset(&GetOrbisEngine_Params, 0, sizeof(GetOrbisEngine_Params));

	uFnGetOrbisEngine->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnGetOrbisEngine, &GetOrbisEngine_Params, nullptr);
	uFnGetOrbisEngine->FunctionFlags |= 0x400;

	return GetOrbisEngine_Params.ReturnValue;
};

// Function OLGame.OLUtils.GetDingoEngine
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLDingoEngine*          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UOLDingoEngine* UOLUtils::GetDingoEngine()
{
	static UFunction* uFnGetDingoEngine = nullptr;

	if (!uFnGetDingoEngine)
	{
		uFnGetDingoEngine = UFunction::FindFunction("Function OLGame.OLUtils.GetDingoEngine");
	}

	UOLUtils_execGetDingoEngine_Params GetDingoEngine_Params;
	memset(&GetDingoEngine_Params, 0, sizeof(GetDingoEngine_Params));

	uFnGetDingoEngine->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnGetDingoEngine, &GetDingoEngine_Params, nullptr);
	uFnGetDingoEngine->FunctionFlags |= 0x400;

	return GetDingoEngine_Params.ReturnValue;
};

// Function OLGame.OLUtils.GetWinEngine
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLWinEngine*            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UOLWinEngine* UOLUtils::GetWinEngine()
{
	static UFunction* uFnGetWinEngine = nullptr;

	if (!uFnGetWinEngine)
	{
		uFnGetWinEngine = UFunction::FindFunction("Function OLGame.OLUtils.GetWinEngine");
	}

	UOLUtils_execGetWinEngine_Params GetWinEngine_Params;
	memset(&GetWinEngine_Params, 0, sizeof(GetWinEngine_Params));

	uFnGetWinEngine->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnGetWinEngine, &GetWinEngine_Params, nullptr);
	uFnGetWinEngine->FunctionFlags |= 0x400;

	return GetWinEngine_Params.ReturnValue;
};

// Function OLGame.OLUtils.GetOLEngine
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLEngine*               ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UOLEngine* UOLUtils::GetOLEngine()
{
	static UFunction* uFnGetOLEngine = nullptr;

	if (!uFnGetOLEngine)
	{
		uFnGetOLEngine = UFunction::FindFunction("Function OLGame.OLUtils.GetOLEngine");
	}

	UOLUtils_execGetOLEngine_Params GetOLEngine_Params;
	memset(&GetOLEngine_Params, 0, sizeof(GetOLEngine_Params));

	uFnGetOLEngine->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnGetOLEngine, &GetOLEngine_Params, nullptr);
	uFnGetOLEngine->FunctionFlags |= 0x400;

	return GetOLEngine_Params.ReturnValue;
};

// Function OLGame.OLUtils.GetOLGame
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AOLGame*                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class AOLGame* UOLUtils::GetOLGame()
{
	static UFunction* uFnGetOLGame = nullptr;

	if (!uFnGetOLGame)
	{
		uFnGetOLGame = UFunction::FindFunction("Function OLGame.OLUtils.GetOLGame");
	}

	UOLUtils_execGetOLGame_Params GetOLGame_Params;
	memset(&GetOLGame_Params, 0, sizeof(GetOLGame_Params));

	uFnGetOLGame->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnGetOLGame, &GetOLGame_Params, nullptr);
	uFnGetOLGame->FunctionFlags |= 0x400;

	return GetOLGame_Params.ReturnValue;
};

// Function OLGame.OLUtils.GetOLWorld
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLWorld*                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UOLWorld* UOLUtils::GetOLWorld()
{
	static UFunction* uFnGetOLWorld = nullptr;

	if (!uFnGetOLWorld)
	{
		uFnGetOLWorld = UFunction::FindFunction("Function OLGame.OLUtils.GetOLWorld");
	}

	UOLUtils_execGetOLWorld_Params GetOLWorld_Params;
	memset(&GetOLWorld_Params, 0, sizeof(GetOLWorld_Params));

	uFnGetOLWorld->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnGetOLWorld, &GetOLWorld_Params, nullptr);
	uFnGetOLWorld->FunctionFlags |= 0x400;

	return GetOLWorld_Params.ReturnValue;
};

// Function OLGame.OLUtils.GetDifficultyConfig
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLDifficultyConfig*     ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UOLDifficultyConfig* UOLUtils::GetDifficultyConfig()
{
	static UFunction* uFnGetDifficultyConfig = nullptr;

	if (!uFnGetDifficultyConfig)
	{
		uFnGetDifficultyConfig = UFunction::FindFunction("Function OLGame.OLUtils.GetDifficultyConfig");
	}

	UOLUtils_execGetDifficultyConfig_Params GetDifficultyConfig_Params;
	memset(&GetDifficultyConfig_Params, 0, sizeof(GetDifficultyConfig_Params));

	uFnGetDifficultyConfig->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnGetDifficultyConfig, &GetDifficultyConfig_Params, nullptr);
	uFnGetDifficultyConfig->FunctionFlags |= 0x400;

	return GetDifficultyConfig_Params.ReturnValue;
};

// Function OLGame.OLUtils.GetAICoordinator
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLAICoordinator*        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UOLAICoordinator* UOLUtils::GetAICoordinator()
{
	static UFunction* uFnGetAICoordinator = nullptr;

	if (!uFnGetAICoordinator)
	{
		uFnGetAICoordinator = UFunction::FindFunction("Function OLGame.OLUtils.GetAICoordinator");
	}

	UOLUtils_execGetAICoordinator_Params GetAICoordinator_Params;
	memset(&GetAICoordinator_Params, 0, sizeof(GetAICoordinator_Params));

	uFnGetAICoordinator->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnGetAICoordinator, &GetAICoordinator_Params, nullptr);
	uFnGetAICoordinator->FunctionFlags |= 0x400;

	return GetAICoordinator_Params.ReturnValue;
};

// Function OLGame.OLUtils.GetHero
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AOLHero*                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class AOLHero* UOLUtils::GetHero()
{
	static UFunction* uFnGetHero = nullptr;

	if (!uFnGetHero)
	{
		uFnGetHero = UFunction::FindFunction("Function OLGame.OLUtils.GetHero");
	}

	UOLUtils_execGetHero_Params GetHero_Params;
	memset(&GetHero_Params, 0, sizeof(GetHero_Params));

	uFnGetHero->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnGetHero, &GetHero_Params, nullptr);
	uFnGetHero->FunctionFlags |= 0x400;

	return GetHero_Params.ReturnValue;
};

// Function OLGame.OLUtils.GetOLPC
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AOLPlayerController*     ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class AOLPlayerController* UOLUtils::GetOLPC()
{
	static UFunction* uFnGetOLPC = nullptr;

	if (!uFnGetOLPC)
	{
		uFnGetOLPC = UFunction::FindFunction("Function OLGame.OLUtils.GetOLPC");
	}

	UOLUtils_execGetOLPC_Params GetOLPC_Params;
	memset(&GetOLPC_Params, 0, sizeof(GetOLPC_Params));

	uFnGetOLPC->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnGetOLPC, &GetOLPC_Params, nullptr);
	uFnGetOLPC->FunctionFlags |= 0x400;

	return GetOLPC_Params.ReturnValue;
};

// Function OLGame.OLUtils.IsBindableKey
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   ButtonName                     (CPF_Parm)

bool UOLUtils::IsBindableKey(struct FName ButtonName)
{
	static UFunction* uFnIsBindableKey = nullptr;

	if (!uFnIsBindableKey)
	{
		uFnIsBindableKey = UFunction::FindFunction("Function OLGame.OLUtils.IsBindableKey");
	}

	UOLUtils_execIsBindableKey_Params IsBindableKey_Params;
	memset(&IsBindableKey_Params, 0, sizeof(IsBindableKey_Params));
	memcpy_s(&IsBindableKey_Params.ButtonName, sizeof(IsBindableKey_Params.ButtonName), &ButtonName, sizeof(ButtonName));

	uFnIsBindableKey->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnIsBindableKey, &IsBindableKey_Params, nullptr);
	uFnIsBindableKey->FunctionFlags |= 0x400;

	return IsBindableKey_Params.ReturnValue;
};

// Function OLGame.OLUtils.IsInMainMenu
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUtils::IsInMainMenu()
{
	static UFunction* uFnIsInMainMenu = nullptr;

	if (!uFnIsInMainMenu)
	{
		uFnIsInMainMenu = UFunction::FindFunction("Function OLGame.OLUtils.IsInMainMenu");
	}

	UOLUtils_execIsInMainMenu_Params IsInMainMenu_Params;
	memset(&IsInMainMenu_Params, 0, sizeof(IsInMainMenu_Params));

	uFnIsInMainMenu->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnIsInMainMenu, &IsInMainMenu_Params, nullptr);
	uFnIsInMainMenu->FunctionFlags |= 0x400;

	return IsInMainMenu_Params.ReturnValue;
};

// Function OLGame.OLUtils.IsPlayingDLC
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUtils::IsPlayingDLC()
{
	static UFunction* uFnIsPlayingDLC = nullptr;

	if (!uFnIsPlayingDLC)
	{
		uFnIsPlayingDLC = UFunction::FindFunction("Function OLGame.OLUtils.IsPlayingDLC");
	}

	UOLUtils_execIsPlayingDLC_Params IsPlayingDLC_Params;
	memset(&IsPlayingDLC_Params, 0, sizeof(IsPlayingDLC_Params));

	uFnIsPlayingDLC->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnIsPlayingDLC, &IsPlayingDLC_Params, nullptr);
	uFnIsPlayingDLC->FunctionFlags |= 0x400;

	return IsPlayingDLC_Params.ReturnValue;
};

// Function OLGame.OLUtils.IsDLCInstalled
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUtils::IsDLCInstalled()
{
	static UFunction* uFnIsDLCInstalled = nullptr;

	if (!uFnIsDLCInstalled)
	{
		uFnIsDLCInstalled = UFunction::FindFunction("Function OLGame.OLUtils.IsDLCInstalled");
	}

	UOLUtils_execIsDLCInstalled_Params IsDLCInstalled_Params;
	memset(&IsDLCInstalled_Params, 0, sizeof(IsDLCInstalled_Params));

	uFnIsDLCInstalled->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnIsDLCInstalled, &IsDLCInstalled_Params, nullptr);
	uFnIsDLCInstalled->FunctionFlags |= 0x400;

	return IsDLCInstalled_Params.ReturnValue;
};

// Function OLGame.OLUtils.IsDingoController
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUtils::IsDingoController()
{
	static UFunction* uFnIsDingoController = nullptr;

	if (!uFnIsDingoController)
	{
		uFnIsDingoController = UFunction::FindFunction("Function OLGame.OLUtils.IsDingoController");
	}

	UOLUtils_execIsDingoController_Params IsDingoController_Params;
	memset(&IsDingoController_Params, 0, sizeof(IsDingoController_Params));

	uFnIsDingoController->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnIsDingoController, &IsDingoController_Params, nullptr);
	uFnIsDingoController->FunctionFlags |= 0x400;

	return IsDingoController_Params.ReturnValue;
};

// Function OLGame.OLUtils.IsPS4Controller
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUtils::IsPS4Controller()
{
	static UFunction* uFnIsPS4Controller = nullptr;

	if (!uFnIsPS4Controller)
	{
		uFnIsPS4Controller = UFunction::FindFunction("Function OLGame.OLUtils.IsPS4Controller");
	}

	UOLUtils_execIsPS4Controller_Params IsPS4Controller_Params;
	memset(&IsPS4Controller_Params, 0, sizeof(IsPS4Controller_Params));

	uFnIsPS4Controller->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnIsPS4Controller, &IsPS4Controller_Params, nullptr);
	uFnIsPS4Controller->FunctionFlags |= 0x400;

	return IsPS4Controller_Params.ReturnValue;
};

// Function OLGame.OLUtils.IsUsingGamepad
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUtils::IsUsingGamepad()
{
	static UFunction* uFnIsUsingGamepad = nullptr;

	if (!uFnIsUsingGamepad)
	{
		uFnIsUsingGamepad = UFunction::FindFunction("Function OLGame.OLUtils.IsUsingGamepad");
	}

	UOLUtils_execIsUsingGamepad_Params IsUsingGamepad_Params;
	memset(&IsUsingGamepad_Params, 0, sizeof(IsUsingGamepad_Params));

	uFnIsUsingGamepad->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnIsUsingGamepad, &IsUsingGamepad_Params, nullptr);
	uFnIsUsingGamepad->FunctionFlags |= 0x400;

	return IsUsingGamepad_Params.ReturnValue;
};

// Function OLGame.OLUtils.IsConsole
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUtils::IsConsole()
{
	static UFunction* uFnIsConsole = nullptr;

	if (!uFnIsConsole)
	{
		uFnIsConsole = UFunction::FindFunction("Function OLGame.OLUtils.IsConsole");
	}

	UOLUtils_execIsConsole_Params IsConsole_Params;
	memset(&IsConsole_Params, 0, sizeof(IsConsole_Params));

	uFnIsConsole->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnIsConsole, &IsConsole_Params, nullptr);
	uFnIsConsole->FunctionFlags |= 0x400;

	return IsConsole_Params.ReturnValue;
};

// Function OLGame.OLUtils.IsDingo
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUtils::IsDingo()
{
	static UFunction* uFnIsDingo = nullptr;

	if (!uFnIsDingo)
	{
		uFnIsDingo = UFunction::FindFunction("Function OLGame.OLUtils.IsDingo");
	}

	UOLUtils_execIsDingo_Params IsDingo_Params;
	memset(&IsDingo_Params, 0, sizeof(IsDingo_Params));

	uFnIsDingo->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnIsDingo, &IsDingo_Params, nullptr);
	uFnIsDingo->FunctionFlags |= 0x400;

	return IsDingo_Params.ReturnValue;
};

// Function OLGame.OLUtils.IsPS4
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUtils::IsPS4()
{
	static UFunction* uFnIsPS4 = nullptr;

	if (!uFnIsPS4)
	{
		uFnIsPS4 = UFunction::FindFunction("Function OLGame.OLUtils.IsPS4");
	}

	UOLUtils_execIsPS4_Params IsPS4_Params;
	memset(&IsPS4_Params, 0, sizeof(IsPS4_Params));

	uFnIsPS4->FunctionFlags &= ~0x400;
	UOLUtils::StaticClass()->ProcessEvent(uFnIsPS4, &IsPS4_Params, nullptr);
	uFnIsPS4->FunctionFlags |= 0x400;

	return IsPS4_Params.ReturnValue;
};

// Function OLGame.OLWardrobe.TriggerEvent
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EWardrobeDoorEventType         EventType                      (CPF_Parm)
// class AOLPawn*                 Triggerer                      (CPF_Parm)

void AOLWardrobe::TriggerEvent(EWardrobeDoorEventType EventType, class AOLPawn* Triggerer)
{
	static UFunction* uFnTriggerEvent = nullptr;

	if (!uFnTriggerEvent)
	{
		uFnTriggerEvent = UFunction::FindFunction("Function OLGame.OLWardrobe.TriggerEvent");
	}

	AOLWardrobe_execTriggerEvent_Params TriggerEvent_Params;
	memset(&TriggerEvent_Params, 0, sizeof(TriggerEvent_Params));
	memcpy_s(&TriggerEvent_Params.EventType, sizeof(TriggerEvent_Params.EventType), &EventType, sizeof(EventType));
	memcpy_s(&TriggerEvent_Params.Triggerer, sizeof(TriggerEvent_Params.Triggerer), &Triggerer, sizeof(Triggerer));

	uFnTriggerEvent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTriggerEvent, &TriggerEvent_Params, nullptr);
	uFnTriggerEvent->FunctionFlags |= 0x400;
};

// Function OLGame.OLWindow.OnDestroy
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USeqAct_Destroy*         Action                         (CPF_Parm)

void AOLWindow::OnDestroy(class USeqAct_Destroy* Action)
{
	static UFunction* uFnOnDestroy = nullptr;

	if (!uFnOnDestroy)
	{
		uFnOnDestroy = UFunction::FindFunction("Function OLGame.OLWindow.OnDestroy");
	}

	AOLWindow_execOnDestroy_Params OnDestroy_Params;
	memset(&OnDestroy_Params, 0, sizeof(OnDestroy_Params));
	memcpy_s(&OnDestroy_Params.Action, sizeof(OnDestroy_Params.Action), &Action, sizeof(Action));

	this->ProcessEvent(uFnOnDestroy, &OnDestroy_Params, nullptr);
};

// Function OLGame.OLWindow.SoftDestroy
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLWindow::SoftDestroy()
{
	static UFunction* uFnSoftDestroy = nullptr;

	if (!uFnSoftDestroy)
	{
		uFnSoftDestroy = UFunction::FindFunction("Function OLGame.OLWindow.SoftDestroy");
	}

	AOLWindow_execSoftDestroy_Params SoftDestroy_Params;
	memset(&SoftDestroy_Params, 0, sizeof(SoftDestroy_Params));

	uFnSoftDestroy->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSoftDestroy, &SoftDestroy_Params, nullptr);
	uFnSoftDestroy->FunctionFlags |= 0x400;
};

// Function OLGame.OLWindow.ScriptOpenWindow
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AOLPawn*                 Triggerer                      (CPF_Parm)

void AOLWindow::ScriptOpenWindow(class AOLPawn* Triggerer)
{
	static UFunction* uFnScriptOpenWindow = nullptr;

	if (!uFnScriptOpenWindow)
	{
		uFnScriptOpenWindow = UFunction::FindFunction("Function OLGame.OLWindow.ScriptOpenWindow");
	}

	AOLWindow_execScriptOpenWindow_Params ScriptOpenWindow_Params;
	memset(&ScriptOpenWindow_Params, 0, sizeof(ScriptOpenWindow_Params));
	memcpy_s(&ScriptOpenWindow_Params.Triggerer, sizeof(ScriptOpenWindow_Params.Triggerer), &Triggerer, sizeof(Triggerer));

	uFnScriptOpenWindow->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnScriptOpenWindow, &ScriptOpenWindow_Params, nullptr);
	uFnScriptOpenWindow->FunctionFlags |= 0x400;
};

// Function OLGame.OLWindow.ScriptBreakWindow
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AOLPawn*                 Triggerer                      (CPF_Parm)

void AOLWindow::ScriptBreakWindow(class AOLPawn* Triggerer)
{
	static UFunction* uFnScriptBreakWindow = nullptr;

	if (!uFnScriptBreakWindow)
	{
		uFnScriptBreakWindow = UFunction::FindFunction("Function OLGame.OLWindow.ScriptBreakWindow");
	}

	AOLWindow_execScriptBreakWindow_Params ScriptBreakWindow_Params;
	memset(&ScriptBreakWindow_Params, 0, sizeof(ScriptBreakWindow_Params));
	memcpy_s(&ScriptBreakWindow_Params.Triggerer, sizeof(ScriptBreakWindow_Params.Triggerer), &Triggerer, sizeof(Triggerer));

	uFnScriptBreakWindow->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnScriptBreakWindow, &ScriptBreakWindow_Params, nullptr);
	uFnScriptBreakWindow->FunctionFlags |= 0x400;
};

// Function OLGame.OLBot.DisplayDebug
// [0x00420102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm | CPF_OutParm)
// float                          out_YPos                       (CPF_Parm | CPF_OutParm)

void AOLBot::DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos)
{
	static UFunction* uFnDisplayDebug = nullptr;

	if (!uFnDisplayDebug)
	{
		uFnDisplayDebug = UFunction::FindFunction("Function OLGame.OLBot.DisplayDebug");
	}

	AOLBot_execDisplayDebug_Params DisplayDebug_Params;
	memset(&DisplayDebug_Params, 0, sizeof(DisplayDebug_Params));
	memcpy_s(&DisplayDebug_Params.HUD, sizeof(DisplayDebug_Params.HUD), &HUD, sizeof(HUD));
	memcpy_s(&DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL), &out_YL, sizeof(out_YL));
	memcpy_s(&DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos), &out_YPos, sizeof(out_YPos));

	this->ProcessEvent(uFnDisplayDebug, &DisplayDebug_Params, nullptr);

	memcpy_s(&out_YL, sizeof(out_YL), &DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL));
	memcpy_s(&out_YPos, sizeof(out_YPos), &DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos));
};

// Function OLGame.OLBot.NativeDisplayDebug
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class UCanvas*                 aCanvas                        (CPF_Parm)
// float                          out_YL                         (CPF_Parm | CPF_OutParm)
// float                          out_YPos                       (CPF_Parm | CPF_OutParm)

void AOLBot::NativeDisplayDebug(class UCanvas* aCanvas, float& out_YL, float& out_YPos)
{
	static UFunction* uFnNativeDisplayDebug = nullptr;

	if (!uFnNativeDisplayDebug)
	{
		uFnNativeDisplayDebug = UFunction::FindFunction("Function OLGame.OLBot.NativeDisplayDebug");
	}

	AOLBot_execNativeDisplayDebug_Params NativeDisplayDebug_Params;
	memset(&NativeDisplayDebug_Params, 0, sizeof(NativeDisplayDebug_Params));
	memcpy_s(&NativeDisplayDebug_Params.aCanvas, sizeof(NativeDisplayDebug_Params.aCanvas), &aCanvas, sizeof(aCanvas));
	memcpy_s(&NativeDisplayDebug_Params.out_YL, sizeof(NativeDisplayDebug_Params.out_YL), &out_YL, sizeof(out_YL));
	memcpy_s(&NativeDisplayDebug_Params.out_YPos, sizeof(NativeDisplayDebug_Params.out_YPos), &out_YPos, sizeof(out_YPos));

	uFnNativeDisplayDebug->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeDisplayDebug, &NativeDisplayDebug_Params, nullptr);
	uFnNativeDisplayDebug->FunctionFlags |= 0x400;

	memcpy_s(&out_YL, sizeof(out_YL), &NativeDisplayDebug_Params.out_YL, sizeof(NativeDisplayDebug_Params.out_YL));
	memcpy_s(&out_YPos, sizeof(out_YPos), &NativeDisplayDebug_Params.out_YPos, sizeof(NativeDisplayDebug_Params.out_YPos));
};

// Function OLGame.OLBot.ShouldLogToConsole
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLBot::ShouldLogToConsole()
{
	static UFunction* uFnShouldLogToConsole = nullptr;

	if (!uFnShouldLogToConsole)
	{
		uFnShouldLogToConsole = UFunction::FindFunction("Function OLGame.OLBot.ShouldLogToConsole");
	}

	AOLBot_execShouldLogToConsole_Params ShouldLogToConsole_Params;
	memset(&ShouldLogToConsole_Params, 0, sizeof(ShouldLogToConsole_Params));

	uFnShouldLogToConsole->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnShouldLogToConsole, &ShouldLogToConsole_Params, nullptr);
	uFnShouldLogToConsole->FunctionFlags |= 0x400;

	return ShouldLogToConsole_Params.ReturnValue;
};

// Function OLGame.OLBot.AILog_Internal
// [0x00024800] (FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  LogText                        (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)
// struct FName                   LogCategory                    (CPF_OptionalParm | CPF_Parm)
// bool                           bForce                         (CPF_OptionalParm | CPF_Parm)

void AOLBot::eventAILog_Internal(class FString LogText, struct FName LogCategory, bool bForce)
{
	static UFunction* uFnAILog_Internal = nullptr;

	if (!uFnAILog_Internal)
	{
		uFnAILog_Internal = UFunction::FindFunction("Function OLGame.OLBot.AILog_Internal");
	}

	AOLBot_eventAILog_Internal_Params AILog_Internal_Params;
	memset(&AILog_Internal_Params, 0, sizeof(AILog_Internal_Params));
	memcpy_s(&AILog_Internal_Params.LogText, sizeof(AILog_Internal_Params.LogText), &LogText, sizeof(LogText));
	memcpy_s(&AILog_Internal_Params.LogCategory, sizeof(AILog_Internal_Params.LogCategory), &LogCategory, sizeof(LogCategory));
	AILog_Internal_Params.bForce = bForce;

	this->ProcessEvent(uFnAILog_Internal, &AILog_Internal_Params, nullptr);
};

// Function OLGame.OLBot.DebugMessagePlayer
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  msg                            (CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink)

void AOLBot::eventDebugMessagePlayer(class FString msg)
{
	static UFunction* uFnDebugMessagePlayer = nullptr;

	if (!uFnDebugMessagePlayer)
	{
		uFnDebugMessagePlayer = UFunction::FindFunction("Function OLGame.OLBot.DebugMessagePlayer");
	}

	AOLBot_eventDebugMessagePlayer_Params DebugMessagePlayer_Params;
	memset(&DebugMessagePlayer_Params, 0, sizeof(DebugMessagePlayer_Params));
	memcpy_s(&DebugMessagePlayer_Params.msg, sizeof(DebugMessagePlayer_Params.msg), &msg, sizeof(msg));

	this->ProcessEvent(uFnDebugMessagePlayer, &DebugMessagePlayer_Params, nullptr);
};

// Function OLGame.OLBot.ToggleAIAlwaysSeePlayer
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bEnable                        (CPF_Parm)

void AOLBot::ToggleAIAlwaysSeePlayer(bool bEnable)
{
	static UFunction* uFnToggleAIAlwaysSeePlayer = nullptr;

	if (!uFnToggleAIAlwaysSeePlayer)
	{
		uFnToggleAIAlwaysSeePlayer = UFunction::FindFunction("Function OLGame.OLBot.ToggleAIAlwaysSeePlayer");
	}

	AOLBot_execToggleAIAlwaysSeePlayer_Params ToggleAIAlwaysSeePlayer_Params;
	memset(&ToggleAIAlwaysSeePlayer_Params, 0, sizeof(ToggleAIAlwaysSeePlayer_Params));
	ToggleAIAlwaysSeePlayer_Params.bEnable = bEnable;

	this->ProcessEvent(uFnToggleAIAlwaysSeePlayer, &ToggleAIAlwaysSeePlayer_Params, nullptr);
};

// Function OLGame.OLBot.OnToggleAIAlwaysSeePlayer
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLSeqAct_ToggleAIAlwaysSeePlayer* Action                         (CPF_Parm)

void AOLBot::OnToggleAIAlwaysSeePlayer(class UOLSeqAct_ToggleAIAlwaysSeePlayer* Action)
{
	static UFunction* uFnOnToggleAIAlwaysSeePlayer = nullptr;

	if (!uFnOnToggleAIAlwaysSeePlayer)
	{
		uFnOnToggleAIAlwaysSeePlayer = UFunction::FindFunction("Function OLGame.OLBot.OnToggleAIAlwaysSeePlayer");
	}

	AOLBot_execOnToggleAIAlwaysSeePlayer_Params OnToggleAIAlwaysSeePlayer_Params;
	memset(&OnToggleAIAlwaysSeePlayer_Params, 0, sizeof(OnToggleAIAlwaysSeePlayer_Params));
	memcpy_s(&OnToggleAIAlwaysSeePlayer_Params.Action, sizeof(OnToggleAIAlwaysSeePlayer_Params.Action), &Action, sizeof(Action));

	this->ProcessEvent(uFnOnToggleAIAlwaysSeePlayer, &OnToggleAIAlwaysSeePlayer_Params, nullptr);
};

// Function OLGame.OLBot.IgnoreTarget
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          Time                           (CPF_Parm)

void AOLBot::eventIgnoreTarget(float Time)
{
	static UFunction* uFnIgnoreTarget = nullptr;

	if (!uFnIgnoreTarget)
	{
		uFnIgnoreTarget = UFunction::FindFunction("Function OLGame.OLBot.IgnoreTarget");
	}

	AOLBot_eventIgnoreTarget_Params IgnoreTarget_Params;
	memset(&IgnoreTarget_Params, 0, sizeof(IgnoreTarget_Params));
	memcpy_s(&IgnoreTarget_Params.Time, sizeof(IgnoreTarget_Params.Time), &Time, sizeof(Time));

	this->ProcessEvent(uFnIgnoreTarget, &IgnoreTarget_Params, nullptr);
};

// Function OLGame.OLBot.ToggleAIIgnorePlayer
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bEnable                        (CPF_Parm)

void AOLBot::eventToggleAIIgnorePlayer(bool bEnable)
{
	static UFunction* uFnToggleAIIgnorePlayer = nullptr;

	if (!uFnToggleAIIgnorePlayer)
	{
		uFnToggleAIIgnorePlayer = UFunction::FindFunction("Function OLGame.OLBot.ToggleAIIgnorePlayer");
	}

	AOLBot_eventToggleAIIgnorePlayer_Params ToggleAIIgnorePlayer_Params;
	memset(&ToggleAIIgnorePlayer_Params, 0, sizeof(ToggleAIIgnorePlayer_Params));
	ToggleAIIgnorePlayer_Params.bEnable = bEnable;

	this->ProcessEvent(uFnToggleAIIgnorePlayer, &ToggleAIIgnorePlayer_Params, nullptr);
};

// Function OLGame.OLBot.OnToggleAIIgnorePlayer
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLSeqAct_ToggleAIIgnorePlayer* Action                         (CPF_Parm)

void AOLBot::OnToggleAIIgnorePlayer(class UOLSeqAct_ToggleAIIgnorePlayer* Action)
{
	static UFunction* uFnOnToggleAIIgnorePlayer = nullptr;

	if (!uFnOnToggleAIIgnorePlayer)
	{
		uFnOnToggleAIIgnorePlayer = UFunction::FindFunction("Function OLGame.OLBot.OnToggleAIIgnorePlayer");
	}

	AOLBot_execOnToggleAIIgnorePlayer_Params OnToggleAIIgnorePlayer_Params;
	memset(&OnToggleAIIgnorePlayer_Params, 0, sizeof(OnToggleAIIgnorePlayer_Params));
	memcpy_s(&OnToggleAIIgnorePlayer_Params.Action, sizeof(OnToggleAIIgnorePlayer_Params.Action), &Action, sizeof(Action));

	this->ProcessEvent(uFnOnToggleAIIgnorePlayer, &OnToggleAIIgnorePlayer_Params, nullptr);
};

// Function OLGame.OLBot.StartWaitForDoor
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::eventStartWaitForDoor()
{
	static UFunction* uFnStartWaitForDoor = nullptr;

	if (!uFnStartWaitForDoor)
	{
		uFnStartWaitForDoor = UFunction::FindFunction("Function OLGame.OLBot.StartWaitForDoor");
	}

	AOLBot_eventStartWaitForDoor_Params StartWaitForDoor_Params;
	memset(&StartWaitForDoor_Params, 0, sizeof(StartWaitForDoor_Params));

	this->ProcessEvent(uFnStartWaitForDoor, &StartWaitForDoor_Params, nullptr);
};

// Function OLGame.OLBot.TargetReachable
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLBot::TargetReachable()
{
	static UFunction* uFnTargetReachable = nullptr;

	if (!uFnTargetReachable)
	{
		uFnTargetReachable = UFunction::FindFunction("Function OLGame.OLBot.TargetReachable");
	}

	AOLBot_execTargetReachable_Params TargetReachable_Params;
	memset(&TargetReachable_Params, 0, sizeof(TargetReachable_Params));

	this->ProcessEvent(uFnTargetReachable, &TargetReachable_Params, nullptr);

	return TargetReachable_Params.ReturnValue;
};

// Function OLGame.OLBot.StartDynamicMove
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FMovementData           aData                          (CPF_Parm)

void AOLBot::eventStartDynamicMove(struct FMovementData aData)
{
	static UFunction* uFnStartDynamicMove = nullptr;

	if (!uFnStartDynamicMove)
	{
		uFnStartDynamicMove = UFunction::FindFunction("Function OLGame.OLBot.StartDynamicMove");
	}

	AOLBot_eventStartDynamicMove_Params StartDynamicMove_Params;
	memset(&StartDynamicMove_Params, 0, sizeof(StartDynamicMove_Params));
	memcpy_s(&StartDynamicMove_Params.aData, sizeof(StartDynamicMove_Params.aData), &aData, sizeof(aData));

	this->ProcessEvent(uFnStartDynamicMove, &StartDynamicMove_Params, nullptr);
};

// Function OLGame.OLBot.StartMove
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FMovementData           aData                          (CPF_Parm)

bool AOLBot::eventStartMove(struct FMovementData aData)
{
	static UFunction* uFnStartMove = nullptr;

	if (!uFnStartMove)
	{
		uFnStartMove = UFunction::FindFunction("Function OLGame.OLBot.StartMove");
	}

	AOLBot_eventStartMove_Params StartMove_Params;
	memset(&StartMove_Params, 0, sizeof(StartMove_Params));
	memcpy_s(&StartMove_Params.aData, sizeof(StartMove_Params.aData), &aData, sizeof(aData));

	this->ProcessEvent(uFnStartMove, &StartMove_Params, nullptr);

	return StartMove_Params.ReturnValue;
};

// Function OLGame.OLBot.NotifyBump
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  Other                          (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)

bool AOLBot::eventNotifyBump(class AActor* Other, struct FVector HitNormal)
{
	static UFunction* uFnNotifyBump = nullptr;

	if (!uFnNotifyBump)
	{
		uFnNotifyBump = UFunction::FindFunction("Function OLGame.OLBot.NotifyBump");
	}

	AOLBot_eventNotifyBump_Params NotifyBump_Params;
	memset(&NotifyBump_Params, 0, sizeof(NotifyBump_Params));
	memcpy_s(&NotifyBump_Params.Other, sizeof(NotifyBump_Params.Other), &Other, sizeof(Other));
	memcpy_s(&NotifyBump_Params.HitNormal, sizeof(NotifyBump_Params.HitNormal), &HitNormal, sizeof(HitNormal));

	this->ProcessEvent(uFnNotifyBump, &NotifyBump_Params, nullptr);

	return NotifyBump_Params.ReturnValue;
};

// Function OLGame.OLBot.NotifyPathChanged
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::eventNotifyPathChanged()
{
	static UFunction* uFnNotifyPathChanged = nullptr;

	if (!uFnNotifyPathChanged)
	{
		uFnNotifyPathChanged = UFunction::FindFunction("Function OLGame.OLBot.NotifyPathChanged");
	}

	AOLBot_eventNotifyPathChanged_Params NotifyPathChanged_Params;
	memset(&NotifyPathChanged_Params, 0, sizeof(NotifyPathChanged_Params));

	this->ProcessEvent(uFnNotifyPathChanged, &NotifyPathChanged_Params, nullptr);
};

// Function OLGame.OLBot.GeneratePathWithMaxDist
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 Goal                           (CPF_Parm)
// float                          WithinDistance                 (CPF_Parm)
// float                          MaxPathDistance                (CPF_Parm)

bool AOLBot::eventGeneratePathWithMaxDist(struct FVector Goal, float WithinDistance, float MaxPathDistance)
{
	static UFunction* uFnGeneratePathWithMaxDist = nullptr;

	if (!uFnGeneratePathWithMaxDist)
	{
		uFnGeneratePathWithMaxDist = UFunction::FindFunction("Function OLGame.OLBot.GeneratePathWithMaxDist");
	}

	AOLBot_eventGeneratePathWithMaxDist_Params GeneratePathWithMaxDist_Params;
	memset(&GeneratePathWithMaxDist_Params, 0, sizeof(GeneratePathWithMaxDist_Params));
	memcpy_s(&GeneratePathWithMaxDist_Params.Goal, sizeof(GeneratePathWithMaxDist_Params.Goal), &Goal, sizeof(Goal));
	memcpy_s(&GeneratePathWithMaxDist_Params.WithinDistance, sizeof(GeneratePathWithMaxDist_Params.WithinDistance), &WithinDistance, sizeof(WithinDistance));
	memcpy_s(&GeneratePathWithMaxDist_Params.MaxPathDistance, sizeof(GeneratePathWithMaxDist_Params.MaxPathDistance), &MaxPathDistance, sizeof(MaxPathDistance));

	this->ProcessEvent(uFnGeneratePathWithMaxDist, &GeneratePathWithMaxDist_Params, nullptr);

	return GeneratePathWithMaxDist_Params.ReturnValue;
};

// Function OLGame.OLBot.GeneratePathToLocation
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 Goal                           (CPF_Parm)
// float                          WithinDistance                 (CPF_OptionalParm | CPF_Parm)
// bool                           bAllowPartialPath              (CPF_OptionalParm | CPF_Parm)

bool AOLBot::eventGeneratePathToLocation(struct FVector Goal, float WithinDistance, bool bAllowPartialPath)
{
	static UFunction* uFnGeneratePathToLocation = nullptr;

	if (!uFnGeneratePathToLocation)
	{
		uFnGeneratePathToLocation = UFunction::FindFunction("Function OLGame.OLBot.GeneratePathToLocation");
	}

	AOLBot_eventGeneratePathToLocation_Params GeneratePathToLocation_Params;
	memset(&GeneratePathToLocation_Params, 0, sizeof(GeneratePathToLocation_Params));
	memcpy_s(&GeneratePathToLocation_Params.Goal, sizeof(GeneratePathToLocation_Params.Goal), &Goal, sizeof(Goal));
	memcpy_s(&GeneratePathToLocation_Params.WithinDistance, sizeof(GeneratePathToLocation_Params.WithinDistance), &WithinDistance, sizeof(WithinDistance));
	GeneratePathToLocation_Params.bAllowPartialPath = bAllowPartialPath;

	this->ProcessEvent(uFnGeneratePathToLocation, &GeneratePathToLocation_Params, nullptr);

	return GeneratePathToLocation_Params.ReturnValue;
};

// Function OLGame.OLBot.GeneratePathToActor
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  Goal                           (CPF_Parm)
// float                          WithinDistance                 (CPF_OptionalParm | CPF_Parm)
// bool                           bAllowPartialPath              (CPF_OptionalParm | CPF_Parm)

bool AOLBot::eventGeneratePathToActor(class AActor* Goal, float WithinDistance, bool bAllowPartialPath)
{
	static UFunction* uFnGeneratePathToActor = nullptr;

	if (!uFnGeneratePathToActor)
	{
		uFnGeneratePathToActor = UFunction::FindFunction("Function OLGame.OLBot.GeneratePathToActor");
	}

	AOLBot_eventGeneratePathToActor_Params GeneratePathToActor_Params;
	memset(&GeneratePathToActor_Params, 0, sizeof(GeneratePathToActor_Params));
	memcpy_s(&GeneratePathToActor_Params.Goal, sizeof(GeneratePathToActor_Params.Goal), &Goal, sizeof(Goal));
	memcpy_s(&GeneratePathToActor_Params.WithinDistance, sizeof(GeneratePathToActor_Params.WithinDistance), &WithinDistance, sizeof(WithinDistance));
	GeneratePathToActor_Params.bAllowPartialPath = bAllowPartialPath;

	this->ProcessEvent(uFnGeneratePathToActor, &GeneratePathToActor_Params, nullptr);

	return GeneratePathToActor_Params.ReturnValue;
};

// Function OLGame.OLBot.AddBasePathContraints
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::AddBasePathContraints()
{
	static UFunction* uFnAddBasePathContraints = nullptr;

	if (!uFnAddBasePathContraints)
	{
		uFnAddBasePathContraints = UFunction::FindFunction("Function OLGame.OLBot.AddBasePathContraints");
	}

	AOLBot_execAddBasePathContraints_Params AddBasePathContraints_Params;
	memset(&AddBasePathContraints_Params, 0, sizeof(AddBasePathContraints_Params));

	this->ProcessEvent(uFnAddBasePathContraints, &AddBasePathContraints_Params, nullptr);
};

// Function OLGame.OLBot.KnockbackTickNotify
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::eventKnockbackTickNotify()
{
	static UFunction* uFnKnockbackTickNotify = nullptr;

	if (!uFnKnockbackTickNotify)
	{
		uFnKnockbackTickNotify = UFunction::FindFunction("Function OLGame.OLBot.KnockbackTickNotify");
	}

	AOLBot_eventKnockbackTickNotify_Params KnockbackTickNotify_Params;
	memset(&KnockbackTickNotify_Params, 0, sizeof(KnockbackTickNotify_Params));

	this->ProcessEvent(uFnKnockbackTickNotify, &KnockbackTickNotify_Params, nullptr);
};

// Function OLGame.OLBot.KnockbackStartNotify
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::eventKnockbackStartNotify()
{
	static UFunction* uFnKnockbackStartNotify = nullptr;

	if (!uFnKnockbackStartNotify)
	{
		uFnKnockbackStartNotify = UFunction::FindFunction("Function OLGame.OLBot.KnockbackStartNotify");
	}

	AOLBot_eventKnockbackStartNotify_Params KnockbackStartNotify_Params;
	memset(&KnockbackStartNotify_Params, 0, sizeof(KnockbackStartNotify_Params));

	this->ProcessEvent(uFnKnockbackStartNotify, &KnockbackStartNotify_Params, nullptr);
};

// Function OLGame.OLBot.BreakDoorNotify
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::eventBreakDoorNotify()
{
	static UFunction* uFnBreakDoorNotify = nullptr;

	if (!uFnBreakDoorNotify)
	{
		uFnBreakDoorNotify = UFunction::FindFunction("Function OLGame.OLBot.BreakDoorNotify");
	}

	AOLBot_eventBreakDoorNotify_Params BreakDoorNotify_Params;
	memset(&BreakDoorNotify_Params, 0, sizeof(BreakDoorNotify_Params));

	this->ProcessEvent(uFnBreakDoorNotify, &BreakDoorNotify_Params, nullptr);
};

// Function OLGame.OLBot.BashDoorNotify
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::eventBashDoorNotify()
{
	static UFunction* uFnBashDoorNotify = nullptr;

	if (!uFnBashDoorNotify)
	{
		uFnBashDoorNotify = UFunction::FindFunction("Function OLGame.OLBot.BashDoorNotify");
	}

	AOLBot_eventBashDoorNotify_Params BashDoorNotify_Params;
	memset(&BashDoorNotify_Params, 0, sizeof(BashDoorNotify_Params));

	this->ProcessEvent(uFnBashDoorNotify, &BashDoorNotify_Params, nullptr);
};

// Function OLGame.OLBot.AttackCycleEnd
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::AttackCycleEnd()
{
	static UFunction* uFnAttackCycleEnd = nullptr;

	if (!uFnAttackCycleEnd)
	{
		uFnAttackCycleEnd = UFunction::FindFunction("Function OLGame.OLBot.AttackCycleEnd");
	}

	AOLBot_execAttackCycleEnd_Params AttackCycleEnd_Params;
	memset(&AttackCycleEnd_Params, 0, sizeof(AttackCycleEnd_Params));

	this->ProcessEvent(uFnAttackCycleEnd, &AttackCycleEnd_Params, nullptr);
};

// Function OLGame.OLBot.ClearAnimation
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::ClearAnimation()
{
	static UFunction* uFnClearAnimation = nullptr;

	if (!uFnClearAnimation)
	{
		uFnClearAnimation = UFunction::FindFunction("Function OLGame.OLBot.ClearAnimation");
	}

	AOLBot_execClearAnimation_Params ClearAnimation_Params;
	memset(&ClearAnimation_Params, 0, sizeof(ClearAnimation_Params));

	this->ProcessEvent(uFnClearAnimation, &ClearAnimation_Params, nullptr);
};

// Function OLGame.OLBot.PlayFullBodyAnim
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FName                   AnimName                       (CPF_Parm)
// float                          Rate                           (CPF_Parm)
// float                          BlendInTime                    (CPF_OptionalParm | CPF_Parm)
// float                          BlendOutTime                   (CPF_OptionalParm | CPF_Parm)
// bool                           bLooping                       (CPF_OptionalParm | CPF_Parm)
// float                          StartTime                      (CPF_OptionalParm | CPF_Parm)
// float                          EndTime                        (CPF_OptionalParm | CPF_Parm)

void AOLBot::PlayFullBodyAnim(struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, bool bLooping, float StartTime, float EndTime)
{
	static UFunction* uFnPlayFullBodyAnim = nullptr;

	if (!uFnPlayFullBodyAnim)
	{
		uFnPlayFullBodyAnim = UFunction::FindFunction("Function OLGame.OLBot.PlayFullBodyAnim");
	}

	AOLBot_execPlayFullBodyAnim_Params PlayFullBodyAnim_Params;
	memset(&PlayFullBodyAnim_Params, 0, sizeof(PlayFullBodyAnim_Params));
	memcpy_s(&PlayFullBodyAnim_Params.AnimName, sizeof(PlayFullBodyAnim_Params.AnimName), &AnimName, sizeof(AnimName));
	memcpy_s(&PlayFullBodyAnim_Params.Rate, sizeof(PlayFullBodyAnim_Params.Rate), &Rate, sizeof(Rate));
	memcpy_s(&PlayFullBodyAnim_Params.BlendInTime, sizeof(PlayFullBodyAnim_Params.BlendInTime), &BlendInTime, sizeof(BlendInTime));
	memcpy_s(&PlayFullBodyAnim_Params.BlendOutTime, sizeof(PlayFullBodyAnim_Params.BlendOutTime), &BlendOutTime, sizeof(BlendOutTime));
	PlayFullBodyAnim_Params.bLooping = bLooping;
	memcpy_s(&PlayFullBodyAnim_Params.StartTime, sizeof(PlayFullBodyAnim_Params.StartTime), &StartTime, sizeof(StartTime));
	memcpy_s(&PlayFullBodyAnim_Params.EndTime, sizeof(PlayFullBodyAnim_Params.EndTime), &EndTime, sizeof(EndTime));

	this->ProcessEvent(uFnPlayFullBodyAnim, &PlayFullBodyAnim_Params, nullptr);
};

// Function OLGame.OLBot.PushQueuedCommand
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::PushQueuedCommand()
{
	static UFunction* uFnPushQueuedCommand = nullptr;

	if (!uFnPushQueuedCommand)
	{
		uFnPushQueuedCommand = UFunction::FindFunction("Function OLGame.OLBot.PushQueuedCommand");
	}

	AOLBot_execPushQueuedCommand_Params PushQueuedCommand_Params;
	memset(&PushQueuedCommand_Params, 0, sizeof(PushQueuedCommand_Params));

	this->ProcessEvent(uFnPushQueuedCommand, &PushQueuedCommand_Params, nullptr);
};

// Function OLGame.OLBot.QueueAICommand
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UGameAICommand*          Cmd                            (CPF_Parm)

bool AOLBot::eventQueueAICommand(class UGameAICommand* Cmd)
{
	static UFunction* uFnQueueAICommand = nullptr;

	if (!uFnQueueAICommand)
	{
		uFnQueueAICommand = UFunction::FindFunction("Function OLGame.OLBot.QueueAICommand");
	}

	AOLBot_eventQueueAICommand_Params QueueAICommand_Params;
	memset(&QueueAICommand_Params, 0, sizeof(QueueAICommand_Params));
	memcpy_s(&QueueAICommand_Params.Cmd, sizeof(QueueAICommand_Params.Cmd), &Cmd, sizeof(Cmd));

	this->ProcessEvent(uFnQueueAICommand, &QueueAICommand_Params, nullptr);

	return QueueAICommand_Params.ReturnValue;
};

// Function OLGame.OLBot.UnPossess
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::UnPossess()
{
	static UFunction* uFnUnPossess = nullptr;

	if (!uFnUnPossess)
	{
		uFnUnPossess = UFunction::FindFunction("Function OLGame.OLBot.UnPossess");
	}

	AOLBot_execUnPossess_Params UnPossess_Params;
	memset(&UnPossess_Params, 0, sizeof(UnPossess_Params));

	this->ProcessEvent(uFnUnPossess, &UnPossess_Params, nullptr);
};

// Function OLGame.OLBot.Possess
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   aPawn                          (CPF_Parm)
// bool                           bVehicleTransition             (CPF_Parm)

void AOLBot::Possess(class APawn* aPawn, bool bVehicleTransition)
{
	static UFunction* uFnPossess = nullptr;

	if (!uFnPossess)
	{
		uFnPossess = UFunction::FindFunction("Function OLGame.OLBot.Possess");
	}

	AOLBot_execPossess_Params Possess_Params;
	memset(&Possess_Params, 0, sizeof(Possess_Params));
	memcpy_s(&Possess_Params.aPawn, sizeof(Possess_Params.aPawn), &aPawn, sizeof(aPawn));
	Possess_Params.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent(uFnPossess, &Possess_Params, nullptr);
};

// Function OLGame.OLBot.Destroyed
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::eventDestroyed()
{
	static UFunction* uFnDestroyed = nullptr;

	if (!uFnDestroyed)
	{
		uFnDestroyed = UFunction::FindFunction("Function OLGame.OLBot.Destroyed");
	}

	AOLBot_eventDestroyed_Params Destroyed_Params;
	memset(&Destroyed_Params, 0, sizeof(Destroyed_Params));

	this->ProcessEvent(uFnDestroyed, &Destroyed_Params, nullptr);
};

// Function OLGame.OLBot.InitNavigationHandle
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::InitNavigationHandle()
{
	static UFunction* uFnInitNavigationHandle = nullptr;

	if (!uFnInitNavigationHandle)
	{
		uFnInitNavigationHandle = UFunction::FindFunction("Function OLGame.OLBot.InitNavigationHandle");
	}

	AOLBot_execInitNavigationHandle_Params InitNavigationHandle_Params;
	memset(&InitNavigationHandle_Params, 0, sizeof(InitNavigationHandle_Params));

	this->ProcessEvent(uFnInitNavigationHandle, &InitNavigationHandle_Params, nullptr);
};

// Function OLGame.OLBot.PostBeginPlay
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::PostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function OLGame.OLBot.PostBeginPlay");
	}

	AOLBot_execPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function OLGame.OLBot.LogErrorNotOnNavmesh
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::LogErrorNotOnNavmesh()
{
	static UFunction* uFnLogErrorNotOnNavmesh = nullptr;

	if (!uFnLogErrorNotOnNavmesh)
	{
		uFnLogErrorNotOnNavmesh = UFunction::FindFunction("Function OLGame.OLBot.LogErrorNotOnNavmesh");
	}

	AOLBot_execLogErrorNotOnNavmesh_Params LogErrorNotOnNavmesh_Params;
	memset(&LogErrorNotOnNavmesh_Params, 0, sizeof(LogErrorNotOnNavmesh_Params));

	uFnLogErrorNotOnNavmesh->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnLogErrorNotOnNavmesh, &LogErrorNotOnNavmesh_Params, nullptr);
	uFnLogErrorNotOnNavmesh->FunctionFlags |= 0x400;
};

// Function OLGame.OLBot.LogErrorFailedMove
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::LogErrorFailedMove()
{
	static UFunction* uFnLogErrorFailedMove = nullptr;

	if (!uFnLogErrorFailedMove)
	{
		uFnLogErrorFailedMove = UFunction::FindFunction("Function OLGame.OLBot.LogErrorFailedMove");
	}

	AOLBot_execLogErrorFailedMove_Params LogErrorFailedMove_Params;
	memset(&LogErrorFailedMove_Params, 0, sizeof(LogErrorFailedMove_Params));

	uFnLogErrorFailedMove->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnLogErrorFailedMove, &LogErrorFailedMove_Params, nullptr);
	uFnLogErrorFailedMove->FunctionFlags |= 0x400;
};

// Function OLGame.OLBot.TestLogAIToConsole
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Verbosity                      (CPF_Parm)

void AOLBot::TestLogAIToConsole(int32_t Verbosity)
{
	static UFunction* uFnTestLogAIToConsole = nullptr;

	if (!uFnTestLogAIToConsole)
	{
		uFnTestLogAIToConsole = UFunction::FindFunction("Function OLGame.OLBot.TestLogAIToConsole");
	}

	AOLBot_execTestLogAIToConsole_Params TestLogAIToConsole_Params;
	memset(&TestLogAIToConsole_Params, 0, sizeof(TestLogAIToConsole_Params));
	memcpy_s(&TestLogAIToConsole_Params.Verbosity, sizeof(TestLogAIToConsole_Params.Verbosity), &Verbosity, sizeof(Verbosity));

	uFnTestLogAIToConsole->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTestLogAIToConsole, &TestLogAIToConsole_Params, nullptr);
	uFnTestLogAIToConsole->FunctionFlags |= 0x400;
};

// Function OLGame.OLBot.UpdateClosingDoorsState
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::UpdateClosingDoorsState()
{
	static UFunction* uFnUpdateClosingDoorsState = nullptr;

	if (!uFnUpdateClosingDoorsState)
	{
		uFnUpdateClosingDoorsState = UFunction::FindFunction("Function OLGame.OLBot.UpdateClosingDoorsState");
	}

	AOLBot_execUpdateClosingDoorsState_Params UpdateClosingDoorsState_Params;
	memset(&UpdateClosingDoorsState_Params, 0, sizeof(UpdateClosingDoorsState_Params));

	uFnUpdateClosingDoorsState->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateClosingDoorsState, &UpdateClosingDoorsState_Params, nullptr);
	uFnUpdateClosingDoorsState->FunctionFlags |= 0x400;
};

// Function OLGame.OLBot.CanUnlockDoor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AOLDoor*                 aDoor                          (CPF_Parm)

bool AOLBot::CanUnlockDoor(class AOLDoor* aDoor)
{
	static UFunction* uFnCanUnlockDoor = nullptr;

	if (!uFnCanUnlockDoor)
	{
		uFnCanUnlockDoor = UFunction::FindFunction("Function OLGame.OLBot.CanUnlockDoor");
	}

	AOLBot_execCanUnlockDoor_Params CanUnlockDoor_Params;
	memset(&CanUnlockDoor_Params, 0, sizeof(CanUnlockDoor_Params));
	memcpy_s(&CanUnlockDoor_Params.aDoor, sizeof(CanUnlockDoor_Params.aDoor), &aDoor, sizeof(aDoor));

	uFnCanUnlockDoor->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCanUnlockDoor, &CanUnlockDoor_Params, nullptr);
	uFnCanUnlockDoor->FunctionFlags |= 0x400;

	return CanUnlockDoor_Params.ReturnValue;
};

// Function OLGame.OLBot.ShouldCloseDoor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AOLDoor*                 aDoor                          (CPF_Parm)

bool AOLBot::ShouldCloseDoor(class AOLDoor* aDoor)
{
	static UFunction* uFnShouldCloseDoor = nullptr;

	if (!uFnShouldCloseDoor)
	{
		uFnShouldCloseDoor = UFunction::FindFunction("Function OLGame.OLBot.ShouldCloseDoor");
	}

	AOLBot_execShouldCloseDoor_Params ShouldCloseDoor_Params;
	memset(&ShouldCloseDoor_Params, 0, sizeof(ShouldCloseDoor_Params));
	memcpy_s(&ShouldCloseDoor_Params.aDoor, sizeof(ShouldCloseDoor_Params.aDoor), &aDoor, sizeof(aDoor));

	uFnShouldCloseDoor->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnShouldCloseDoor, &ShouldCloseDoor_Params, nullptr);
	uFnShouldCloseDoor->FunctionFlags |= 0x400;

	return ShouldCloseDoor_Params.ReturnValue;
};

// Function OLGame.OLBot.GetDoorApproachPoint
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AOLDoor*                 aDoor                          (CPF_Parm)
// struct FVector                 ApproachPoint                  (CPF_Parm | CPF_OutParm)

bool AOLBot::GetDoorApproachPoint(class AOLDoor* aDoor, struct FVector& ApproachPoint)
{
	static UFunction* uFnGetDoorApproachPoint = nullptr;

	if (!uFnGetDoorApproachPoint)
	{
		uFnGetDoorApproachPoint = UFunction::FindFunction("Function OLGame.OLBot.GetDoorApproachPoint");
	}

	AOLBot_execGetDoorApproachPoint_Params GetDoorApproachPoint_Params;
	memset(&GetDoorApproachPoint_Params, 0, sizeof(GetDoorApproachPoint_Params));
	memcpy_s(&GetDoorApproachPoint_Params.aDoor, sizeof(GetDoorApproachPoint_Params.aDoor), &aDoor, sizeof(aDoor));
	memcpy_s(&GetDoorApproachPoint_Params.ApproachPoint, sizeof(GetDoorApproachPoint_Params.ApproachPoint), &ApproachPoint, sizeof(ApproachPoint));

	uFnGetDoorApproachPoint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetDoorApproachPoint, &GetDoorApproachPoint_Params, nullptr);
	uFnGetDoorApproachPoint->FunctionFlags |= 0x400;

	memcpy_s(&ApproachPoint, sizeof(ApproachPoint), &GetDoorApproachPoint_Params.ApproachPoint, sizeof(GetDoorApproachPoint_Params.ApproachPoint));

	return GetDoorApproachPoint_Params.ReturnValue;
};

// Function OLGame.OLBot.GetClosestPointToActor
// [0x00424400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  ActorToCheck                   (CPF_Parm)
// bool                           bForceNudging                  (CPF_OptionalParm | CPF_Parm)
// struct FVector                 NewPoint                       (CPF_Parm | CPF_OutParm)
// float                          NewBuffer                      (CPF_Parm | CPF_OutParm)

bool AOLBot::GetClosestPointToActor(class AActor* ActorToCheck, bool bForceNudging, struct FVector& NewPoint, float& NewBuffer)
{
	static UFunction* uFnGetClosestPointToActor = nullptr;

	if (!uFnGetClosestPointToActor)
	{
		uFnGetClosestPointToActor = UFunction::FindFunction("Function OLGame.OLBot.GetClosestPointToActor");
	}

	AOLBot_execGetClosestPointToActor_Params GetClosestPointToActor_Params;
	memset(&GetClosestPointToActor_Params, 0, sizeof(GetClosestPointToActor_Params));
	memcpy_s(&GetClosestPointToActor_Params.ActorToCheck, sizeof(GetClosestPointToActor_Params.ActorToCheck), &ActorToCheck, sizeof(ActorToCheck));
	GetClosestPointToActor_Params.bForceNudging = bForceNudging;
	memcpy_s(&GetClosestPointToActor_Params.NewPoint, sizeof(GetClosestPointToActor_Params.NewPoint), &NewPoint, sizeof(NewPoint));
	memcpy_s(&GetClosestPointToActor_Params.NewBuffer, sizeof(GetClosestPointToActor_Params.NewBuffer), &NewBuffer, sizeof(NewBuffer));

	uFnGetClosestPointToActor->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetClosestPointToActor, &GetClosestPointToActor_Params, nullptr);
	uFnGetClosestPointToActor->FunctionFlags |= 0x400;

	memcpy_s(&NewPoint, sizeof(NewPoint), &GetClosestPointToActor_Params.NewPoint, sizeof(GetClosestPointToActor_Params.NewPoint));
	memcpy_s(&NewBuffer, sizeof(NewBuffer), &GetClosestPointToActor_Params.NewBuffer, sizeof(GetClosestPointToActor_Params.NewBuffer));

	return GetClosestPointToActor_Params.ReturnValue;
};

// Function OLGame.OLBot.GetClosestPointOnNavMesh
// [0x00424400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 PointToCheck                   (CPF_Parm)
// bool                           bForceNudging                  (CPF_OptionalParm | CPF_Parm)
// struct FVector                 out_NewPoint                   (CPF_Parm | CPF_OutParm)

bool AOLBot::GetClosestPointOnNavMesh(struct FVector PointToCheck, bool bForceNudging, struct FVector& out_NewPoint)
{
	static UFunction* uFnGetClosestPointOnNavMesh = nullptr;

	if (!uFnGetClosestPointOnNavMesh)
	{
		uFnGetClosestPointOnNavMesh = UFunction::FindFunction("Function OLGame.OLBot.GetClosestPointOnNavMesh");
	}

	AOLBot_execGetClosestPointOnNavMesh_Params GetClosestPointOnNavMesh_Params;
	memset(&GetClosestPointOnNavMesh_Params, 0, sizeof(GetClosestPointOnNavMesh_Params));
	memcpy_s(&GetClosestPointOnNavMesh_Params.PointToCheck, sizeof(GetClosestPointOnNavMesh_Params.PointToCheck), &PointToCheck, sizeof(PointToCheck));
	GetClosestPointOnNavMesh_Params.bForceNudging = bForceNudging;
	memcpy_s(&GetClosestPointOnNavMesh_Params.out_NewPoint, sizeof(GetClosestPointOnNavMesh_Params.out_NewPoint), &out_NewPoint, sizeof(out_NewPoint));

	uFnGetClosestPointOnNavMesh->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetClosestPointOnNavMesh, &GetClosestPointOnNavMesh_Params, nullptr);
	uFnGetClosestPointOnNavMesh->FunctionFlags |= 0x400;

	memcpy_s(&out_NewPoint, sizeof(out_NewPoint), &GetClosestPointOnNavMesh_Params.out_NewPoint, sizeof(GetClosestPointOnNavMesh_Params.out_NewPoint));

	return GetClosestPointOnNavMesh_Params.ReturnValue;
};

// Function OLGame.OLBot.GetCurrentWaypoint
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AOLWaypoint*             ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class AOLWaypoint* AOLBot::GetCurrentWaypoint()
{
	static UFunction* uFnGetCurrentWaypoint = nullptr;

	if (!uFnGetCurrentWaypoint)
	{
		uFnGetCurrentWaypoint = UFunction::FindFunction("Function OLGame.OLBot.GetCurrentWaypoint");
	}

	AOLBot_execGetCurrentWaypoint_Params GetCurrentWaypoint_Params;
	memset(&GetCurrentWaypoint_Params, 0, sizeof(GetCurrentWaypoint_Params));

	uFnGetCurrentWaypoint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetCurrentWaypoint, &GetCurrentWaypoint_Params, nullptr);
	uFnGetCurrentWaypoint->FunctionFlags |= 0x400;

	return GetCurrentWaypoint_Params.ReturnValue;
};

// Function OLGame.OLBot.GetMoveCommand
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLAICmd_MoveAbility*    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UOLAICmd_MoveAbility* AOLBot::GetMoveCommand()
{
	static UFunction* uFnGetMoveCommand = nullptr;

	if (!uFnGetMoveCommand)
	{
		uFnGetMoveCommand = UFunction::FindFunction("Function OLGame.OLBot.GetMoveCommand");
	}

	AOLBot_execGetMoveCommand_Params GetMoveCommand_Params;
	memset(&GetMoveCommand_Params, 0, sizeof(GetMoveCommand_Params));

	uFnGetMoveCommand->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetMoveCommand, &GetMoveCommand_Params, nullptr);
	uFnGetMoveCommand->FunctionFlags |= 0x400;

	return GetMoveCommand_Params.ReturnValue;
};

// Function OLGame.OLBot.IsPerformingMoveAbility
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLBot::IsPerformingMoveAbility()
{
	static UFunction* uFnIsPerformingMoveAbility = nullptr;

	if (!uFnIsPerformingMoveAbility)
	{
		uFnIsPerformingMoveAbility = UFunction::FindFunction("Function OLGame.OLBot.IsPerformingMoveAbility");
	}

	AOLBot_execIsPerformingMoveAbility_Params IsPerformingMoveAbility_Params;
	memset(&IsPerformingMoveAbility_Params, 0, sizeof(IsPerformingMoveAbility_Params));

	uFnIsPerformingMoveAbility->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsPerformingMoveAbility, &IsPerformingMoveAbility_Params, nullptr);
	uFnIsPerformingMoveAbility->FunctionFlags |= 0x400;

	return IsPerformingMoveAbility_Params.ReturnValue;
};

// Function OLGame.OLBot.IsPlayerOnVaultingPath
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLBot::IsPlayerOnVaultingPath()
{
	static UFunction* uFnIsPlayerOnVaultingPath = nullptr;

	if (!uFnIsPlayerOnVaultingPath)
	{
		uFnIsPlayerOnVaultingPath = UFunction::FindFunction("Function OLGame.OLBot.IsPlayerOnVaultingPath");
	}

	AOLBot_execIsPlayerOnVaultingPath_Params IsPlayerOnVaultingPath_Params;
	memset(&IsPlayerOnVaultingPath_Params, 0, sizeof(IsPlayerOnVaultingPath_Params));

	uFnIsPlayerOnVaultingPath->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsPlayerOnVaultingPath, &IsPlayerOnVaultingPath_Params, nullptr);
	uFnIsPlayerOnVaultingPath->FunctionFlags |= 0x400;

	return IsPlayerOnVaultingPath_Params.ReturnValue;
};

// Function OLGame.OLBot.IsPlayerOnBrokenSideOfDoor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AOLDoor*                 door                           (CPF_Parm)

bool AOLBot::IsPlayerOnBrokenSideOfDoor(class AOLDoor* door)
{
	static UFunction* uFnIsPlayerOnBrokenSideOfDoor = nullptr;

	if (!uFnIsPlayerOnBrokenSideOfDoor)
	{
		uFnIsPlayerOnBrokenSideOfDoor = UFunction::FindFunction("Function OLGame.OLBot.IsPlayerOnBrokenSideOfDoor");
	}

	AOLBot_execIsPlayerOnBrokenSideOfDoor_Params IsPlayerOnBrokenSideOfDoor_Params;
	memset(&IsPlayerOnBrokenSideOfDoor_Params, 0, sizeof(IsPlayerOnBrokenSideOfDoor_Params));
	memcpy_s(&IsPlayerOnBrokenSideOfDoor_Params.door, sizeof(IsPlayerOnBrokenSideOfDoor_Params.door), &door, sizeof(door));

	uFnIsPlayerOnBrokenSideOfDoor->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsPlayerOnBrokenSideOfDoor, &IsPlayerOnBrokenSideOfDoor_Params, nullptr);
	uFnIsPlayerOnBrokenSideOfDoor->FunctionFlags |= 0x400;

	return IsPlayerOnBrokenSideOfDoor_Params.ReturnValue;
};

// Function OLGame.OLBot.IsInDamageRange
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLBot::IsInDamageRange()
{
	static UFunction* uFnIsInDamageRange = nullptr;

	if (!uFnIsInDamageRange)
	{
		uFnIsInDamageRange = UFunction::FindFunction("Function OLGame.OLBot.IsInDamageRange");
	}

	AOLBot_execIsInDamageRange_Params IsInDamageRange_Params;
	memset(&IsInDamageRange_Params, 0, sizeof(IsInDamageRange_Params));

	uFnIsInDamageRange->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsInDamageRange, &IsInDamageRange_Params, nullptr);
	uFnIsInDamageRange->FunctionFlags |= 0x400;

	return IsInDamageRange_Params.ReturnValue;
};

// Function OLGame.OLBot.IsInFinalAttackRange
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLBot::IsInFinalAttackRange()
{
	static UFunction* uFnIsInFinalAttackRange = nullptr;

	if (!uFnIsInFinalAttackRange)
	{
		uFnIsInFinalAttackRange = UFunction::FindFunction("Function OLGame.OLBot.IsInFinalAttackRange");
	}

	AOLBot_execIsInFinalAttackRange_Params IsInFinalAttackRange_Params;
	memset(&IsInFinalAttackRange_Params, 0, sizeof(IsInFinalAttackRange_Params));

	uFnIsInFinalAttackRange->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsInFinalAttackRange, &IsInFinalAttackRange_Params, nullptr);
	uFnIsInFinalAttackRange->FunctionFlags |= 0x400;

	return IsInFinalAttackRange_Params.ReturnValue;
};

// Function OLGame.OLBot.IsInApproachAttackRange
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLBot::IsInApproachAttackRange()
{
	static UFunction* uFnIsInApproachAttackRange = nullptr;

	if (!uFnIsInApproachAttackRange)
	{
		uFnIsInApproachAttackRange = UFunction::FindFunction("Function OLGame.OLBot.IsInApproachAttackRange");
	}

	AOLBot_execIsInApproachAttackRange_Params IsInApproachAttackRange_Params;
	memset(&IsInApproachAttackRange_Params, 0, sizeof(IsInApproachAttackRange_Params));

	uFnIsInApproachAttackRange->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsInApproachAttackRange, &IsInApproachAttackRange_Params, nullptr);
	uFnIsInApproachAttackRange->FunctionFlags |= 0x400;

	return IsInApproachAttackRange_Params.ReturnValue;
};

// Function OLGame.OLBot.IsInCrouchingAttackRange
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          ForwardRangeFactor             (CPF_OptionalParm | CPF_Parm)

bool AOLBot::IsInCrouchingAttackRange(float ForwardRangeFactor)
{
	static UFunction* uFnIsInCrouchingAttackRange = nullptr;

	if (!uFnIsInCrouchingAttackRange)
	{
		uFnIsInCrouchingAttackRange = UFunction::FindFunction("Function OLGame.OLBot.IsInCrouchingAttackRange");
	}

	AOLBot_execIsInCrouchingAttackRange_Params IsInCrouchingAttackRange_Params;
	memset(&IsInCrouchingAttackRange_Params, 0, sizeof(IsInCrouchingAttackRange_Params));
	memcpy_s(&IsInCrouchingAttackRange_Params.ForwardRangeFactor, sizeof(IsInCrouchingAttackRange_Params.ForwardRangeFactor), &ForwardRangeFactor, sizeof(ForwardRangeFactor));

	uFnIsInCrouchingAttackRange->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsInCrouchingAttackRange, &IsInCrouchingAttackRange_Params, nullptr);
	uFnIsInCrouchingAttackRange->FunctionFlags |= 0x400;

	return IsInCrouchingAttackRange_Params.ReturnValue;
};

// Function OLGame.OLBot.IsInCrawlingAttackRange
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          ForwardRangeFactor             (CPF_OptionalParm | CPF_Parm)

bool AOLBot::IsInCrawlingAttackRange(float ForwardRangeFactor)
{
	static UFunction* uFnIsInCrawlingAttackRange = nullptr;

	if (!uFnIsInCrawlingAttackRange)
	{
		uFnIsInCrawlingAttackRange = UFunction::FindFunction("Function OLGame.OLBot.IsInCrawlingAttackRange");
	}

	AOLBot_execIsInCrawlingAttackRange_Params IsInCrawlingAttackRange_Params;
	memset(&IsInCrawlingAttackRange_Params, 0, sizeof(IsInCrawlingAttackRange_Params));
	memcpy_s(&IsInCrawlingAttackRange_Params.ForwardRangeFactor, sizeof(IsInCrawlingAttackRange_Params.ForwardRangeFactor), &ForwardRangeFactor, sizeof(ForwardRangeFactor));

	uFnIsInCrawlingAttackRange->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsInCrawlingAttackRange, &IsInCrawlingAttackRange_Params, nullptr);
	uFnIsInCrawlingAttackRange->FunctionFlags |= 0x400;

	return IsInCrawlingAttackRange_Params.ReturnValue;
};

// Function OLGame.OLBot.IsInGrabUnderAttackRange
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLBot::IsInGrabUnderAttackRange()
{
	static UFunction* uFnIsInGrabUnderAttackRange = nullptr;

	if (!uFnIsInGrabUnderAttackRange)
	{
		uFnIsInGrabUnderAttackRange = UFunction::FindFunction("Function OLGame.OLBot.IsInGrabUnderAttackRange");
	}

	AOLBot_execIsInGrabUnderAttackRange_Params IsInGrabUnderAttackRange_Params;
	memset(&IsInGrabUnderAttackRange_Params, 0, sizeof(IsInGrabUnderAttackRange_Params));

	uFnIsInGrabUnderAttackRange->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsInGrabUnderAttackRange, &IsInGrabUnderAttackRange_Params, nullptr);
	uFnIsInGrabUnderAttackRange->FunctionFlags |= 0x400;

	return IsInGrabUnderAttackRange_Params.ReturnValue;
};

// Function OLGame.OLBot.IsInAttackRange
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLBot::IsInAttackRange()
{
	static UFunction* uFnIsInAttackRange = nullptr;

	if (!uFnIsInAttackRange)
	{
		uFnIsInAttackRange = UFunction::FindFunction("Function OLGame.OLBot.IsInAttackRange");
	}

	AOLBot_execIsInAttackRange_Params IsInAttackRange_Params;
	memset(&IsInAttackRange_Params, 0, sizeof(IsInAttackRange_Params));

	uFnIsInAttackRange->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsInAttackRange, &IsInAttackRange_Params, nullptr);
	uFnIsInAttackRange->FunctionFlags |= 0x400;

	return IsInAttackRange_Params.ReturnValue;
};

// Function OLGame.OLBot.TargetInSpecialLocation
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLBot::TargetInSpecialLocation()
{
	static UFunction* uFnTargetInSpecialLocation = nullptr;

	if (!uFnTargetInSpecialLocation)
	{
		uFnTargetInSpecialLocation = UFunction::FindFunction("Function OLGame.OLBot.TargetInSpecialLocation");
	}

	AOLBot_execTargetInSpecialLocation_Params TargetInSpecialLocation_Params;
	memset(&TargetInSpecialLocation_Params, 0, sizeof(TargetInSpecialLocation_Params));

	uFnTargetInSpecialLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTargetInSpecialLocation, &TargetInSpecialLocation_Params, nullptr);
	uFnTargetInSpecialLocation->FunctionFlags |= 0x400;

	return TargetInSpecialLocation_Params.ReturnValue;
};

// Function OLGame.OLBot.CanSeePlayer
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLBot::CanSeePlayer()
{
	static UFunction* uFnCanSeePlayer = nullptr;

	if (!uFnCanSeePlayer)
	{
		uFnCanSeePlayer = UFunction::FindFunction("Function OLGame.OLBot.CanSeePlayer");
	}

	AOLBot_execCanSeePlayer_Params CanSeePlayer_Params;
	memset(&CanSeePlayer_Params, 0, sizeof(CanSeePlayer_Params));

	uFnCanSeePlayer->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCanSeePlayer, &CanSeePlayer_Params, nullptr);
	uFnCanSeePlayer->FunctionFlags |= 0x400;

	return CanSeePlayer_Params.ReturnValue;
};

// Function OLGame.OLBot.TryTurnAtDestination
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLBot::TryTurnAtDestination()
{
	static UFunction* uFnTryTurnAtDestination = nullptr;

	if (!uFnTryTurnAtDestination)
	{
		uFnTryTurnAtDestination = UFunction::FindFunction("Function OLGame.OLBot.TryTurnAtDestination");
	}

	AOLBot_execTryTurnAtDestination_Params TryTurnAtDestination_Params;
	memset(&TryTurnAtDestination_Params, 0, sizeof(TryTurnAtDestination_Params));

	uFnTryTurnAtDestination->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTryTurnAtDestination, &TryTurnAtDestination_Params, nullptr);
	uFnTryTurnAtDestination->FunctionFlags |= 0x400;

	return TryTurnAtDestination_Params.ReturnValue;
};

// Function OLGame.OLBot.HasReachedDestination
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLBot::HasReachedDestination()
{
	static UFunction* uFnHasReachedDestination = nullptr;

	if (!uFnHasReachedDestination)
	{
		uFnHasReachedDestination = UFunction::FindFunction("Function OLGame.OLBot.HasReachedDestination");
	}

	AOLBot_execHasReachedDestination_Params HasReachedDestination_Params;
	memset(&HasReachedDestination_Params, 0, sizeof(HasReachedDestination_Params));

	uFnHasReachedDestination->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHasReachedDestination, &HasReachedDestination_Params, nullptr);
	uFnHasReachedDestination->FunctionFlags |= 0x400;

	return HasReachedDestination_Params.ReturnValue;
};

// Function OLGame.OLBot.OnMoveSucceeded
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::OnMoveSucceeded()
{
	static UFunction* uFnOnMoveSucceeded = nullptr;

	if (!uFnOnMoveSucceeded)
	{
		uFnOnMoveSucceeded = UFunction::FindFunction("Function OLGame.OLBot.OnMoveSucceeded");
	}

	AOLBot_execOnMoveSucceeded_Params OnMoveSucceeded_Params;
	memset(&OnMoveSucceeded_Params, 0, sizeof(OnMoveSucceeded_Params));

	uFnOnMoveSucceeded->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnOnMoveSucceeded, &OnMoveSucceeded_Params, nullptr);
	uFnOnMoveSucceeded->FunctionFlags |= 0x400;
};

// Function OLGame.OLBot.MoveDynamic
// [0x00020408] (FUNC_Latent | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::MoveDynamic()
{
	static UFunction* uFnMoveDynamic = nullptr;

	if (!uFnMoveDynamic)
	{
		uFnMoveDynamic = UFunction::FindFunction("Function OLGame.OLBot.MoveDynamic");
	}

	AOLBot_execMoveDynamic_Params MoveDynamic_Params;
	memset(&MoveDynamic_Params, 0, sizeof(MoveDynamic_Params));

	uFnMoveDynamic->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnMoveDynamic, &MoveDynamic_Params, nullptr);
	uFnMoveDynamic->FunctionFlags |= 0x400;
};

// Function OLGame.OLBot.MoveToPoint
// [0x00420408] (FUNC_Latent | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  ViewFocus                      (CPF_Parm)
// float                          DesiredOffset                  (CPF_Parm)
// struct FVector                 Dest                           (CPF_Const | CPF_Parm | CPF_OutParm)

void AOLBot::MoveToPoint(class AActor* ViewFocus, float DesiredOffset, struct FVector& Dest)
{
	static UFunction* uFnMoveToPoint = nullptr;

	if (!uFnMoveToPoint)
	{
		uFnMoveToPoint = UFunction::FindFunction("Function OLGame.OLBot.MoveToPoint");
	}

	AOLBot_execMoveToPoint_Params MoveToPoint_Params;
	memset(&MoveToPoint_Params, 0, sizeof(MoveToPoint_Params));
	memcpy_s(&MoveToPoint_Params.ViewFocus, sizeof(MoveToPoint_Params.ViewFocus), &ViewFocus, sizeof(ViewFocus));
	memcpy_s(&MoveToPoint_Params.DesiredOffset, sizeof(MoveToPoint_Params.DesiredOffset), &DesiredOffset, sizeof(DesiredOffset));
	memcpy_s(&MoveToPoint_Params.Dest, sizeof(MoveToPoint_Params.Dest), &Dest, sizeof(Dest));

	uFnMoveToPoint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnMoveToPoint, &MoveToPoint_Params, nullptr);
	uFnMoveToPoint->FunctionFlags |= 0x400;

	memcpy_s(&Dest, sizeof(Dest), &MoveToPoint_Params.Dest, sizeof(MoveToPoint_Params.Dest));
};

// Function OLGame.OLBot.MoveAlongPath
// [0x00024408] (FUNC_Latent | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// TArray<struct FVector>         PathPoints                     (CPF_Parm | CPF_NeedCtorLink)
// class AActor*                  FocusTarget                    (CPF_OptionalParm | CPF_Parm)

void AOLBot::MoveAlongPath(TArray<struct FVector> PathPoints, class AActor* FocusTarget)
{
	static UFunction* uFnMoveAlongPath = nullptr;

	if (!uFnMoveAlongPath)
	{
		uFnMoveAlongPath = UFunction::FindFunction("Function OLGame.OLBot.MoveAlongPath");
	}

	AOLBot_execMoveAlongPath_Params MoveAlongPath_Params;
	memset(&MoveAlongPath_Params, 0, sizeof(MoveAlongPath_Params));
	memcpy_s(&MoveAlongPath_Params.PathPoints, sizeof(MoveAlongPath_Params.PathPoints), &PathPoints, sizeof(PathPoints));
	memcpy_s(&MoveAlongPath_Params.FocusTarget, sizeof(MoveAlongPath_Params.FocusTarget), &FocusTarget, sizeof(FocusTarget));

	uFnMoveAlongPath->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnMoveAlongPath, &MoveAlongPath_Params, nullptr);
	uFnMoveAlongPath->FunctionFlags |= 0x400;
};

// Function OLGame.OLBot.WaitForCrawlEngaged
// [0x00020409] (FUNC_Final | FUNC_Latent | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::WaitForCrawlEngaged()
{
	static UFunction* uFnWaitForCrawlEngaged = nullptr;

	if (!uFnWaitForCrawlEngaged)
	{
		uFnWaitForCrawlEngaged = UFunction::FindFunction("Function OLGame.OLBot.WaitForCrawlEngaged");
	}

	AOLBot_execWaitForCrawlEngaged_Params WaitForCrawlEngaged_Params;
	memset(&WaitForCrawlEngaged_Params, 0, sizeof(WaitForCrawlEngaged_Params));

	uFnWaitForCrawlEngaged->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnWaitForCrawlEngaged, &WaitForCrawlEngaged_Params, nullptr);
	uFnWaitForCrawlEngaged->FunctionFlags |= 0x400;
};

// Function OLGame.OLBot.WaitForSpecialMove
// [0x00024409] (FUNC_Final | FUNC_Latent | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bNoDelay                       (CPF_OptionalParm | CPF_Parm)

void AOLBot::WaitForSpecialMove(bool bNoDelay)
{
	static UFunction* uFnWaitForSpecialMove = nullptr;

	if (!uFnWaitForSpecialMove)
	{
		uFnWaitForSpecialMove = UFunction::FindFunction("Function OLGame.OLBot.WaitForSpecialMove");
	}

	AOLBot_execWaitForSpecialMove_Params WaitForSpecialMove_Params;
	memset(&WaitForSpecialMove_Params, 0, sizeof(WaitForSpecialMove_Params));
	WaitForSpecialMove_Params.bNoDelay = bNoDelay;

	uFnWaitForSpecialMove->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnWaitForSpecialMove, &WaitForSpecialMove_Params, nullptr);
	uFnWaitForSpecialMove->FunctionFlags |= 0x400;
};

// Function OLGame.OLBot.WaitForFullBodyAnim
// [0x00020409] (FUNC_Final | FUNC_Latent | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::WaitForFullBodyAnim()
{
	static UFunction* uFnWaitForFullBodyAnim = nullptr;

	if (!uFnWaitForFullBodyAnim)
	{
		uFnWaitForFullBodyAnim = UFunction::FindFunction("Function OLGame.OLBot.WaitForFullBodyAnim");
	}

	AOLBot_execWaitForFullBodyAnim_Params WaitForFullBodyAnim_Params;
	memset(&WaitForFullBodyAnim_Params, 0, sizeof(WaitForFullBodyAnim_Params));

	uFnWaitForFullBodyAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnWaitForFullBodyAnim, &WaitForFullBodyAnim_Params, nullptr);
	uFnWaitForFullBodyAnim->FunctionFlags |= 0x400;
};

// Function OLGame.OLBot.TargetUnreacheable
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::TargetUnreacheable()
{
	static UFunction* uFnTargetUnreacheable = nullptr;

	if (!uFnTargetUnreacheable)
	{
		uFnTargetUnreacheable = UFunction::FindFunction("Function OLGame.OLBot.TargetUnreacheable");
	}

	AOLBot_execTargetUnreacheable_Params TargetUnreacheable_Params;
	memset(&TargetUnreacheable_Params, 0, sizeof(TargetUnreacheable_Params));

	uFnTargetUnreacheable->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTargetUnreacheable, &TargetUnreacheable_Params, nullptr);
	uFnTargetUnreacheable->FunctionFlags |= 0x400;
};

// Function OLGame.OLBot.PushPlayer
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::PushPlayer()
{
	static UFunction* uFnPushPlayer = nullptr;

	if (!uFnPushPlayer)
	{
		uFnPushPlayer = UFunction::FindFunction("Function OLGame.OLBot.PushPlayer");
	}

	AOLBot_execPushPlayer_Params PushPlayer_Params;
	memset(&PushPlayer_Params, 0, sizeof(PushPlayer_Params));

	uFnPushPlayer->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPushPlayer, &PushPlayer_Params, nullptr);
	uFnPushPlayer->FunctionFlags |= 0x400;
};

// Function OLGame.OLBot.TryKnockbackTarget
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLBot::TryKnockbackTarget()
{
	static UFunction* uFnTryKnockbackTarget = nullptr;

	if (!uFnTryKnockbackTarget)
	{
		uFnTryKnockbackTarget = UFunction::FindFunction("Function OLGame.OLBot.TryKnockbackTarget");
	}

	AOLBot_execTryKnockbackTarget_Params TryKnockbackTarget_Params;
	memset(&TryKnockbackTarget_Params, 0, sizeof(TryKnockbackTarget_Params));

	uFnTryKnockbackTarget->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTryKnockbackTarget, &TryKnockbackTarget_Params, nullptr);
	uFnTryKnockbackTarget->FunctionFlags |= 0x400;

	return TryKnockbackTarget_Params.ReturnValue;
};

// Function OLGame.OLBot.TryDamageTarget
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// bool                           bNonFatal                      (CPF_Parm)

bool AOLBot::TryDamageTarget(bool bNonFatal)
{
	static UFunction* uFnTryDamageTarget = nullptr;

	if (!uFnTryDamageTarget)
	{
		uFnTryDamageTarget = UFunction::FindFunction("Function OLGame.OLBot.TryDamageTarget");
	}

	AOLBot_execTryDamageTarget_Params TryDamageTarget_Params;
	memset(&TryDamageTarget_Params, 0, sizeof(TryDamageTarget_Params));
	TryDamageTarget_Params.bNonFatal = bNonFatal;

	uFnTryDamageTarget->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTryDamageTarget, &TryDamageTarget_Params, nullptr);
	uFnTryDamageTarget->FunctionFlags |= 0x400;

	return TryDamageTarget_Params.ReturnValue;
};

// Function OLGame.OLBot.FinishMatinee
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::FinishMatinee()
{
	static UFunction* uFnFinishMatinee = nullptr;

	if (!uFnFinishMatinee)
	{
		uFnFinishMatinee = UFunction::FindFunction("Function OLGame.OLBot.FinishMatinee");
	}

	AOLBot_execFinishMatinee_Params FinishMatinee_Params;
	memset(&FinishMatinee_Params, 0, sizeof(FinishMatinee_Params));

	uFnFinishMatinee->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFinishMatinee, &FinishMatinee_Params, nullptr);
	uFnFinishMatinee->FunctionFlags |= 0x400;
};

// Function OLGame.OLBot.BeginMatinee
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::BeginMatinee()
{
	static UFunction* uFnBeginMatinee = nullptr;

	if (!uFnBeginMatinee)
	{
		uFnBeginMatinee = UFunction::FindFunction("Function OLGame.OLBot.BeginMatinee");
	}

	AOLBot_execBeginMatinee_Params BeginMatinee_Params;
	memset(&BeginMatinee_Params, 0, sizeof(BeginMatinee_Params));

	uFnBeginMatinee->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBeginMatinee, &BeginMatinee_Params, nullptr);
	uFnBeginMatinee->FunctionFlags |= 0x400;
};

// Function OLGame.OLBot.PerformAttackCheck
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// bool                           bForSynchedAnim                (CPF_OptionalParm | CPF_Parm)

bool AOLBot::PerformAttackCheck(bool bForSynchedAnim)
{
	static UFunction* uFnPerformAttackCheck = nullptr;

	if (!uFnPerformAttackCheck)
	{
		uFnPerformAttackCheck = UFunction::FindFunction("Function OLGame.OLBot.PerformAttackCheck");
	}

	AOLBot_execPerformAttackCheck_Params PerformAttackCheck_Params;
	memset(&PerformAttackCheck_Params, 0, sizeof(PerformAttackCheck_Params));
	PerformAttackCheck_Params.bForSynchedAnim = bForSynchedAnim;

	uFnPerformAttackCheck->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPerformAttackCheck, &PerformAttackCheck_Params, nullptr);
	uFnPerformAttackCheck->FunctionFlags |= 0x400;

	return PerformAttackCheck_Params.ReturnValue;
};

// Function OLGame.OLBot.PerformGrabCheck
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLBot::PerformGrabCheck()
{
	static UFunction* uFnPerformGrabCheck = nullptr;

	if (!uFnPerformGrabCheck)
	{
		uFnPerformGrabCheck = UFunction::FindFunction("Function OLGame.OLBot.PerformGrabCheck");
	}

	AOLBot_execPerformGrabCheck_Params PerformGrabCheck_Params;
	memset(&PerformGrabCheck_Params, 0, sizeof(PerformGrabCheck_Params));

	uFnPerformGrabCheck->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPerformGrabCheck, &PerformGrabCheck_Params, nullptr);
	uFnPerformGrabCheck->FunctionFlags |= 0x400;

	return PerformGrabCheck_Params.ReturnValue;
};

// Function OLGame.OLBot.EndDoorTraversal
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::EndDoorTraversal()
{
	static UFunction* uFnEndDoorTraversal = nullptr;

	if (!uFnEndDoorTraversal)
	{
		uFnEndDoorTraversal = UFunction::FindFunction("Function OLGame.OLBot.EndDoorTraversal");
	}

	AOLBot_execEndDoorTraversal_Params EndDoorTraversal_Params;
	memset(&EndDoorTraversal_Params, 0, sizeof(EndDoorTraversal_Params));

	uFnEndDoorTraversal->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnEndDoorTraversal, &EndDoorTraversal_Params, nullptr);
	uFnEndDoorTraversal->FunctionFlags |= 0x400;
};

// Function OLGame.OLBot.StartDoorTraversal
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bReversed                      (CPF_Parm)

void AOLBot::StartDoorTraversal(bool bReversed)
{
	static UFunction* uFnStartDoorTraversal = nullptr;

	if (!uFnStartDoorTraversal)
	{
		uFnStartDoorTraversal = UFunction::FindFunction("Function OLGame.OLBot.StartDoorTraversal");
	}

	AOLBot_execStartDoorTraversal_Params StartDoorTraversal_Params;
	memset(&StartDoorTraversal_Params, 0, sizeof(StartDoorTraversal_Params));
	StartDoorTraversal_Params.bReversed = bReversed;

	uFnStartDoorTraversal->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStartDoorTraversal, &StartDoorTraversal_Params, nullptr);
	uFnStartDoorTraversal->FunctionFlags |= 0x400;
};

// Function OLGame.OLBot.StopMoving
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bAborted                       (CPF_OptionalParm | CPF_Parm)

void AOLBot::StopMoving(bool bAborted)
{
	static UFunction* uFnStopMoving = nullptr;

	if (!uFnStopMoving)
	{
		uFnStopMoving = UFunction::FindFunction("Function OLGame.OLBot.StopMoving");
	}

	AOLBot_execStopMoving_Params StopMoving_Params;
	memset(&StopMoving_Params, 0, sizeof(StopMoving_Params));
	StopMoving_Params.bAborted = bAborted;

	uFnStopMoving->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStopMoving, &StopMoving_Params, nullptr);
	uFnStopMoving->FunctionFlags |= 0x400;
};

// Function OLGame.OLBot.RegeneratePath
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::RegeneratePath()
{
	static UFunction* uFnRegeneratePath = nullptr;

	if (!uFnRegeneratePath)
	{
		uFnRegeneratePath = UFunction::FindFunction("Function OLGame.OLBot.RegeneratePath");
	}

	AOLBot_execRegeneratePath_Params RegeneratePath_Params;
	memset(&RegeneratePath_Params, 0, sizeof(RegeneratePath_Params));

	uFnRegeneratePath->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRegeneratePath, &RegeneratePath_Params, nullptr);
	uFnRegeneratePath->FunctionFlags |= 0x400;
};

// Function OLGame.OLBot.SetNavmeshValidatedMovePoint
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// bool                           bForceNudging                  (CPF_OptionalParm | CPF_Parm)
// bool                           bQuiet                         (CPF_OptionalParm | CPF_Parm)

bool AOLBot::SetNavmeshValidatedMovePoint(bool bForceNudging, bool bQuiet)
{
	static UFunction* uFnSetNavmeshValidatedMovePoint = nullptr;

	if (!uFnSetNavmeshValidatedMovePoint)
	{
		uFnSetNavmeshValidatedMovePoint = UFunction::FindFunction("Function OLGame.OLBot.SetNavmeshValidatedMovePoint");
	}

	AOLBot_execSetNavmeshValidatedMovePoint_Params SetNavmeshValidatedMovePoint_Params;
	memset(&SetNavmeshValidatedMovePoint_Params, 0, sizeof(SetNavmeshValidatedMovePoint_Params));
	SetNavmeshValidatedMovePoint_Params.bForceNudging = bForceNudging;
	SetNavmeshValidatedMovePoint_Params.bQuiet = bQuiet;

	uFnSetNavmeshValidatedMovePoint->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetNavmeshValidatedMovePoint, &SetNavmeshValidatedMovePoint_Params, nullptr);
	uFnSetNavmeshValidatedMovePoint->FunctionFlags |= 0x400;

	return SetNavmeshValidatedMovePoint_Params.ReturnValue;
};

// Function OLGame.OLBot.GeneratePath
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// bool                           bQuiet                         (CPF_OptionalParm | CPF_Parm)

bool AOLBot::GeneratePath(bool bQuiet)
{
	static UFunction* uFnGeneratePath = nullptr;

	if (!uFnGeneratePath)
	{
		uFnGeneratePath = UFunction::FindFunction("Function OLGame.OLBot.GeneratePath");
	}

	AOLBot_execGeneratePath_Params GeneratePath_Params;
	memset(&GeneratePath_Params, 0, sizeof(GeneratePath_Params));
	GeneratePath_Params.bQuiet = bQuiet;

	uFnGeneratePath->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGeneratePath, &GeneratePath_Params, nullptr);
	uFnGeneratePath->FunctionFlags |= 0x400;

	return GeneratePath_Params.ReturnValue;
};

// Function OLGame.OLBot.ClearAllActivities
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::ClearAllActivities()
{
	static UFunction* uFnClearAllActivities = nullptr;

	if (!uFnClearAllActivities)
	{
		uFnClearAllActivities = UFunction::FindFunction("Function OLGame.OLBot.ClearAllActivities");
	}

	AOLBot_execClearAllActivities_Params ClearAllActivities_Params;
	memset(&ClearAllActivities_Params, 0, sizeof(ClearAllActivities_Params));

	uFnClearAllActivities->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClearAllActivities, &ClearAllActivities_Params, nullptr);
	uFnClearAllActivities->FunctionFlags |= 0x400;
};

// Function OLGame.OLBot.ClearDestination
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::ClearDestination()
{
	static UFunction* uFnClearDestination = nullptr;

	if (!uFnClearDestination)
	{
		uFnClearDestination = UFunction::FindFunction("Function OLGame.OLBot.ClearDestination");
	}

	AOLBot_execClearDestination_Params ClearDestination_Params;
	memset(&ClearDestination_Params, 0, sizeof(ClearDestination_Params));

	uFnClearDestination->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClearDestination, &ClearDestination_Params, nullptr);
	uFnClearDestination->FunctionFlags |= 0x400;
};

// Function OLGame.OLBot.ClearInvestigation
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::ClearInvestigation()
{
	static UFunction* uFnClearInvestigation = nullptr;

	if (!uFnClearInvestigation)
	{
		uFnClearInvestigation = UFunction::FindFunction("Function OLGame.OLBot.ClearInvestigation");
	}

	AOLBot_execClearInvestigation_Params ClearInvestigation_Params;
	memset(&ClearInvestigation_Params, 0, sizeof(ClearInvestigation_Params));

	uFnClearInvestigation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClearInvestigation, &ClearInvestigation_Params, nullptr);
	uFnClearInvestigation->FunctionFlags |= 0x400;
};

// Function OLGame.OLBot.ClearNextMove
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::ClearNextMove()
{
	static UFunction* uFnClearNextMove = nullptr;

	if (!uFnClearNextMove)
	{
		uFnClearNextMove = UFunction::FindFunction("Function OLGame.OLBot.ClearNextMove");
	}

	AOLBot_execClearNextMove_Params ClearNextMove_Params;
	memset(&ClearNextMove_Params, 0, sizeof(ClearNextMove_Params));

	uFnClearNextMove->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClearNextMove, &ClearNextMove_Params, nullptr);
	uFnClearNextMove->FunctionFlags |= 0x400;
};

// Function OLGame.OLBot.ClearCurrentMove
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLBot::ClearCurrentMove()
{
	static UFunction* uFnClearCurrentMove = nullptr;

	if (!uFnClearCurrentMove)
	{
		uFnClearCurrentMove = UFunction::FindFunction("Function OLGame.OLBot.ClearCurrentMove");
	}

	AOLBot_execClearCurrentMove_Params ClearCurrentMove_Params;
	memset(&ClearCurrentMove_Params, 0, sizeof(ClearCurrentMove_Params));

	uFnClearCurrentMove->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClearCurrentMove, &ClearCurrentMove_Params, nullptr);
	uFnClearCurrentMove->FunctionFlags |= 0x400;
};

// Function OLGame.OLAICmd_MoveAbility.TurnBeforePerform
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLAICmd_MoveAbility::TurnBeforePerform()
{
	static UFunction* uFnTurnBeforePerform = nullptr;

	if (!uFnTurnBeforePerform)
	{
		uFnTurnBeforePerform = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility.TurnBeforePerform");
	}

	UOLAICmd_MoveAbility_execTurnBeforePerform_Params TurnBeforePerform_Params;
	memset(&TurnBeforePerform_Params, 0, sizeof(TurnBeforePerform_Params));

	uFnTurnBeforePerform->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTurnBeforePerform, &TurnBeforePerform_Params, nullptr);
	uFnTurnBeforePerform->FunctionFlags |= 0x400;

	return TurnBeforePerform_Params.ReturnValue;
};

// Function OLGame.OLAICmd_MoveAbility.MustTurnBeforePerform
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLAICmd_MoveAbility::MustTurnBeforePerform()
{
	static UFunction* uFnMustTurnBeforePerform = nullptr;

	if (!uFnMustTurnBeforePerform)
	{
		uFnMustTurnBeforePerform = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility.MustTurnBeforePerform");
	}

	UOLAICmd_MoveAbility_execMustTurnBeforePerform_Params MustTurnBeforePerform_Params;
	memset(&MustTurnBeforePerform_Params, 0, sizeof(MustTurnBeforePerform_Params));

	uFnMustTurnBeforePerform->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnMustTurnBeforePerform, &MustTurnBeforePerform_Params, nullptr);
	uFnMustTurnBeforePerform->FunctionFlags |= 0x400;

	return MustTurnBeforePerform_Params.ReturnValue;
};

// Function OLGame.OLAICmd_MoveAbility.ShouldWaitBeforeUsing
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLAICmd_MoveAbility::ShouldWaitBeforeUsing()
{
	static UFunction* uFnShouldWaitBeforeUsing = nullptr;

	if (!uFnShouldWaitBeforeUsing)
	{
		uFnShouldWaitBeforeUsing = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility.ShouldWaitBeforeUsing");
	}

	UOLAICmd_MoveAbility_execShouldWaitBeforeUsing_Params ShouldWaitBeforeUsing_Params;
	memset(&ShouldWaitBeforeUsing_Params, 0, sizeof(ShouldWaitBeforeUsing_Params));

	uFnShouldWaitBeforeUsing->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnShouldWaitBeforeUsing, &ShouldWaitBeforeUsing_Params, nullptr);
	uFnShouldWaitBeforeUsing->FunctionFlags |= 0x400;

	return ShouldWaitBeforeUsing_Params.ReturnValue;
};

// Function OLGame.OLAICmd_MoveAbility.IsObjectInUse
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLAICmd_MoveAbility::IsObjectInUse()
{
	static UFunction* uFnIsObjectInUse = nullptr;

	if (!uFnIsObjectInUse)
	{
		uFnIsObjectInUse = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility.IsObjectInUse");
	}

	UOLAICmd_MoveAbility_execIsObjectInUse_Params IsObjectInUse_Params;
	memset(&IsObjectInUse_Params, 0, sizeof(IsObjectInUse_Params));

	uFnIsObjectInUse->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsObjectInUse, &IsObjectInUse_Params, nullptr);
	uFnIsObjectInUse->FunctionFlags |= 0x400;

	return IsObjectInUse_Params.ReturnValue;
};

// Function OLGame.OLAICmd_MoveAbility.ModifyPath
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 NewDestination                 (CPF_Parm)
// TArray<struct FVector>         NewPath                        (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UOLAICmd_MoveAbility::ModifyPath(struct FVector NewDestination, TArray<struct FVector>& NewPath)
{
	static UFunction* uFnModifyPath = nullptr;

	if (!uFnModifyPath)
	{
		uFnModifyPath = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility.ModifyPath");
	}

	UOLAICmd_MoveAbility_execModifyPath_Params ModifyPath_Params;
	memset(&ModifyPath_Params, 0, sizeof(ModifyPath_Params));
	memcpy_s(&ModifyPath_Params.NewDestination, sizeof(ModifyPath_Params.NewDestination), &NewDestination, sizeof(NewDestination));
	memcpy_s(&ModifyPath_Params.NewPath, sizeof(ModifyPath_Params.NewPath), &NewPath, sizeof(NewPath));

	uFnModifyPath->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnModifyPath, &ModifyPath_Params, nullptr);
	uFnModifyPath->FunctionFlags |= 0x400;

	memcpy_s(&NewPath, sizeof(NewPath), &ModifyPath_Params.NewPath, sizeof(ModifyPath_Params.NewPath));
};

// Function OLGame.OLAICmd_MoveAbility.ModifyApproach
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 NewDestination                 (CPF_Parm | CPF_OutParm)

bool UOLAICmd_MoveAbility::ModifyApproach(struct FVector& NewDestination)
{
	static UFunction* uFnModifyApproach = nullptr;

	if (!uFnModifyApproach)
	{
		uFnModifyApproach = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility.ModifyApproach");
	}

	UOLAICmd_MoveAbility_execModifyApproach_Params ModifyApproach_Params;
	memset(&ModifyApproach_Params, 0, sizeof(ModifyApproach_Params));
	memcpy_s(&ModifyApproach_Params.NewDestination, sizeof(ModifyApproach_Params.NewDestination), &NewDestination, sizeof(NewDestination));

	this->ProcessEvent(uFnModifyApproach, &ModifyApproach_Params, nullptr);

	memcpy_s(&NewDestination, sizeof(NewDestination), &ModifyApproach_Params.NewDestination, sizeof(ModifyApproach_Params.NewDestination));

	return ModifyApproach_Params.ReturnValue;
};

// Function OLGame.OLAICmd_MoveAbility.Completed
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLAICmd_MoveAbility::Completed()
{
	static UFunction* uFnCompleted = nullptr;

	if (!uFnCompleted)
	{
		uFnCompleted = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility.Completed");
	}

	UOLAICmd_MoveAbility_execCompleted_Params Completed_Params;
	memset(&Completed_Params, 0, sizeof(Completed_Params));

	this->ProcessEvent(uFnCompleted, &Completed_Params, nullptr);
};

// Function OLGame.OLAICmd_MoveAbility.Popped
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLAICmd_MoveAbility::Popped()
{
	static UFunction* uFnPopped = nullptr;

	if (!uFnPopped)
	{
		uFnPopped = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility.Popped");
	}

	UOLAICmd_MoveAbility_execPopped_Params Popped_Params;
	memset(&Popped_Params, 0, sizeof(Popped_Params));

	this->ProcessEvent(uFnPopped, &Popped_Params, nullptr);
};

// Function OLGame.OLAICmd_MoveAbility.Pushed
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLAICmd_MoveAbility::Pushed()
{
	static UFunction* uFnPushed = nullptr;

	if (!uFnPushed)
	{
		uFnPushed = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility.Pushed");
	}

	UOLAICmd_MoveAbility_execPushed_Params Pushed_Params;
	memset(&Pushed_Params, 0, sizeof(Pushed_Params));

	this->ProcessEvent(uFnPushed, &Pushed_Params, nullptr);
};

// Function OLGame.OLAICmd_MoveAbility_Bash.MoveThruBashable
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLAICmd_MoveAbility_Bash* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AOLBot*                  Bot                            (CPF_Parm)
// class AOLBashableObject*       InBashable                     (CPF_Parm)
// struct FVector                 InitialDestination             (CPF_Parm)
// bool                           bInReversed                    (CPF_Parm)

class UOLAICmd_MoveAbility_Bash* UOLAICmd_MoveAbility_Bash::eventMoveThruBashable(class AOLBot* Bot, class AOLBashableObject* InBashable, struct FVector InitialDestination, bool bInReversed)
{
	static UFunction* uFnMoveThruBashable = nullptr;

	if (!uFnMoveThruBashable)
	{
		uFnMoveThruBashable = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility_Bash.MoveThruBashable");
	}

	UOLAICmd_MoveAbility_Bash_eventMoveThruBashable_Params MoveThruBashable_Params;
	memset(&MoveThruBashable_Params, 0, sizeof(MoveThruBashable_Params));
	memcpy_s(&MoveThruBashable_Params.Bot, sizeof(MoveThruBashable_Params.Bot), &Bot, sizeof(Bot));
	memcpy_s(&MoveThruBashable_Params.InBashable, sizeof(MoveThruBashable_Params.InBashable), &InBashable, sizeof(InBashable));
	memcpy_s(&MoveThruBashable_Params.InitialDestination, sizeof(MoveThruBashable_Params.InitialDestination), &InitialDestination, sizeof(InitialDestination));
	MoveThruBashable_Params.bInReversed = bInReversed;

	UOLAICmd_MoveAbility_Bash::StaticClass()->ProcessEvent(uFnMoveThruBashable, &MoveThruBashable_Params, nullptr);

	return MoveThruBashable_Params.ReturnValue;
};

// Function OLGame.OLAICmd_MoveAbility_Door.AutomaticDoorOpen
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLAICmd_MoveAbility_Door::AutomaticDoorOpen()
{
	static UFunction* uFnAutomaticDoorOpen = nullptr;

	if (!uFnAutomaticDoorOpen)
	{
		uFnAutomaticDoorOpen = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility_Door.AutomaticDoorOpen");
	}

	UOLAICmd_MoveAbility_Door_execAutomaticDoorOpen_Params AutomaticDoorOpen_Params;
	memset(&AutomaticDoorOpen_Params, 0, sizeof(AutomaticDoorOpen_Params));

	this->ProcessEvent(uFnAutomaticDoorOpen, &AutomaticDoorOpen_Params, nullptr);
};

// Function OLGame.OLAICmd_MoveAbility_Door.CancelPlayerInteraction
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLAICmd_MoveAbility_Door::CancelPlayerInteraction()
{
	static UFunction* uFnCancelPlayerInteraction = nullptr;

	if (!uFnCancelPlayerInteraction)
	{
		uFnCancelPlayerInteraction = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility_Door.CancelPlayerInteraction");
	}

	UOLAICmd_MoveAbility_Door_execCancelPlayerInteraction_Params CancelPlayerInteraction_Params;
	memset(&CancelPlayerInteraction_Params, 0, sizeof(CancelPlayerInteraction_Params));

	uFnCancelPlayerInteraction->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCancelPlayerInteraction, &CancelPlayerInteraction_Params, nullptr);
	uFnCancelPlayerInteraction->FunctionFlags |= 0x400;
};

// Function OLGame.OLAICmd_MoveAbility_Door.Cleanup
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLAICmd_MoveAbility_Door::Cleanup()
{
	static UFunction* uFnCleanup = nullptr;

	if (!uFnCleanup)
	{
		uFnCleanup = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility_Door.Cleanup");
	}

	UOLAICmd_MoveAbility_Door_execCleanup_Params Cleanup_Params;
	memset(&Cleanup_Params, 0, sizeof(Cleanup_Params));

	uFnCleanup->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCleanup, &Cleanup_Params, nullptr);
	uFnCleanup->FunctionFlags |= 0x400;
};

// Function OLGame.OLAICmd_MoveAbility_Door.GetDoorBashCount
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLAICmd_MoveAbility_Door::GetDoorBashCount()
{
	static UFunction* uFnGetDoorBashCount = nullptr;

	if (!uFnGetDoorBashCount)
	{
		uFnGetDoorBashCount = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility_Door.GetDoorBashCount");
	}

	UOLAICmd_MoveAbility_Door_execGetDoorBashCount_Params GetDoorBashCount_Params;
	memset(&GetDoorBashCount_Params, 0, sizeof(GetDoorBashCount_Params));

	uFnGetDoorBashCount->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetDoorBashCount, &GetDoorBashCount_Params, nullptr);
	uFnGetDoorBashCount->FunctionFlags |= 0x400;

	return GetDoorBashCount_Params.ReturnValue;
};

// Function OLGame.OLAICmd_MoveAbility_Door.ShouldWaitBeforeUsing
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLAICmd_MoveAbility_Door::ShouldWaitBeforeUsing()
{
	static UFunction* uFnShouldWaitBeforeUsing = nullptr;

	if (!uFnShouldWaitBeforeUsing)
	{
		uFnShouldWaitBeforeUsing = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility_Door.ShouldWaitBeforeUsing");
	}

	UOLAICmd_MoveAbility_Door_execShouldWaitBeforeUsing_Params ShouldWaitBeforeUsing_Params;
	memset(&ShouldWaitBeforeUsing_Params, 0, sizeof(ShouldWaitBeforeUsing_Params));

	uFnShouldWaitBeforeUsing->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnShouldWaitBeforeUsing, &ShouldWaitBeforeUsing_Params, nullptr);
	uFnShouldWaitBeforeUsing->FunctionFlags |= 0x400;

	return ShouldWaitBeforeUsing_Params.ReturnValue;
};

// Function OLGame.OLAICmd_MoveAbility_Door.IsObjectInUse
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLAICmd_MoveAbility_Door::IsObjectInUse()
{
	static UFunction* uFnIsObjectInUse = nullptr;

	if (!uFnIsObjectInUse)
	{
		uFnIsObjectInUse = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility_Door.IsObjectInUse");
	}

	UOLAICmd_MoveAbility_Door_execIsObjectInUse_Params IsObjectInUse_Params;
	memset(&IsObjectInUse_Params, 0, sizeof(IsObjectInUse_Params));

	uFnIsObjectInUse->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsObjectInUse, &IsObjectInUse_Params, nullptr);
	uFnIsObjectInUse->FunctionFlags |= 0x400;

	return IsObjectInUse_Params.ReturnValue;
};

// Function OLGame.OLAICmd_MoveAbility_Door.Cancel
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLAICmd_MoveAbility_Door::Cancel()
{
	static UFunction* uFnCancel = nullptr;

	if (!uFnCancel)
	{
		uFnCancel = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility_Door.Cancel");
	}

	UOLAICmd_MoveAbility_Door_execCancel_Params Cancel_Params;
	memset(&Cancel_Params, 0, sizeof(Cancel_Params));

	this->ProcessEvent(uFnCancel, &Cancel_Params, nullptr);
};

// Function OLGame.OLAICmd_MoveAbility_Door.Popped
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLAICmd_MoveAbility_Door::Popped()
{
	static UFunction* uFnPopped = nullptr;

	if (!uFnPopped)
	{
		uFnPopped = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility_Door.Popped");
	}

	UOLAICmd_MoveAbility_Door_execPopped_Params Popped_Params;
	memset(&Popped_Params, 0, sizeof(Popped_Params));

	this->ProcessEvent(uFnPopped, &Popped_Params, nullptr);
};

// Function OLGame.OLAICmd_MoveAbility_Door.ModifyApproach
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 NewDestination                 (CPF_Parm | CPF_OutParm)

bool UOLAICmd_MoveAbility_Door::ModifyApproach(struct FVector& NewDestination)
{
	static UFunction* uFnModifyApproach = nullptr;

	if (!uFnModifyApproach)
	{
		uFnModifyApproach = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility_Door.ModifyApproach");
	}

	UOLAICmd_MoveAbility_Door_execModifyApproach_Params ModifyApproach_Params;
	memset(&ModifyApproach_Params, 0, sizeof(ModifyApproach_Params));
	memcpy_s(&ModifyApproach_Params.NewDestination, sizeof(ModifyApproach_Params.NewDestination), &NewDestination, sizeof(NewDestination));

	this->ProcessEvent(uFnModifyApproach, &ModifyApproach_Params, nullptr);

	memcpy_s(&NewDestination, sizeof(NewDestination), &ModifyApproach_Params.NewDestination, sizeof(ModifyApproach_Params.NewDestination));

	return ModifyApproach_Params.ReturnValue;
};

// Function OLGame.OLAICmd_MoveAbility_Door.IsDoorOpen
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AOLDoor*                 TestDoor                       (CPF_Parm)

bool UOLAICmd_MoveAbility_Door::IsDoorOpen(class AOLDoor* TestDoor)
{
	static UFunction* uFnIsDoorOpen = nullptr;

	if (!uFnIsDoorOpen)
	{
		uFnIsDoorOpen = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility_Door.IsDoorOpen");
	}

	UOLAICmd_MoveAbility_Door_execIsDoorOpen_Params IsDoorOpen_Params;
	memset(&IsDoorOpen_Params, 0, sizeof(IsDoorOpen_Params));
	memcpy_s(&IsDoorOpen_Params.TestDoor, sizeof(IsDoorOpen_Params.TestDoor), &TestDoor, sizeof(TestDoor));

	this->ProcessEvent(uFnIsDoorOpen, &IsDoorOpen_Params, nullptr);

	return IsDoorOpen_Params.ReturnValue;
};

// Function OLGame.OLAICmd_MoveAbility_Door.MoveThruDoor
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLAICmd_MoveAbility_Door* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AOLBot*                  Bot                            (CPF_Parm)
// class AOLDoor*                 InDoor                         (CPF_Parm)
// struct FVector                 InitialDestination             (CPF_Parm)
// bool                           bInReversed                    (CPF_Parm)

class UOLAICmd_MoveAbility_Door* UOLAICmd_MoveAbility_Door::eventMoveThruDoor(class AOLBot* Bot, class AOLDoor* InDoor, struct FVector InitialDestination, bool bInReversed)
{
	static UFunction* uFnMoveThruDoor = nullptr;

	if (!uFnMoveThruDoor)
	{
		uFnMoveThruDoor = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility_Door.MoveThruDoor");
	}

	UOLAICmd_MoveAbility_Door_eventMoveThruDoor_Params MoveThruDoor_Params;
	memset(&MoveThruDoor_Params, 0, sizeof(MoveThruDoor_Params));
	memcpy_s(&MoveThruDoor_Params.Bot, sizeof(MoveThruDoor_Params.Bot), &Bot, sizeof(Bot));
	memcpy_s(&MoveThruDoor_Params.InDoor, sizeof(MoveThruDoor_Params.InDoor), &InDoor, sizeof(InDoor));
	memcpy_s(&MoveThruDoor_Params.InitialDestination, sizeof(MoveThruDoor_Params.InitialDestination), &InitialDestination, sizeof(InitialDestination));
	MoveThruDoor_Params.bInReversed = bInReversed;

	UOLAICmd_MoveAbility_Door::StaticClass()->ProcessEvent(uFnMoveThruDoor, &MoveThruDoor_Params, nullptr);

	return MoveThruDoor_Params.ReturnValue;
};

// Function OLGame.OLAICmd_MoveAbility_EnterBeam.MoveToBeam
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLAICmd_MoveAbility_EnterBeam* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AOLBot*                  Bot                            (CPF_Parm)
// class AOLBeamMarker*           InMarker                       (CPF_Parm)
// struct FVector                 InitialDestination             (CPF_Parm)

class UOLAICmd_MoveAbility_EnterBeam* UOLAICmd_MoveAbility_EnterBeam::eventMoveToBeam(class AOLBot* Bot, class AOLBeamMarker* InMarker, struct FVector InitialDestination)
{
	static UFunction* uFnMoveToBeam = nullptr;

	if (!uFnMoveToBeam)
	{
		uFnMoveToBeam = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility_EnterBeam.MoveToBeam");
	}

	UOLAICmd_MoveAbility_EnterBeam_eventMoveToBeam_Params MoveToBeam_Params;
	memset(&MoveToBeam_Params, 0, sizeof(MoveToBeam_Params));
	memcpy_s(&MoveToBeam_Params.Bot, sizeof(MoveToBeam_Params.Bot), &Bot, sizeof(Bot));
	memcpy_s(&MoveToBeam_Params.InMarker, sizeof(MoveToBeam_Params.InMarker), &InMarker, sizeof(InMarker));
	memcpy_s(&MoveToBeam_Params.InitialDestination, sizeof(MoveToBeam_Params.InitialDestination), &InitialDestination, sizeof(InitialDestination));

	UOLAICmd_MoveAbility_EnterBeam::StaticClass()->ProcessEvent(uFnMoveToBeam, &MoveToBeam_Params, nullptr);

	return MoveToBeam_Params.ReturnValue;
};

// Function OLGame.OLAICmd_MoveAbility_EnterCrawl.MoveToCrawl
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLAICmd_MoveAbility_EnterCrawl* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AOLBot*                  Bot                            (CPF_Parm)
// class AOLCrawlMarker*          InMarker                       (CPF_Parm)
// struct FVector                 InitialDestination             (CPF_Parm)

class UOLAICmd_MoveAbility_EnterCrawl* UOLAICmd_MoveAbility_EnterCrawl::eventMoveToCrawl(class AOLBot* Bot, class AOLCrawlMarker* InMarker, struct FVector InitialDestination)
{
	static UFunction* uFnMoveToCrawl = nullptr;

	if (!uFnMoveToCrawl)
	{
		uFnMoveToCrawl = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility_EnterCrawl.MoveToCrawl");
	}

	UOLAICmd_MoveAbility_EnterCrawl_eventMoveToCrawl_Params MoveToCrawl_Params;
	memset(&MoveToCrawl_Params, 0, sizeof(MoveToCrawl_Params));
	memcpy_s(&MoveToCrawl_Params.Bot, sizeof(MoveToCrawl_Params.Bot), &Bot, sizeof(Bot));
	memcpy_s(&MoveToCrawl_Params.InMarker, sizeof(MoveToCrawl_Params.InMarker), &InMarker, sizeof(InMarker));
	memcpy_s(&MoveToCrawl_Params.InitialDestination, sizeof(MoveToCrawl_Params.InitialDestination), &InitialDestination, sizeof(InitialDestination));

	UOLAICmd_MoveAbility_EnterCrawl::StaticClass()->ProcessEvent(uFnMoveToCrawl, &MoveToCrawl_Params, nullptr);

	return MoveToCrawl_Params.ReturnValue;
};

// Function OLGame.OLAICmd_MoveAbility_EnterCrawl.ShouldWaitBeforeUsing
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLAICmd_MoveAbility_EnterCrawl::ShouldWaitBeforeUsing()
{
	static UFunction* uFnShouldWaitBeforeUsing = nullptr;

	if (!uFnShouldWaitBeforeUsing)
	{
		uFnShouldWaitBeforeUsing = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility_EnterCrawl.ShouldWaitBeforeUsing");
	}

	UOLAICmd_MoveAbility_EnterCrawl_execShouldWaitBeforeUsing_Params ShouldWaitBeforeUsing_Params;
	memset(&ShouldWaitBeforeUsing_Params, 0, sizeof(ShouldWaitBeforeUsing_Params));

	uFnShouldWaitBeforeUsing->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnShouldWaitBeforeUsing, &ShouldWaitBeforeUsing_Params, nullptr);
	uFnShouldWaitBeforeUsing->FunctionFlags |= 0x400;

	return ShouldWaitBeforeUsing_Params.ReturnValue;
};

// Function OLGame.OLAICmd_MoveAbility_Jump.MoveThruJump
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLAICmd_MoveAbility_Jump* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AOLBot*                  Bot                            (CPF_Parm)
// class AOLJumpMarker*           InMarker                       (CPF_Parm)
// struct FVector                 InitialDestination             (CPF_Parm)

class UOLAICmd_MoveAbility_Jump* UOLAICmd_MoveAbility_Jump::eventMoveThruJump(class AOLBot* Bot, class AOLJumpMarker* InMarker, struct FVector InitialDestination)
{
	static UFunction* uFnMoveThruJump = nullptr;

	if (!uFnMoveThruJump)
	{
		uFnMoveThruJump = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility_Jump.MoveThruJump");
	}

	UOLAICmd_MoveAbility_Jump_eventMoveThruJump_Params MoveThruJump_Params;
	memset(&MoveThruJump_Params, 0, sizeof(MoveThruJump_Params));
	memcpy_s(&MoveThruJump_Params.Bot, sizeof(MoveThruJump_Params.Bot), &Bot, sizeof(Bot));
	memcpy_s(&MoveThruJump_Params.InMarker, sizeof(MoveThruJump_Params.InMarker), &InMarker, sizeof(InMarker));
	memcpy_s(&MoveThruJump_Params.InitialDestination, sizeof(MoveThruJump_Params.InitialDestination), &InitialDestination, sizeof(InitialDestination));

	UOLAICmd_MoveAbility_Jump::StaticClass()->ProcessEvent(uFnMoveThruJump, &MoveThruJump_Params, nullptr);

	return MoveThruJump_Params.ReturnValue;
};

// Function OLGame.OLAICmd_MoveAbility_Ledge.MoveThruLedge
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLAICmd_MoveAbility_Ledge* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AOLBot*                  Bot                            (CPF_Parm)
// class AOLLedgeMarker*          InLedge                        (CPF_Parm)
// struct FVector                 InitialDestination             (CPF_Parm)
// bool                           bInReversed                    (CPF_Parm)

class UOLAICmd_MoveAbility_Ledge* UOLAICmd_MoveAbility_Ledge::eventMoveThruLedge(class AOLBot* Bot, class AOLLedgeMarker* InLedge, struct FVector InitialDestination, bool bInReversed)
{
	static UFunction* uFnMoveThruLedge = nullptr;

	if (!uFnMoveThruLedge)
	{
		uFnMoveThruLedge = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility_Ledge.MoveThruLedge");
	}

	UOLAICmd_MoveAbility_Ledge_eventMoveThruLedge_Params MoveThruLedge_Params;
	memset(&MoveThruLedge_Params, 0, sizeof(MoveThruLedge_Params));
	memcpy_s(&MoveThruLedge_Params.Bot, sizeof(MoveThruLedge_Params.Bot), &Bot, sizeof(Bot));
	memcpy_s(&MoveThruLedge_Params.InLedge, sizeof(MoveThruLedge_Params.InLedge), &InLedge, sizeof(InLedge));
	memcpy_s(&MoveThruLedge_Params.InitialDestination, sizeof(MoveThruLedge_Params.InitialDestination), &InitialDestination, sizeof(InitialDestination));
	MoveThruLedge_Params.bInReversed = bInReversed;

	UOLAICmd_MoveAbility_Ledge::StaticClass()->ProcessEvent(uFnMoveThruLedge, &MoveThruLedge_Params, nullptr);

	return MoveThruLedge_Params.ReturnValue;
};

// Function OLGame.OLAICmd_MoveAbility_Vault.MoveThruLedge
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLAICmd_MoveAbility_Vault* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AOLBot*                  Bot                            (CPF_Parm)
// class AOLAIVaultMarker*        InMarker                       (CPF_Parm)
// struct FVector                 InitialDestination             (CPF_Parm)
// bool                           bInReversed                    (CPF_Parm)

class UOLAICmd_MoveAbility_Vault* UOLAICmd_MoveAbility_Vault::eventMoveThruLedge(class AOLBot* Bot, class AOLAIVaultMarker* InMarker, struct FVector InitialDestination, bool bInReversed)
{
	static UFunction* uFnMoveThruLedge = nullptr;

	if (!uFnMoveThruLedge)
	{
		uFnMoveThruLedge = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility_Vault.MoveThruLedge");
	}

	UOLAICmd_MoveAbility_Vault_eventMoveThruLedge_Params MoveThruLedge_Params;
	memset(&MoveThruLedge_Params, 0, sizeof(MoveThruLedge_Params));
	memcpy_s(&MoveThruLedge_Params.Bot, sizeof(MoveThruLedge_Params.Bot), &Bot, sizeof(Bot));
	memcpy_s(&MoveThruLedge_Params.InMarker, sizeof(MoveThruLedge_Params.InMarker), &InMarker, sizeof(InMarker));
	memcpy_s(&MoveThruLedge_Params.InitialDestination, sizeof(MoveThruLedge_Params.InitialDestination), &InitialDestination, sizeof(InitialDestination));
	MoveThruLedge_Params.bInReversed = bInReversed;

	UOLAICmd_MoveAbility_Vault::StaticClass()->ProcessEvent(uFnMoveThruLedge, &MoveThruLedge_Params, nullptr);

	return MoveThruLedge_Params.ReturnValue;
};

// Function OLGame.OLAICmd_MoveAbility_Window.ShouldWaitBeforeUsing
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLAICmd_MoveAbility_Window::ShouldWaitBeforeUsing()
{
	static UFunction* uFnShouldWaitBeforeUsing = nullptr;

	if (!uFnShouldWaitBeforeUsing)
	{
		uFnShouldWaitBeforeUsing = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility_Window.ShouldWaitBeforeUsing");
	}

	UOLAICmd_MoveAbility_Window_execShouldWaitBeforeUsing_Params ShouldWaitBeforeUsing_Params;
	memset(&ShouldWaitBeforeUsing_Params, 0, sizeof(ShouldWaitBeforeUsing_Params));

	uFnShouldWaitBeforeUsing->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnShouldWaitBeforeUsing, &ShouldWaitBeforeUsing_Params, nullptr);
	uFnShouldWaitBeforeUsing->FunctionFlags |= 0x400;

	return ShouldWaitBeforeUsing_Params.ReturnValue;
};

// Function OLGame.OLAICmd_MoveAbility_Window.IsObjectInUse
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLAICmd_MoveAbility_Window::IsObjectInUse()
{
	static UFunction* uFnIsObjectInUse = nullptr;

	if (!uFnIsObjectInUse)
	{
		uFnIsObjectInUse = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility_Window.IsObjectInUse");
	}

	UOLAICmd_MoveAbility_Window_execIsObjectInUse_Params IsObjectInUse_Params;
	memset(&IsObjectInUse_Params, 0, sizeof(IsObjectInUse_Params));

	uFnIsObjectInUse->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnIsObjectInUse, &IsObjectInUse_Params, nullptr);
	uFnIsObjectInUse->FunctionFlags |= 0x400;

	return IsObjectInUse_Params.ReturnValue;
};

// Function OLGame.OLAICmd_MoveAbility_Window.Cancel
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLAICmd_MoveAbility_Window::Cancel()
{
	static UFunction* uFnCancel = nullptr;

	if (!uFnCancel)
	{
		uFnCancel = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility_Window.Cancel");
	}

	UOLAICmd_MoveAbility_Window_execCancel_Params Cancel_Params;
	memset(&Cancel_Params, 0, sizeof(Cancel_Params));

	this->ProcessEvent(uFnCancel, &Cancel_Params, nullptr);
};

// Function OLGame.OLAICmd_MoveAbility_Window.Popped
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLAICmd_MoveAbility_Window::Popped()
{
	static UFunction* uFnPopped = nullptr;

	if (!uFnPopped)
	{
		uFnPopped = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility_Window.Popped");
	}

	UOLAICmd_MoveAbility_Window_execPopped_Params Popped_Params;
	memset(&Popped_Params, 0, sizeof(Popped_Params));

	this->ProcessEvent(uFnPopped, &Popped_Params, nullptr);
};

// Function OLGame.OLAICmd_MoveAbility_Window.MoveThruWindow
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLAICmd_MoveAbility_Window* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AOLBot*                  Bot                            (CPF_Parm)
// class AOLWindow*               InWindow                       (CPF_Parm)
// struct FVector                 InitialDestination             (CPF_Parm)
// bool                           bInReversed                    (CPF_Parm)

class UOLAICmd_MoveAbility_Window* UOLAICmd_MoveAbility_Window::eventMoveThruWindow(class AOLBot* Bot, class AOLWindow* InWindow, struct FVector InitialDestination, bool bInReversed)
{
	static UFunction* uFnMoveThruWindow = nullptr;

	if (!uFnMoveThruWindow)
	{
		uFnMoveThruWindow = UFunction::FindFunction("Function OLGame.OLAICmd_MoveAbility_Window.MoveThruWindow");
	}

	UOLAICmd_MoveAbility_Window_eventMoveThruWindow_Params MoveThruWindow_Params;
	memset(&MoveThruWindow_Params, 0, sizeof(MoveThruWindow_Params));
	memcpy_s(&MoveThruWindow_Params.Bot, sizeof(MoveThruWindow_Params.Bot), &Bot, sizeof(Bot));
	memcpy_s(&MoveThruWindow_Params.InWindow, sizeof(MoveThruWindow_Params.InWindow), &InWindow, sizeof(InWindow));
	memcpy_s(&MoveThruWindow_Params.InitialDestination, sizeof(MoveThruWindow_Params.InitialDestination), &InitialDestination, sizeof(InitialDestination));
	MoveThruWindow_Params.bInReversed = bInReversed;

	UOLAICmd_MoveAbility_Window::StaticClass()->ProcessEvent(uFnMoveThruWindow, &MoveThruWindow_Params, nullptr);

	return MoveThruWindow_Params.ReturnValue;
};

// Function OLGame.OLAIGroup.UseFallbackFormation
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLAIGroup::UseFallbackFormation()
{
	static UFunction* uFnUseFallbackFormation = nullptr;

	if (!uFnUseFallbackFormation)
	{
		uFnUseFallbackFormation = UFunction::FindFunction("Function OLGame.OLAIGroup.UseFallbackFormation");
	}

	UOLAIGroup_execUseFallbackFormation_Params UseFallbackFormation_Params;
	memset(&UseFallbackFormation_Params, 0, sizeof(UseFallbackFormation_Params));

	uFnUseFallbackFormation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUseFallbackFormation, &UseFallbackFormation_Params, nullptr);
	uFnUseFallbackFormation->FunctionFlags |= 0x400;
};

// Function OLGame.OLAIGroup.UseDesiredFormation
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLAIGroup::UseDesiredFormation()
{
	static UFunction* uFnUseDesiredFormation = nullptr;

	if (!uFnUseDesiredFormation)
	{
		uFnUseDesiredFormation = UFunction::FindFunction("Function OLGame.OLAIGroup.UseDesiredFormation");
	}

	UOLAIGroup_execUseDesiredFormation_Params UseDesiredFormation_Params;
	memset(&UseDesiredFormation_Params, 0, sizeof(UseDesiredFormation_Params));

	uFnUseDesiredFormation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUseDesiredFormation, &UseDesiredFormation_Params, nullptr);
	uFnUseDesiredFormation->FunctionFlags |= 0x400;
};

// Function OLGame.OLAIInvestigationVolume.ProcessActorSetVolume
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Other                          (CPF_Parm)

void AOLAIInvestigationVolume::eventProcessActorSetVolume(class AActor* Other)
{
	static UFunction* uFnProcessActorSetVolume = nullptr;

	if (!uFnProcessActorSetVolume)
	{
		uFnProcessActorSetVolume = UFunction::FindFunction("Function OLGame.OLAIInvestigationVolume.ProcessActorSetVolume");
	}

	AOLAIInvestigationVolume_eventProcessActorSetVolume_Params ProcessActorSetVolume_Params;
	memset(&ProcessActorSetVolume_Params, 0, sizeof(ProcessActorSetVolume_Params));
	memcpy_s(&ProcessActorSetVolume_Params.Other, sizeof(ProcessActorSetVolume_Params.Other), &Other, sizeof(Other));

	this->ProcessEvent(uFnProcessActorSetVolume, &ProcessActorSetVolume_Params, nullptr);
};

// Function OLGame.OLNavigationHandle.PointReachable
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 Point                          (CPF_Parm)
// struct FVector                 OverrideStartPoint             (CPF_OptionalParm | CPF_Parm)
// bool                           bAllowHitsInEndCollisionBox    (CPF_OptionalParm | CPF_Parm)

bool UOLNavigationHandle::PointReachable(struct FVector Point, struct FVector OverrideStartPoint, bool bAllowHitsInEndCollisionBox)
{
	static UFunction* uFnPointReachable = nullptr;

	if (!uFnPointReachable)
	{
		uFnPointReachable = UFunction::FindFunction("Function OLGame.OLNavigationHandle.PointReachable");
	}

	UOLNavigationHandle_execPointReachable_Params PointReachable_Params;
	memset(&PointReachable_Params, 0, sizeof(PointReachable_Params));
	memcpy_s(&PointReachable_Params.Point, sizeof(PointReachable_Params.Point), &Point, sizeof(Point));
	memcpy_s(&PointReachable_Params.OverrideStartPoint, sizeof(PointReachable_Params.OverrideStartPoint), &OverrideStartPoint, sizeof(OverrideStartPoint));
	PointReachable_Params.bAllowHitsInEndCollisionBox = bAllowHitsInEndCollisionBox;

	uFnPointReachable->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPointReachable, &PointReachable_Params, nullptr);
	uFnPointReachable->FunctionFlags |= 0x400;

	return PointReachable_Params.ReturnValue;
};

// Function OLGame.OLNavigationHandle.TrimPathByDistance
// [0x00424400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          DistanceToTrim                 (CPF_Parm)
// bool                           bStopAtMeshObject              (CPF_OptionalParm | CPF_Parm)
// struct FVector                 out_NewDestination             (CPF_Parm | CPF_OutParm)

bool UOLNavigationHandle::TrimPathByDistance(float DistanceToTrim, bool bStopAtMeshObject, struct FVector& out_NewDestination)
{
	static UFunction* uFnTrimPathByDistance = nullptr;

	if (!uFnTrimPathByDistance)
	{
		uFnTrimPathByDistance = UFunction::FindFunction("Function OLGame.OLNavigationHandle.TrimPathByDistance");
	}

	UOLNavigationHandle_execTrimPathByDistance_Params TrimPathByDistance_Params;
	memset(&TrimPathByDistance_Params, 0, sizeof(TrimPathByDistance_Params));
	memcpy_s(&TrimPathByDistance_Params.DistanceToTrim, sizeof(TrimPathByDistance_Params.DistanceToTrim), &DistanceToTrim, sizeof(DistanceToTrim));
	TrimPathByDistance_Params.bStopAtMeshObject = bStopAtMeshObject;
	memcpy_s(&TrimPathByDistance_Params.out_NewDestination, sizeof(TrimPathByDistance_Params.out_NewDestination), &out_NewDestination, sizeof(out_NewDestination));

	uFnTrimPathByDistance->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTrimPathByDistance, &TrimPathByDistance_Params, nullptr);
	uFnTrimPathByDistance->FunctionFlags |= 0x400;

	memcpy_s(&out_NewDestination, sizeof(out_NewDestination), &TrimPathByDistance_Params.out_NewDestination, sizeof(TrimPathByDistance_Params.out_NewDestination));

	return TrimPathByDistance_Params.ReturnValue;
};

// Function OLGame.OLNavigationHandle.TrimPathToLastClosedDoor
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector                 out_NewDestination             (CPF_Parm | CPF_OutParm)

bool UOLNavigationHandle::TrimPathToLastClosedDoor(struct FVector& out_NewDestination)
{
	static UFunction* uFnTrimPathToLastClosedDoor = nullptr;

	if (!uFnTrimPathToLastClosedDoor)
	{
		uFnTrimPathToLastClosedDoor = UFunction::FindFunction("Function OLGame.OLNavigationHandle.TrimPathToLastClosedDoor");
	}

	UOLNavigationHandle_execTrimPathToLastClosedDoor_Params TrimPathToLastClosedDoor_Params;
	memset(&TrimPathToLastClosedDoor_Params, 0, sizeof(TrimPathToLastClosedDoor_Params));
	memcpy_s(&TrimPathToLastClosedDoor_Params.out_NewDestination, sizeof(TrimPathToLastClosedDoor_Params.out_NewDestination), &out_NewDestination, sizeof(out_NewDestination));

	uFnTrimPathToLastClosedDoor->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTrimPathToLastClosedDoor, &TrimPathToLastClosedDoor_Params, nullptr);
	uFnTrimPathToLastClosedDoor->FunctionFlags |= 0x400;

	memcpy_s(&out_NewDestination, sizeof(out_NewDestination), &TrimPathToLastClosedDoor_Params.out_NewDestination, sizeof(TrimPathToLastClosedDoor_Params.out_NewDestination));

	return TrimPathToLastClosedDoor_Params.ReturnValue;
};

// Function OLGame.OLNavigationHandle.ClearPath
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLNavigationHandle::ClearPath()
{
	static UFunction* uFnClearPath = nullptr;

	if (!uFnClearPath)
	{
		uFnClearPath = UFunction::FindFunction("Function OLGame.OLNavigationHandle.ClearPath");
	}

	UOLNavigationHandle_execClearPath_Params ClearPath_Params;
	memset(&ClearPath_Params, 0, sizeof(ClearPath_Params));

	uFnClearPath->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnClearPath, &ClearPath_Params, nullptr);
	uFnClearPath->FunctionFlags |= 0x400;
};

// Function OLGame.OLNavigationHandle.PopMoveLocation
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLNavigationHandle::PopMoveLocation()
{
	static UFunction* uFnPopMoveLocation = nullptr;

	if (!uFnPopMoveLocation)
	{
		uFnPopMoveLocation = UFunction::FindFunction("Function OLGame.OLNavigationHandle.PopMoveLocation");
	}

	UOLNavigationHandle_execPopMoveLocation_Params PopMoveLocation_Params;
	memset(&PopMoveLocation_Params, 0, sizeof(PopMoveLocation_Params));

	uFnPopMoveLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnPopMoveLocation, &PopMoveLocation_Params, nullptr);
	uFnPopMoveLocation->FunctionFlags |= 0x400;
};

// Function OLGame.OLNavigationHandle.GetNextMovePath
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          ArrivalDistance                (CPF_Parm)
// TArray<struct FVector>         out_MovePath                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOLNavigationHandle::GetNextMovePath(float ArrivalDistance, TArray<struct FVector>& out_MovePath)
{
	static UFunction* uFnGetNextMovePath = nullptr;

	if (!uFnGetNextMovePath)
	{
		uFnGetNextMovePath = UFunction::FindFunction("Function OLGame.OLNavigationHandle.GetNextMovePath");
	}

	UOLNavigationHandle_execGetNextMovePath_Params GetNextMovePath_Params;
	memset(&GetNextMovePath_Params, 0, sizeof(GetNextMovePath_Params));
	memcpy_s(&GetNextMovePath_Params.ArrivalDistance, sizeof(GetNextMovePath_Params.ArrivalDistance), &ArrivalDistance, sizeof(ArrivalDistance));
	memcpy_s(&GetNextMovePath_Params.out_MovePath, sizeof(GetNextMovePath_Params.out_MovePath), &out_MovePath, sizeof(out_MovePath));

	uFnGetNextMovePath->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetNextMovePath, &GetNextMovePath_Params, nullptr);
	uFnGetNextMovePath->FunctionFlags |= 0x400;

	memcpy_s(&out_MovePath, sizeof(out_MovePath), &GetNextMovePath_Params.out_MovePath, sizeof(GetNextMovePath_Params.out_MovePath));

	return GetNextMovePath_Params.ReturnValue;
};

// Function OLGame.OLNavigationHandle.GetNextMoveLocation
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          ArrivalDistance                (CPF_Parm)
// struct FVector                 out_MoveDest                   (CPF_Parm | CPF_OutParm)

bool UOLNavigationHandle::GetNextMoveLocation(float ArrivalDistance, struct FVector& out_MoveDest)
{
	static UFunction* uFnGetNextMoveLocation = nullptr;

	if (!uFnGetNextMoveLocation)
	{
		uFnGetNextMoveLocation = UFunction::FindFunction("Function OLGame.OLNavigationHandle.GetNextMoveLocation");
	}

	UOLNavigationHandle_execGetNextMoveLocation_Params GetNextMoveLocation_Params;
	memset(&GetNextMoveLocation_Params, 0, sizeof(GetNextMoveLocation_Params));
	memcpy_s(&GetNextMoveLocation_Params.ArrivalDistance, sizeof(GetNextMoveLocation_Params.ArrivalDistance), &ArrivalDistance, sizeof(ArrivalDistance));
	memcpy_s(&GetNextMoveLocation_Params.out_MoveDest, sizeof(GetNextMoveLocation_Params.out_MoveDest), &out_MoveDest, sizeof(out_MoveDest));

	uFnGetNextMoveLocation->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnGetNextMoveLocation, &GetNextMoveLocation_Params, nullptr);
	uFnGetNextMoveLocation->FunctionFlags |= 0x400;

	memcpy_s(&out_MoveDest, sizeof(out_MoveDest), &GetNextMoveLocation_Params.out_MoveDest, sizeof(GetNextMoveLocation_Params.out_MoveDest));

	return GetNextMoveLocation_Params.ReturnValue;
};

// Function OLGame.OLNavigationHandle.FindPath
// [0x00424400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  out_DestActor                  (CPF_OptionalParm | CPF_Parm | CPF_OutParm)
// int32_t                        out_DestItem                   (CPF_OptionalParm | CPF_Parm | CPF_OutParm)

bool UOLNavigationHandle::FindPath(class AActor*& out_DestActor, int32_t& out_DestItem)
{
	static UFunction* uFnFindPath = nullptr;

	if (!uFnFindPath)
	{
		uFnFindPath = UFunction::FindFunction("Function OLGame.OLNavigationHandle.FindPath");
	}

	UOLNavigationHandle_execFindPath_Params FindPath_Params;
	memset(&FindPath_Params, 0, sizeof(FindPath_Params));
	memcpy_s(&FindPath_Params.out_DestActor, sizeof(FindPath_Params.out_DestActor), &out_DestActor, sizeof(out_DestActor));
	memcpy_s(&FindPath_Params.out_DestItem, sizeof(FindPath_Params.out_DestItem), &out_DestItem, sizeof(out_DestItem));

	uFnFindPath->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnFindPath, &FindPath_Params, nullptr);
	uFnFindPath->FunctionFlags |= 0x400;

	memcpy_s(&out_DestActor, sizeof(out_DestActor), &FindPath_Params.out_DestActor, sizeof(FindPath_Params.out_DestActor));
	memcpy_s(&out_DestItem, sizeof(out_DestItem), &FindPath_Params.out_DestItem, sizeof(FindPath_Params.out_DestItem));

	return FindPath_Params.ReturnValue;
};

// Function OLGame.OLNavMeshPath_SimilarToLastPath.Recycle
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLNavMeshPath_SimilarToLastPath::eventRecycle()
{
	static UFunction* uFnRecycle = nullptr;

	if (!uFnRecycle)
	{
		uFnRecycle = UFunction::FindFunction("Function OLGame.OLNavMeshPath_SimilarToLastPath.Recycle");
	}

	UOLNavMeshPath_SimilarToLastPath_eventRecycle_Params Recycle_Params;
	memset(&Recycle_Params, 0, sizeof(Recycle_Params));

	this->ProcessEvent(uFnRecycle, &Recycle_Params, nullptr);
};

// Function OLGame.OLNavMeshPath_SimilarToLastPath.SimilarToLastPath
// [0x00022002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UNavigationHandle*       NavHandle                      (CPF_Parm)

bool UOLNavMeshPath_SimilarToLastPath::SimilarToLastPath(class UNavigationHandle* NavHandle)
{
	static UFunction* uFnSimilarToLastPath = nullptr;

	if (!uFnSimilarToLastPath)
	{
		uFnSimilarToLastPath = UFunction::FindFunction("Function OLGame.OLNavMeshPath_SimilarToLastPath.SimilarToLastPath");
	}

	UOLNavMeshPath_SimilarToLastPath_execSimilarToLastPath_Params SimilarToLastPath_Params;
	memset(&SimilarToLastPath_Params, 0, sizeof(SimilarToLastPath_Params));
	memcpy_s(&SimilarToLastPath_Params.NavHandle, sizeof(SimilarToLastPath_Params.NavHandle), &NavHandle, sizeof(NavHandle));

	UOLNavMeshPath_SimilarToLastPath::StaticClass()->ProcessEvent(uFnSimilarToLastPath, &SimilarToLastPath_Params, nullptr);

	return SimilarToLastPath_Params.ReturnValue;
};

// Function OLGame.OLEnemyPawn.FinishAIGroup
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::FinishAIGroup()
{
	static UFunction* uFnFinishAIGroup = nullptr;

	if (!uFnFinishAIGroup)
	{
		uFnFinishAIGroup = UFunction::FindFunction("Function OLGame.OLEnemyPawn.FinishAIGroup");
	}

	AOLEnemyPawn_execFinishAIGroup_Params FinishAIGroup_Params;
	memset(&FinishAIGroup_Params, 0, sizeof(FinishAIGroup_Params));

	this->ProcessEvent(uFnFinishAIGroup, &FinishAIGroup_Params, nullptr);
};

// Function OLGame.OLEnemyPawn.BeginAIGroup
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::BeginAIGroup()
{
	static UFunction* uFnBeginAIGroup = nullptr;

	if (!uFnBeginAIGroup)
	{
		uFnBeginAIGroup = UFunction::FindFunction("Function OLGame.OLEnemyPawn.BeginAIGroup");
	}

	AOLEnemyPawn_execBeginAIGroup_Params BeginAIGroup_Params;
	memset(&BeginAIGroup_Params, 0, sizeof(BeginAIGroup_Params));

	this->ProcessEvent(uFnBeginAIGroup, &BeginAIGroup_Params, nullptr);
};

// Function OLGame.OLEnemyPawn.OnAnimEnd
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UAnimNodeSequence*       SeqNode                        (CPF_Parm)
// float                          PlayedTime                     (CPF_Parm)
// float                          ExcessTime                     (CPF_Parm)

void AOLEnemyPawn::eventOnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime)
{
	static UFunction* uFnOnAnimEnd = nullptr;

	if (!uFnOnAnimEnd)
	{
		uFnOnAnimEnd = UFunction::FindFunction("Function OLGame.OLEnemyPawn.OnAnimEnd");
	}

	AOLEnemyPawn_eventOnAnimEnd_Params OnAnimEnd_Params;
	memset(&OnAnimEnd_Params, 0, sizeof(OnAnimEnd_Params));
	memcpy_s(&OnAnimEnd_Params.SeqNode, sizeof(OnAnimEnd_Params.SeqNode), &SeqNode, sizeof(SeqNode));
	memcpy_s(&OnAnimEnd_Params.PlayedTime, sizeof(OnAnimEnd_Params.PlayedTime), &PlayedTime, sizeof(PlayedTime));
	memcpy_s(&OnAnimEnd_Params.ExcessTime, sizeof(OnAnimEnd_Params.ExcessTime), &ExcessTime, sizeof(ExcessTime));

	this->ProcessEvent(uFnOnAnimEnd, &OnAnimEnd_Params, nullptr);
};

// Function OLGame.OLEnemyPawn.NativeOnAnimEnd
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UAnimNodeSequence*       SeqNode                        (CPF_Parm)
// float                          PlayedTime                     (CPF_Parm)
// float                          ExcessTime                     (CPF_Parm)

void AOLEnemyPawn::NativeOnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime)
{
	static UFunction* uFnNativeOnAnimEnd = nullptr;

	if (!uFnNativeOnAnimEnd)
	{
		uFnNativeOnAnimEnd = UFunction::FindFunction("Function OLGame.OLEnemyPawn.NativeOnAnimEnd");
	}

	AOLEnemyPawn_execNativeOnAnimEnd_Params NativeOnAnimEnd_Params;
	memset(&NativeOnAnimEnd_Params, 0, sizeof(NativeOnAnimEnd_Params));
	memcpy_s(&NativeOnAnimEnd_Params.SeqNode, sizeof(NativeOnAnimEnd_Params.SeqNode), &SeqNode, sizeof(SeqNode));
	memcpy_s(&NativeOnAnimEnd_Params.PlayedTime, sizeof(NativeOnAnimEnd_Params.PlayedTime), &PlayedTime, sizeof(PlayedTime));
	memcpy_s(&NativeOnAnimEnd_Params.ExcessTime, sizeof(NativeOnAnimEnd_Params.ExcessTime), &ExcessTime, sizeof(ExcessTime));

	uFnNativeOnAnimEnd->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeOnAnimEnd, &NativeOnAnimEnd_Params, nullptr);
	uFnNativeOnAnimEnd->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.StartNormalAttack
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::StartNormalAttack()
{
	static UFunction* uFnStartNormalAttack = nullptr;

	if (!uFnStartNormalAttack)
	{
		uFnStartNormalAttack = UFunction::FindFunction("Function OLGame.OLEnemyPawn.StartNormalAttack");
	}

	AOLEnemyPawn_execStartNormalAttack_Params StartNormalAttack_Params;
	memset(&StartNormalAttack_Params, 0, sizeof(StartNormalAttack_Params));

	uFnStartNormalAttack->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStartNormalAttack, &StartNormalAttack_Params, nullptr);
	uFnStartNormalAttack->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.StartDoorKnockback
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 Direction                      (CPF_Parm)
// bool                           bLocker                        (CPF_Parm)

void AOLEnemyPawn::StartDoorKnockback(struct FVector Direction, bool bLocker)
{
	static UFunction* uFnStartDoorKnockback = nullptr;

	if (!uFnStartDoorKnockback)
	{
		uFnStartDoorKnockback = UFunction::FindFunction("Function OLGame.OLEnemyPawn.StartDoorKnockback");
	}

	AOLEnemyPawn_execStartDoorKnockback_Params StartDoorKnockback_Params;
	memset(&StartDoorKnockback_Params, 0, sizeof(StartDoorKnockback_Params));
	memcpy_s(&StartDoorKnockback_Params.Direction, sizeof(StartDoorKnockback_Params.Direction), &Direction, sizeof(Direction));
	StartDoorKnockback_Params.bLocker = bLocker;

	uFnStartDoorKnockback->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStartDoorKnockback, &StartDoorKnockback_Params, nullptr);
	uFnStartDoorKnockback->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.StartKnockback
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AOLHero*                 Hero                           (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)

void AOLEnemyPawn::StartKnockback(class AOLHero* Hero, struct FVector HitNormal)
{
	static UFunction* uFnStartKnockback = nullptr;

	if (!uFnStartKnockback)
	{
		uFnStartKnockback = UFunction::FindFunction("Function OLGame.OLEnemyPawn.StartKnockback");
	}

	AOLEnemyPawn_execStartKnockback_Params StartKnockback_Params;
	memset(&StartKnockback_Params, 0, sizeof(StartKnockback_Params));
	memcpy_s(&StartKnockback_Params.Hero, sizeof(StartKnockback_Params.Hero), &Hero, sizeof(Hero));
	memcpy_s(&StartKnockback_Params.HitNormal, sizeof(StartKnockback_Params.HitNormal), &HitNormal, sizeof(HitNormal));

	uFnStartKnockback->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStartKnockback, &StartKnockback_Params, nullptr);
	uFnStartKnockback->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.StartAvoid
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AOLEnemyPawn*            OtherPawn                      (CPF_Parm)

void AOLEnemyPawn::StartAvoid(class AOLEnemyPawn* OtherPawn)
{
	static UFunction* uFnStartAvoid = nullptr;

	if (!uFnStartAvoid)
	{
		uFnStartAvoid = UFunction::FindFunction("Function OLGame.OLEnemyPawn.StartAvoid");
	}

	AOLEnemyPawn_execStartAvoid_Params StartAvoid_Params;
	memset(&StartAvoid_Params, 0, sizeof(StartAvoid_Params));
	memcpy_s(&StartAvoid_Params.OtherPawn, sizeof(StartAvoid_Params.OtherPawn), &OtherPawn, sizeof(OtherPawn));

	uFnStartAvoid->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStartAvoid, &StartAvoid_Params, nullptr);
	uFnStartAvoid->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.StopMoving
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::StopMoving()
{
	static UFunction* uFnStopMoving = nullptr;

	if (!uFnStopMoving)
	{
		uFnStopMoving = UFunction::FindFunction("Function OLGame.OLEnemyPawn.StopMoving");
	}

	AOLEnemyPawn_execStopMoving_Params StopMoving_Params;
	memset(&StopMoving_Params, 0, sizeof(StopMoving_Params));

	uFnStopMoving->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStopMoving, &StopMoving_Params, nullptr);
	uFnStopMoving->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.StartMoving
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::StartMoving()
{
	static UFunction* uFnStartMoving = nullptr;

	if (!uFnStartMoving)
	{
		uFnStartMoving = UFunction::FindFunction("Function OLGame.OLEnemyPawn.StartMoving");
	}

	AOLEnemyPawn_execStartMoving_Params StartMoving_Params;
	memset(&StartMoving_Params, 0, sizeof(StartMoving_Params));

	uFnStartMoving->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStartMoving, &StartMoving_Params, nullptr);
	uFnStartMoving->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.PlayFullBodyAnim
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FName                   AnimName                       (CPF_Parm)
// float                          Rate                           (CPF_Parm)
// float                          BlendInTime                    (CPF_OptionalParm | CPF_Parm)
// float                          BlendOutTime                   (CPF_OptionalParm | CPF_Parm)
// bool                           bLooping                       (CPF_OptionalParm | CPF_Parm)
// float                          StartTime                      (CPF_OptionalParm | CPF_Parm)
// float                          EndTime                        (CPF_OptionalParm | CPF_Parm)

void AOLEnemyPawn::PlayFullBodyAnim(struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, bool bLooping, float StartTime, float EndTime)
{
	static UFunction* uFnPlayFullBodyAnim = nullptr;

	if (!uFnPlayFullBodyAnim)
	{
		uFnPlayFullBodyAnim = UFunction::FindFunction("Function OLGame.OLEnemyPawn.PlayFullBodyAnim");
	}

	AOLEnemyPawn_execPlayFullBodyAnim_Params PlayFullBodyAnim_Params;
	memset(&PlayFullBodyAnim_Params, 0, sizeof(PlayFullBodyAnim_Params));
	memcpy_s(&PlayFullBodyAnim_Params.AnimName, sizeof(PlayFullBodyAnim_Params.AnimName), &AnimName, sizeof(AnimName));
	memcpy_s(&PlayFullBodyAnim_Params.Rate, sizeof(PlayFullBodyAnim_Params.Rate), &Rate, sizeof(Rate));
	memcpy_s(&PlayFullBodyAnim_Params.BlendInTime, sizeof(PlayFullBodyAnim_Params.BlendInTime), &BlendInTime, sizeof(BlendInTime));
	memcpy_s(&PlayFullBodyAnim_Params.BlendOutTime, sizeof(PlayFullBodyAnim_Params.BlendOutTime), &BlendOutTime, sizeof(BlendOutTime));
	PlayFullBodyAnim_Params.bLooping = bLooping;
	memcpy_s(&PlayFullBodyAnim_Params.StartTime, sizeof(PlayFullBodyAnim_Params.StartTime), &StartTime, sizeof(StartTime));
	memcpy_s(&PlayFullBodyAnim_Params.EndTime, sizeof(PlayFullBodyAnim_Params.EndTime), &EndTime, sizeof(EndTime));

	this->ProcessEvent(uFnPlayFullBodyAnim, &PlayFullBodyAnim_Params, nullptr);
};

// Function OLGame.OLEnemyPawn.PlayParticleEffect
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UAnimNotify_PlayParticleEffect* AnimNotifyData                 (CPF_Const | CPF_Parm)

bool AOLEnemyPawn::eventPlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData)
{
	static UFunction* uFnPlayParticleEffect = nullptr;

	if (!uFnPlayParticleEffect)
	{
		uFnPlayParticleEffect = UFunction::FindFunction("Function OLGame.OLEnemyPawn.PlayParticleEffect");
	}

	AOLEnemyPawn_eventPlayParticleEffect_Params PlayParticleEffect_Params;
	memset(&PlayParticleEffect_Params, 0, sizeof(PlayParticleEffect_Params));
	memcpy_s(&PlayParticleEffect_Params.AnimNotifyData, sizeof(PlayParticleEffect_Params.AnimNotifyData), &AnimNotifyData, sizeof(AnimNotifyData));

	this->ProcessEvent(uFnPlayParticleEffect, &PlayParticleEffect_Params, nullptr);

	return PlayParticleEffect_Params.ReturnValue;
};

// Function OLGame.OLEnemyPawn.NativePlayParticleEffect
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UAnimNotify_PlayParticleEffect* AnimNotifyData                 (CPF_Const | CPF_Parm)

bool AOLEnemyPawn::NativePlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData)
{
	static UFunction* uFnNativePlayParticleEffect = nullptr;

	if (!uFnNativePlayParticleEffect)
	{
		uFnNativePlayParticleEffect = UFunction::FindFunction("Function OLGame.OLEnemyPawn.NativePlayParticleEffect");
	}

	AOLEnemyPawn_execNativePlayParticleEffect_Params NativePlayParticleEffect_Params;
	memset(&NativePlayParticleEffect_Params, 0, sizeof(NativePlayParticleEffect_Params));
	memcpy_s(&NativePlayParticleEffect_Params.AnimNotifyData, sizeof(NativePlayParticleEffect_Params.AnimNotifyData), &AnimNotifyData, sizeof(AnimNotifyData));

	uFnNativePlayParticleEffect->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativePlayParticleEffect, &NativePlayParticleEffect_Params, nullptr);
	uFnNativePlayParticleEffect->FunctionFlags |= 0x400;

	return NativePlayParticleEffect_Params.ReturnValue;
};

// Function OLGame.OLEnemyPawn.HideWeaponMatinee
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::eventHideWeaponMatinee()
{
	static UFunction* uFnHideWeaponMatinee = nullptr;

	if (!uFnHideWeaponMatinee)
	{
		uFnHideWeaponMatinee = UFunction::FindFunction("Function OLGame.OLEnemyPawn.HideWeaponMatinee");
	}

	AOLEnemyPawn_eventHideWeaponMatinee_Params HideWeaponMatinee_Params;
	memset(&HideWeaponMatinee_Params, 0, sizeof(HideWeaponMatinee_Params));

	this->ProcessEvent(uFnHideWeaponMatinee, &HideWeaponMatinee_Params, nullptr);
};

// Function OLGame.OLEnemyPawn.ShowWeaponMatinee
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::eventShowWeaponMatinee()
{
	static UFunction* uFnShowWeaponMatinee = nullptr;

	if (!uFnShowWeaponMatinee)
	{
		uFnShowWeaponMatinee = UFunction::FindFunction("Function OLGame.OLEnemyPawn.ShowWeaponMatinee");
	}

	AOLEnemyPawn_eventShowWeaponMatinee_Params ShowWeaponMatinee_Params;
	memset(&ShowWeaponMatinee_Params, 0, sizeof(ShowWeaponMatinee_Params));

	this->ProcessEvent(uFnShowWeaponMatinee, &ShowWeaponMatinee_Params, nullptr);
};

// Function OLGame.OLEnemyPawn.PushNotify
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::eventPushNotify()
{
	static UFunction* uFnPushNotify = nullptr;

	if (!uFnPushNotify)
	{
		uFnPushNotify = UFunction::FindFunction("Function OLGame.OLEnemyPawn.PushNotify");
	}

	AOLEnemyPawn_eventPushNotify_Params PushNotify_Params;
	memset(&PushNotify_Params, 0, sizeof(PushNotify_Params));

	this->ProcessEvent(uFnPushNotify, &PushNotify_Params, nullptr);
};

// Function OLGame.OLEnemyPawn.KnockbackTickNotify
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::eventKnockbackTickNotify()
{
	static UFunction* uFnKnockbackTickNotify = nullptr;

	if (!uFnKnockbackTickNotify)
	{
		uFnKnockbackTickNotify = UFunction::FindFunction("Function OLGame.OLEnemyPawn.KnockbackTickNotify");
	}

	AOLEnemyPawn_eventKnockbackTickNotify_Params KnockbackTickNotify_Params;
	memset(&KnockbackTickNotify_Params, 0, sizeof(KnockbackTickNotify_Params));

	this->ProcessEvent(uFnKnockbackTickNotify, &KnockbackTickNotify_Params, nullptr);
};

// Function OLGame.OLEnemyPawn.KnockbackStartNotify
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::eventKnockbackStartNotify()
{
	static UFunction* uFnKnockbackStartNotify = nullptr;

	if (!uFnKnockbackStartNotify)
	{
		uFnKnockbackStartNotify = UFunction::FindFunction("Function OLGame.OLEnemyPawn.KnockbackStartNotify");
	}

	AOLEnemyPawn_eventKnockbackStartNotify_Params KnockbackStartNotify_Params;
	memset(&KnockbackStartNotify_Params, 0, sizeof(KnockbackStartNotify_Params));

	this->ProcessEvent(uFnKnockbackStartNotify, &KnockbackStartNotify_Params, nullptr);
};

// Function OLGame.OLEnemyPawn.BreakDoorNotify
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::eventBreakDoorNotify()
{
	static UFunction* uFnBreakDoorNotify = nullptr;

	if (!uFnBreakDoorNotify)
	{
		uFnBreakDoorNotify = UFunction::FindFunction("Function OLGame.OLEnemyPawn.BreakDoorNotify");
	}

	AOLEnemyPawn_eventBreakDoorNotify_Params BreakDoorNotify_Params;
	memset(&BreakDoorNotify_Params, 0, sizeof(BreakDoorNotify_Params));

	this->ProcessEvent(uFnBreakDoorNotify, &BreakDoorNotify_Params, nullptr);
};

// Function OLGame.OLEnemyPawn.BashDoorNotify
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::eventBashDoorNotify()
{
	static UFunction* uFnBashDoorNotify = nullptr;

	if (!uFnBashDoorNotify)
	{
		uFnBashDoorNotify = UFunction::FindFunction("Function OLGame.OLEnemyPawn.BashDoorNotify");
	}

	AOLEnemyPawn_eventBashDoorNotify_Params BashDoorNotify_Params;
	memset(&BashDoorNotify_Params, 0, sizeof(BashDoorNotify_Params));

	this->ProcessEvent(uFnBashDoorNotify, &BashDoorNotify_Params, nullptr);
};

// Function OLGame.OLEnemyPawn.DamageTargetRangeTickNotify
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::eventDamageTargetRangeTickNotify()
{
	static UFunction* uFnDamageTargetRangeTickNotify = nullptr;

	if (!uFnDamageTargetRangeTickNotify)
	{
		uFnDamageTargetRangeTickNotify = UFunction::FindFunction("Function OLGame.OLEnemyPawn.DamageTargetRangeTickNotify");
	}

	AOLEnemyPawn_eventDamageTargetRangeTickNotify_Params DamageTargetRangeTickNotify_Params;
	memset(&DamageTargetRangeTickNotify_Params, 0, sizeof(DamageTargetRangeTickNotify_Params));

	this->ProcessEvent(uFnDamageTargetRangeTickNotify, &DamageTargetRangeTickNotify_Params, nullptr);
};

// Function OLGame.OLEnemyPawn.HeadButtRangeStartNotify
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::eventHeadButtRangeStartNotify()
{
	static UFunction* uFnHeadButtRangeStartNotify = nullptr;

	if (!uFnHeadButtRangeStartNotify)
	{
		uFnHeadButtRangeStartNotify = UFunction::FindFunction("Function OLGame.OLEnemyPawn.HeadButtRangeStartNotify");
	}

	AOLEnemyPawn_eventHeadButtRangeStartNotify_Params HeadButtRangeStartNotify_Params;
	memset(&HeadButtRangeStartNotify_Params, 0, sizeof(HeadButtRangeStartNotify_Params));

	this->ProcessEvent(uFnHeadButtRangeStartNotify, &HeadButtRangeStartNotify_Params, nullptr);
};

// Function OLGame.OLEnemyPawn.PunchLHRangeStartNotify
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::eventPunchLHRangeStartNotify()
{
	static UFunction* uFnPunchLHRangeStartNotify = nullptr;

	if (!uFnPunchLHRangeStartNotify)
	{
		uFnPunchLHRangeStartNotify = UFunction::FindFunction("Function OLGame.OLEnemyPawn.PunchLHRangeStartNotify");
	}

	AOLEnemyPawn_eventPunchLHRangeStartNotify_Params PunchLHRangeStartNotify_Params;
	memset(&PunchLHRangeStartNotify_Params, 0, sizeof(PunchLHRangeStartNotify_Params));

	this->ProcessEvent(uFnPunchLHRangeStartNotify, &PunchLHRangeStartNotify_Params, nullptr);
};

// Function OLGame.OLEnemyPawn.PunchRHRangeStartNotify
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::eventPunchRHRangeStartNotify()
{
	static UFunction* uFnPunchRHRangeStartNotify = nullptr;

	if (!uFnPunchRHRangeStartNotify)
	{
		uFnPunchRHRangeStartNotify = UFunction::FindFunction("Function OLGame.OLEnemyPawn.PunchRHRangeStartNotify");
	}

	AOLEnemyPawn_eventPunchRHRangeStartNotify_Params PunchRHRangeStartNotify_Params;
	memset(&PunchRHRangeStartNotify_Params, 0, sizeof(PunchRHRangeStartNotify_Params));

	this->ProcessEvent(uFnPunchRHRangeStartNotify, &PunchRHRangeStartNotify_Params, nullptr);
};

// Function OLGame.OLEnemyPawn.DamageTargetRangeStartNotify
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::eventDamageTargetRangeStartNotify()
{
	static UFunction* uFnDamageTargetRangeStartNotify = nullptr;

	if (!uFnDamageTargetRangeStartNotify)
	{
		uFnDamageTargetRangeStartNotify = UFunction::FindFunction("Function OLGame.OLEnemyPawn.DamageTargetRangeStartNotify");
	}

	AOLEnemyPawn_eventDamageTargetRangeStartNotify_Params DamageTargetRangeStartNotify_Params;
	memset(&DamageTargetRangeStartNotify_Params, 0, sizeof(DamageTargetRangeStartNotify_Params));

	this->ProcessEvent(uFnDamageTargetRangeStartNotify, &DamageTargetRangeStartNotify_Params, nullptr);
};

// Function OLGame.OLEnemyPawn.DamageTargetNonFatal
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::eventDamageTargetNonFatal()
{
	static UFunction* uFnDamageTargetNonFatal = nullptr;

	if (!uFnDamageTargetNonFatal)
	{
		uFnDamageTargetNonFatal = UFunction::FindFunction("Function OLGame.OLEnemyPawn.DamageTargetNonFatal");
	}

	AOLEnemyPawn_eventDamageTargetNonFatal_Params DamageTargetNonFatal_Params;
	memset(&DamageTargetNonFatal_Params, 0, sizeof(DamageTargetNonFatal_Params));

	this->ProcessEvent(uFnDamageTargetNonFatal, &DamageTargetNonFatal_Params, nullptr);
};

// Function OLGame.OLEnemyPawn.KickPlayerRightFoot
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::eventKickPlayerRightFoot()
{
	static UFunction* uFnKickPlayerRightFoot = nullptr;

	if (!uFnKickPlayerRightFoot)
	{
		uFnKickPlayerRightFoot = UFunction::FindFunction("Function OLGame.OLEnemyPawn.KickPlayerRightFoot");
	}

	AOLEnemyPawn_eventKickPlayerRightFoot_Params KickPlayerRightFoot_Params;
	memset(&KickPlayerRightFoot_Params, 0, sizeof(KickPlayerRightFoot_Params));

	this->ProcessEvent(uFnKickPlayerRightFoot, &KickPlayerRightFoot_Params, nullptr);
};

// Function OLGame.OLEnemyPawn.DamageTarget
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::eventDamageTarget()
{
	static UFunction* uFnDamageTarget = nullptr;

	if (!uFnDamageTarget)
	{
		uFnDamageTarget = UFunction::FindFunction("Function OLGame.OLEnemyPawn.DamageTarget");
	}

	AOLEnemyPawn_eventDamageTarget_Params DamageTarget_Params;
	memset(&DamageTarget_Params, 0, sizeof(DamageTarget_Params));

	this->ProcessEvent(uFnDamageTarget, &DamageTarget_Params, nullptr);
};

// Function OLGame.OLEnemyPawn.WindowBreakNotify
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::eventWindowBreakNotify()
{
	static UFunction* uFnWindowBreakNotify = nullptr;

	if (!uFnWindowBreakNotify)
	{
		uFnWindowBreakNotify = UFunction::FindFunction("Function OLGame.OLEnemyPawn.WindowBreakNotify");
	}

	AOLEnemyPawn_eventWindowBreakNotify_Params WindowBreakNotify_Params;
	memset(&WindowBreakNotify_Params, 0, sizeof(WindowBreakNotify_Params));

	this->ProcessEvent(uFnWindowBreakNotify, &WindowBreakNotify_Params, nullptr);
};

// Function OLGame.OLEnemyPawn.RestoreHiddenWeapon
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::RestoreHiddenWeapon()
{
	static UFunction* uFnRestoreHiddenWeapon = nullptr;

	if (!uFnRestoreHiddenWeapon)
	{
		uFnRestoreHiddenWeapon = UFunction::FindFunction("Function OLGame.OLEnemyPawn.RestoreHiddenWeapon");
	}

	AOLEnemyPawn_execRestoreHiddenWeapon_Params RestoreHiddenWeapon_Params;
	memset(&RestoreHiddenWeapon_Params, 0, sizeof(RestoreHiddenWeapon_Params));

	uFnRestoreHiddenWeapon->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRestoreHiddenWeapon, &RestoreHiddenWeapon_Params, nullptr);
	uFnRestoreHiddenWeapon->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.TemporaryHideWeapon
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::TemporaryHideWeapon()
{
	static UFunction* uFnTemporaryHideWeapon = nullptr;

	if (!uFnTemporaryHideWeapon)
	{
		uFnTemporaryHideWeapon = UFunction::FindFunction("Function OLGame.OLEnemyPawn.TemporaryHideWeapon");
	}

	AOLEnemyPawn_execTemporaryHideWeapon_Params TemporaryHideWeapon_Params;
	memset(&TemporaryHideWeapon_Params, 0, sizeof(TemporaryHideWeapon_Params));

	uFnTemporaryHideWeapon->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnTemporaryHideWeapon, &TemporaryHideWeapon_Params, nullptr);
	uFnTemporaryHideWeapon->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.HideWeapon
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::HideWeapon()
{
	static UFunction* uFnHideWeapon = nullptr;

	if (!uFnHideWeapon)
	{
		uFnHideWeapon = UFunction::FindFunction("Function OLGame.OLEnemyPawn.HideWeapon");
	}

	AOLEnemyPawn_execHideWeapon_Params HideWeapon_Params;
	memset(&HideWeapon_Params, 0, sizeof(HideWeapon_Params));

	uFnHideWeapon->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnHideWeapon, &HideWeapon_Params, nullptr);
	uFnHideWeapon->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.ShowWeapon
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::ShowWeapon()
{
	static UFunction* uFnShowWeapon = nullptr;

	if (!uFnShowWeapon)
	{
		uFnShowWeapon = UFunction::FindFunction("Function OLGame.OLEnemyPawn.ShowWeapon");
	}

	AOLEnemyPawn_execShowWeapon_Params ShowWeapon_Params;
	memset(&ShowWeapon_Params, 0, sizeof(ShowWeapon_Params));

	uFnShowWeapon->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnShowWeapon, &ShowWeapon_Params, nullptr);
	uFnShowWeapon->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.ExitStairsStartBlendOutNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::ExitStairsStartBlendOutNotify()
{
	static UFunction* uFnExitStairsStartBlendOutNotify = nullptr;

	if (!uFnExitStairsStartBlendOutNotify)
	{
		uFnExitStairsStartBlendOutNotify = UFunction::FindFunction("Function OLGame.OLEnemyPawn.ExitStairsStartBlendOutNotify");
	}

	AOLEnemyPawn_execExitStairsStartBlendOutNotify_Params ExitStairsStartBlendOutNotify_Params;
	memset(&ExitStairsStartBlendOutNotify_Params, 0, sizeof(ExitStairsStartBlendOutNotify_Params));

	uFnExitStairsStartBlendOutNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnExitStairsStartBlendOutNotify, &ExitStairsStartBlendOutNotify_Params, nullptr);
	uFnExitStairsStartBlendOutNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.EnterStairsStartBlendInNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::EnterStairsStartBlendInNotify()
{
	static UFunction* uFnEnterStairsStartBlendInNotify = nullptr;

	if (!uFnEnterStairsStartBlendInNotify)
	{
		uFnEnterStairsStartBlendInNotify = UFunction::FindFunction("Function OLGame.OLEnemyPawn.EnterStairsStartBlendInNotify");
	}

	AOLEnemyPawn_execEnterStairsStartBlendInNotify_Params EnterStairsStartBlendInNotify_Params;
	memset(&EnterStairsStartBlendInNotify_Params, 0, sizeof(EnterStairsStartBlendInNotify_Params));

	uFnEnterStairsStartBlendInNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnEnterStairsStartBlendInNotify, &EnterStairsStartBlendInNotify_Params, nullptr);
	uFnEnterStairsStartBlendInNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.DoorUnlockNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::DoorUnlockNotify()
{
	static UFunction* uFnDoorUnlockNotify = nullptr;

	if (!uFnDoorUnlockNotify)
	{
		uFnDoorUnlockNotify = UFunction::FindFunction("Function OLGame.OLEnemyPawn.DoorUnlockNotify");
	}

	AOLEnemyPawn_execDoorUnlockNotify_Params DoorUnlockNotify_Params;
	memset(&DoorUnlockNotify_Params, 0, sizeof(DoorUnlockNotify_Params));

	uFnDoorUnlockNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnDoorUnlockNotify, &DoorUnlockNotify_Params, nullptr);
	uFnDoorUnlockNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.WardrobeDoorEndNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::WardrobeDoorEndNotify()
{
	static UFunction* uFnWardrobeDoorEndNotify = nullptr;

	if (!uFnWardrobeDoorEndNotify)
	{
		uFnWardrobeDoorEndNotify = UFunction::FindFunction("Function OLGame.OLEnemyPawn.WardrobeDoorEndNotify");
	}

	AOLEnemyPawn_execWardrobeDoorEndNotify_Params WardrobeDoorEndNotify_Params;
	memset(&WardrobeDoorEndNotify_Params, 0, sizeof(WardrobeDoorEndNotify_Params));

	uFnWardrobeDoorEndNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnWardrobeDoorEndNotify, &WardrobeDoorEndNotify_Params, nullptr);
	uFnWardrobeDoorEndNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.WardrobeDoorNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::WardrobeDoorNotify()
{
	static UFunction* uFnWardrobeDoorNotify = nullptr;

	if (!uFnWardrobeDoorNotify)
	{
		uFnWardrobeDoorNotify = UFunction::FindFunction("Function OLGame.OLEnemyPawn.WardrobeDoorNotify");
	}

	AOLEnemyPawn_execWardrobeDoorNotify_Params WardrobeDoorNotify_Params;
	memset(&WardrobeDoorNotify_Params, 0, sizeof(WardrobeDoorNotify_Params));

	uFnWardrobeDoorNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnWardrobeDoorNotify, &WardrobeDoorNotify_Params, nullptr);
	uFnWardrobeDoorNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.WindowAnimEndNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::WindowAnimEndNotify()
{
	static UFunction* uFnWindowAnimEndNotify = nullptr;

	if (!uFnWindowAnimEndNotify)
	{
		uFnWindowAnimEndNotify = UFunction::FindFunction("Function OLGame.OLEnemyPawn.WindowAnimEndNotify");
	}

	AOLEnemyPawn_execWindowAnimEndNotify_Params WindowAnimEndNotify_Params;
	memset(&WindowAnimEndNotify_Params, 0, sizeof(WindowAnimEndNotify_Params));

	uFnWindowAnimEndNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnWindowAnimEndNotify, &WindowAnimEndNotify_Params, nullptr);
	uFnWindowAnimEndNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.WindowAnimStartNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::WindowAnimStartNotify()
{
	static UFunction* uFnWindowAnimStartNotify = nullptr;

	if (!uFnWindowAnimStartNotify)
	{
		uFnWindowAnimStartNotify = UFunction::FindFunction("Function OLGame.OLEnemyPawn.WindowAnimStartNotify");
	}

	AOLEnemyPawn_execWindowAnimStartNotify_Params WindowAnimStartNotify_Params;
	memset(&WindowAnimStartNotify_Params, 0, sizeof(WindowAnimStartNotify_Params));

	uFnWindowAnimStartNotify->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnWindowAnimStartNotify, &WindowAnimStartNotify_Params, nullptr);
	uFnWindowAnimStartNotify->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.NativeDestroyed
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::NativeDestroyed()
{
	static UFunction* uFnNativeDestroyed = nullptr;

	if (!uFnNativeDestroyed)
	{
		uFnNativeDestroyed = UFunction::FindFunction("Function OLGame.OLEnemyPawn.NativeDestroyed");
	}

	AOLEnemyPawn_execNativeDestroyed_Params NativeDestroyed_Params;
	memset(&NativeDestroyed_Params, 0, sizeof(NativeDestroyed_Params));

	uFnNativeDestroyed->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnNativeDestroyed, &NativeDestroyed_Params, nullptr);
	uFnNativeDestroyed->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.PostInitAnimTree
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USkeletalMeshComponent*  SkelComp                       (CPF_Parm | CPF_EditInline)

void AOLEnemyPawn::eventPostInitAnimTree(class USkeletalMeshComponent* SkelComp)
{
	static UFunction* uFnPostInitAnimTree = nullptr;

	if (!uFnPostInitAnimTree)
	{
		uFnPostInitAnimTree = UFunction::FindFunction("Function OLGame.OLEnemyPawn.PostInitAnimTree");
	}

	AOLEnemyPawn_eventPostInitAnimTree_Params PostInitAnimTree_Params;
	memset(&PostInitAnimTree_Params, 0, sizeof(PostInitAnimTree_Params));
	memcpy_s(&PostInitAnimTree_Params.SkelComp, sizeof(PostInitAnimTree_Params.SkelComp), &SkelComp, sizeof(SkelComp));

	this->ProcessEvent(uFnPostInitAnimTree, &PostInitAnimTree_Params, nullptr);
};

// Function OLGame.OLEnemyPawn.PossessedBy
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AController*             C                              (CPF_Parm)
// bool                           bVehicleTransition             (CPF_Parm)

void AOLEnemyPawn::PossessedBy(class AController* C, bool bVehicleTransition)
{
	static UFunction* uFnPossessedBy = nullptr;

	if (!uFnPossessedBy)
	{
		uFnPossessedBy = UFunction::FindFunction("Function OLGame.OLEnemyPawn.PossessedBy");
	}

	AOLEnemyPawn_execPossessedBy_Params PossessedBy_Params;
	memset(&PossessedBy_Params, 0, sizeof(PossessedBy_Params));
	memcpy_s(&PossessedBy_Params.C, sizeof(PossessedBy_Params.C), &C, sizeof(C));
	PossessedBy_Params.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent(uFnPossessedBy, &PossessedBy_Params, nullptr);
};

// Function OLGame.OLEnemyPawn.ZeroMovementVariables
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::ZeroMovementVariables()
{
	static UFunction* uFnZeroMovementVariables = nullptr;

	if (!uFnZeroMovementVariables)
	{
		uFnZeroMovementVariables = UFunction::FindFunction("Function OLGame.OLEnemyPawn.ZeroMovementVariables");
	}

	AOLEnemyPawn_execZeroMovementVariables_Params ZeroMovementVariables_Params;
	memset(&ZeroMovementVariables_Params, 0, sizeof(ZeroMovementVariables_Params));

	this->ProcessEvent(uFnZeroMovementVariables, &ZeroMovementVariables_Params, nullptr);
};

// Function OLGame.OLEnemyPawn.PostBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function OLGame.OLEnemyPawn.PostBeginPlay");
	}

	AOLEnemyPawn_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function OLGame.OLEnemyPawn.HasRegisteredNavMeshRecently
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AOLEnemyPawn::HasRegisteredNavMeshRecently()
{
	static UFunction* uFnHasRegisteredNavMeshRecently = nullptr;

	if (!uFnHasRegisteredNavMeshRecently)
	{
		uFnHasRegisteredNavMeshRecently = UFunction::FindFunction("Function OLGame.OLEnemyPawn.HasRegisteredNavMeshRecently");
	}

	AOLEnemyPawn_execHasRegisteredNavMeshRecently_Params HasRegisteredNavMeshRecently_Params;
	memset(&HasRegisteredNavMeshRecently_Params, 0, sizeof(HasRegisteredNavMeshRecently_Params));

	this->ProcessEvent(uFnHasRegisteredNavMeshRecently, &HasRegisteredNavMeshRecently_Params, nullptr);

	return HasRegisteredNavMeshRecently_Params.ReturnValue;
};

// Function OLGame.OLEnemyPawn.UpdateNavMeshObstacle
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::UpdateNavMeshObstacle()
{
	static UFunction* uFnUpdateNavMeshObstacle = nullptr;

	if (!uFnUpdateNavMeshObstacle)
	{
		uFnUpdateNavMeshObstacle = UFunction::FindFunction("Function OLGame.OLEnemyPawn.UpdateNavMeshObstacle");
	}

	AOLEnemyPawn_execUpdateNavMeshObstacle_Params UpdateNavMeshObstacle_Params;
	memset(&UpdateNavMeshObstacle_Params, 0, sizeof(UpdateNavMeshObstacle_Params));

	this->ProcessEvent(uFnUpdateNavMeshObstacle, &UpdateNavMeshObstacle_Params, nullptr);
};

// Function OLGame.OLEnemyPawn.UnregisterNavmeshObstacle
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::UnregisterNavmeshObstacle()
{
	static UFunction* uFnUnregisterNavmeshObstacle = nullptr;

	if (!uFnUnregisterNavmeshObstacle)
	{
		uFnUnregisterNavmeshObstacle = UFunction::FindFunction("Function OLGame.OLEnemyPawn.UnregisterNavmeshObstacle");
	}

	AOLEnemyPawn_execUnregisterNavmeshObstacle_Params UnregisterNavmeshObstacle_Params;
	memset(&UnregisterNavmeshObstacle_Params, 0, sizeof(UnregisterNavmeshObstacle_Params));

	uFnUnregisterNavmeshObstacle->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUnregisterNavmeshObstacle, &UnregisterNavmeshObstacle_Params, nullptr);
	uFnUnregisterNavmeshObstacle->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.RegisterNavMeshObstacle
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::RegisterNavMeshObstacle()
{
	static UFunction* uFnRegisterNavMeshObstacle = nullptr;

	if (!uFnRegisterNavMeshObstacle)
	{
		uFnRegisterNavMeshObstacle = UFunction::FindFunction("Function OLGame.OLEnemyPawn.RegisterNavMeshObstacle");
	}

	AOLEnemyPawn_execRegisterNavMeshObstacle_Params RegisterNavMeshObstacle_Params;
	memset(&RegisterNavMeshObstacle_Params, 0, sizeof(RegisterNavMeshObstacle_Params));

	uFnRegisterNavMeshObstacle->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnRegisterNavMeshObstacle, &RegisterNavMeshObstacle_Params, nullptr);
	uFnRegisterNavMeshObstacle->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.UpdateDifficultyBasedValues
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::UpdateDifficultyBasedValues()
{
	static UFunction* uFnUpdateDifficultyBasedValues = nullptr;

	if (!uFnUpdateDifficultyBasedValues)
	{
		uFnUpdateDifficultyBasedValues = UFunction::FindFunction("Function OLGame.OLEnemyPawn.UpdateDifficultyBasedValues");
	}

	AOLEnemyPawn_execUpdateDifficultyBasedValues_Params UpdateDifficultyBasedValues_Params;
	memset(&UpdateDifficultyBasedValues_Params, 0, sizeof(UpdateDifficultyBasedValues_Params));

	uFnUpdateDifficultyBasedValues->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnUpdateDifficultyBasedValues, &UpdateDifficultyBasedValues_Params, nullptr);
	uFnUpdateDifficultyBasedValues->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.OnMoveAbilityCompleted
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::OnMoveAbilityCompleted()
{
	static UFunction* uFnOnMoveAbilityCompleted = nullptr;

	if (!uFnOnMoveAbilityCompleted)
	{
		uFnOnMoveAbilityCompleted = UFunction::FindFunction("Function OLGame.OLEnemyPawn.OnMoveAbilityCompleted");
	}

	AOLEnemyPawn_execOnMoveAbilityCompleted_Params OnMoveAbilityCompleted_Params;
	memset(&OnMoveAbilityCompleted_Params, 0, sizeof(OnMoveAbilityCompleted_Params));

	uFnOnMoveAbilityCompleted->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnOnMoveAbilityCompleted, &OnMoveAbilityCompleted_Params, nullptr);
	uFnOnMoveAbilityCompleted->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.EnterCrawl
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AOLCrawlMarker*          CrawlMarker                    (CPF_Parm)
// bool                           bThroughPathfinding            (CPF_Parm)

void AOLEnemyPawn::EnterCrawl(class AOLCrawlMarker* CrawlMarker, bool bThroughPathfinding)
{
	static UFunction* uFnEnterCrawl = nullptr;

	if (!uFnEnterCrawl)
	{
		uFnEnterCrawl = UFunction::FindFunction("Function OLGame.OLEnemyPawn.EnterCrawl");
	}

	AOLEnemyPawn_execEnterCrawl_Params EnterCrawl_Params;
	memset(&EnterCrawl_Params, 0, sizeof(EnterCrawl_Params));
	memcpy_s(&EnterCrawl_Params.CrawlMarker, sizeof(EnterCrawl_Params.CrawlMarker), &CrawlMarker, sizeof(CrawlMarker));
	EnterCrawl_Params.bThroughPathfinding = bThroughPathfinding;

	uFnEnterCrawl->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnEnterCrawl, &EnterCrawl_Params, nullptr);
	uFnEnterCrawl->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.ExitBeam
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::ExitBeam()
{
	static UFunction* uFnExitBeam = nullptr;

	if (!uFnExitBeam)
	{
		uFnExitBeam = UFunction::FindFunction("Function OLGame.OLEnemyPawn.ExitBeam");
	}

	AOLEnemyPawn_execExitBeam_Params ExitBeam_Params;
	memset(&ExitBeam_Params, 0, sizeof(ExitBeam_Params));

	uFnExitBeam->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnExitBeam, &ExitBeam_Params, nullptr);
	uFnExitBeam->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.EnterBeam
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AOLBeamMarker*           BeamMarker                     (CPF_Parm)
// class UOLSeqAct_AIBeam*        BeamSeqAct                     (CPF_Parm)

void AOLEnemyPawn::EnterBeam(class AOLBeamMarker* BeamMarker, class UOLSeqAct_AIBeam* BeamSeqAct)
{
	static UFunction* uFnEnterBeam = nullptr;

	if (!uFnEnterBeam)
	{
		uFnEnterBeam = UFunction::FindFunction("Function OLGame.OLEnemyPawn.EnterBeam");
	}

	AOLEnemyPawn_execEnterBeam_Params EnterBeam_Params;
	memset(&EnterBeam_Params, 0, sizeof(EnterBeam_Params));
	memcpy_s(&EnterBeam_Params.BeamMarker, sizeof(EnterBeam_Params.BeamMarker), &BeamMarker, sizeof(BeamMarker));
	memcpy_s(&EnterBeam_Params.BeamSeqAct, sizeof(EnterBeam_Params.BeamSeqAct), &BeamSeqAct, sizeof(BeamSeqAct));

	uFnEnterBeam->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnEnterBeam, &EnterBeam_Params, nullptr);
	uFnEnterBeam->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.StartJump
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AOLJumpMarker*           JumpMarker                     (CPF_Parm)
// class UOLSeqAct_AIJump*        JumpSeqAct                     (CPF_Parm)

void AOLEnemyPawn::StartJump(class AOLJumpMarker* JumpMarker, class UOLSeqAct_AIJump* JumpSeqAct)
{
	static UFunction* uFnStartJump = nullptr;

	if (!uFnStartJump)
	{
		uFnStartJump = UFunction::FindFunction("Function OLGame.OLEnemyPawn.StartJump");
	}

	AOLEnemyPawn_execStartJump_Params StartJump_Params;
	memset(&StartJump_Params, 0, sizeof(StartJump_Params));
	memcpy_s(&StartJump_Params.JumpMarker, sizeof(StartJump_Params.JumpMarker), &JumpMarker, sizeof(JumpMarker));
	memcpy_s(&StartJump_Params.JumpSeqAct, sizeof(StartJump_Params.JumpSeqAct), &JumpSeqAct, sizeof(JumpSeqAct));

	uFnStartJump->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStartJump, &StartJump_Params, nullptr);
	uFnStartJump->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.StartDoorSpecialMove
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ESpecialMoveType               moveType                       (CPF_Parm)

void AOLEnemyPawn::StartDoorSpecialMove(ESpecialMoveType moveType)
{
	static UFunction* uFnStartDoorSpecialMove = nullptr;

	if (!uFnStartDoorSpecialMove)
	{
		uFnStartDoorSpecialMove = UFunction::FindFunction("Function OLGame.OLEnemyPawn.StartDoorSpecialMove");
	}

	AOLEnemyPawn_execStartDoorSpecialMove_Params StartDoorSpecialMove_Params;
	memset(&StartDoorSpecialMove_Params, 0, sizeof(StartDoorSpecialMove_Params));
	memcpy_s(&StartDoorSpecialMove_Params.moveType, sizeof(StartDoorSpecialMove_Params.moveType), &moveType, sizeof(moveType));

	uFnStartDoorSpecialMove->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStartDoorSpecialMove, &StartDoorSpecialMove_Params, nullptr);
	uFnStartDoorSpecialMove->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.BashThroughWindow
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::BashThroughWindow()
{
	static UFunction* uFnBashThroughWindow = nullptr;

	if (!uFnBashThroughWindow)
	{
		uFnBashThroughWindow = UFunction::FindFunction("Function OLGame.OLEnemyPawn.BashThroughWindow");
	}

	AOLEnemyPawn_execBashThroughWindow_Params BashThroughWindow_Params;
	memset(&BashThroughWindow_Params, 0, sizeof(BashThroughWindow_Params));

	uFnBashThroughWindow->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnBashThroughWindow, &BashThroughWindow_Params, nullptr);
	uFnBashThroughWindow->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.OpenActiveWindow
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::OpenActiveWindow()
{
	static UFunction* uFnOpenActiveWindow = nullptr;

	if (!uFnOpenActiveWindow)
	{
		uFnOpenActiveWindow = UFunction::FindFunction("Function OLGame.OLEnemyPawn.OpenActiveWindow");
	}

	AOLEnemyPawn_execOpenActiveWindow_Params OpenActiveWindow_Params;
	memset(&OpenActiveWindow_Params, 0, sizeof(OpenActiveWindow_Params));

	uFnOpenActiveWindow->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnOpenActiveWindow, &OpenActiveWindow_Params, nullptr);
	uFnOpenActiveWindow->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.CancelSpecialMove
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyPawn::CancelSpecialMove()
{
	static UFunction* uFnCancelSpecialMove = nullptr;

	if (!uFnCancelSpecialMove)
	{
		uFnCancelSpecialMove = UFunction::FindFunction("Function OLGame.OLEnemyPawn.CancelSpecialMove");
	}

	AOLEnemyPawn_execCancelSpecialMove_Params CancelSpecialMove_Params;
	memset(&CancelSpecialMove_Params, 0, sizeof(CancelSpecialMove_Params));

	uFnCancelSpecialMove->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnCancelSpecialMove, &CancelSpecialMove_Params, nullptr);
	uFnCancelSpecialMove->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyPawn.StartSpecialMove
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ESpecialMoveType               moveType                       (CPF_Parm)
// struct FVector                 targetPosition                 (CPF_OptionalParm | CPF_Parm)
// struct FVector                 TargetDirection                (CPF_OptionalParm | CPF_Parm)
// EAdjustPositionTargetType      TargetType                     (CPF_OptionalParm | CPF_Parm)

void AOLEnemyPawn::StartSpecialMove(ESpecialMoveType moveType, struct FVector targetPosition, struct FVector TargetDirection, EAdjustPositionTargetType TargetType)
{
	static UFunction* uFnStartSpecialMove = nullptr;

	if (!uFnStartSpecialMove)
	{
		uFnStartSpecialMove = UFunction::FindFunction("Function OLGame.OLEnemyPawn.StartSpecialMove");
	}

	AOLEnemyPawn_execStartSpecialMove_Params StartSpecialMove_Params;
	memset(&StartSpecialMove_Params, 0, sizeof(StartSpecialMove_Params));
	memcpy_s(&StartSpecialMove_Params.moveType, sizeof(StartSpecialMove_Params.moveType), &moveType, sizeof(moveType));
	memcpy_s(&StartSpecialMove_Params.targetPosition, sizeof(StartSpecialMove_Params.targetPosition), &targetPosition, sizeof(targetPosition));
	memcpy_s(&StartSpecialMove_Params.TargetDirection, sizeof(StartSpecialMove_Params.TargetDirection), &TargetDirection, sizeof(TargetDirection));
	memcpy_s(&StartSpecialMove_Params.TargetType, sizeof(StartSpecialMove_Params.TargetType), &TargetType, sizeof(TargetType));

	uFnStartSpecialMove->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStartSpecialMove, &StartSpecialMove_Params, nullptr);
	uFnStartSpecialMove->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyMartha.PlayParticleEffect
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UAnimNotify_PlayParticleEffect* AnimNotifyData                 (CPF_Const | CPF_Parm)

bool AOLEnemyMartha::eventPlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData)
{
	static UFunction* uFnPlayParticleEffect = nullptr;

	if (!uFnPlayParticleEffect)
	{
		uFnPlayParticleEffect = UFunction::FindFunction("Function OLGame.OLEnemyMartha.PlayParticleEffect");
	}

	AOLEnemyMartha_eventPlayParticleEffect_Params PlayParticleEffect_Params;
	memset(&PlayParticleEffect_Params, 0, sizeof(PlayParticleEffect_Params));
	memcpy_s(&PlayParticleEffect_Params.AnimNotifyData, sizeof(PlayParticleEffect_Params.AnimNotifyData), &AnimNotifyData, sizeof(AnimNotifyData));

	this->ProcessEvent(uFnPlayParticleEffect, &PlayParticleEffect_Params, nullptr);

	return PlayParticleEffect_Params.ReturnValue;
};

// Function OLGame.OLEnemyNickAndLaird.StopAnimatingArrow
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyNickAndLaird::StopAnimatingArrow()
{
	static UFunction* uFnStopAnimatingArrow = nullptr;

	if (!uFnStopAnimatingArrow)
	{
		uFnStopAnimatingArrow = UFunction::FindFunction("Function OLGame.OLEnemyNickAndLaird.StopAnimatingArrow");
	}

	AOLEnemyNickAndLaird_execStopAnimatingArrow_Params StopAnimatingArrow_Params;
	memset(&StopAnimatingArrow_Params, 0, sizeof(StopAnimatingArrow_Params));

	uFnStopAnimatingArrow->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnStopAnimatingArrow, &StopAnimatingArrow_Params, nullptr);
	uFnStopAnimatingArrow->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyNickAndLaird.SpawnAndAnimateNewArrow
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyNickAndLaird::SpawnAndAnimateNewArrow()
{
	static UFunction* uFnSpawnAndAnimateNewArrow = nullptr;

	if (!uFnSpawnAndAnimateNewArrow)
	{
		uFnSpawnAndAnimateNewArrow = UFunction::FindFunction("Function OLGame.OLEnemyNickAndLaird.SpawnAndAnimateNewArrow");
	}

	AOLEnemyNickAndLaird_execSpawnAndAnimateNewArrow_Params SpawnAndAnimateNewArrow_Params;
	memset(&SpawnAndAnimateNewArrow_Params, 0, sizeof(SpawnAndAnimateNewArrow_Params));

	uFnSpawnAndAnimateNewArrow->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSpawnAndAnimateNewArrow, &SpawnAndAnimateNewArrow_Params, nullptr);
	uFnSpawnAndAnimateNewArrow->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyNickAndLaird.SpawnNewArrow
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyNickAndLaird::SpawnNewArrow()
{
	static UFunction* uFnSpawnNewArrow = nullptr;

	if (!uFnSpawnNewArrow)
	{
		uFnSpawnNewArrow = UFunction::FindFunction("Function OLGame.OLEnemyNickAndLaird.SpawnNewArrow");
	}

	AOLEnemyNickAndLaird_execSpawnNewArrow_Params SpawnNewArrow_Params;
	memset(&SpawnNewArrow_Params, 0, sizeof(SpawnNewArrow_Params));

	uFnSpawnNewArrow->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSpawnNewArrow, &SpawnNewArrow_Params, nullptr);
	uFnSpawnNewArrow->FunctionFlags |= 0x400;
};

// Function OLGame.OLEnemyNickAndLaird.ArrowLaunch
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AOLEnemyNickAndLaird::ArrowLaunch()
{
	static UFunction* uFnArrowLaunch = nullptr;

	if (!uFnArrowLaunch)
	{
		uFnArrowLaunch = UFunction::FindFunction("Function OLGame.OLEnemyNickAndLaird.ArrowLaunch");
	}

	AOLEnemyNickAndLaird_execArrowLaunch_Params ArrowLaunch_Params;
	memset(&ArrowLaunch_Params, 0, sizeof(ArrowLaunch_Params));

	uFnArrowLaunch->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnArrowLaunch, &ArrowLaunch_Params, nullptr);
	uFnArrowLaunch->FunctionFlags |= 0x400;
};

// Function OLGame.OLWaypoint.AnimStartedEvent
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  InInstigator                   (CPF_Parm)

void AOLWaypoint::AnimStartedEvent(class AActor* InInstigator)
{
	static UFunction* uFnAnimStartedEvent = nullptr;

	if (!uFnAnimStartedEvent)
	{
		uFnAnimStartedEvent = UFunction::FindFunction("Function OLGame.OLWaypoint.AnimStartedEvent");
	}

	AOLWaypoint_execAnimStartedEvent_Params AnimStartedEvent_Params;
	memset(&AnimStartedEvent_Params, 0, sizeof(AnimStartedEvent_Params));
	memcpy_s(&AnimStartedEvent_Params.InInstigator, sizeof(AnimStartedEvent_Params.InInstigator), &InInstigator, sizeof(InInstigator));

	uFnAnimStartedEvent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnAnimStartedEvent, &AnimStartedEvent_Params, nullptr);
	uFnAnimStartedEvent->FunctionFlags |= 0x400;
};

// Function OLGame.OLWaypoint.WaypointReachedEvent
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  InInstigator                   (CPF_Parm)

void AOLWaypoint::WaypointReachedEvent(class AActor* InInstigator)
{
	static UFunction* uFnWaypointReachedEvent = nullptr;

	if (!uFnWaypointReachedEvent)
	{
		uFnWaypointReachedEvent = UFunction::FindFunction("Function OLGame.OLWaypoint.WaypointReachedEvent");
	}

	AOLWaypoint_execWaypointReachedEvent_Params WaypointReachedEvent_Params;
	memset(&WaypointReachedEvent_Params, 0, sizeof(WaypointReachedEvent_Params));
	memcpy_s(&WaypointReachedEvent_Params.InInstigator, sizeof(WaypointReachedEvent_Params.InInstigator), &InInstigator, sizeof(InInstigator));

	uFnWaypointReachedEvent->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnWaypointReachedEvent, &WaypointReachedEvent_Params, nullptr);
	uFnWaypointReachedEvent->FunctionFlags |= 0x400;
};

// Function OLGame.OLAnimMappedSequence.SetAnim
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FName                   Sequence                       (CPF_Parm)

void UOLAnimMappedSequence::SetAnim(struct FName Sequence)
{
	static UFunction* uFnSetAnim = nullptr;

	if (!uFnSetAnim)
	{
		uFnSetAnim = UFunction::FindFunction("Function OLGame.OLAnimMappedSequence.SetAnim");
	}

	UOLAnimMappedSequence_execSetAnim_Params SetAnim_Params;
	memset(&SetAnim_Params, 0, sizeof(SetAnim_Params));
	memcpy_s(&SetAnim_Params.Sequence, sizeof(SetAnim_Params.Sequence), &Sequence, sizeof(Sequence));

	uFnSetAnim->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSetAnim, &SetAnim_Params, nullptr);
	uFnSetAnim->FunctionFlags |= 0x400;
};

// Function OLGame.OLSeqAct_AICondition.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqAct_AICondition::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqAct_AICondition.GetObjClassVersion");
	}

	UOLSeqAct_AICondition_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqAct_AICondition::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqAct_AIForceCrawl.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqAct_AIForceCrawl::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqAct_AIForceCrawl.GetObjClassVersion");
	}

	UOLSeqAct_AIForceCrawl_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqAct_AIForceCrawl::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqAct_AIGotoPoint.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqAct_AIGotoPoint::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqAct_AIGotoPoint.GetObjClassVersion");
	}

	UOLSeqAct_AIGotoPoint_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqAct_AIGotoPoint::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqAct_AIInvestigatePoint.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqAct_AIInvestigatePoint::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqAct_AIInvestigatePoint.GetObjClassVersion");
	}

	UOLSeqAct_AIInvestigatePoint_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqAct_AIInvestigatePoint::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqAct_AISetLeash.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqAct_AISetLeash::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqAct_AISetLeash.GetObjClassVersion");
	}

	UOLSeqAct_AISetLeash_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqAct_AISetLeash::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqAct_AIStartPatrol.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqAct_AIStartPatrol::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqAct_AIStartPatrol.GetObjClassVersion");
	}

	UOLSeqAct_AIStartPatrol_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqAct_AIStartPatrol::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqAct_AIUnspawnAtLocation.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqAct_AIUnspawnAtLocation::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqAct_AIUnspawnAtLocation.GetObjClassVersion");
	}

	UOLSeqAct_AIUnspawnAtLocation_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqAct_AIUnspawnAtLocation::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqAct_Arrow.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqAct_Arrow::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqAct_Arrow.GetObjClassVersion");
	}

	UOLSeqAct_Arrow_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqAct_Arrow::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqAct_Camcorder.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqAct_Camcorder::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqAct_Camcorder.GetObjClassVersion");
	}

	UOLSeqAct_Camcorder_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqAct_Camcorder::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqAct_CameraParticleEffect.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqAct_CameraParticleEffect::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqAct_CameraParticleEffect.GetObjClassVersion");
	}

	UOLSeqAct_CameraParticleEffect_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqAct_CameraParticleEffect::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqAct_CameraShake.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqAct_CameraShake::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqAct_CameraShake.GetObjClassVersion");
	}

	UOLSeqAct_CameraShake_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqAct_CameraShake::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqAct_DelayByDifficulty.ResetDelayActive
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLSeqAct_DelayByDifficulty::ResetDelayActive()
{
	static UFunction* uFnResetDelayActive = nullptr;

	if (!uFnResetDelayActive)
	{
		uFnResetDelayActive = UFunction::FindFunction("Function OLGame.OLSeqAct_DelayByDifficulty.ResetDelayActive");
	}

	UOLSeqAct_DelayByDifficulty_execResetDelayActive_Params ResetDelayActive_Params;
	memset(&ResetDelayActive_Params, 0, sizeof(ResetDelayActive_Params));

	uFnResetDelayActive->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnResetDelayActive, &ResetDelayActive_Params, nullptr);
	uFnResetDelayActive->FunctionFlags |= 0x400;
};

// Function OLGame.OLSeqAct_DelayByDifficulty.Reset
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLSeqAct_DelayByDifficulty::Reset()
{
	static UFunction* uFnReset = nullptr;

	if (!uFnReset)
	{
		uFnReset = UFunction::FindFunction("Function OLGame.OLSeqAct_DelayByDifficulty.Reset");
	}

	UOLSeqAct_DelayByDifficulty_execReset_Params Reset_Params;
	memset(&Reset_Params, 0, sizeof(Reset_Params));

	this->ProcessEvent(uFnReset, &Reset_Params, nullptr);
};

// Function OLGame.OLSeqAct_Door.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqAct_Door::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqAct_Door.GetObjClassVersion");
	}

	UOLSeqAct_Door_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqAct_Door::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqAct_GenericBlend.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqAct_GenericBlend::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqAct_GenericBlend.GetObjClassVersion");
	}

	UOLSeqAct_GenericBlend_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqAct_GenericBlend::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqAct_HeroControl.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqAct_HeroControl::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqAct_HeroControl.GetObjClassVersion");
	}

	UOLSeqAct_HeroControl_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqAct_HeroControl::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqAct_HeroPlayAnim.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqAct_HeroPlayAnim::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqAct_HeroPlayAnim.GetObjClassVersion");
	}

	UOLSeqAct_HeroPlayAnim_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqAct_HeroPlayAnim::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqAct_HideInSight.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqAct_HideInSight::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqAct_HideInSight.GetObjClassVersion");
	}

	UOLSeqAct_HideInSight_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqAct_HideInSight::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqAct_InvisibleFootsteps.ShouldHandleDecal
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EFootstepDecalType             DecalType                      (CPF_Parm)

bool UOLSeqAct_InvisibleFootsteps::ShouldHandleDecal(EFootstepDecalType DecalType)
{
	static UFunction* uFnShouldHandleDecal = nullptr;

	if (!uFnShouldHandleDecal)
	{
		uFnShouldHandleDecal = UFunction::FindFunction("Function OLGame.OLSeqAct_InvisibleFootsteps.ShouldHandleDecal");
	}

	UOLSeqAct_InvisibleFootsteps_execShouldHandleDecal_Params ShouldHandleDecal_Params;
	memset(&ShouldHandleDecal_Params, 0, sizeof(ShouldHandleDecal_Params));
	memcpy_s(&ShouldHandleDecal_Params.DecalType, sizeof(ShouldHandleDecal_Params.DecalType), &DecalType, sizeof(DecalType));

	this->ProcessEvent(uFnShouldHandleDecal, &ShouldHandleDecal_Params, nullptr);

	return ShouldHandleDecal_Params.ReturnValue;
};

// Function OLGame.OLSeqAct_InvisibleFootsteps.SpawnFootstepDecal
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           bLeftFoot                      (CPF_Parm)
// struct FVector                 DecalLocation                  (CPF_Parm | CPF_OutParm)
// struct FRotator                DecalRotation                  (CPF_Parm | CPF_OutParm)

void UOLSeqAct_InvisibleFootsteps::SpawnFootstepDecal(bool bLeftFoot, struct FVector& DecalLocation, struct FRotator& DecalRotation)
{
	static UFunction* uFnSpawnFootstepDecal = nullptr;

	if (!uFnSpawnFootstepDecal)
	{
		uFnSpawnFootstepDecal = UFunction::FindFunction("Function OLGame.OLSeqAct_InvisibleFootsteps.SpawnFootstepDecal");
	}

	UOLSeqAct_InvisibleFootsteps_execSpawnFootstepDecal_Params SpawnFootstepDecal_Params;
	memset(&SpawnFootstepDecal_Params, 0, sizeof(SpawnFootstepDecal_Params));
	SpawnFootstepDecal_Params.bLeftFoot = bLeftFoot;
	memcpy_s(&SpawnFootstepDecal_Params.DecalLocation, sizeof(SpawnFootstepDecal_Params.DecalLocation), &DecalLocation, sizeof(DecalLocation));
	memcpy_s(&SpawnFootstepDecal_Params.DecalRotation, sizeof(SpawnFootstepDecal_Params.DecalRotation), &DecalRotation, sizeof(DecalRotation));

	uFnSpawnFootstepDecal->FunctionFlags &= ~0x400;
	this->ProcessEvent(uFnSpawnFootstepDecal, &SpawnFootstepDecal_Params, nullptr);
	uFnSpawnFootstepDecal->FunctionFlags |= 0x400;

	memcpy_s(&DecalLocation, sizeof(DecalLocation), &SpawnFootstepDecal_Params.DecalLocation, sizeof(SpawnFootstepDecal_Params.DecalLocation));
	memcpy_s(&DecalRotation, sizeof(DecalRotation), &SpawnFootstepDecal_Params.DecalRotation, sizeof(SpawnFootstepDecal_Params.DecalRotation));
};

// Function OLGame.OLSeqAct_LightEnvControl.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqAct_LightEnvControl::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqAct_LightEnvControl.GetObjClassVersion");
	}

	UOLSeqAct_LightEnvControl_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqAct_LightEnvControl::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqAct_NightVisionStatus.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqAct_NightVisionStatus::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqAct_NightVisionStatus.GetObjClassVersion");
	}

	UOLSeqAct_NightVisionStatus_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqAct_NightVisionStatus::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqAct_PairedWalk.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqAct_PairedWalk::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqAct_PairedWalk.GetObjClassVersion");
	}

	UOLSeqAct_PairedWalk_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqAct_PairedWalk::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqAct_PrepareMapTransition.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqAct_PrepareMapTransition::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqAct_PrepareMapTransition.GetObjClassVersion");
	}

	UOLSeqAct_PrepareMapTransition_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqAct_PrepareMapTransition::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqAct_Pushable.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqAct_Pushable::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqAct_Pushable.GetObjClassVersion");
	}

	UOLSeqAct_Pushable_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqAct_Pushable::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqAct_SetObjective.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqAct_SetObjective::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqAct_SetObjective.GetObjClassVersion");
	}

	UOLSeqAct_SetObjective_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqAct_SetObjective::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqAct_Struggle.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqAct_Struggle::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqAct_Struggle.GetObjClassVersion");
	}

	UOLSeqAct_Struggle_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqAct_Struggle::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqAct_WaitAndReact.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqAct_WaitAndReact::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqAct_WaitAndReact.GetObjClassVersion");
	}

	UOLSeqAct_WaitAndReact_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqAct_WaitAndReact::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqAct_WaitForPlayerInput.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqAct_WaitForPlayerInput::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqAct_WaitForPlayerInput.GetObjClassVersion");
	}

	UOLSeqAct_WaitForPlayerInput_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqAct_WaitForPlayerInput::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqCond_AIState.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqCond_AIState::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqCond_AIState.GetObjClassVersion");
	}

	UOLSeqCond_AIState_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqCond_AIState::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqCond_Checkpoint.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqCond_Checkpoint::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqCond_Checkpoint.GetObjClassVersion");
	}

	UOLSeqCond_Checkpoint_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqCond_Checkpoint::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqCond_IsDemo.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqCond_IsDemo::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqCond_IsDemo.GetObjClassVersion");
	}

	UOLSeqCond_IsDemo_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqCond_IsDemo::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqCond_IsTouching.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqCond_IsTouching::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqCond_IsTouching.GetObjClassVersion");
	}

	UOLSeqCond_IsTouching_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqCond_IsTouching::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqCond_PlayerHealth.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqCond_PlayerHealth::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqCond_PlayerHealth.GetObjClassVersion");
	}

	UOLSeqCond_PlayerHealth_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqCond_PlayerHealth::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqEvent_ApplyCheckpointState.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqEvent_ApplyCheckpointState::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqEvent_ApplyCheckpointState.GetObjClassVersion");
	}

	UOLSeqEvent_ApplyCheckpointState_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqEvent_ApplyCheckpointState::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqEvent_Bashable.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqEvent_Bashable::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqEvent_Bashable.GetObjClassVersion");
	}

	UOLSeqEvent_Bashable_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqEvent_Bashable::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLSeqEvent_CSAActivated.Toggled
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLSeqEvent_CSAActivated::eventToggled()
{
	static UFunction* uFnToggled = nullptr;

	if (!uFnToggled)
	{
		uFnToggled = UFunction::FindFunction("Function OLGame.OLSeqEvent_CSAActivated.Toggled");
	}

	UOLSeqEvent_CSAActivated_eventToggled_Params Toggled_Params;
	memset(&Toggled_Params, 0, sizeof(Toggled_Params));

	this->ProcessEvent(uFnToggled, &Toggled_Params, nullptr);
};

// Function OLGame.OLSeqEvent_Door.GetObjClassVersion
// [0x00022802] (FUNC_Defined | FUNC_Event | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLSeqEvent_Door::eventGetObjClassVersion()
{
	static UFunction* uFnGetObjClassVersion = nullptr;

	if (!uFnGetObjClassVersion)
	{
		uFnGetObjClassVersion = UFunction::FindFunction("Function OLGame.OLSeqEvent_Door.GetObjClassVersion");
	}

	UOLSeqEvent_Door_eventGetObjClassVersion_Params GetObjClassVersion_Params;
	memset(&GetObjClassVersion_Params, 0, sizeof(GetObjClassVersion_Params));

	UOLSeqEvent_Door::StaticClass()->ProcessEvent(uFnGetObjClassVersion, &GetObjClassVersion_Params, nullptr);

	return GetObjClassVersion_Params.ReturnValue;
};

// Function OLGame.OLUIMessage.SetPCQTELabels
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  upStr                          (CPF_Parm | CPF_NeedCtorLink)
// class FString                  leftStr                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  downStr                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  rightStr                       (CPF_Parm | CPF_NeedCtorLink)

void UOLUIMessage::eventSetPCQTELabels(class FString upStr, class FString leftStr, class FString downStr, class FString rightStr)
{
	static UFunction* uFnSetPCQTELabels = nullptr;

	if (!uFnSetPCQTELabels)
	{
		uFnSetPCQTELabels = UFunction::FindFunction("Function OLGame.OLUIMessage.SetPCQTELabels");
	}

	UOLUIMessage_eventSetPCQTELabels_Params SetPCQTELabels_Params;
	memset(&SetPCQTELabels_Params, 0, sizeof(SetPCQTELabels_Params));
	memcpy_s(&SetPCQTELabels_Params.upStr, sizeof(SetPCQTELabels_Params.upStr), &upStr, sizeof(upStr));
	memcpy_s(&SetPCQTELabels_Params.leftStr, sizeof(SetPCQTELabels_Params.leftStr), &leftStr, sizeof(leftStr));
	memcpy_s(&SetPCQTELabels_Params.downStr, sizeof(SetPCQTELabels_Params.downStr), &downStr, sizeof(downStr));
	memcpy_s(&SetPCQTELabels_Params.rightStr, sizeof(SetPCQTELabels_Params.rightStr), &rightStr, sizeof(rightStr));

	this->ProcessEvent(uFnSetPCQTELabels, &SetPCQTELabels_Params, nullptr);
};

// Function OLGame.OLUIMessage.SetSubtitleHeight
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           hight                          (CPF_Parm)

void UOLUIMessage::SetSubtitleHeight(bool hight)
{
	static UFunction* uFnSetSubtitleHeight = nullptr;

	if (!uFnSetSubtitleHeight)
	{
		uFnSetSubtitleHeight = UFunction::FindFunction("Function OLGame.OLUIMessage.SetSubtitleHeight");
	}

	UOLUIMessage_execSetSubtitleHeight_Params SetSubtitleHeight_Params;
	memset(&SetSubtitleHeight_Params, 0, sizeof(SetSubtitleHeight_Params));
	SetSubtitleHeight_Params.hight = hight;

	this->ProcessEvent(uFnSetSubtitleHeight, &SetSubtitleHeight_Params, nullptr);
};

// Function OLGame.OLUIMessage.TryClose
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIMessage::eventTryClose()
{
	static UFunction* uFnTryClose = nullptr;

	if (!uFnTryClose)
	{
		uFnTryClose = UFunction::FindFunction("Function OLGame.OLUIMessage.TryClose");
	}

	UOLUIMessage_eventTryClose_Params TryClose_Params;
	memset(&TryClose_Params, 0, sizeof(TryClose_Params));

	this->ProcessEvent(uFnTryClose, &TryClose_Params, nullptr);

	return TryClose_Params.ReturnValue;
};

// Function OLGame.OLUIMessage.TryCloseInternal
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLUIMessage::TryCloseInternal()
{
	static UFunction* uFnTryCloseInternal = nullptr;

	if (!uFnTryCloseInternal)
	{
		uFnTryCloseInternal = UFunction::FindFunction("Function OLGame.OLUIMessage.TryCloseInternal");
	}

	UOLUIMessage_execTryCloseInternal_Params TryCloseInternal_Params;
	memset(&TryCloseInternal_Params, 0, sizeof(TryCloseInternal_Params));

	this->ProcessEvent(uFnTryCloseInternal, &TryCloseInternal_Params, nullptr);

	return TryCloseInternal_Params.ReturnValue;
};

// Function OLGame.OLUIMessage.WidgetInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   WidgetName                     (CPF_Parm)
// struct FName                   WidgetPath                     (CPF_Parm)
// class UGFxObject*              Widget                         (CPF_Parm)

bool UOLUIMessage::eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget)
{
	static UFunction* uFnWidgetInitialized = nullptr;

	if (!uFnWidgetInitialized)
	{
		uFnWidgetInitialized = UFunction::FindFunction("Function OLGame.OLUIMessage.WidgetInitialized");
	}

	UOLUIMessage_eventWidgetInitialized_Params WidgetInitialized_Params;
	memset(&WidgetInitialized_Params, 0, sizeof(WidgetInitialized_Params));
	memcpy_s(&WidgetInitialized_Params.WidgetName, sizeof(WidgetInitialized_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&WidgetInitialized_Params.WidgetPath, sizeof(WidgetInitialized_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));
	memcpy_s(&WidgetInitialized_Params.Widget, sizeof(WidgetInitialized_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnWidgetInitialized, &WidgetInitialized_Params, nullptr);

	return WidgetInitialized_Params.ReturnValue;
};

// Function OLGame.OLUIMessage.SetMessage
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EHUDMessageType                MessageType                    (CPF_Parm)
// class FString                  Message                        (CPF_Parm | CPF_NeedCtorLink)

void UOLUIMessage::SetMessage(EHUDMessageType MessageType, class FString Message)
{
	static UFunction* uFnSetMessage = nullptr;

	if (!uFnSetMessage)
	{
		uFnSetMessage = UFunction::FindFunction("Function OLGame.OLUIMessage.SetMessage");
	}

	UOLUIMessage_execSetMessage_Params SetMessage_Params;
	memset(&SetMessage_Params, 0, sizeof(SetMessage_Params));
	memcpy_s(&SetMessage_Params.MessageType, sizeof(SetMessage_Params.MessageType), &MessageType, sizeof(MessageType));
	memcpy_s(&SetMessage_Params.Message, sizeof(SetMessage_Params.Message), &Message, sizeof(Message));

	this->ProcessEvent(uFnSetMessage, &SetMessage_Params, nullptr);
};

// Function OLGame.OLUIMessage.SetVisible
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bVisible                       (CPF_Parm)

void UOLUIMessage::SetVisible(bool bVisible)
{
	static UFunction* uFnSetVisible = nullptr;

	if (!uFnSetVisible)
	{
		uFnSetVisible = UFunction::FindFunction("Function OLGame.OLUIMessage.SetVisible");
	}

	UOLUIMessage_execSetVisible_Params SetVisible_Params;
	memset(&SetVisible_Params, 0, sizeof(SetVisible_Params));
	SetVisible_Params.bVisible = bVisible;

	this->ProcessEvent(uFnSetVisible, &SetVisible_Params, nullptr);
};

// Function OLGame.OLUIMessage.OnClose
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIMessage::OnClose()
{
	static UFunction* uFnOnClose = nullptr;

	if (!uFnOnClose)
	{
		uFnOnClose = UFunction::FindFunction("Function OLGame.OLUIMessage.OnClose");
	}

	UOLUIMessage_execOnClose_Params OnClose_Params;
	memset(&OnClose_Params, 0, sizeof(OnClose_Params));

	this->ProcessEvent(uFnOnClose, &OnClose_Params, nullptr);
};

// Function OLGame.OLUIMessage.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// bool                           StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UOLUIMessage::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function OLGame.OLUIMessage.Start");
	}

	UOLUIMessage_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function OLGame.OLGFxMoviePlayer.OnProfileWriteComplete
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        LocalUserNum                   (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void UOLGFxMoviePlayer::OnProfileWriteComplete(uint8_t LocalUserNum, bool bWasSuccessful)
{
	static UFunction* uFnOnProfileWriteComplete = nullptr;

	if (!uFnOnProfileWriteComplete)
	{
		uFnOnProfileWriteComplete = UFunction::FindFunction("Function OLGame.OLGFxMoviePlayer.OnProfileWriteComplete");
	}

	UOLGFxMoviePlayer_execOnProfileWriteComplete_Params OnProfileWriteComplete_Params;
	memset(&OnProfileWriteComplete_Params, 0, sizeof(OnProfileWriteComplete_Params));
	memcpy_s(&OnProfileWriteComplete_Params.LocalUserNum, sizeof(OnProfileWriteComplete_Params.LocalUserNum), &LocalUserNum, sizeof(LocalUserNum));
	OnProfileWriteComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnOnProfileWriteComplete, &OnProfileWriteComplete_Params, nullptr);
};

// Function OLGame.OLGFxMoviePlayer.SaveProfile
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FScriptDelegate         WriteProfileSettingsCompleteDelegate (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)
// class AOLPlayerController*     PlayerToSave                   (CPF_OptionalParm | CPF_Parm)

bool UOLGFxMoviePlayer::SaveProfile(struct FScriptDelegate WriteProfileSettingsCompleteDelegate, class AOLPlayerController* PlayerToSave)
{
	static UFunction* uFnSaveProfile = nullptr;

	if (!uFnSaveProfile)
	{
		uFnSaveProfile = UFunction::FindFunction("Function OLGame.OLGFxMoviePlayer.SaveProfile");
	}

	UOLGFxMoviePlayer_execSaveProfile_Params SaveProfile_Params;
	memset(&SaveProfile_Params, 0, sizeof(SaveProfile_Params));
	memcpy_s(&SaveProfile_Params.WriteProfileSettingsCompleteDelegate, sizeof(SaveProfile_Params.WriteProfileSettingsCompleteDelegate), &WriteProfileSettingsCompleteDelegate, sizeof(WriteProfileSettingsCompleteDelegate));
	memcpy_s(&SaveProfile_Params.PlayerToSave, sizeof(SaveProfile_Params.PlayerToSave), &PlayerToSave, sizeof(PlayerToSave));

	this->ProcessEvent(uFnSaveProfile, &SaveProfile_Params, nullptr);

	return SaveProfile_Params.ReturnValue;
};

// Function OLGame.OLGFxMoviePlayer.GetOnlinePlayerInterface
// [0x00022003] (FUNC_Final | FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOnlinePlayerInterface*  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UOnlinePlayerInterface* UOLGFxMoviePlayer::GetOnlinePlayerInterface()
{
	static UFunction* uFnGetOnlinePlayerInterface = nullptr;

	if (!uFnGetOnlinePlayerInterface)
	{
		uFnGetOnlinePlayerInterface = UFunction::FindFunction("Function OLGame.OLGFxMoviePlayer.GetOnlinePlayerInterface");
	}

	UOLGFxMoviePlayer_execGetOnlinePlayerInterface_Params GetOnlinePlayerInterface_Params;
	memset(&GetOnlinePlayerInterface_Params, 0, sizeof(GetOnlinePlayerInterface_Params));

	UOLGFxMoviePlayer::StaticClass()->ProcessEvent(uFnGetOnlinePlayerInterface, &GetOnlinePlayerInterface_Params, nullptr);

	return GetOnlinePlayerInterface_Params.ReturnValue;
};

// Function OLGame.OLGFxMoviePlayer.MuteSoundThemes
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// bool                           bMute                          (CPF_Parm)

void UOLGFxMoviePlayer::MuteSoundThemes(bool bMute)
{
	static UFunction* uFnMuteSoundThemes = nullptr;

	if (!uFnMuteSoundThemes)
	{
		uFnMuteSoundThemes = UFunction::FindFunction("Function OLGame.OLGFxMoviePlayer.MuteSoundThemes");
	}

	UOLGFxMoviePlayer_execMuteSoundThemes_Params MuteSoundThemes_Params;
	memset(&MuteSoundThemes_Params, 0, sizeof(MuteSoundThemes_Params));
	MuteSoundThemes_Params.bMute = bMute;

	this->ProcessEvent(uFnMuteSoundThemes, &MuteSoundThemes_Params, nullptr);
};

// Function OLGame.OLGFxMoviePlayer.GetGame
// [0x00022002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AOLGame*                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class AOLGame* UOLGFxMoviePlayer::GetGame()
{
	static UFunction* uFnGetGame = nullptr;

	if (!uFnGetGame)
	{
		uFnGetGame = UFunction::FindFunction("Function OLGame.OLGFxMoviePlayer.GetGame");
	}

	UOLGFxMoviePlayer_execGetGame_Params GetGame_Params;
	memset(&GetGame_Params, 0, sizeof(GetGame_Params));

	UOLGFxMoviePlayer::StaticClass()->ProcessEvent(uFnGetGame, &GetGame_Params, nullptr);

	return GetGame_Params.ReturnValue;
};

// Function OLGame.OLGFxMoviePlayer.GetOLPC
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AOLPlayerController*     ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class AOLPlayerController* UOLGFxMoviePlayer::GetOLPC()
{
	static UFunction* uFnGetOLPC = nullptr;

	if (!uFnGetOLPC)
	{
		uFnGetOLPC = UFunction::FindFunction("Function OLGame.OLGFxMoviePlayer.GetOLPC");
	}

	UOLGFxMoviePlayer_execGetOLPC_Params GetOLPC_Params;
	memset(&GetOLPC_Params, 0, sizeof(GetOLPC_Params));

	this->ProcessEvent(uFnGetOLPC, &GetOLPC_Params, nullptr);

	return GetOLPC_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd.NotifyAltEnter
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd::NotifyAltEnter()
{
	static UFunction* uFnNotifyAltEnter = nullptr;

	if (!uFnNotifyAltEnter)
	{
		uFnNotifyAltEnter = UFunction::FindFunction("Function OLGame.OLUIFrontEnd.NotifyAltEnter");
	}

	UOLUIFrontEnd_execNotifyAltEnter_Params NotifyAltEnter_Params;
	memset(&NotifyAltEnter_Params, 0, sizeof(NotifyAltEnter_Params));

	this->ProcessEvent(uFnNotifyAltEnter, &NotifyAltEnter_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd.GetLocalizedString
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FString                  Category                       (CPF_Parm | CPF_NeedCtorLink)
// class FString                  KeyName                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  File                           (CPF_Parm | CPF_NeedCtorLink)

class FString UOLUIFrontEnd::GetLocalizedString(class FString Category, class FString KeyName, class FString File)
{
	static UFunction* uFnGetLocalizedString = nullptr;

	if (!uFnGetLocalizedString)
	{
		uFnGetLocalizedString = UFunction::FindFunction("Function OLGame.OLUIFrontEnd.GetLocalizedString");
	}

	UOLUIFrontEnd_execGetLocalizedString_Params GetLocalizedString_Params;
	memset(&GetLocalizedString_Params, 0, sizeof(GetLocalizedString_Params));
	memcpy_s(&GetLocalizedString_Params.Category, sizeof(GetLocalizedString_Params.Category), &Category, sizeof(Category));
	memcpy_s(&GetLocalizedString_Params.KeyName, sizeof(GetLocalizedString_Params.KeyName), &KeyName, sizeof(KeyName));
	memcpy_s(&GetLocalizedString_Params.File, sizeof(GetLocalizedString_Params.File), &File, sizeof(File));

	this->ProcessEvent(uFnGetLocalizedString, &GetLocalizedString_Params, nullptr);

	return GetLocalizedString_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd.GetGamepadActionBoundToKey
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FString                  KeyNameString                  (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        ConfigType                     (CPF_Parm)

class FString UOLUIFrontEnd::GetGamepadActionBoundToKey(class FString KeyNameString, int32_t ConfigType)
{
	static UFunction* uFnGetGamepadActionBoundToKey = nullptr;

	if (!uFnGetGamepadActionBoundToKey)
	{
		uFnGetGamepadActionBoundToKey = UFunction::FindFunction("Function OLGame.OLUIFrontEnd.GetGamepadActionBoundToKey");
	}

	UOLUIFrontEnd_execGetGamepadActionBoundToKey_Params GetGamepadActionBoundToKey_Params;
	memset(&GetGamepadActionBoundToKey_Params, 0, sizeof(GetGamepadActionBoundToKey_Params));
	memcpy_s(&GetGamepadActionBoundToKey_Params.KeyNameString, sizeof(GetGamepadActionBoundToKey_Params.KeyNameString), &KeyNameString, sizeof(KeyNameString));
	memcpy_s(&GetGamepadActionBoundToKey_Params.ConfigType, sizeof(GetGamepadActionBoundToKey_Params.ConfigType), &ConfigType, sizeof(ConfigType));

	this->ProcessEvent(uFnGetGamepadActionBoundToKey, &GetGamepadActionBoundToKey_Params, nullptr);

	return GetGamepadActionBoundToKey_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd.HasInitializedGamma
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIFrontEnd::HasInitializedGamma()
{
	static UFunction* uFnHasInitializedGamma = nullptr;

	if (!uFnHasInitializedGamma)
	{
		uFnHasInitializedGamma = UFunction::FindFunction("Function OLGame.OLUIFrontEnd.HasInitializedGamma");
	}

	UOLUIFrontEnd_execHasInitializedGamma_Params HasInitializedGamma_Params;
	memset(&HasInitializedGamma_Params, 0, sizeof(HasInitializedGamma_Params));

	this->ProcessEvent(uFnHasInitializedGamma, &HasInitializedGamma_Params, nullptr);

	return HasInitializedGamma_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd.GetFriendlyKeyBindingName
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FString                  KeyName                        (CPF_Parm | CPF_NeedCtorLink)

class FString UOLUIFrontEnd::GetFriendlyKeyBindingName(class FString KeyName)
{
	static UFunction* uFnGetFriendlyKeyBindingName = nullptr;

	if (!uFnGetFriendlyKeyBindingName)
	{
		uFnGetFriendlyKeyBindingName = UFunction::FindFunction("Function OLGame.OLUIFrontEnd.GetFriendlyKeyBindingName");
	}

	UOLUIFrontEnd_execGetFriendlyKeyBindingName_Params GetFriendlyKeyBindingName_Params;
	memset(&GetFriendlyKeyBindingName_Params, 0, sizeof(GetFriendlyKeyBindingName_Params));
	memcpy_s(&GetFriendlyKeyBindingName_Params.KeyName, sizeof(GetFriendlyKeyBindingName_Params.KeyName), &KeyName, sizeof(KeyName));

	this->ProcessEvent(uFnGetFriendlyKeyBindingName, &GetFriendlyKeyBindingName_Params, nullptr);

	return GetFriendlyKeyBindingName_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd.StartKeyBindingCapture
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd::StartKeyBindingCapture()
{
	static UFunction* uFnStartKeyBindingCapture = nullptr;

	if (!uFnStartKeyBindingCapture)
	{
		uFnStartKeyBindingCapture = UFunction::FindFunction("Function OLGame.OLUIFrontEnd.StartKeyBindingCapture");
	}

	UOLUIFrontEnd_execStartKeyBindingCapture_Params StartKeyBindingCapture_Params;
	memset(&StartKeyBindingCapture_Params, 0, sizeof(StartKeyBindingCapture_Params));

	this->ProcessEvent(uFnStartKeyBindingCapture, &StartKeyBindingCapture_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd.FilterButtonInput
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// struct FName                   ButtonName                     (CPF_Parm)
// EInputEvent                    InputEvent                     (CPF_Parm)

bool UOLUIFrontEnd::eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent)
{
	static UFunction* uFnFilterButtonInput = nullptr;

	if (!uFnFilterButtonInput)
	{
		uFnFilterButtonInput = UFunction::FindFunction("Function OLGame.OLUIFrontEnd.FilterButtonInput");
	}

	UOLUIFrontEnd_eventFilterButtonInput_Params FilterButtonInput_Params;
	memset(&FilterButtonInput_Params, 0, sizeof(FilterButtonInput_Params));
	memcpy_s(&FilterButtonInput_Params.ControllerId, sizeof(FilterButtonInput_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&FilterButtonInput_Params.ButtonName, sizeof(FilterButtonInput_Params.ButtonName), &ButtonName, sizeof(ButtonName));
	memcpy_s(&FilterButtonInput_Params.InputEvent, sizeof(FilterButtonInput_Params.InputEvent), &InputEvent, sizeof(InputEvent));

	this->ProcessEvent(uFnFilterButtonInput, &FilterButtonInput_Params, nullptr);

	return FilterButtonInput_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd.WidgetInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   WidgetName                     (CPF_Parm)
// struct FName                   WidgetPath                     (CPF_Parm)
// class UGFxObject*              Widget                         (CPF_Parm)

bool UOLUIFrontEnd::eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget)
{
	static UFunction* uFnWidgetInitialized = nullptr;

	if (!uFnWidgetInitialized)
	{
		uFnWidgetInitialized = UFunction::FindFunction("Function OLGame.OLUIFrontEnd.WidgetInitialized");
	}

	UOLUIFrontEnd_eventWidgetInitialized_Params WidgetInitialized_Params;
	memset(&WidgetInitialized_Params, 0, sizeof(WidgetInitialized_Params));
	memcpy_s(&WidgetInitialized_Params.WidgetName, sizeof(WidgetInitialized_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&WidgetInitialized_Params.WidgetPath, sizeof(WidgetInitialized_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));
	memcpy_s(&WidgetInitialized_Params.Widget, sizeof(WidgetInitialized_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnWidgetInitialized, &WidgetInitialized_Params, nullptr);

	return WidgetInitialized_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd.ConfigureTargetView
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLUIFrontEnd_View*      targetView                     (CPF_Parm)

void UOLUIFrontEnd::ConfigureTargetView(class UOLUIFrontEnd_View* targetView)
{
	static UFunction* uFnConfigureTargetView = nullptr;

	if (!uFnConfigureTargetView)
	{
		uFnConfigureTargetView = UFunction::FindFunction("Function OLGame.OLUIFrontEnd.ConfigureTargetView");
	}

	UOLUIFrontEnd_execConfigureTargetView_Params ConfigureTargetView_Params;
	memset(&ConfigureTargetView_Params, 0, sizeof(ConfigureTargetView_Params));
	memcpy_s(&ConfigureTargetView_Params.targetView, sizeof(ConfigureTargetView_Params.targetView), &targetView, sizeof(targetView));

	this->ProcessEvent(uFnConfigureTargetView, &ConfigureTargetView_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd.ConfigureView
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLUIFrontEnd_View*      InView                         (CPF_Parm)
// struct FName                   WidgetName                     (CPF_Parm)
// struct FName                   WidgetPath                     (CPF_Parm)

void UOLUIFrontEnd::ConfigureView(class UOLUIFrontEnd_View* InView, struct FName WidgetName, struct FName WidgetPath)
{
	static UFunction* uFnConfigureView = nullptr;

	if (!uFnConfigureView)
	{
		uFnConfigureView = UFunction::FindFunction("Function OLGame.OLUIFrontEnd.ConfigureView");
	}

	UOLUIFrontEnd_execConfigureView_Params ConfigureView_Params;
	memset(&ConfigureView_Params, 0, sizeof(ConfigureView_Params));
	memcpy_s(&ConfigureView_Params.InView, sizeof(ConfigureView_Params.InView), &InView, sizeof(InView));
	memcpy_s(&ConfigureView_Params.WidgetName, sizeof(ConfigureView_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&ConfigureView_Params.WidgetPath, sizeof(ConfigureView_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));

	this->ProcessEvent(uFnConfigureView, &ConfigureView_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd.PopViewStub
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UGFxObject*              ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UGFxObject* UOLUIFrontEnd::PopViewStub()
{
	static UFunction* uFnPopViewStub = nullptr;

	if (!uFnPopViewStub)
	{
		uFnPopViewStub = UFunction::FindFunction("Function OLGame.OLUIFrontEnd.PopViewStub");
	}

	UOLUIFrontEnd_execPopViewStub_Params PopViewStub_Params;
	memset(&PopViewStub_Params, 0, sizeof(PopViewStub_Params));

	this->ProcessEvent(uFnPopViewStub, &PopViewStub_Params, nullptr);

	return PopViewStub_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd.PopView
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UGFxObject*              ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UGFxObject* UOLUIFrontEnd::PopView()
{
	static UFunction* uFnPopView = nullptr;

	if (!uFnPopView)
	{
		uFnPopView = UFunction::FindFunction("Function OLGame.OLUIFrontEnd.PopView");
	}

	UOLUIFrontEnd_execPopView_Params PopView_Params;
	memset(&PopView_Params, 0, sizeof(PopView_Params));

	this->ProcessEvent(uFnPopView, &PopView_Params, nullptr);

	return PopView_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd.PushViewByName
// [0x00024003] (FUNC_Final | FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FName                   TargetViewName                 (CPF_Parm)
// class UOLUIFrontEnd_Screen*    ParentView                     (CPF_OptionalParm | CPF_Parm)

void UOLUIFrontEnd::PushViewByName(struct FName TargetViewName, class UOLUIFrontEnd_Screen* ParentView)
{
	static UFunction* uFnPushViewByName = nullptr;

	if (!uFnPushViewByName)
	{
		uFnPushViewByName = UFunction::FindFunction("Function OLGame.OLUIFrontEnd.PushViewByName");
	}

	UOLUIFrontEnd_execPushViewByName_Params PushViewByName_Params;
	memset(&PushViewByName_Params, 0, sizeof(PushViewByName_Params));
	memcpy_s(&PushViewByName_Params.TargetViewName, sizeof(PushViewByName_Params.TargetViewName), &TargetViewName, sizeof(TargetViewName));
	memcpy_s(&PushViewByName_Params.ParentView, sizeof(PushViewByName_Params.ParentView), &ParentView, sizeof(ParentView));

	this->ProcessEvent(uFnPushViewByName, &PushViewByName_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd.PushView
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLUIFrontEnd_View*      targetView                     (CPF_Parm | CPF_CoerceParm)

void UOLUIFrontEnd::PushView(class UOLUIFrontEnd_View* targetView)
{
	static UFunction* uFnPushView = nullptr;

	if (!uFnPushView)
	{
		uFnPushView = UFunction::FindFunction("Function OLGame.OLUIFrontEnd.PushView");
	}

	UOLUIFrontEnd_execPushView_Params PushView_Params;
	memset(&PushView_Params, 0, sizeof(PushView_Params));
	memcpy_s(&PushView_Params.targetView, sizeof(PushView_Params.targetView), &targetView, sizeof(targetView));

	this->ProcessEvent(uFnPushView, &PushView_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd.LoadView
// [0x00820003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// struct FViewInfo               InViewInfo                     (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd::LoadView(struct FViewInfo InViewInfo)
{
	static UFunction* uFnLoadView = nullptr;

	if (!uFnLoadView)
	{
		uFnLoadView = UFunction::FindFunction("Function OLGame.OLUIFrontEnd.LoadView");
	}

	UOLUIFrontEnd_execLoadView_Params LoadView_Params;
	memset(&LoadView_Params, 0, sizeof(LoadView_Params));
	memcpy_s(&LoadView_Params.InViewInfo, sizeof(LoadView_Params.InViewInfo), &InViewInfo, sizeof(InViewInfo));

	this->ProcessEvent(uFnLoadView, &LoadView_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd.LoadViews
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd::LoadViews()
{
	static UFunction* uFnLoadViews = nullptr;

	if (!uFnLoadViews)
	{
		uFnLoadViews = UFunction::FindFunction("Function OLGame.OLUIFrontEnd.LoadViews");
	}

	UOLUIFrontEnd_execLoadViews_Params LoadViews_Params;
	memset(&LoadViews_Params, 0, sizeof(LoadViews_Params));

	this->ProcessEvent(uFnLoadViews, &LoadViews_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd.CleanViews
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd::CleanViews()
{
	static UFunction* uFnCleanViews = nullptr;

	if (!uFnCleanViews)
	{
		uFnCleanViews = UFunction::FindFunction("Function OLGame.OLUIFrontEnd.CleanViews");
	}

	UOLUIFrontEnd_execCleanViews_Params CleanViews_Params;
	memset(&CleanViews_Params, 0, sizeof(CleanViews_Params));

	this->ProcessEvent(uFnCleanViews, &CleanViews_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd.ConfigFrontEnd
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd::ConfigFrontEnd()
{
	static UFunction* uFnConfigFrontEnd = nullptr;

	if (!uFnConfigFrontEnd)
	{
		uFnConfigFrontEnd = UFunction::FindFunction("Function OLGame.OLUIFrontEnd.ConfigFrontEnd");
	}

	UOLUIFrontEnd_execConfigFrontEnd_Params ConfigFrontEnd_Params;
	memset(&ConfigFrontEnd_Params, 0, sizeof(ConfigFrontEnd_Params));

	this->ProcessEvent(uFnConfigFrontEnd, &ConfigFrontEnd_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd.OnKeyBindingsChanged
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd::OnKeyBindingsChanged()
{
	static UFunction* uFnOnKeyBindingsChanged = nullptr;

	if (!uFnOnKeyBindingsChanged)
	{
		uFnOnKeyBindingsChanged = UFunction::FindFunction("Function OLGame.OLUIFrontEnd.OnKeyBindingsChanged");
	}

	UOLUIFrontEnd_execOnKeyBindingsChanged_Params OnKeyBindingsChanged_Params;
	memset(&OnKeyBindingsChanged_Params, 0, sizeof(OnKeyBindingsChanged_Params));

	this->ProcessEvent(uFnOnKeyBindingsChanged, &OnKeyBindingsChanged_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd.AddCaptureKeys
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd::AddCaptureKeys()
{
	static UFunction* uFnAddCaptureKeys = nullptr;

	if (!uFnAddCaptureKeys)
	{
		uFnAddCaptureKeys = UFunction::FindFunction("Function OLGame.OLUIFrontEnd.AddCaptureKeys");
	}

	UOLUIFrontEnd_execAddCaptureKeys_Params AddCaptureKeys_Params;
	memset(&AddCaptureKeys_Params, 0, sizeof(AddCaptureKeys_Params));

	this->ProcessEvent(uFnAddCaptureKeys, &AddCaptureKeys_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd.OnClose
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd::eventOnClose()
{
	static UFunction* uFnOnClose = nullptr;

	if (!uFnOnClose)
	{
		uFnOnClose = UFunction::FindFunction("Function OLGame.OLUIFrontEnd.OnClose");
	}

	UOLUIFrontEnd_eventOnClose_Params OnClose_Params;
	memset(&OnClose_Params, 0, sizeof(OnClose_Params));

	this->ProcessEvent(uFnOnClose, &OnClose_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// bool                           StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UOLUIFrontEnd::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function OLGame.OLUIFrontEnd.Start");
	}

	UOLUIFrontEnd_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_MainMenu.TickGameDownload
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaSeconds                   (CPF_Parm)

void UOLUIFrontEnd_MainMenu::TickGameDownload(float DeltaSeconds)
{
	static UFunction* uFnTickGameDownload = nullptr;

	if (!uFnTickGameDownload)
	{
		uFnTickGameDownload = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.TickGameDownload");
	}

	UOLUIFrontEnd_MainMenu_execTickGameDownload_Params TickGameDownload_Params;
	memset(&TickGameDownload_Params, 0, sizeof(TickGameDownload_Params));
	memcpy_s(&TickGameDownload_Params.DeltaSeconds, sizeof(TickGameDownload_Params.DeltaSeconds), &DeltaSeconds, sizeof(DeltaSeconds));

	this->ProcessEvent(uFnTickGameDownload, &TickGameDownload_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.Tick
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaSeconds                   (CPF_Parm)

void UOLUIFrontEnd_MainMenu::Tick(float DeltaSeconds)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.Tick");
	}

	UOLUIFrontEnd_MainMenu_execTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaSeconds, sizeof(Tick_Params.DeltaSeconds), &DeltaSeconds, sizeof(DeltaSeconds));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.ASInitButtonFocus
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_MainMenu::ASInitButtonFocus()
{
	static UFunction* uFnASInitButtonFocus = nullptr;

	if (!uFnASInitButtonFocus)
	{
		uFnASInitButtonFocus = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.ASInitButtonFocus");
	}

	UOLUIFrontEnd_MainMenu_execASInitButtonFocus_Params ASInitButtonFocus_Params;
	memset(&ASInitButtonFocus_Params, 0, sizeof(ASInitButtonFocus_Params));

	this->ProcessEvent(uFnASInitButtonFocus, &ASInitButtonFocus_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.ASShowNewGameIntroText
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_MainMenu::ASShowNewGameIntroText()
{
	static UFunction* uFnASShowNewGameIntroText = nullptr;

	if (!uFnASShowNewGameIntroText)
	{
		uFnASShowNewGameIntroText = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.ASShowNewGameIntroText");
	}

	UOLUIFrontEnd_MainMenu_execASShowNewGameIntroText_Params ASShowNewGameIntroText_Params;
	memset(&ASShowNewGameIntroText_Params, 0, sizeof(ASShowNewGameIntroText_Params));

	this->ProcessEvent(uFnASShowNewGameIntroText, &ASShowNewGameIntroText_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.ShowDeleteRecordingsConfirmationDialog
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class FString                  Title                          (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Message                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  okButtonLabel                  (CPF_Parm | CPF_NeedCtorLink)
// class FString                  cancelButtonLabel              (CPF_Parm | CPF_NeedCtorLink)
// class FString                  callbackName                   (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_MainMenu::ShowDeleteRecordingsConfirmationDialog(class FString Title, class FString Message, class FString okButtonLabel, class FString cancelButtonLabel, class FString callbackName)
{
	static UFunction* uFnShowDeleteRecordingsConfirmationDialog = nullptr;

	if (!uFnShowDeleteRecordingsConfirmationDialog)
	{
		uFnShowDeleteRecordingsConfirmationDialog = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.ShowDeleteRecordingsConfirmationDialog");
	}

	UOLUIFrontEnd_MainMenu_execShowDeleteRecordingsConfirmationDialog_Params ShowDeleteRecordingsConfirmationDialog_Params;
	memset(&ShowDeleteRecordingsConfirmationDialog_Params, 0, sizeof(ShowDeleteRecordingsConfirmationDialog_Params));
	memcpy_s(&ShowDeleteRecordingsConfirmationDialog_Params.Title, sizeof(ShowDeleteRecordingsConfirmationDialog_Params.Title), &Title, sizeof(Title));
	memcpy_s(&ShowDeleteRecordingsConfirmationDialog_Params.Message, sizeof(ShowDeleteRecordingsConfirmationDialog_Params.Message), &Message, sizeof(Message));
	memcpy_s(&ShowDeleteRecordingsConfirmationDialog_Params.okButtonLabel, sizeof(ShowDeleteRecordingsConfirmationDialog_Params.okButtonLabel), &okButtonLabel, sizeof(okButtonLabel));
	memcpy_s(&ShowDeleteRecordingsConfirmationDialog_Params.cancelButtonLabel, sizeof(ShowDeleteRecordingsConfirmationDialog_Params.cancelButtonLabel), &cancelButtonLabel, sizeof(cancelButtonLabel));
	memcpy_s(&ShowDeleteRecordingsConfirmationDialog_Params.callbackName, sizeof(ShowDeleteRecordingsConfirmationDialog_Params.callbackName), &callbackName, sizeof(callbackName));

	this->ProcessEvent(uFnShowDeleteRecordingsConfirmationDialog, &ShowDeleteRecordingsConfirmationDialog_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.ShowMessageDialog
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class FString                  Title                          (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Message                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  okButtonLabel                  (CPF_Parm | CPF_NeedCtorLink)
// class FString                  callbackName                   (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_MainMenu::ShowMessageDialog(class FString Title, class FString Message, class FString okButtonLabel, class FString callbackName)
{
	static UFunction* uFnShowMessageDialog = nullptr;

	if (!uFnShowMessageDialog)
	{
		uFnShowMessageDialog = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.ShowMessageDialog");
	}

	UOLUIFrontEnd_MainMenu_execShowMessageDialog_Params ShowMessageDialog_Params;
	memset(&ShowMessageDialog_Params, 0, sizeof(ShowMessageDialog_Params));
	memcpy_s(&ShowMessageDialog_Params.Title, sizeof(ShowMessageDialog_Params.Title), &Title, sizeof(Title));
	memcpy_s(&ShowMessageDialog_Params.Message, sizeof(ShowMessageDialog_Params.Message), &Message, sizeof(Message));
	memcpy_s(&ShowMessageDialog_Params.okButtonLabel, sizeof(ShowMessageDialog_Params.okButtonLabel), &okButtonLabel, sizeof(okButtonLabel));
	memcpy_s(&ShowMessageDialog_Params.callbackName, sizeof(ShowMessageDialog_Params.callbackName), &callbackName, sizeof(callbackName));

	this->ProcessEvent(uFnShowMessageDialog, &ShowMessageDialog_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.WidgetInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   WidgetName                     (CPF_Parm)
// struct FName                   WidgetPath                     (CPF_Parm)
// class UGFxObject*              Widget                         (CPF_Parm)

bool UOLUIFrontEnd_MainMenu::eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget)
{
	static UFunction* uFnWidgetInitialized = nullptr;

	if (!uFnWidgetInitialized)
	{
		uFnWidgetInitialized = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.WidgetInitialized");
	}

	UOLUIFrontEnd_MainMenu_eventWidgetInitialized_Params WidgetInitialized_Params;
	memset(&WidgetInitialized_Params, 0, sizeof(WidgetInitialized_Params));
	memcpy_s(&WidgetInitialized_Params.WidgetName, sizeof(WidgetInitialized_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&WidgetInitialized_Params.WidgetPath, sizeof(WidgetInitialized_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));
	memcpy_s(&WidgetInitialized_Params.Widget, sizeof(WidgetInitialized_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnWidgetInitialized, &WidgetInitialized_Params, nullptr);

	return WidgetInitialized_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_MainMenu.FilterButtonInput
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// struct FName                   ButtonName                     (CPF_Parm)
// EInputEvent                    InputEvent                     (CPF_Parm)

bool UOLUIFrontEnd_MainMenu::eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent)
{
	static UFunction* uFnFilterButtonInput = nullptr;

	if (!uFnFilterButtonInput)
	{
		uFnFilterButtonInput = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.FilterButtonInput");
	}

	UOLUIFrontEnd_MainMenu_eventFilterButtonInput_Params FilterButtonInput_Params;
	memset(&FilterButtonInput_Params, 0, sizeof(FilterButtonInput_Params));
	memcpy_s(&FilterButtonInput_Params.ControllerId, sizeof(FilterButtonInput_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&FilterButtonInput_Params.ButtonName, sizeof(FilterButtonInput_Params.ButtonName), &ButtonName, sizeof(ButtonName));
	memcpy_s(&FilterButtonInput_Params.InputEvent, sizeof(FilterButtonInput_Params.InputEvent), &InputEvent, sizeof(InputEvent));

	this->ProcessEvent(uFnFilterButtonInput, &FilterButtonInput_Params, nullptr);

	return FilterButtonInput_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_MainMenu.ShowPressStartScreen
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_MainMenu::ShowPressStartScreen()
{
	static UFunction* uFnShowPressStartScreen = nullptr;

	if (!uFnShowPressStartScreen)
	{
		uFnShowPressStartScreen = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.ShowPressStartScreen");
	}

	UOLUIFrontEnd_MainMenu_execShowPressStartScreen_Params ShowPressStartScreen_Params;
	memset(&ShowPressStartScreen_Params, 0, sizeof(ShowPressStartScreen_Params));

	this->ProcessEvent(uFnShowPressStartScreen, &ShowPressStartScreen_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.ForceShowLoginUI
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ControllerId                   (CPF_Parm)

void UOLUIFrontEnd_MainMenu::ForceShowLoginUI(int32_t ControllerId)
{
	static UFunction* uFnForceShowLoginUI = nullptr;

	if (!uFnForceShowLoginUI)
	{
		uFnForceShowLoginUI = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.ForceShowLoginUI");
	}

	UOLUIFrontEnd_MainMenu_execForceShowLoginUI_Params ForceShowLoginUI_Params;
	memset(&ForceShowLoginUI_Params, 0, sizeof(ForceShowLoginUI_Params));
	memcpy_s(&ForceShowLoginUI_Params.ControllerId, sizeof(ForceShowLoginUI_Params.ControllerId), &ControllerId, sizeof(ControllerId));

	this->ProcessEvent(uFnForceShowLoginUI, &ForceShowLoginUI_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.OnPressStart
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ControllerId                   (CPF_Parm)

void UOLUIFrontEnd_MainMenu::OnPressStart(int32_t ControllerId)
{
	static UFunction* uFnOnPressStart = nullptr;

	if (!uFnOnPressStart)
	{
		uFnOnPressStart = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.OnPressStart");
	}

	UOLUIFrontEnd_MainMenu_execOnPressStart_Params OnPressStart_Params;
	memset(&OnPressStart_Params, 0, sizeof(OnPressStart_Params));
	memcpy_s(&OnPressStart_Params.ControllerId, sizeof(OnPressStart_Params.ControllerId), &ControllerId, sizeof(ControllerId));

	this->ProcessEvent(uFnOnPressStart, &OnPressStart_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.OnDingoUserInitialized
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bSuccess                       (CPF_Parm)

void UOLUIFrontEnd_MainMenu::OnDingoUserInitialized(bool bSuccess)
{
	static UFunction* uFnOnDingoUserInitialized = nullptr;

	if (!uFnOnDingoUserInitialized)
	{
		uFnOnDingoUserInitialized = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.OnDingoUserInitialized");
	}

	UOLUIFrontEnd_MainMenu_execOnDingoUserInitialized_Params OnDingoUserInitialized_Params;
	memset(&OnDingoUserInitialized_Params, 0, sizeof(OnDingoUserInitialized_Params));
	OnDingoUserInitialized_Params.bSuccess = bSuccess;

	this->ProcessEvent(uFnOnDingoUserInitialized, &OnDingoUserInitialized_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.OnButtonClick
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_MainMenu::OnButtonClick(struct FEventData ev)
{
	static UFunction* uFnOnButtonClick = nullptr;

	if (!uFnOnButtonClick)
	{
		uFnOnButtonClick = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.OnButtonClick");
	}

	UOLUIFrontEnd_MainMenu_execOnButtonClick_Params OnButtonClick_Params;
	memset(&OnButtonClick_Params, 0, sizeof(OnButtonClick_Params));
	memcpy_s(&OnButtonClick_Params.ev, sizeof(OnButtonClick_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnOnButtonClick, &OnButtonClick_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.SetMainMenuText
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Message                        (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_MainMenu::SetMainMenuText(class FString Message)
{
	static UFunction* uFnSetMainMenuText = nullptr;

	if (!uFnSetMainMenuText)
	{
		uFnSetMainMenuText = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.SetMainMenuText");
	}

	UOLUIFrontEnd_MainMenu_execSetMainMenuText_Params SetMainMenuText_Params;
	memset(&SetMainMenuText_Params, 0, sizeof(SetMainMenuText_Params));
	memcpy_s(&SetMainMenuText_Params.Message, sizeof(SetMainMenuText_Params.Message), &Message, sizeof(Message));

	this->ProcessEvent(uFnSetMainMenuText, &SetMainMenuText_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.PopulateButtons
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_MainMenu::PopulateButtons()
{
	static UFunction* uFnPopulateButtons = nullptr;

	if (!uFnPopulateButtons)
	{
		uFnPopulateButtons = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.PopulateButtons");
	}

	UOLUIFrontEnd_MainMenu_execPopulateButtons_Params PopulateButtons_Params;
	memset(&PopulateButtons_Params, 0, sizeof(PopulateButtons_Params));

	this->ProcessEvent(uFnPopulateButtons, &PopulateButtons_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.back
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIFrontEnd_MainMenu::back()
{
	static UFunction* uFnback = nullptr;

	if (!uFnback)
	{
		uFnback = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.back");
	}

	UOLUIFrontEnd_MainMenu_execback_Params back_Params;
	memset(&back_Params, 0, sizeof(back_Params));

	this->ProcessEvent(uFnback, &back_Params, nullptr);

	return back_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_MainMenu.OnRecordingsButtonPress
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_MainMenu::OnRecordingsButtonPress(struct FEventData ev)
{
	static UFunction* uFnOnRecordingsButtonPress = nullptr;

	if (!uFnOnRecordingsButtonPress)
	{
		uFnOnRecordingsButtonPress = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.OnRecordingsButtonPress");
	}

	UOLUIFrontEnd_MainMenu_execOnRecordingsButtonPress_Params OnRecordingsButtonPress_Params;
	memset(&OnRecordingsButtonPress_Params, 0, sizeof(OnRecordingsButtonPress_Params));
	memcpy_s(&OnRecordingsButtonPress_Params.ev, sizeof(OnRecordingsButtonPress_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnOnRecordingsButtonPress, &OnRecordingsButtonPress_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.OnExitButtonPress
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_MainMenu::OnExitButtonPress(struct FEventData ev)
{
	static UFunction* uFnOnExitButtonPress = nullptr;

	if (!uFnOnExitButtonPress)
	{
		uFnOnExitButtonPress = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.OnExitButtonPress");
	}

	UOLUIFrontEnd_MainMenu_execOnExitButtonPress_Params OnExitButtonPress_Params;
	memset(&OnExitButtonPress_Params, 0, sizeof(OnExitButtonPress_Params));
	memcpy_s(&OnExitButtonPress_Params.ev, sizeof(OnExitButtonPress_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnOnExitButtonPress, &OnExitButtonPress_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.OnCreditsButtonPress
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_MainMenu::OnCreditsButtonPress(struct FEventData ev)
{
	static UFunction* uFnOnCreditsButtonPress = nullptr;

	if (!uFnOnCreditsButtonPress)
	{
		uFnOnCreditsButtonPress = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.OnCreditsButtonPress");
	}

	UOLUIFrontEnd_MainMenu_execOnCreditsButtonPress_Params OnCreditsButtonPress_Params;
	memset(&OnCreditsButtonPress_Params, 0, sizeof(OnCreditsButtonPress_Params));
	memcpy_s(&OnCreditsButtonPress_Params.ev, sizeof(OnCreditsButtonPress_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnOnCreditsButtonPress, &OnCreditsButtonPress_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.OnOptionsButtonPress
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_MainMenu::OnOptionsButtonPress(struct FEventData ev)
{
	static UFunction* uFnOnOptionsButtonPress = nullptr;

	if (!uFnOnOptionsButtonPress)
	{
		uFnOnOptionsButtonPress = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.OnOptionsButtonPress");
	}

	UOLUIFrontEnd_MainMenu_execOnOptionsButtonPress_Params OnOptionsButtonPress_Params;
	memset(&OnOptionsButtonPress_Params, 0, sizeof(OnOptionsButtonPress_Params));
	memcpy_s(&OnOptionsButtonPress_Params.ev, sizeof(OnOptionsButtonPress_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnOnOptionsButtonPress, &OnOptionsButtonPress_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.Select_Options
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_MainMenu::Select_Options()
{
	static UFunction* uFnSelect_Options = nullptr;

	if (!uFnSelect_Options)
	{
		uFnSelect_Options = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.Select_Options");
	}

	UOLUIFrontEnd_MainMenu_execSelect_Options_Params Select_Options_Params;
	memset(&Select_Options_Params, 0, sizeof(Select_Options_Params));

	this->ProcessEvent(uFnSelect_Options, &Select_Options_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.OnSaveListButtonPress
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_MainMenu::OnSaveListButtonPress(struct FEventData ev)
{
	static UFunction* uFnOnSaveListButtonPress = nullptr;

	if (!uFnOnSaveListButtonPress)
	{
		uFnOnSaveListButtonPress = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.OnSaveListButtonPress");
	}

	UOLUIFrontEnd_MainMenu_execOnSaveListButtonPress_Params OnSaveListButtonPress_Params;
	memset(&OnSaveListButtonPress_Params, 0, sizeof(OnSaveListButtonPress_Params));
	memcpy_s(&OnSaveListButtonPress_Params.ev, sizeof(OnSaveListButtonPress_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnOnSaveListButtonPress, &OnSaveListButtonPress_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.OnLoadButtonPress
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_MainMenu::OnLoadButtonPress(struct FEventData ev)
{
	static UFunction* uFnOnLoadButtonPress = nullptr;

	if (!uFnOnLoadButtonPress)
	{
		uFnOnLoadButtonPress = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.OnLoadButtonPress");
	}

	UOLUIFrontEnd_MainMenu_execOnLoadButtonPress_Params OnLoadButtonPress_Params;
	memset(&OnLoadButtonPress_Params, 0, sizeof(OnLoadButtonPress_Params));
	memcpy_s(&OnLoadButtonPress_Params.ev, sizeof(OnLoadButtonPress_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnOnLoadButtonPress, &OnLoadButtonPress_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.OnOK
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_MainMenu::OnOK()
{
	static UFunction* uFnOnOK = nullptr;

	if (!uFnOnOK)
	{
		uFnOnOK = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.OnOK");
	}

	UOLUIFrontEnd_MainMenu_execOnOK_Params OnOK_Params;
	memset(&OnOK_Params, 0, sizeof(OnOK_Params));

	this->ProcessEvent(uFnOnOK, &OnOK_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.OnOKButtonClick
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_MainMenu::OnOKButtonClick(struct FEventData ev)
{
	static UFunction* uFnOnOKButtonClick = nullptr;

	if (!uFnOnOKButtonClick)
	{
		uFnOnOKButtonClick = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.OnOKButtonClick");
	}

	UOLUIFrontEnd_MainMenu_execOnOKButtonClick_Params OnOKButtonClick_Params;
	memset(&OnOKButtonClick_Params, 0, sizeof(OnOKButtonClick_Params));
	memcpy_s(&OnOKButtonClick_Params.ev, sizeof(OnOKButtonClick_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnOnOKButtonClick, &OnOKButtonClick_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.GoToNextIntroText
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class FString                  NextText                       (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_MainMenu::GoToNextIntroText(class FString NextText)
{
	static UFunction* uFnGoToNextIntroText = nullptr;

	if (!uFnGoToNextIntroText)
	{
		uFnGoToNextIntroText = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.GoToNextIntroText");
	}

	UOLUIFrontEnd_MainMenu_execGoToNextIntroText_Params GoToNextIntroText_Params;
	memset(&GoToNextIntroText_Params, 0, sizeof(GoToNextIntroText_Params));
	memcpy_s(&GoToNextIntroText_Params.NextText, sizeof(GoToNextIntroText_Params.NextText), &NextText, sizeof(NextText));

	this->ProcessEvent(uFnGoToNextIntroText, &GoToNextIntroText_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.OnChaptersButtonPress
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_MainMenu::OnChaptersButtonPress(struct FEventData ev)
{
	static UFunction* uFnOnChaptersButtonPress = nullptr;

	if (!uFnOnChaptersButtonPress)
	{
		uFnOnChaptersButtonPress = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.OnChaptersButtonPress");
	}

	UOLUIFrontEnd_MainMenu_execOnChaptersButtonPress_Params OnChaptersButtonPress_Params;
	memset(&OnChaptersButtonPress_Params, 0, sizeof(OnChaptersButtonPress_Params));
	memcpy_s(&OnChaptersButtonPress_Params.ev, sizeof(OnChaptersButtonPress_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnOnChaptersButtonPress, &OnChaptersButtonPress_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.OnStartDLCButtonPress
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_MainMenu::OnStartDLCButtonPress(struct FEventData ev)
{
	static UFunction* uFnOnStartDLCButtonPress = nullptr;

	if (!uFnOnStartDLCButtonPress)
	{
		uFnOnStartDLCButtonPress = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.OnStartDLCButtonPress");
	}

	UOLUIFrontEnd_MainMenu_execOnStartDLCButtonPress_Params OnStartDLCButtonPress_Params;
	memset(&OnStartDLCButtonPress_Params, 0, sizeof(OnStartDLCButtonPress_Params));
	memcpy_s(&OnStartDLCButtonPress_Params.ev, sizeof(OnStartDLCButtonPress_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnOnStartDLCButtonPress, &OnStartDLCButtonPress_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.OnStartButtonPress
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_MainMenu::OnStartButtonPress(struct FEventData ev)
{
	static UFunction* uFnOnStartButtonPress = nullptr;

	if (!uFnOnStartButtonPress)
	{
		uFnOnStartButtonPress = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.OnStartButtonPress");
	}

	UOLUIFrontEnd_MainMenu_execOnStartButtonPress_Params OnStartButtonPress_Params;
	memset(&OnStartButtonPress_Params, 0, sizeof(OnStartButtonPress_Params));
	memcpy_s(&OnStartButtonPress_Params.ev, sizeof(OnStartButtonPress_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnOnStartButtonPress, &OnStartButtonPress_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.GameLoadedCallback
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bSuccess                       (CPF_Parm)

void UOLUIFrontEnd_MainMenu::GameLoadedCallback(bool bSuccess)
{
	static UFunction* uFnGameLoadedCallback = nullptr;

	if (!uFnGameLoadedCallback)
	{
		uFnGameLoadedCallback = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.GameLoadedCallback");
	}

	UOLUIFrontEnd_MainMenu_execGameLoadedCallback_Params GameLoadedCallback_Params;
	memset(&GameLoadedCallback_Params, 0, sizeof(GameLoadedCallback_Params));
	GameLoadedCallback_Params.bSuccess = bSuccess;

	this->ProcessEvent(uFnGameLoadedCallback, &GameLoadedCallback_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.StartNewGame
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_MainMenu::StartNewGame()
{
	static UFunction* uFnStartNewGame = nullptr;

	if (!uFnStartNewGame)
	{
		uFnStartNewGame = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.StartNewGame");
	}

	UOLUIFrontEnd_MainMenu_execStartNewGame_Params StartNewGame_Params;
	memset(&StartNewGame_Params, 0, sizeof(StartNewGame_Params));

	this->ProcessEvent(uFnStartNewGame, &StartNewGame_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.DingoRecordingStorageDialogResult
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Type                           (CPF_Parm)

void UOLUIFrontEnd_MainMenu::DingoRecordingStorageDialogResult(int32_t Type)
{
	static UFunction* uFnDingoRecordingStorageDialogResult = nullptr;

	if (!uFnDingoRecordingStorageDialogResult)
	{
		uFnDingoRecordingStorageDialogResult = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.DingoRecordingStorageDialogResult");
	}

	UOLUIFrontEnd_MainMenu_execDingoRecordingStorageDialogResult_Params DingoRecordingStorageDialogResult_Params;
	memset(&DingoRecordingStorageDialogResult_Params, 0, sizeof(DingoRecordingStorageDialogResult_Params));
	memcpy_s(&DingoRecordingStorageDialogResult_Params.Type, sizeof(DingoRecordingStorageDialogResult_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnDingoRecordingStorageDialogResult, &DingoRecordingStorageDialogResult_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.DifficultySelected
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_MainMenu::DifficultySelected()
{
	static UFunction* uFnDifficultySelected = nullptr;

	if (!uFnDifficultySelected)
	{
		uFnDifficultySelected = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.DifficultySelected");
	}

	UOLUIFrontEnd_MainMenu_execDifficultySelected_Params DifficultySelected_Params;
	memset(&DifficultySelected_Params, 0, sizeof(DifficultySelected_Params));

	this->ProcessEvent(uFnDifficultySelected, &DifficultySelected_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.TrySkipSaveScreen
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIFrontEnd_MainMenu::TrySkipSaveScreen()
{
	static UFunction* uFnTrySkipSaveScreen = nullptr;

	if (!uFnTrySkipSaveScreen)
	{
		uFnTrySkipSaveScreen = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.TrySkipSaveScreen");
	}

	UOLUIFrontEnd_MainMenu_execTrySkipSaveScreen_Params TrySkipSaveScreen_Params;
	memset(&TrySkipSaveScreen_Params, 0, sizeof(TrySkipSaveScreen_Params));

	this->ProcessEvent(uFnTrySkipSaveScreen, &TrySkipSaveScreen_Params, nullptr);

	return TrySkipSaveScreen_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_MainMenu.ShowGamertag
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Gamertag                       (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_MainMenu::ShowGamertag(class FString Gamertag)
{
	static UFunction* uFnShowGamertag = nullptr;

	if (!uFnShowGamertag)
	{
		uFnShowGamertag = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.ShowGamertag");
	}

	UOLUIFrontEnd_MainMenu_execShowGamertag_Params ShowGamertag_Params;
	memset(&ShowGamertag_Params, 0, sizeof(ShowGamertag_Params));
	memcpy_s(&ShowGamertag_Params.Gamertag, sizeof(ShowGamertag_Params.Gamertag), &Gamertag, sizeof(Gamertag));

	this->ProcessEvent(uFnShowGamertag, &ShowGamertag_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.HideGametag
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_MainMenu::HideGametag()
{
	static UFunction* uFnHideGametag = nullptr;

	if (!uFnHideGametag)
	{
		uFnHideGametag = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.HideGametag");
	}

	UOLUIFrontEnd_MainMenu_execHideGametag_Params HideGametag_Params;
	memset(&HideGametag_Params, 0, sizeof(HideGametag_Params));

	this->ProcessEvent(uFnHideGametag, &HideGametag_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.SaveLocationSelected
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bSuccess                       (CPF_Parm)

void UOLUIFrontEnd_MainMenu::SaveLocationSelected(bool bSuccess)
{
	static UFunction* uFnSaveLocationSelected = nullptr;

	if (!uFnSaveLocationSelected)
	{
		uFnSaveLocationSelected = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.SaveLocationSelected");
	}

	UOLUIFrontEnd_MainMenu_execSaveLocationSelected_Params SaveLocationSelected_Params;
	memset(&SaveLocationSelected_Params, 0, sizeof(SaveLocationSelected_Params));
	SaveLocationSelected_Params.bSuccess = bSuccess;

	this->ProcessEvent(uFnSaveLocationSelected, &SaveLocationSelected_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.OnBadCheckpointMsgAcknowledged
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_MainMenu::OnBadCheckpointMsgAcknowledged()
{
	static UFunction* uFnOnBadCheckpointMsgAcknowledged = nullptr;

	if (!uFnOnBadCheckpointMsgAcknowledged)
	{
		uFnOnBadCheckpointMsgAcknowledged = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.OnBadCheckpointMsgAcknowledged");
	}

	UOLUIFrontEnd_MainMenu_execOnBadCheckpointMsgAcknowledged_Params OnBadCheckpointMsgAcknowledged_Params;
	memset(&OnBadCheckpointMsgAcknowledged_Params, 0, sizeof(OnBadCheckpointMsgAcknowledged_Params));

	this->ProcessEvent(uFnOnBadCheckpointMsgAcknowledged, &OnBadCheckpointMsgAcknowledged_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.ShowBadCheckpointMsg
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_MainMenu::ShowBadCheckpointMsg()
{
	static UFunction* uFnShowBadCheckpointMsg = nullptr;

	if (!uFnShowBadCheckpointMsg)
	{
		uFnShowBadCheckpointMsg = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.ShowBadCheckpointMsg");
	}

	UOLUIFrontEnd_MainMenu_execShowBadCheckpointMsg_Params ShowBadCheckpointMsg_Params;
	memset(&ShowBadCheckpointMsg_Params, 0, sizeof(ShowBadCheckpointMsg_Params));

	this->ProcessEvent(uFnShowBadCheckpointMsg, &ShowBadCheckpointMsg_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.OnContinueButtonPress
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_MainMenu::OnContinueButtonPress(struct FEventData ev)
{
	static UFunction* uFnOnContinueButtonPress = nullptr;

	if (!uFnOnContinueButtonPress)
	{
		uFnOnContinueButtonPress = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.OnContinueButtonPress");
	}

	UOLUIFrontEnd_MainMenu_execOnContinueButtonPress_Params OnContinueButtonPress_Params;
	memset(&OnContinueButtonPress_Params, 0, sizeof(OnContinueButtonPress_Params));
	memcpy_s(&OnContinueButtonPress_Params.ev, sizeof(OnContinueButtonPress_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnOnContinueButtonPress, &OnContinueButtonPress_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.OnTopMostView
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bPlayOpenAnimation             (CPF_OptionalParm | CPF_Parm)

void UOLUIFrontEnd_MainMenu::OnTopMostView(bool bPlayOpenAnimation)
{
	static UFunction* uFnOnTopMostView = nullptr;

	if (!uFnOnTopMostView)
	{
		uFnOnTopMostView = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.OnTopMostView");
	}

	UOLUIFrontEnd_MainMenu_execOnTopMostView_Params OnTopMostView_Params;
	memset(&OnTopMostView_Params, 0, sizeof(OnTopMostView_Params));
	OnTopMostView_Params.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent(uFnOnTopMostView, &OnTopMostView_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_MainMenu.OnViewLoaded
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_MainMenu::OnViewLoaded()
{
	static UFunction* uFnOnViewLoaded = nullptr;

	if (!uFnOnViewLoaded)
	{
		uFnOnViewLoaded = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_MainMenu.OnViewLoaded");
	}

	UOLUIFrontEnd_MainMenu_execOnViewLoaded_Params OnViewLoaded_Params;
	memset(&OnViewLoaded_Params, 0, sizeof(OnViewLoaded_Params));

	this->ProcessEvent(uFnOnViewLoaded, &OnViewLoaded_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Screen.WidgetInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   WidgetName                     (CPF_Parm)
// struct FName                   WidgetPath                     (CPF_Parm)
// class UGFxObject*              Widget                         (CPF_Parm)

bool UOLUIFrontEnd_Screen::eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget)
{
	static UFunction* uFnWidgetInitialized = nullptr;

	if (!uFnWidgetInitialized)
	{
		uFnWidgetInitialized = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Screen.WidgetInitialized");
	}

	UOLUIFrontEnd_Screen_eventWidgetInitialized_Params WidgetInitialized_Params;
	memset(&WidgetInitialized_Params, 0, sizeof(WidgetInitialized_Params));
	memcpy_s(&WidgetInitialized_Params.WidgetName, sizeof(WidgetInitialized_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&WidgetInitialized_Params.WidgetPath, sizeof(WidgetInitialized_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));
	memcpy_s(&WidgetInitialized_Params.Widget, sizeof(WidgetInitialized_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnWidgetInitialized, &WidgetInitialized_Params, nullptr);

	return WidgetInitialized_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Screen.LocalizeGeneric
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FString                  SectionName                    (CPF_Parm | CPF_NeedCtorLink)
// class FString                  KeyName                        (CPF_Parm | CPF_NeedCtorLink)

class FString UOLUIFrontEnd_Screen::LocalizeGeneric(class FString SectionName, class FString KeyName)
{
	static UFunction* uFnLocalizeGeneric = nullptr;

	if (!uFnLocalizeGeneric)
	{
		uFnLocalizeGeneric = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Screen.LocalizeGeneric");
	}

	UOLUIFrontEnd_Screen_execLocalizeGeneric_Params LocalizeGeneric_Params;
	memset(&LocalizeGeneric_Params, 0, sizeof(LocalizeGeneric_Params));
	memcpy_s(&LocalizeGeneric_Params.SectionName, sizeof(LocalizeGeneric_Params.SectionName), &SectionName, sizeof(SectionName));
	memcpy_s(&LocalizeGeneric_Params.KeyName, sizeof(LocalizeGeneric_Params.KeyName), &KeyName, sizeof(KeyName));

	this->ProcessEvent(uFnLocalizeGeneric, &LocalizeGeneric_Params, nullptr);

	return LocalizeGeneric_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Screen.LocalizeNarrative
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FString                  SectionName                    (CPF_Parm | CPF_NeedCtorLink)
// class FString                  KeyName                        (CPF_Parm | CPF_NeedCtorLink)

class FString UOLUIFrontEnd_Screen::LocalizeNarrative(class FString SectionName, class FString KeyName)
{
	static UFunction* uFnLocalizeNarrative = nullptr;

	if (!uFnLocalizeNarrative)
	{
		uFnLocalizeNarrative = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Screen.LocalizeNarrative");
	}

	UOLUIFrontEnd_Screen_execLocalizeNarrative_Params LocalizeNarrative_Params;
	memset(&LocalizeNarrative_Params, 0, sizeof(LocalizeNarrative_Params));
	memcpy_s(&LocalizeNarrative_Params.SectionName, sizeof(LocalizeNarrative_Params.SectionName), &SectionName, sizeof(SectionName));
	memcpy_s(&LocalizeNarrative_Params.KeyName, sizeof(LocalizeNarrative_Params.KeyName), &KeyName, sizeof(KeyName));

	this->ProcessEvent(uFnLocalizeNarrative, &LocalizeNarrative_Params, nullptr);

	return LocalizeNarrative_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Screen.IsDLCInstalled
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIFrontEnd_Screen::IsDLCInstalled()
{
	static UFunction* uFnIsDLCInstalled = nullptr;

	if (!uFnIsDLCInstalled)
	{
		uFnIsDLCInstalled = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Screen.IsDLCInstalled");
	}

	UOLUIFrontEnd_Screen_execIsDLCInstalled_Params IsDLCInstalled_Params;
	memset(&IsDLCInstalled_Params, 0, sizeof(IsDLCInstalled_Params));

	this->ProcessEvent(uFnIsDLCInstalled, &IsDLCInstalled_Params, nullptr);

	return IsDLCInstalled_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Screen.IsPlaytest
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIFrontEnd_Screen::IsPlaytest()
{
	static UFunction* uFnIsPlaytest = nullptr;

	if (!uFnIsPlaytest)
	{
		uFnIsPlaytest = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Screen.IsPlaytest");
	}

	UOLUIFrontEnd_Screen_execIsPlaytest_Params IsPlaytest_Params;
	memset(&IsPlaytest_Params, 0, sizeof(IsPlaytest_Params));

	this->ProcessEvent(uFnIsPlaytest, &IsPlaytest_Params, nullptr);

	return IsPlaytest_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Screen.IsDemo
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIFrontEnd_Screen::IsDemo()
{
	static UFunction* uFnIsDemo = nullptr;

	if (!uFnIsDemo)
	{
		uFnIsDemo = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Screen.IsDemo");
	}

	UOLUIFrontEnd_Screen_execIsDemo_Params IsDemo_Params;
	memset(&IsDemo_Params, 0, sizeof(IsDemo_Params));

	this->ProcessEvent(uFnIsDemo, &IsDemo_Params, nullptr);

	return IsDemo_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Screen.IsTopMostView
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIFrontEnd_Screen::IsTopMostView()
{
	static UFunction* uFnIsTopMostView = nullptr;

	if (!uFnIsTopMostView)
	{
		uFnIsTopMostView = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Screen.IsTopMostView");
	}

	UOLUIFrontEnd_Screen_execIsTopMostView_Params IsTopMostView_Params;
	memset(&IsTopMostView_Params, 0, sizeof(IsTopMostView_Params));

	this->ProcessEvent(uFnIsTopMostView, &IsTopMostView_Params, nullptr);

	return IsTopMostView_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_View.InputTypeChanged
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_View::eventInputTypeChanged()
{
	static UFunction* uFnInputTypeChanged = nullptr;

	if (!uFnInputTypeChanged)
	{
		uFnInputTypeChanged = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_View.InputTypeChanged");
	}

	UOLUIFrontEnd_View_eventInputTypeChanged_Params InputTypeChanged_Params;
	memset(&InputTypeChanged_Params, 0, sizeof(InputTypeChanged_Params));

	this->ProcessEvent(uFnInputTypeChanged, &InputTypeChanged_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_View.ASHideDialogs
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_View::ASHideDialogs()
{
	static UFunction* uFnASHideDialogs = nullptr;

	if (!uFnASHideDialogs)
	{
		uFnASHideDialogs = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_View.ASHideDialogs");
	}

	UOLUIFrontEnd_View_execASHideDialogs_Params ASHideDialogs_Params;
	memset(&ASHideDialogs_Params, 0, sizeof(ASHideDialogs_Params));

	this->ProcessEvent(uFnASHideDialogs, &ASHideDialogs_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_View.OnKeyBindingCancelled
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_View::OnKeyBindingCancelled()
{
	static UFunction* uFnOnKeyBindingCancelled = nullptr;

	if (!uFnOnKeyBindingCancelled)
	{
		uFnOnKeyBindingCancelled = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_View.OnKeyBindingCancelled");
	}

	UOLUIFrontEnd_View_execOnKeyBindingCancelled_Params OnKeyBindingCancelled_Params;
	memset(&OnKeyBindingCancelled_Params, 0, sizeof(OnKeyBindingCancelled_Params));

	this->ProcessEvent(uFnOnKeyBindingCancelled, &OnKeyBindingCancelled_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_View.OnKeyBindingCaptured
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FName                   KeyName                        (CPF_Parm)

void UOLUIFrontEnd_View::OnKeyBindingCaptured(struct FName KeyName)
{
	static UFunction* uFnOnKeyBindingCaptured = nullptr;

	if (!uFnOnKeyBindingCaptured)
	{
		uFnOnKeyBindingCaptured = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_View.OnKeyBindingCaptured");
	}

	UOLUIFrontEnd_View_execOnKeyBindingCaptured_Params OnKeyBindingCaptured_Params;
	memset(&OnKeyBindingCaptured_Params, 0, sizeof(OnKeyBindingCaptured_Params));
	memcpy_s(&OnKeyBindingCaptured_Params.KeyName, sizeof(OnKeyBindingCaptured_Params.KeyName), &KeyName, sizeof(KeyName));

	this->ProcessEvent(uFnOnKeyBindingCaptured, &OnKeyBindingCaptured_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_View.FilterButtonInput
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// struct FName                   ButtonName                     (CPF_Parm)
// EInputEvent                    InputEvent                     (CPF_Parm)

bool UOLUIFrontEnd_View::eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent)
{
	static UFunction* uFnFilterButtonInput = nullptr;

	if (!uFnFilterButtonInput)
	{
		uFnFilterButtonInput = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_View.FilterButtonInput");
	}

	UOLUIFrontEnd_View_eventFilterButtonInput_Params FilterButtonInput_Params;
	memset(&FilterButtonInput_Params, 0, sizeof(FilterButtonInput_Params));
	memcpy_s(&FilterButtonInput_Params.ControllerId, sizeof(FilterButtonInput_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&FilterButtonInput_Params.ButtonName, sizeof(FilterButtonInput_Params.ButtonName), &ButtonName, sizeof(ButtonName));
	memcpy_s(&FilterButtonInput_Params.InputEvent, sizeof(FilterButtonInput_Params.InputEvent), &InputEvent, sizeof(InputEvent));

	this->ProcessEvent(uFnFilterButtonInput, &FilterButtonInput_Params, nullptr);

	return FilterButtonInput_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_View.WidgetInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   WidgetName                     (CPF_Parm)
// struct FName                   WidgetPath                     (CPF_Parm)
// class UGFxObject*              Widget                         (CPF_Parm)

bool UOLUIFrontEnd_View::eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget)
{
	static UFunction* uFnWidgetInitialized = nullptr;

	if (!uFnWidgetInitialized)
	{
		uFnWidgetInitialized = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_View.WidgetInitialized");
	}

	UOLUIFrontEnd_View_eventWidgetInitialized_Params WidgetInitialized_Params;
	memset(&WidgetInitialized_Params, 0, sizeof(WidgetInitialized_Params));
	memcpy_s(&WidgetInitialized_Params.WidgetName, sizeof(WidgetInitialized_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&WidgetInitialized_Params.WidgetPath, sizeof(WidgetInitialized_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));
	memcpy_s(&WidgetInitialized_Params.Widget, sizeof(WidgetInitialized_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnWidgetInitialized, &WidgetInitialized_Params, nullptr);

	return WidgetInitialized_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_View.back
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIFrontEnd_View::back()
{
	static UFunction* uFnback = nullptr;

	if (!uFnback)
	{
		uFnback = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_View.back");
	}

	UOLUIFrontEnd_View_execback_Params back_Params;
	memset(&back_Params, 0, sizeof(back_Params));

	this->ProcessEvent(uFnback, &back_Params, nullptr);

	return back_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_View.NotifyAltEnter
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_View::NotifyAltEnter()
{
	static UFunction* uFnNotifyAltEnter = nullptr;

	if (!uFnNotifyAltEnter)
	{
		uFnNotifyAltEnter = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_View.NotifyAltEnter");
	}

	UOLUIFrontEnd_View_execNotifyAltEnter_Params NotifyAltEnter_Params;
	memset(&NotifyAltEnter_Params, 0, sizeof(NotifyAltEnter_Params));

	this->ProcessEvent(uFnNotifyAltEnter, &NotifyAltEnter_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_View.OnViewDeactivated
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_View::OnViewDeactivated()
{
	static UFunction* uFnOnViewDeactivated = nullptr;

	if (!uFnOnViewDeactivated)
	{
		uFnOnViewDeactivated = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_View.OnViewDeactivated");
	}

	UOLUIFrontEnd_View_execOnViewDeactivated_Params OnViewDeactivated_Params;
	memset(&OnViewDeactivated_Params, 0, sizeof(OnViewDeactivated_Params));

	this->ProcessEvent(uFnOnViewDeactivated, &OnViewDeactivated_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_View.OnViewActivated
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_View::OnViewActivated()
{
	static UFunction* uFnOnViewActivated = nullptr;

	if (!uFnOnViewActivated)
	{
		uFnOnViewActivated = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_View.OnViewActivated");
	}

	UOLUIFrontEnd_View_execOnViewActivated_Params OnViewActivated_Params;
	memset(&OnViewActivated_Params, 0, sizeof(OnViewActivated_Params));

	this->ProcessEvent(uFnOnViewActivated, &OnViewActivated_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_View.OnTopMostView
// [0x00024000] (FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bPlayOpenAnimation             (CPF_OptionalParm | CPF_Parm)

void UOLUIFrontEnd_View::OnTopMostView(bool bPlayOpenAnimation)
{
	static UFunction* uFnOnTopMostView = nullptr;

	if (!uFnOnTopMostView)
	{
		uFnOnTopMostView = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_View.OnTopMostView");
	}

	UOLUIFrontEnd_View_execOnTopMostView_Params OnTopMostView_Params;
	memset(&OnTopMostView_Params, 0, sizeof(OnTopMostView_Params));
	OnTopMostView_Params.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent(uFnOnTopMostView, &OnTopMostView_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_View.OnViewLoaded
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_View::OnViewLoaded()
{
	static UFunction* uFnOnViewLoaded = nullptr;

	if (!uFnOnViewLoaded)
	{
		uFnOnViewLoaded = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_View.OnViewLoaded");
	}

	UOLUIFrontEnd_View_execOnViewLoaded_Params OnViewLoaded_Params;
	memset(&OnViewLoaded_Params, 0, sizeof(OnViewLoaded_Params));

	this->ProcessEvent(uFnOnViewLoaded, &OnViewLoaded_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Credits.WidgetInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   WidgetName                     (CPF_Parm)
// struct FName                   WidgetPath                     (CPF_Parm)
// class UGFxObject*              Widget                         (CPF_Parm)

bool UOLUIFrontEnd_Credits::eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget)
{
	static UFunction* uFnWidgetInitialized = nullptr;

	if (!uFnWidgetInitialized)
	{
		uFnWidgetInitialized = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Credits.WidgetInitialized");
	}

	UOLUIFrontEnd_Credits_eventWidgetInitialized_Params WidgetInitialized_Params;
	memset(&WidgetInitialized_Params, 0, sizeof(WidgetInitialized_Params));
	memcpy_s(&WidgetInitialized_Params.WidgetName, sizeof(WidgetInitialized_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&WidgetInitialized_Params.WidgetPath, sizeof(WidgetInitialized_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));
	memcpy_s(&WidgetInitialized_Params.Widget, sizeof(WidgetInitialized_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnWidgetInitialized, &WidgetInitialized_Params, nullptr);

	return WidgetInitialized_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Credits.SetCreditsText
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Text                           (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_Credits::SetCreditsText(class FString Text)
{
	static UFunction* uFnSetCreditsText = nullptr;

	if (!uFnSetCreditsText)
	{
		uFnSetCreditsText = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Credits.SetCreditsText");
	}

	UOLUIFrontEnd_Credits_execSetCreditsText_Params SetCreditsText_Params;
	memset(&SetCreditsText_Params, 0, sizeof(SetCreditsText_Params));
	memcpy_s(&SetCreditsText_Params.Text, sizeof(SetCreditsText_Params.Text), &Text, sizeof(Text));

	this->ProcessEvent(uFnSetCreditsText, &SetCreditsText_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Credits.FilterButtonInput
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// struct FName                   ButtonName                     (CPF_Parm)
// EInputEvent                    InputEvent                     (CPF_Parm)

bool UOLUIFrontEnd_Credits::eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent)
{
	static UFunction* uFnFilterButtonInput = nullptr;

	if (!uFnFilterButtonInput)
	{
		uFnFilterButtonInput = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Credits.FilterButtonInput");
	}

	UOLUIFrontEnd_Credits_eventFilterButtonInput_Params FilterButtonInput_Params;
	memset(&FilterButtonInput_Params, 0, sizeof(FilterButtonInput_Params));
	memcpy_s(&FilterButtonInput_Params.ControllerId, sizeof(FilterButtonInput_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&FilterButtonInput_Params.ButtonName, sizeof(FilterButtonInput_Params.ButtonName), &ButtonName, sizeof(ButtonName));
	memcpy_s(&FilterButtonInput_Params.InputEvent, sizeof(FilterButtonInput_Params.InputEvent), &InputEvent, sizeof(InputEvent));

	this->ProcessEvent(uFnFilterButtonInput, &FilterButtonInput_Params, nullptr);

	return FilterButtonInput_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Credits.Press_Back
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_Credits::Press_Back(struct FEventData ev)
{
	static UFunction* uFnPress_Back = nullptr;

	if (!uFnPress_Back)
	{
		uFnPress_Back = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Credits.Press_Back");
	}

	UOLUIFrontEnd_Credits_execPress_Back_Params Press_Back_Params;
	memset(&Press_Back_Params, 0, sizeof(Press_Back_Params));
	memcpy_s(&Press_Back_Params.ev, sizeof(Press_Back_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Back, &Press_Back_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Credits.OnViewDeactivated
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_Credits::OnViewDeactivated()
{
	static UFunction* uFnOnViewDeactivated = nullptr;

	if (!uFnOnViewDeactivated)
	{
		uFnOnViewDeactivated = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Credits.OnViewDeactivated");
	}

	UOLUIFrontEnd_Credits_execOnViewDeactivated_Params OnViewDeactivated_Params;
	memset(&OnViewDeactivated_Params, 0, sizeof(OnViewDeactivated_Params));

	this->ProcessEvent(uFnOnViewDeactivated, &OnViewDeactivated_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Credits.StartCredits
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bQuickstart                    (CPF_Parm)

void UOLUIFrontEnd_Credits::StartCredits(bool bQuickstart)
{
	static UFunction* uFnStartCredits = nullptr;

	if (!uFnStartCredits)
	{
		uFnStartCredits = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Credits.StartCredits");
	}

	UOLUIFrontEnd_Credits_execStartCredits_Params StartCredits_Params;
	memset(&StartCredits_Params, 0, sizeof(StartCredits_Params));
	StartCredits_Params.bQuickstart = bQuickstart;

	this->ProcessEvent(uFnStartCredits, &StartCredits_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Credits.OnTopMostView
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bPlayOpenAnimation             (CPF_OptionalParm | CPF_Parm)

void UOLUIFrontEnd_Credits::OnTopMostView(bool bPlayOpenAnimation)
{
	static UFunction* uFnOnTopMostView = nullptr;

	if (!uFnOnTopMostView)
	{
		uFnOnTopMostView = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Credits.OnTopMostView");
	}

	UOLUIFrontEnd_Credits_execOnTopMostView_Params OnTopMostView_Params;
	memset(&OnTopMostView_Params, 0, sizeof(OnTopMostView_Params));
	OnTopMostView_Params.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent(uFnOnTopMostView, &OnTopMostView_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Credits.OnCreditsFadeOut
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_Credits::OnCreditsFadeOut()
{
	static UFunction* uFnOnCreditsFadeOut = nullptr;

	if (!uFnOnCreditsFadeOut)
	{
		uFnOnCreditsFadeOut = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Credits.OnCreditsFadeOut");
	}

	UOLUIFrontEnd_Credits_execOnCreditsFadeOut_Params OnCreditsFadeOut_Params;
	memset(&OnCreditsFadeOut_Params, 0, sizeof(OnCreditsFadeOut_Params));

	this->ProcessEvent(uFnOnCreditsFadeOut, &OnCreditsFadeOut_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Credits.OnCreditsFinished
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_Credits::OnCreditsFinished()
{
	static UFunction* uFnOnCreditsFinished = nullptr;

	if (!uFnOnCreditsFinished)
	{
		uFnOnCreditsFinished = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Credits.OnCreditsFinished");
	}

	UOLUIFrontEnd_Credits_execOnCreditsFinished_Params OnCreditsFinished_Params;
	memset(&OnCreditsFinished_Params, 0, sizeof(OnCreditsFinished_Params));

	this->ProcessEvent(uFnOnCreditsFinished, &OnCreditsFinished_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Credits.back
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIFrontEnd_Credits::back()
{
	static UFunction* uFnback = nullptr;

	if (!uFnback)
	{
		uFnback = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Credits.back");
	}

	UOLUIFrontEnd_Credits_execback_Params back_Params;
	memset(&back_Params, 0, sizeof(back_Params));

	this->ProcessEvent(uFnback, &back_Params, nullptr);

	return back_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_CleanText.FilterButtonInput
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// struct FName                   ButtonName                     (CPF_Parm)
// EInputEvent                    InputEvent                     (CPF_Parm)

bool UOLUIFrontEnd_CleanText::eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent)
{
	static UFunction* uFnFilterButtonInput = nullptr;

	if (!uFnFilterButtonInput)
	{
		uFnFilterButtonInput = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_CleanText.FilterButtonInput");
	}

	UOLUIFrontEnd_CleanText_eventFilterButtonInput_Params FilterButtonInput_Params;
	memset(&FilterButtonInput_Params, 0, sizeof(FilterButtonInput_Params));
	memcpy_s(&FilterButtonInput_Params.ControllerId, sizeof(FilterButtonInput_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&FilterButtonInput_Params.ButtonName, sizeof(FilterButtonInput_Params.ButtonName), &ButtonName, sizeof(ButtonName));
	memcpy_s(&FilterButtonInput_Params.InputEvent, sizeof(FilterButtonInput_Params.InputEvent), &InputEvent, sizeof(InputEvent));

	this->ProcessEvent(uFnFilterButtonInput, &FilterButtonInput_Params, nullptr);

	return FilterButtonInput_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_CleanText.Tick
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaSeconds                   (CPF_Parm)

void UOLUIFrontEnd_CleanText::Tick(float DeltaSeconds)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_CleanText.Tick");
	}

	UOLUIFrontEnd_CleanText_execTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaSeconds, sizeof(Tick_Params.DeltaSeconds), &DeltaSeconds, sizeof(DeltaSeconds));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_CleanText.PreviousPage
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_CleanText::PreviousPage()
{
	static UFunction* uFnPreviousPage = nullptr;

	if (!uFnPreviousPage)
	{
		uFnPreviousPage = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_CleanText.PreviousPage");
	}

	UOLUIFrontEnd_CleanText_execPreviousPage_Params PreviousPage_Params;
	memset(&PreviousPage_Params, 0, sizeof(PreviousPage_Params));

	this->ProcessEvent(uFnPreviousPage, &PreviousPage_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_CleanText.NextPage
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_CleanText::NextPage()
{
	static UFunction* uFnNextPage = nullptr;

	if (!uFnNextPage)
	{
		uFnNextPage = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_CleanText.NextPage");
	}

	UOLUIFrontEnd_CleanText_execNextPage_Params NextPage_Params;
	memset(&NextPage_Params, 0, sizeof(NextPage_Params));

	this->ProcessEvent(uFnNextPage, &NextPage_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_CleanText.InitializeFocusControl
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bIsController                  (CPF_Parm)

void UOLUIFrontEnd_CleanText::InitializeFocusControl(bool bIsController)
{
	static UFunction* uFnInitializeFocusControl = nullptr;

	if (!uFnInitializeFocusControl)
	{
		uFnInitializeFocusControl = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_CleanText.InitializeFocusControl");
	}

	UOLUIFrontEnd_CleanText_execInitializeFocusControl_Params InitializeFocusControl_Params;
	memset(&InitializeFocusControl_Params, 0, sizeof(InitializeFocusControl_Params));
	InitializeFocusControl_Params.bIsController = bIsController;

	this->ProcessEvent(uFnInitializeFocusControl, &InitializeFocusControl_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_CleanText.InputTypeChanged
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_CleanText::eventInputTypeChanged()
{
	static UFunction* uFnInputTypeChanged = nullptr;

	if (!uFnInputTypeChanged)
	{
		uFnInputTypeChanged = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_CleanText.InputTypeChanged");
	}

	UOLUIFrontEnd_CleanText_eventInputTypeChanged_Params InputTypeChanged_Params;
	memset(&InputTypeChanged_Params, 0, sizeof(InputTypeChanged_Params));

	this->ProcessEvent(uFnInputTypeChanged, &InputTypeChanged_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_CleanText.InitializeText
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  In_Title                       (CPF_Parm | CPF_NeedCtorLink)
// class FString                  In_Text                        (CPF_Parm | CPF_NeedCtorLink)
// bool                           In_bIsGospel                   (CPF_Parm)

void UOLUIFrontEnd_CleanText::InitializeText(class FString In_Title, class FString In_Text, bool In_bIsGospel)
{
	static UFunction* uFnInitializeText = nullptr;

	if (!uFnInitializeText)
	{
		uFnInitializeText = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_CleanText.InitializeText");
	}

	UOLUIFrontEnd_CleanText_execInitializeText_Params InitializeText_Params;
	memset(&InitializeText_Params, 0, sizeof(InitializeText_Params));
	memcpy_s(&InitializeText_Params.In_Title, sizeof(InitializeText_Params.In_Title), &In_Title, sizeof(In_Title));
	memcpy_s(&InitializeText_Params.In_Text, sizeof(InitializeText_Params.In_Text), &In_Text, sizeof(In_Text));
	InitializeText_Params.In_bIsGospel = In_bIsGospel;

	this->ProcessEvent(uFnInitializeText, &InitializeText_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_CleanText.back
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIFrontEnd_CleanText::back()
{
	static UFunction* uFnback = nullptr;

	if (!uFnback)
	{
		uFnback = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_CleanText.back");
	}

	UOLUIFrontEnd_CleanText_execback_Params back_Params;
	memset(&back_Params, 0, sizeof(back_Params));

	this->ProcessEvent(uFnback, &back_Params, nullptr);

	return back_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_CleanText.Press_Back
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_CleanText::Press_Back(struct FEventData ev)
{
	static UFunction* uFnPress_Back = nullptr;

	if (!uFnPress_Back)
	{
		uFnPress_Back = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_CleanText.Press_Back");
	}

	UOLUIFrontEnd_CleanText_execPress_Back_Params Press_Back_Params;
	memset(&Press_Back_Params, 0, sizeof(Press_Back_Params));
	memcpy_s(&Press_Back_Params.ev, sizeof(Press_Back_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Back, &Press_Back_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_CleanText.WidgetInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   WidgetName                     (CPF_Parm)
// struct FName                   WidgetPath                     (CPF_Parm)
// class UGFxObject*              Widget                         (CPF_Parm)

bool UOLUIFrontEnd_CleanText::eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget)
{
	static UFunction* uFnWidgetInitialized = nullptr;

	if (!uFnWidgetInitialized)
	{
		uFnWidgetInitialized = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_CleanText.WidgetInitialized");
	}

	UOLUIFrontEnd_CleanText_eventWidgetInitialized_Params WidgetInitialized_Params;
	memset(&WidgetInitialized_Params, 0, sizeof(WidgetInitialized_Params));
	memcpy_s(&WidgetInitialized_Params.WidgetName, sizeof(WidgetInitialized_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&WidgetInitialized_Params.WidgetPath, sizeof(WidgetInitialized_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));
	memcpy_s(&WidgetInitialized_Params.Widget, sizeof(WidgetInitialized_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnWidgetInitialized, &WidgetInitialized_Params, nullptr);

	return WidgetInitialized_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_CleanText.OnViewLoaded
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_CleanText::OnViewLoaded()
{
	static UFunction* uFnOnViewLoaded = nullptr;

	if (!uFnOnViewLoaded)
	{
		uFnOnViewLoaded = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_CleanText.OnViewLoaded");
	}

	UOLUIFrontEnd_CleanText_execOnViewLoaded_Params OnViewLoaded_Params;
	memset(&OnViewLoaded_Params, 0, sizeof(OnViewLoaded_Params));

	this->ProcessEvent(uFnOnViewLoaded, &OnViewLoaded_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_CleanText.InitializeView
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_CleanText::InitializeView()
{
	static UFunction* uFnInitializeView = nullptr;

	if (!uFnInitializeView)
	{
		uFnInitializeView = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_CleanText.InitializeView");
	}

	UOLUIFrontEnd_CleanText_execInitializeView_Params InitializeView_Params;
	memset(&InitializeView_Params, 0, sizeof(InitializeView_Params));

	this->ProcessEvent(uFnInitializeView, &InitializeView_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_CleanText.OnTopMostView
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bPlayOpenAnimation             (CPF_OptionalParm | CPF_Parm)

void UOLUIFrontEnd_CleanText::OnTopMostView(bool bPlayOpenAnimation)
{
	static UFunction* uFnOnTopMostView = nullptr;

	if (!uFnOnTopMostView)
	{
		uFnOnTopMostView = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_CleanText.OnTopMostView");
	}

	UOLUIFrontEnd_CleanText_execOnTopMostView_Params OnTopMostView_Params;
	memset(&OnTopMostView_Params, 0, sizeof(OnTopMostView_Params));
	OnTopMostView_Params.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent(uFnOnTopMostView, &OnTopMostView_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Console.WidgetInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   WidgetName                     (CPF_Parm)
// struct FName                   WidgetPath                     (CPF_Parm)
// class UGFxObject*              Widget                         (CPF_Parm)

bool UOLUIFrontEnd_Console::eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget)
{
	static UFunction* uFnWidgetInitialized = nullptr;

	if (!uFnWidgetInitialized)
	{
		uFnWidgetInitialized = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Console.WidgetInitialized");
	}

	UOLUIFrontEnd_Console_eventWidgetInitialized_Params WidgetInitialized_Params;
	memset(&WidgetInitialized_Params, 0, sizeof(WidgetInitialized_Params));
	memcpy_s(&WidgetInitialized_Params.WidgetName, sizeof(WidgetInitialized_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&WidgetInitialized_Params.WidgetPath, sizeof(WidgetInitialized_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));
	memcpy_s(&WidgetInitialized_Params.Widget, sizeof(WidgetInitialized_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnWidgetInitialized, &WidgetInitialized_Params, nullptr);

	return WidgetInitialized_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Console.CleanViews
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_Console::CleanViews()
{
	static UFunction* uFnCleanViews = nullptr;

	if (!uFnCleanViews)
	{
		uFnCleanViews = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Console.CleanViews");
	}

	UOLUIFrontEnd_Console_execCleanViews_Params CleanViews_Params;
	memset(&CleanViews_Params, 0, sizeof(CleanViews_Params));

	this->ProcessEvent(uFnCleanViews, &CleanViews_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GammaScreen_Console.ASDisableBackButton
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// bool                           bDisable                       (CPF_Parm)

void UOLUIFrontEnd_GammaScreen_Console::ASDisableBackButton(bool bDisable)
{
	static UFunction* uFnASDisableBackButton = nullptr;

	if (!uFnASDisableBackButton)
	{
		uFnASDisableBackButton = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen_Console.ASDisableBackButton");
	}

	UOLUIFrontEnd_GammaScreen_Console_execASDisableBackButton_Params ASDisableBackButton_Params;
	memset(&ASDisableBackButton_Params, 0, sizeof(ASDisableBackButton_Params));
	ASDisableBackButton_Params.bDisable = bDisable;

	this->ProcessEvent(uFnASDisableBackButton, &ASDisableBackButton_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GammaScreen_Console.GetCurrentGammaSetting
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float UOLUIFrontEnd_GammaScreen_Console::GetCurrentGammaSetting()
{
	static UFunction* uFnGetCurrentGammaSetting = nullptr;

	if (!uFnGetCurrentGammaSetting)
	{
		uFnGetCurrentGammaSetting = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen_Console.GetCurrentGammaSetting");
	}

	UOLUIFrontEnd_GammaScreen_Console_execGetCurrentGammaSetting_Params GetCurrentGammaSetting_Params;
	memset(&GetCurrentGammaSetting_Params, 0, sizeof(GetCurrentGammaSetting_Params));

	this->ProcessEvent(uFnGetCurrentGammaSetting, &GetCurrentGammaSetting_Params, nullptr);

	return GetCurrentGammaSetting_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_GammaScreen_Console.IsGammaInitialized
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIFrontEnd_GammaScreen_Console::IsGammaInitialized()
{
	static UFunction* uFnIsGammaInitialized = nullptr;

	if (!uFnIsGammaInitialized)
	{
		uFnIsGammaInitialized = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen_Console.IsGammaInitialized");
	}

	UOLUIFrontEnd_GammaScreen_Console_execIsGammaInitialized_Params IsGammaInitialized_Params;
	memset(&IsGammaInitialized_Params, 0, sizeof(IsGammaInitialized_Params));

	this->ProcessEvent(uFnIsGammaInitialized, &IsGammaInitialized_Params, nullptr);

	return IsGammaInitialized_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_GammaScreen_Console.WidgetInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   WidgetName                     (CPF_Parm)
// struct FName                   WidgetPath                     (CPF_Parm)
// class UGFxObject*              Widget                         (CPF_Parm)

bool UOLUIFrontEnd_GammaScreen_Console::eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget)
{
	static UFunction* uFnWidgetInitialized = nullptr;

	if (!uFnWidgetInitialized)
	{
		uFnWidgetInitialized = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen_Console.WidgetInitialized");
	}

	UOLUIFrontEnd_GammaScreen_Console_eventWidgetInitialized_Params WidgetInitialized_Params;
	memset(&WidgetInitialized_Params, 0, sizeof(WidgetInitialized_Params));
	memcpy_s(&WidgetInitialized_Params.WidgetName, sizeof(WidgetInitialized_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&WidgetInitialized_Params.WidgetPath, sizeof(WidgetInitialized_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));
	memcpy_s(&WidgetInitialized_Params.Widget, sizeof(WidgetInitialized_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnWidgetInitialized, &WidgetInitialized_Params, nullptr);

	return WidgetInitialized_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_GammaScreen_Console.Tick
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaSeconds                   (CPF_Parm)

void UOLUIFrontEnd_GammaScreen_Console::Tick(float DeltaSeconds)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen_Console.Tick");
	}

	UOLUIFrontEnd_GammaScreen_Console_execTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaSeconds, sizeof(Tick_Params.DeltaSeconds), &DeltaSeconds, sizeof(DeltaSeconds));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GammaScreen_Console.FilterButtonInput
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// struct FName                   ButtonName                     (CPF_Parm)
// EInputEvent                    InputEvent                     (CPF_Parm)

bool UOLUIFrontEnd_GammaScreen_Console::eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent)
{
	static UFunction* uFnFilterButtonInput = nullptr;

	if (!uFnFilterButtonInput)
	{
		uFnFilterButtonInput = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen_Console.FilterButtonInput");
	}

	UOLUIFrontEnd_GammaScreen_Console_eventFilterButtonInput_Params FilterButtonInput_Params;
	memset(&FilterButtonInput_Params, 0, sizeof(FilterButtonInput_Params));
	memcpy_s(&FilterButtonInput_Params.ControllerId, sizeof(FilterButtonInput_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&FilterButtonInput_Params.ButtonName, sizeof(FilterButtonInput_Params.ButtonName), &ButtonName, sizeof(ButtonName));
	memcpy_s(&FilterButtonInput_Params.InputEvent, sizeof(FilterButtonInput_Params.InputEvent), &InputEvent, sizeof(InputEvent));

	this->ProcessEvent(uFnFilterButtonInput, &FilterButtonInput_Params, nullptr);

	return FilterButtonInput_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_GammaScreen_Console.Change_Slider
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_GammaScreen_Console::Change_Slider(struct FEventData ev)
{
	static UFunction* uFnChange_Slider = nullptr;

	if (!uFnChange_Slider)
	{
		uFnChange_Slider = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen_Console.Change_Slider");
	}

	UOLUIFrontEnd_GammaScreen_Console_execChange_Slider_Params Change_Slider_Params;
	memset(&Change_Slider_Params, 0, sizeof(Change_Slider_Params));
	memcpy_s(&Change_Slider_Params.ev, sizeof(Change_Slider_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnChange_Slider, &Change_Slider_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GammaScreen_Console.Pop
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_GammaScreen_Console::Pop()
{
	static UFunction* uFnPop = nullptr;

	if (!uFnPop)
	{
		uFnPop = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen_Console.Pop");
	}

	UOLUIFrontEnd_GammaScreen_Console_execPop_Params Pop_Params;
	memset(&Pop_Params, 0, sizeof(Pop_Params));

	this->ProcessEvent(uFnPop, &Pop_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GammaScreen_Console.OnViewDeactivated
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_GammaScreen_Console::OnViewDeactivated()
{
	static UFunction* uFnOnViewDeactivated = nullptr;

	if (!uFnOnViewDeactivated)
	{
		uFnOnViewDeactivated = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen_Console.OnViewDeactivated");
	}

	UOLUIFrontEnd_GammaScreen_Console_execOnViewDeactivated_Params OnViewDeactivated_Params;
	memset(&OnViewDeactivated_Params, 0, sizeof(OnViewDeactivated_Params));

	this->ProcessEvent(uFnOnViewDeactivated, &OnViewDeactivated_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GammaScreen_Console.back
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIFrontEnd_GammaScreen_Console::back()
{
	static UFunction* uFnback = nullptr;

	if (!uFnback)
	{
		uFnback = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen_Console.back");
	}

	UOLUIFrontEnd_GammaScreen_Console_execback_Params back_Params;
	memset(&back_Params, 0, sizeof(back_Params));

	this->ProcessEvent(uFnback, &back_Params, nullptr);

	return back_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_GammaScreen_Console.Press_Back
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_GammaScreen_Console::Press_Back(struct FEventData ev)
{
	static UFunction* uFnPress_Back = nullptr;

	if (!uFnPress_Back)
	{
		uFnPress_Back = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen_Console.Press_Back");
	}

	UOLUIFrontEnd_GammaScreen_Console_execPress_Back_Params Press_Back_Params;
	memset(&Press_Back_Params, 0, sizeof(Press_Back_Params));
	memcpy_s(&Press_Back_Params.ev, sizeof(Press_Back_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Back, &Press_Back_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GammaScreen_Console.OnAccept
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_GammaScreen_Console::OnAccept()
{
	static UFunction* uFnOnAccept = nullptr;

	if (!uFnOnAccept)
	{
		uFnOnAccept = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen_Console.OnAccept");
	}

	UOLUIFrontEnd_GammaScreen_Console_execOnAccept_Params OnAccept_Params;
	memset(&OnAccept_Params, 0, sizeof(OnAccept_Params));

	this->ProcessEvent(uFnOnAccept, &OnAccept_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GammaScreen_Console.Press_Accept
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_GammaScreen_Console::Press_Accept(struct FEventData ev)
{
	static UFunction* uFnPress_Accept = nullptr;

	if (!uFnPress_Accept)
	{
		uFnPress_Accept = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen_Console.Press_Accept");
	}

	UOLUIFrontEnd_GammaScreen_Console_execPress_Accept_Params Press_Accept_Params;
	memset(&Press_Accept_Params, 0, sizeof(Press_Accept_Params));
	memcpy_s(&Press_Accept_Params.ev, sizeof(Press_Accept_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Accept, &Press_Accept_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GammaScreen_Console.OnTopMostView
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bPlayOpenAnimation             (CPF_OptionalParm | CPF_Parm)

void UOLUIFrontEnd_GammaScreen_Console::OnTopMostView(bool bPlayOpenAnimation)
{
	static UFunction* uFnOnTopMostView = nullptr;

	if (!uFnOnTopMostView)
	{
		uFnOnTopMostView = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen_Console.OnTopMostView");
	}

	UOLUIFrontEnd_GammaScreen_Console_execOnTopMostView_Params OnTopMostView_Params;
	memset(&OnTopMostView_Params, 0, sizeof(OnTopMostView_Params));
	OnTopMostView_Params.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent(uFnOnTopMostView, &OnTopMostView_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GammaScreen_Console.OnViewLoaded
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_GammaScreen_Console::OnViewLoaded()
{
	static UFunction* uFnOnViewLoaded = nullptr;

	if (!uFnOnViewLoaded)
	{
		uFnOnViewLoaded = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen_Console.OnViewLoaded");
	}

	UOLUIFrontEnd_GammaScreen_Console_execOnViewLoaded_Params OnViewLoaded_Params;
	memset(&OnViewLoaded_Params, 0, sizeof(OnViewLoaded_Params));

	this->ProcessEvent(uFnOnViewLoaded, &OnViewLoaded_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.InputTypeChanged
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_RecordingMenu::eventInputTypeChanged()
{
	static UFunction* uFnInputTypeChanged = nullptr;

	if (!uFnInputTypeChanged)
	{
		uFnInputTypeChanged = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.InputTypeChanged");
	}

	UOLUIFrontEnd_RecordingMenu_eventInputTypeChanged_Params InputTypeChanged_Params;
	memset(&InputTypeChanged_Params, 0, sizeof(InputTypeChanged_Params));

	this->ProcessEvent(uFnInputTypeChanged, &InputTypeChanged_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.selectConsole
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Console                        (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_RecordingMenu::selectConsole(class FString Console)
{
	static UFunction* uFnselectConsole = nullptr;

	if (!uFnselectConsole)
	{
		uFnselectConsole = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.selectConsole");
	}

	UOLUIFrontEnd_RecordingMenu_execselectConsole_Params selectConsole_Params;
	memset(&selectConsole_Params, 0, sizeof(selectConsole_Params));
	memcpy_s(&selectConsole_Params.Console, sizeof(selectConsole_Params.Console), &Console, sizeof(Console));

	this->ProcessEvent(uFnselectConsole, &selectConsole_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.InitializeFocusControl
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bIsController                  (CPF_Parm)

void UOLUIFrontEnd_RecordingMenu::InitializeFocusControl(bool bIsController)
{
	static UFunction* uFnInitializeFocusControl = nullptr;

	if (!uFnInitializeFocusControl)
	{
		uFnInitializeFocusControl = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.InitializeFocusControl");
	}

	UOLUIFrontEnd_RecordingMenu_execInitializeFocusControl_Params InitializeFocusControl_Params;
	memset(&InitializeFocusControl_Params, 0, sizeof(InitializeFocusControl_Params));
	InitializeFocusControl_Params.bIsController = bIsController;

	this->ProcessEvent(uFnInitializeFocusControl, &InitializeFocusControl_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.FilterButtonInput
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// struct FName                   ButtonName                     (CPF_Parm)
// EInputEvent                    InputEvent                     (CPF_Parm)

bool UOLUIFrontEnd_RecordingMenu::eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent)
{
	static UFunction* uFnFilterButtonInput = nullptr;

	if (!uFnFilterButtonInput)
	{
		uFnFilterButtonInput = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.FilterButtonInput");
	}

	UOLUIFrontEnd_RecordingMenu_eventFilterButtonInput_Params FilterButtonInput_Params;
	memset(&FilterButtonInput_Params, 0, sizeof(FilterButtonInput_Params));
	memcpy_s(&FilterButtonInput_Params.ControllerId, sizeof(FilterButtonInput_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&FilterButtonInput_Params.ButtonName, sizeof(FilterButtonInput_Params.ButtonName), &ButtonName, sizeof(ButtonName));
	memcpy_s(&FilterButtonInput_Params.InputEvent, sizeof(FilterButtonInput_Params.InputEvent), &InputEvent, sizeof(InputEvent));

	this->ProcessEvent(uFnFilterButtonInput, &FilterButtonInput_Params, nullptr);

	return FilterButtonInput_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.WidgetInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   WidgetName                     (CPF_Parm)
// struct FName                   WidgetPath                     (CPF_Parm)
// class UGFxObject*              Widget                         (CPF_Parm)

bool UOLUIFrontEnd_RecordingMenu::eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget)
{
	static UFunction* uFnWidgetInitialized = nullptr;

	if (!uFnWidgetInitialized)
	{
		uFnWidgetInitialized = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.WidgetInitialized");
	}

	UOLUIFrontEnd_RecordingMenu_eventWidgetInitialized_Params WidgetInitialized_Params;
	memset(&WidgetInitialized_Params, 0, sizeof(WidgetInitialized_Params));
	memcpy_s(&WidgetInitialized_Params.WidgetName, sizeof(WidgetInitialized_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&WidgetInitialized_Params.WidgetPath, sizeof(WidgetInitialized_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));
	memcpy_s(&WidgetInitialized_Params.Widget, sizeof(WidgetInitialized_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnWidgetInitialized, &WidgetInitialized_Params, nullptr);

	return WidgetInitialized_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.LinkButtons
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_RecordingMenu::LinkButtons()
{
	static UFunction* uFnLinkButtons = nullptr;

	if (!uFnLinkButtons)
	{
		uFnLinkButtons = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.LinkButtons");
	}

	UOLUIFrontEnd_RecordingMenu_execLinkButtons_Params LinkButtons_Params;
	memset(&LinkButtons_Params, 0, sizeof(LinkButtons_Params));

	this->ProcessEvent(uFnLinkButtons, &LinkButtons_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.OnSetPlayButton
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UGFxClikWidget*          Widget                         (CPF_Parm)

void UOLUIFrontEnd_RecordingMenu::OnSetPlayButton(class UGFxClikWidget* Widget)
{
	static UFunction* uFnOnSetPlayButton = nullptr;

	if (!uFnOnSetPlayButton)
	{
		uFnOnSetPlayButton = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.OnSetPlayButton");
	}

	UOLUIFrontEnd_RecordingMenu_execOnSetPlayButton_Params OnSetPlayButton_Params;
	memset(&OnSetPlayButton_Params, 0, sizeof(OnSetPlayButton_Params));
	memcpy_s(&OnSetPlayButton_Params.Widget, sizeof(OnSetPlayButton_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnOnSetPlayButton, &OnSetPlayButton_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.OnSetPreviousButton
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UGFxClikWidget*          Widget                         (CPF_Parm)

void UOLUIFrontEnd_RecordingMenu::OnSetPreviousButton(class UGFxClikWidget* Widget)
{
	static UFunction* uFnOnSetPreviousButton = nullptr;

	if (!uFnOnSetPreviousButton)
	{
		uFnOnSetPreviousButton = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.OnSetPreviousButton");
	}

	UOLUIFrontEnd_RecordingMenu_execOnSetPreviousButton_Params OnSetPreviousButton_Params;
	memset(&OnSetPreviousButton_Params, 0, sizeof(OnSetPreviousButton_Params));
	memcpy_s(&OnSetPreviousButton_Params.Widget, sizeof(OnSetPreviousButton_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnOnSetPreviousButton, &OnSetPreviousButton_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.OnSetNextButton
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UGFxClikWidget*          Widget                         (CPF_Parm)

void UOLUIFrontEnd_RecordingMenu::OnSetNextButton(class UGFxClikWidget* Widget)
{
	static UFunction* uFnOnSetNextButton = nullptr;

	if (!uFnOnSetNextButton)
	{
		uFnOnSetNextButton = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.OnSetNextButton");
	}

	UOLUIFrontEnd_RecordingMenu_execOnSetNextButton_Params OnSetNextButton_Params;
	memset(&OnSetNextButton_Params, 0, sizeof(OnSetNextButton_Params));
	memcpy_s(&OnSetNextButton_Params.Widget, sizeof(OnSetNextButton_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnOnSetNextButton, &OnSetNextButton_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.OnSetBackButton
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UGFxClikWidget*          Widget                         (CPF_Parm)

void UOLUIFrontEnd_RecordingMenu::OnSetBackButton(class UGFxClikWidget* Widget)
{
	static UFunction* uFnOnSetBackButton = nullptr;

	if (!uFnOnSetBackButton)
	{
		uFnOnSetBackButton = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.OnSetBackButton");
	}

	UOLUIFrontEnd_RecordingMenu_execOnSetBackButton_Params OnSetBackButton_Params;
	memset(&OnSetBackButton_Params, 0, sizeof(OnSetBackButton_Params));
	memcpy_s(&OnSetBackButton_Params.Widget, sizeof(OnSetBackButton_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnOnSetBackButton, &OnSetBackButton_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.SetLargeImageSize
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          SizeX                          (CPF_Parm)
// float                          SizeY                          (CPF_Parm)
// float                          PosX                           (CPF_Parm)
// float                          PosY                           (CPF_Parm)

bool UOLUIFrontEnd_RecordingMenu::eventSetLargeImageSize(float SizeX, float SizeY, float PosX, float PosY)
{
	static UFunction* uFnSetLargeImageSize = nullptr;

	if (!uFnSetLargeImageSize)
	{
		uFnSetLargeImageSize = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.SetLargeImageSize");
	}

	UOLUIFrontEnd_RecordingMenu_eventSetLargeImageSize_Params SetLargeImageSize_Params;
	memset(&SetLargeImageSize_Params, 0, sizeof(SetLargeImageSize_Params));
	memcpy_s(&SetLargeImageSize_Params.SizeX, sizeof(SetLargeImageSize_Params.SizeX), &SizeX, sizeof(SizeX));
	memcpy_s(&SetLargeImageSize_Params.SizeY, sizeof(SetLargeImageSize_Params.SizeY), &SizeY, sizeof(SizeY));
	memcpy_s(&SetLargeImageSize_Params.PosX, sizeof(SetLargeImageSize_Params.PosX), &PosX, sizeof(PosX));
	memcpy_s(&SetLargeImageSize_Params.PosY, sizeof(SetLargeImageSize_Params.PosY), &PosY, sizeof(PosY));

	this->ProcessEvent(uFnSetLargeImageSize, &SetLargeImageSize_Params, nullptr);

	return SetLargeImageSize_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.PlayEvent
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_RecordingMenu::PlayEvent()
{
	static UFunction* uFnPlayEvent = nullptr;

	if (!uFnPlayEvent)
	{
		uFnPlayEvent = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.PlayEvent");
	}

	UOLUIFrontEnd_RecordingMenu_execPlayEvent_Params PlayEvent_Params;
	memset(&PlayEvent_Params, 0, sizeof(PlayEvent_Params));

	this->ProcessEvent(uFnPlayEvent, &PlayEvent_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.Press_Play
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_RecordingMenu::Press_Play(struct FEventData ev)
{
	static UFunction* uFnPress_Play = nullptr;

	if (!uFnPress_Play)
	{
		uFnPress_Play = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.Press_Play");
	}

	UOLUIFrontEnd_RecordingMenu_execPress_Play_Params Press_Play_Params;
	memset(&Press_Play_Params, 0, sizeof(Press_Play_Params));
	memcpy_s(&Press_Play_Params.ev, sizeof(Press_Play_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Play, &Press_Play_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.PauseVideo
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bForce                         (CPF_Parm)

void UOLUIFrontEnd_RecordingMenu::PauseVideo(bool bForce)
{
	static UFunction* uFnPauseVideo = nullptr;

	if (!uFnPauseVideo)
	{
		uFnPauseVideo = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.PauseVideo");
	}

	UOLUIFrontEnd_RecordingMenu_execPauseVideo_Params PauseVideo_Params;
	memset(&PauseVideo_Params, 0, sizeof(PauseVideo_Params));
	PauseVideo_Params.bForce = bForce;

	this->ProcessEvent(uFnPauseVideo, &PauseVideo_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.StopVideo
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bClearVO                       (CPF_Parm)

void UOLUIFrontEnd_RecordingMenu::StopVideo(bool bClearVO)
{
	static UFunction* uFnStopVideo = nullptr;

	if (!uFnStopVideo)
	{
		uFnStopVideo = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.StopVideo");
	}

	UOLUIFrontEnd_RecordingMenu_execStopVideo_Params StopVideo_Params;
	memset(&StopVideo_Params, 0, sizeof(StopVideo_Params));
	StopVideo_Params.bClearVO = bClearVO;

	this->ProcessEvent(uFnStopVideo, &StopVideo_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.PlayVideo
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_RecordingMenu::PlayVideo()
{
	static UFunction* uFnPlayVideo = nullptr;

	if (!uFnPlayVideo)
	{
		uFnPlayVideo = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.PlayVideo");
	}

	UOLUIFrontEnd_RecordingMenu_execPlayVideo_Params PlayVideo_Params;
	memset(&PlayVideo_Params, 0, sizeof(PlayVideo_Params));

	this->ProcessEvent(uFnPlayVideo, &PlayVideo_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.Press_Previous
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_RecordingMenu::Press_Previous(struct FEventData ev)
{
	static UFunction* uFnPress_Previous = nullptr;

	if (!uFnPress_Previous)
	{
		uFnPress_Previous = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.Press_Previous");
	}

	UOLUIFrontEnd_RecordingMenu_execPress_Previous_Params Press_Previous_Params;
	memset(&Press_Previous_Params, 0, sizeof(Press_Previous_Params));
	memcpy_s(&Press_Previous_Params.ev, sizeof(Press_Previous_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Previous, &Press_Previous_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.Previous
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_RecordingMenu::Previous()
{
	static UFunction* uFnPrevious = nullptr;

	if (!uFnPrevious)
	{
		uFnPrevious = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.Previous");
	}

	UOLUIFrontEnd_RecordingMenu_execPrevious_Params Previous_Params;
	memset(&Previous_Params, 0, sizeof(Previous_Params));

	this->ProcessEvent(uFnPrevious, &Previous_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.Press_Next
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_RecordingMenu::Press_Next(struct FEventData ev)
{
	static UFunction* uFnPress_Next = nullptr;

	if (!uFnPress_Next)
	{
		uFnPress_Next = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.Press_Next");
	}

	UOLUIFrontEnd_RecordingMenu_execPress_Next_Params Press_Next_Params;
	memset(&Press_Next_Params, 0, sizeof(Press_Next_Params));
	memcpy_s(&Press_Next_Params.ev, sizeof(Press_Next_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Next, &Press_Next_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.Next
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_RecordingMenu::Next()
{
	static UFunction* uFnNext = nullptr;

	if (!uFnNext)
	{
		uFnNext = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.Next");
	}

	UOLUIFrontEnd_RecordingMenu_execNext_Params Next_Params;
	memset(&Next_Params, 0, sizeof(Next_Params));

	this->ProcessEvent(uFnNext, &Next_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.Press_Back
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_RecordingMenu::Press_Back(struct FEventData ev)
{
	static UFunction* uFnPress_Back = nullptr;

	if (!uFnPress_Back)
	{
		uFnPress_Back = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.Press_Back");
	}

	UOLUIFrontEnd_RecordingMenu_execPress_Back_Params Press_Back_Params;
	memset(&Press_Back_Params, 0, sizeof(Press_Back_Params));
	memcpy_s(&Press_Back_Params.ev, sizeof(Press_Back_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Back, &Press_Back_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.back
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIFrontEnd_RecordingMenu::back()
{
	static UFunction* uFnback = nullptr;

	if (!uFnback)
	{
		uFnback = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.back");
	}

	UOLUIFrontEnd_RecordingMenu_execback_Params back_Params;
	memset(&back_Params, 0, sizeof(back_Params));

	this->ProcessEvent(uFnback, &back_Params, nullptr);

	return back_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.ShowChangeConfirmationDialog
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class FString                  Title                          (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Message                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  okButtonLabel                  (CPF_Parm | CPF_NeedCtorLink)
// class FString                  noButtonLabel                  (CPF_Parm | CPF_NeedCtorLink)
// class FString                  cancelButtonLabel              (CPF_Parm | CPF_NeedCtorLink)
// class FString                  callbackName                   (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_RecordingMenu::ShowChangeConfirmationDialog(class FString Title, class FString Message, class FString okButtonLabel, class FString noButtonLabel, class FString cancelButtonLabel, class FString callbackName)
{
	static UFunction* uFnShowChangeConfirmationDialog = nullptr;

	if (!uFnShowChangeConfirmationDialog)
	{
		uFnShowChangeConfirmationDialog = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.ShowChangeConfirmationDialog");
	}

	UOLUIFrontEnd_RecordingMenu_execShowChangeConfirmationDialog_Params ShowChangeConfirmationDialog_Params;
	memset(&ShowChangeConfirmationDialog_Params, 0, sizeof(ShowChangeConfirmationDialog_Params));
	memcpy_s(&ShowChangeConfirmationDialog_Params.Title, sizeof(ShowChangeConfirmationDialog_Params.Title), &Title, sizeof(Title));
	memcpy_s(&ShowChangeConfirmationDialog_Params.Message, sizeof(ShowChangeConfirmationDialog_Params.Message), &Message, sizeof(Message));
	memcpy_s(&ShowChangeConfirmationDialog_Params.okButtonLabel, sizeof(ShowChangeConfirmationDialog_Params.okButtonLabel), &okButtonLabel, sizeof(okButtonLabel));
	memcpy_s(&ShowChangeConfirmationDialog_Params.noButtonLabel, sizeof(ShowChangeConfirmationDialog_Params.noButtonLabel), &noButtonLabel, sizeof(noButtonLabel));
	memcpy_s(&ShowChangeConfirmationDialog_Params.cancelButtonLabel, sizeof(ShowChangeConfirmationDialog_Params.cancelButtonLabel), &cancelButtonLabel, sizeof(cancelButtonLabel));
	memcpy_s(&ShowChangeConfirmationDialog_Params.callbackName, sizeof(ShowChangeConfirmationDialog_Params.callbackName), &callbackName, sizeof(callbackName));

	this->ProcessEvent(uFnShowChangeConfirmationDialog, &ShowChangeConfirmationDialog_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.ResetFocus
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// int32_t                        focusIndex                     (CPF_Parm)

void UOLUIFrontEnd_RecordingMenu::ResetFocus(int32_t focusIndex)
{
	static UFunction* uFnResetFocus = nullptr;

	if (!uFnResetFocus)
	{
		uFnResetFocus = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.ResetFocus");
	}

	UOLUIFrontEnd_RecordingMenu_execResetFocus_Params ResetFocus_Params;
	memset(&ResetFocus_Params, 0, sizeof(ResetFocus_Params));
	memcpy_s(&ResetFocus_Params.focusIndex, sizeof(ResetFocus_Params.focusIndex), &focusIndex, sizeof(focusIndex));

	this->ProcessEvent(uFnResetFocus, &ResetFocus_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.Tick
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void UOLUIFrontEnd_RecordingMenu::Tick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.Tick");
	}

	UOLUIFrontEnd_RecordingMenu_execTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.ShowFullSizeImage
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ImageURL                       (CPF_Parm | CPF_NeedCtorLink)
// bool                           bIsVideo                       (CPF_Parm)

void UOLUIFrontEnd_RecordingMenu::ShowFullSizeImage(class FString ImageURL, bool bIsVideo)
{
	static UFunction* uFnShowFullSizeImage = nullptr;

	if (!uFnShowFullSizeImage)
	{
		uFnShowFullSizeImage = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.ShowFullSizeImage");
	}

	UOLUIFrontEnd_RecordingMenu_execShowFullSizeImage_Params ShowFullSizeImage_Params;
	memset(&ShowFullSizeImage_Params, 0, sizeof(ShowFullSizeImage_Params));
	memcpy_s(&ShowFullSizeImage_Params.ImageURL, sizeof(ShowFullSizeImage_Params.ImageURL), &ImageURL, sizeof(ImageURL));
	ShowFullSizeImage_Params.bIsVideo = bIsVideo;

	this->ProcessEvent(uFnShowFullSizeImage, &ShowFullSizeImage_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.OnRecordingClicked
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Index                          (CPF_Parm)

void UOLUIFrontEnd_RecordingMenu::OnRecordingClicked(int32_t Index)
{
	static UFunction* uFnOnRecordingClicked = nullptr;

	if (!uFnOnRecordingClicked)
	{
		uFnOnRecordingClicked = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.OnRecordingClicked");
	}

	UOLUIFrontEnd_RecordingMenu_execOnRecordingClicked_Params OnRecordingClicked_Params;
	memset(&OnRecordingClicked_Params, 0, sizeof(OnRecordingClicked_Params));
	memcpy_s(&OnRecordingClicked_Params.Index, sizeof(OnRecordingClicked_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnOnRecordingClicked, &OnRecordingClicked_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.GetFullSizeTexture
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UTexture*                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Index                          (CPF_Parm)

class UTexture* UOLUIFrontEnd_RecordingMenu::GetFullSizeTexture(int32_t Index)
{
	static UFunction* uFnGetFullSizeTexture = nullptr;

	if (!uFnGetFullSizeTexture)
	{
		uFnGetFullSizeTexture = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.GetFullSizeTexture");
	}

	UOLUIFrontEnd_RecordingMenu_execGetFullSizeTexture_Params GetFullSizeTexture_Params;
	memset(&GetFullSizeTexture_Params, 0, sizeof(GetFullSizeTexture_Params));
	memcpy_s(&GetFullSizeTexture_Params.Index, sizeof(GetFullSizeTexture_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnGetFullSizeTexture, &GetFullSizeTexture_Params, nullptr);

	return GetFullSizeTexture_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.OnRecordingTypeClicked
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        TypeIndex                      (CPF_Parm)

void UOLUIFrontEnd_RecordingMenu::OnRecordingTypeClicked(int32_t TypeIndex)
{
	static UFunction* uFnOnRecordingTypeClicked = nullptr;

	if (!uFnOnRecordingTypeClicked)
	{
		uFnOnRecordingTypeClicked = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.OnRecordingTypeClicked");
	}

	UOLUIFrontEnd_RecordingMenu_execOnRecordingTypeClicked_Params OnRecordingTypeClicked_Params;
	memset(&OnRecordingTypeClicked_Params, 0, sizeof(OnRecordingTypeClicked_Params));
	memcpy_s(&OnRecordingTypeClicked_Params.TypeIndex, sizeof(OnRecordingTypeClicked_Params.TypeIndex), &TypeIndex, sizeof(TypeIndex));

	this->ProcessEvent(uFnOnRecordingTypeClicked, &OnRecordingTypeClicked_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.PopulateChapterList
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bFocus                         (CPF_Parm)

void UOLUIFrontEnd_RecordingMenu::PopulateChapterList(bool bFocus)
{
	static UFunction* uFnPopulateChapterList = nullptr;

	if (!uFnPopulateChapterList)
	{
		uFnPopulateChapterList = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.PopulateChapterList");
	}

	UOLUIFrontEnd_RecordingMenu_execPopulateChapterList_Params PopulateChapterList_Params;
	memset(&PopulateChapterList_Params, 0, sizeof(PopulateChapterList_Params));
	PopulateChapterList_Params.bFocus = bFocus;

	this->ProcessEvent(uFnPopulateChapterList, &PopulateChapterList_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.InitiateThumbnailTextures
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        Type                           (CPF_Parm)
// int32_t                        ThumbSortingType               (CPF_Parm)

void UOLUIFrontEnd_RecordingMenu::InitiateThumbnailTextures(uint8_t Type, int32_t ThumbSortingType)
{
	static UFunction* uFnInitiateThumbnailTextures = nullptr;

	if (!uFnInitiateThumbnailTextures)
	{
		uFnInitiateThumbnailTextures = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.InitiateThumbnailTextures");
	}

	UOLUIFrontEnd_RecordingMenu_execInitiateThumbnailTextures_Params InitiateThumbnailTextures_Params;
	memset(&InitiateThumbnailTextures_Params, 0, sizeof(InitiateThumbnailTextures_Params));
	memcpy_s(&InitiateThumbnailTextures_Params.Type, sizeof(InitiateThumbnailTextures_Params.Type), &Type, sizeof(Type));
	memcpy_s(&InitiateThumbnailTextures_Params.ThumbSortingType, sizeof(InitiateThumbnailTextures_Params.ThumbSortingType), &ThumbSortingType, sizeof(ThumbSortingType));

	this->ProcessEvent(uFnInitiateThumbnailTextures, &InitiateThumbnailTextures_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.InitiateCategoriesTextures
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_RecordingMenu::InitiateCategoriesTextures()
{
	static UFunction* uFnInitiateCategoriesTextures = nullptr;

	if (!uFnInitiateCategoriesTextures)
	{
		uFnInitiateCategoriesTextures = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.InitiateCategoriesTextures");
	}

	UOLUIFrontEnd_RecordingMenu_execInitiateCategoriesTextures_Params InitiateCategoriesTextures_Params;
	memset(&InitiateCategoriesTextures_Params, 0, sizeof(InitiateCategoriesTextures_Params));

	this->ProcessEvent(uFnInitiateCategoriesTextures, &InitiateCategoriesTextures_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.Pop
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_RecordingMenu::Pop()
{
	static UFunction* uFnPop = nullptr;

	if (!uFnPop)
	{
		uFnPop = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.Pop");
	}

	UOLUIFrontEnd_RecordingMenu_execPop_Params Pop_Params;
	memset(&Pop_Params, 0, sizeof(Pop_Params));

	this->ProcessEvent(uFnPop, &Pop_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.OnViewDeactivated
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_RecordingMenu::OnViewDeactivated()
{
	static UFunction* uFnOnViewDeactivated = nullptr;

	if (!uFnOnViewDeactivated)
	{
		uFnOnViewDeactivated = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.OnViewDeactivated");
	}

	UOLUIFrontEnd_RecordingMenu_execOnViewDeactivated_Params OnViewDeactivated_Params;
	memset(&OnViewDeactivated_Params, 0, sizeof(OnViewDeactivated_Params));

	this->ProcessEvent(uFnOnViewDeactivated, &OnViewDeactivated_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.OnViewActivated
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_RecordingMenu::OnViewActivated()
{
	static UFunction* uFnOnViewActivated = nullptr;

	if (!uFnOnViewActivated)
	{
		uFnOnViewActivated = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.OnViewActivated");
	}

	UOLUIFrontEnd_RecordingMenu_execOnViewActivated_Params OnViewActivated_Params;
	memset(&OnViewActivated_Params, 0, sizeof(OnViewActivated_Params));

	this->ProcessEvent(uFnOnViewActivated, &OnViewActivated_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.OnViewLoaded
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_RecordingMenu::OnViewLoaded()
{
	static UFunction* uFnOnViewLoaded = nullptr;

	if (!uFnOnViewLoaded)
	{
		uFnOnViewLoaded = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.OnViewLoaded");
	}

	UOLUIFrontEnd_RecordingMenu_execOnViewLoaded_Params OnViewLoaded_Params;
	memset(&OnViewLoaded_Params, 0, sizeof(OnViewLoaded_Params));

	this->ProcessEvent(uFnOnViewLoaded, &OnViewLoaded_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.SetLocalizedStrings
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Play                           (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Pause                          (CPF_Parm | CPF_NeedCtorLink)
// class FString                  cleanText                      (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_RecordingMenu::SetLocalizedStrings(class FString Play, class FString Pause, class FString cleanText)
{
	static UFunction* uFnSetLocalizedStrings = nullptr;

	if (!uFnSetLocalizedStrings)
	{
		uFnSetLocalizedStrings = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.SetLocalizedStrings");
	}

	UOLUIFrontEnd_RecordingMenu_execSetLocalizedStrings_Params SetLocalizedStrings_Params;
	memset(&SetLocalizedStrings_Params, 0, sizeof(SetLocalizedStrings_Params));
	memcpy_s(&SetLocalizedStrings_Params.Play, sizeof(SetLocalizedStrings_Params.Play), &Play, sizeof(Play));
	memcpy_s(&SetLocalizedStrings_Params.Pause, sizeof(SetLocalizedStrings_Params.Pause), &Pause, sizeof(Pause));
	memcpy_s(&SetLocalizedStrings_Params.cleanText, sizeof(SetLocalizedStrings_Params.cleanText), &cleanText, sizeof(cleanText));

	this->ProcessEvent(uFnSetLocalizedStrings, &SetLocalizedStrings_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_RecordingMenu.OnTopMostView
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bPlayOpenAnimation             (CPF_OptionalParm | CPF_Parm)

void UOLUIFrontEnd_RecordingMenu::OnTopMostView(bool bPlayOpenAnimation)
{
	static UFunction* uFnOnTopMostView = nullptr;

	if (!uFnOnTopMostView)
	{
		uFnOnTopMostView = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_RecordingMenu.OnTopMostView");
	}

	UOLUIFrontEnd_RecordingMenu_execOnTopMostView_Params OnTopMostView_Params;
	memset(&OnTopMostView_Params, 0, sizeof(OnTopMostView_Params));
	OnTopMostView_Params.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent(uFnOnTopMostView, &OnTopMostView_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_ChapterSelection.Tick
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void UOLUIFrontEnd_ChapterSelection::Tick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_ChapterSelection.Tick");
	}

	UOLUIFrontEnd_ChapterSelection_execTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_ChapterSelection.LinkButtons
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_ChapterSelection::LinkButtons()
{
	static UFunction* uFnLinkButtons = nullptr;

	if (!uFnLinkButtons)
	{
		uFnLinkButtons = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_ChapterSelection.LinkButtons");
	}

	UOLUIFrontEnd_ChapterSelection_execLinkButtons_Params LinkButtons_Params;
	memset(&LinkButtons_Params, 0, sizeof(LinkButtons_Params));

	this->ProcessEvent(uFnLinkButtons, &LinkButtons_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_ChapterSelection.OnSetBackButton
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UGFxClikWidget*          Widget                         (CPF_Parm)

void UOLUIFrontEnd_ChapterSelection::OnSetBackButton(class UGFxClikWidget* Widget)
{
	static UFunction* uFnOnSetBackButton = nullptr;

	if (!uFnOnSetBackButton)
	{
		uFnOnSetBackButton = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_ChapterSelection.OnSetBackButton");
	}

	UOLUIFrontEnd_ChapterSelection_execOnSetBackButton_Params OnSetBackButton_Params;
	memset(&OnSetBackButton_Params, 0, sizeof(OnSetBackButton_Params));
	memcpy_s(&OnSetBackButton_Params.Widget, sizeof(OnSetBackButton_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnOnSetBackButton, &OnSetBackButton_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_ChapterSelection.WidgetInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   WidgetName                     (CPF_Parm)
// struct FName                   WidgetPath                     (CPF_Parm)
// class UGFxObject*              Widget                         (CPF_Parm)

bool UOLUIFrontEnd_ChapterSelection::eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget)
{
	static UFunction* uFnWidgetInitialized = nullptr;

	if (!uFnWidgetInitialized)
	{
		uFnWidgetInitialized = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_ChapterSelection.WidgetInitialized");
	}

	UOLUIFrontEnd_ChapterSelection_eventWidgetInitialized_Params WidgetInitialized_Params;
	memset(&WidgetInitialized_Params, 0, sizeof(WidgetInitialized_Params));
	memcpy_s(&WidgetInitialized_Params.WidgetName, sizeof(WidgetInitialized_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&WidgetInitialized_Params.WidgetPath, sizeof(WidgetInitialized_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));
	memcpy_s(&WidgetInitialized_Params.Widget, sizeof(WidgetInitialized_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnWidgetInitialized, &WidgetInitialized_Params, nullptr);

	return WidgetInitialized_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_ChapterSelection.GetCurrentSectionCount
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLUIFrontEnd_ChapterSelection::GetCurrentSectionCount()
{
	static UFunction* uFnGetCurrentSectionCount = nullptr;

	if (!uFnGetCurrentSectionCount)
	{
		uFnGetCurrentSectionCount = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_ChapterSelection.GetCurrentSectionCount");
	}

	UOLUIFrontEnd_ChapterSelection_execGetCurrentSectionCount_Params GetCurrentSectionCount_Params;
	memset(&GetCurrentSectionCount_Params, 0, sizeof(GetCurrentSectionCount_Params));

	this->ProcessEvent(uFnGetCurrentSectionCount, &GetCurrentSectionCount_Params, nullptr);

	return GetCurrentSectionCount_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_ChapterSelection.GetMaxSectionCount
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLUIFrontEnd_ChapterSelection::GetMaxSectionCount()
{
	static UFunction* uFnGetMaxSectionCount = nullptr;

	if (!uFnGetMaxSectionCount)
	{
		uFnGetMaxSectionCount = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_ChapterSelection.GetMaxSectionCount");
	}

	UOLUIFrontEnd_ChapterSelection_execGetMaxSectionCount_Params GetMaxSectionCount_Params;
	memset(&GetMaxSectionCount_Params, 0, sizeof(GetMaxSectionCount_Params));

	this->ProcessEvent(uFnGetMaxSectionCount, &GetMaxSectionCount_Params, nullptr);

	return GetMaxSectionCount_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_ChapterSelection.Press_Back
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_ChapterSelection::Press_Back(struct FEventData ev)
{
	static UFunction* uFnPress_Back = nullptr;

	if (!uFnPress_Back)
	{
		uFnPress_Back = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_ChapterSelection.Press_Back");
	}

	UOLUIFrontEnd_ChapterSelection_execPress_Back_Params Press_Back_Params;
	memset(&Press_Back_Params, 0, sizeof(Press_Back_Params));
	memcpy_s(&Press_Back_Params.ev, sizeof(Press_Back_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Back, &Press_Back_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_ChapterSelection.back
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIFrontEnd_ChapterSelection::back()
{
	static UFunction* uFnback = nullptr;

	if (!uFnback)
	{
		uFnback = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_ChapterSelection.back");
	}

	UOLUIFrontEnd_ChapterSelection_execback_Params back_Params;
	memset(&back_Params, 0, sizeof(back_Params));

	this->ProcessEvent(uFnback, &back_Params, nullptr);

	return back_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_ChapterSelection.OnGameTypeSelect
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Type                           (CPF_Parm)

void UOLUIFrontEnd_ChapterSelection::OnGameTypeSelect(int32_t Type)
{
	static UFunction* uFnOnGameTypeSelect = nullptr;

	if (!uFnOnGameTypeSelect)
	{
		uFnOnGameTypeSelect = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_ChapterSelection.OnGameTypeSelect");
	}

	UOLUIFrontEnd_ChapterSelection_execOnGameTypeSelect_Params OnGameTypeSelect_Params;
	memset(&OnGameTypeSelect_Params, 0, sizeof(OnGameTypeSelect_Params));
	memcpy_s(&OnGameTypeSelect_Params.Type, sizeof(OnGameTypeSelect_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnOnGameTypeSelect, &OnGameTypeSelect_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_ChapterSelection.SaveLocationSelected
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bSuccess                       (CPF_Parm)

void UOLUIFrontEnd_ChapterSelection::SaveLocationSelected(bool bSuccess)
{
	static UFunction* uFnSaveLocationSelected = nullptr;

	if (!uFnSaveLocationSelected)
	{
		uFnSaveLocationSelected = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_ChapterSelection.SaveLocationSelected");
	}

	UOLUIFrontEnd_ChapterSelection_execSaveLocationSelected_Params SaveLocationSelected_Params;
	memset(&SaveLocationSelected_Params, 0, sizeof(SaveLocationSelected_Params));
	SaveLocationSelected_Params.bSuccess = bSuccess;

	this->ProcessEvent(uFnSaveLocationSelected, &SaveLocationSelected_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_ChapterSelection.OnChapterClicked
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        chapterIndex                   (CPF_Parm)
// int32_t                        buttonIndex                    (CPF_Parm)

void UOLUIFrontEnd_ChapterSelection::OnChapterClicked(int32_t chapterIndex, int32_t buttonIndex)
{
	static UFunction* uFnOnChapterClicked = nullptr;

	if (!uFnOnChapterClicked)
	{
		uFnOnChapterClicked = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_ChapterSelection.OnChapterClicked");
	}

	UOLUIFrontEnd_ChapterSelection_execOnChapterClicked_Params OnChapterClicked_Params;
	memset(&OnChapterClicked_Params, 0, sizeof(OnChapterClicked_Params));
	memcpy_s(&OnChapterClicked_Params.chapterIndex, sizeof(OnChapterClicked_Params.chapterIndex), &chapterIndex, sizeof(chapterIndex));
	memcpy_s(&OnChapterClicked_Params.buttonIndex, sizeof(OnChapterClicked_Params.buttonIndex), &buttonIndex, sizeof(buttonIndex));

	this->ProcessEvent(uFnOnChapterClicked, &OnChapterClicked_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_ChapterSelection.ShowChangeConfirmationDialog
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class FString                  Title                          (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Message                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  okButtonLabel                  (CPF_Parm | CPF_NeedCtorLink)
// class FString                  noButtonLabel                  (CPF_Parm | CPF_NeedCtorLink)
// class FString                  cancelButtonLabel              (CPF_Parm | CPF_NeedCtorLink)
// class FString                  callbackName                   (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_ChapterSelection::ShowChangeConfirmationDialog(class FString Title, class FString Message, class FString okButtonLabel, class FString noButtonLabel, class FString cancelButtonLabel, class FString callbackName)
{
	static UFunction* uFnShowChangeConfirmationDialog = nullptr;

	if (!uFnShowChangeConfirmationDialog)
	{
		uFnShowChangeConfirmationDialog = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_ChapterSelection.ShowChangeConfirmationDialog");
	}

	UOLUIFrontEnd_ChapterSelection_execShowChangeConfirmationDialog_Params ShowChangeConfirmationDialog_Params;
	memset(&ShowChangeConfirmationDialog_Params, 0, sizeof(ShowChangeConfirmationDialog_Params));
	memcpy_s(&ShowChangeConfirmationDialog_Params.Title, sizeof(ShowChangeConfirmationDialog_Params.Title), &Title, sizeof(Title));
	memcpy_s(&ShowChangeConfirmationDialog_Params.Message, sizeof(ShowChangeConfirmationDialog_Params.Message), &Message, sizeof(Message));
	memcpy_s(&ShowChangeConfirmationDialog_Params.okButtonLabel, sizeof(ShowChangeConfirmationDialog_Params.okButtonLabel), &okButtonLabel, sizeof(okButtonLabel));
	memcpy_s(&ShowChangeConfirmationDialog_Params.noButtonLabel, sizeof(ShowChangeConfirmationDialog_Params.noButtonLabel), &noButtonLabel, sizeof(noButtonLabel));
	memcpy_s(&ShowChangeConfirmationDialog_Params.cancelButtonLabel, sizeof(ShowChangeConfirmationDialog_Params.cancelButtonLabel), &cancelButtonLabel, sizeof(cancelButtonLabel));
	memcpy_s(&ShowChangeConfirmationDialog_Params.callbackName, sizeof(ShowChangeConfirmationDialog_Params.callbackName), &callbackName, sizeof(callbackName));

	this->ProcessEvent(uFnShowChangeConfirmationDialog, &ShowChangeConfirmationDialog_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_ChapterSelection.ResetFocus
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// int32_t                        focusIndex                     (CPF_Parm)

void UOLUIFrontEnd_ChapterSelection::ResetFocus(int32_t focusIndex)
{
	static UFunction* uFnResetFocus = nullptr;

	if (!uFnResetFocus)
	{
		uFnResetFocus = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_ChapterSelection.ResetFocus");
	}

	UOLUIFrontEnd_ChapterSelection_execResetFocus_Params ResetFocus_Params;
	memset(&ResetFocus_Params, 0, sizeof(ResetFocus_Params));
	memcpy_s(&ResetFocus_Params.focusIndex, sizeof(ResetFocus_Params.focusIndex), &focusIndex, sizeof(focusIndex));

	this->ProcessEvent(uFnResetFocus, &ResetFocus_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_ChapterSelection.OnSectionClicked
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        SectionIndex                   (CPF_Parm)

void UOLUIFrontEnd_ChapterSelection::OnSectionClicked(int32_t SectionIndex)
{
	static UFunction* uFnOnSectionClicked = nullptr;

	if (!uFnOnSectionClicked)
	{
		uFnOnSectionClicked = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_ChapterSelection.OnSectionClicked");
	}

	UOLUIFrontEnd_ChapterSelection_execOnSectionClicked_Params OnSectionClicked_Params;
	memset(&OnSectionClicked_Params, 0, sizeof(OnSectionClicked_Params));
	memcpy_s(&OnSectionClicked_Params.SectionIndex, sizeof(OnSectionClicked_Params.SectionIndex), &SectionIndex, sizeof(SectionIndex));

	this->ProcessEvent(uFnOnSectionClicked, &OnSectionClicked_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_ChapterSelection.PopulateChapterList
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bFocus                         (CPF_Parm)

void UOLUIFrontEnd_ChapterSelection::PopulateChapterList(bool bFocus)
{
	static UFunction* uFnPopulateChapterList = nullptr;

	if (!uFnPopulateChapterList)
	{
		uFnPopulateChapterList = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_ChapterSelection.PopulateChapterList");
	}

	UOLUIFrontEnd_ChapterSelection_execPopulateChapterList_Params PopulateChapterList_Params;
	memset(&PopulateChapterList_Params, 0, sizeof(PopulateChapterList_Params));
	PopulateChapterList_Params.bFocus = bFocus;

	this->ProcessEvent(uFnPopulateChapterList, &PopulateChapterList_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_ChapterSelection.InitializeFocusControl
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bIsController                  (CPF_Parm)

void UOLUIFrontEnd_ChapterSelection::InitializeFocusControl(bool bIsController)
{
	static UFunction* uFnInitializeFocusControl = nullptr;

	if (!uFnInitializeFocusControl)
	{
		uFnInitializeFocusControl = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_ChapterSelection.InitializeFocusControl");
	}

	UOLUIFrontEnd_ChapterSelection_execInitializeFocusControl_Params InitializeFocusControl_Params;
	memset(&InitializeFocusControl_Params, 0, sizeof(InitializeFocusControl_Params));
	InitializeFocusControl_Params.bIsController = bIsController;

	this->ProcessEvent(uFnInitializeFocusControl, &InitializeFocusControl_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_ChapterSelection.InputTypeChanged
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_ChapterSelection::eventInputTypeChanged()
{
	static UFunction* uFnInputTypeChanged = nullptr;

	if (!uFnInputTypeChanged)
	{
		uFnInputTypeChanged = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_ChapterSelection.InputTypeChanged");
	}

	UOLUIFrontEnd_ChapterSelection_eventInputTypeChanged_Params InputTypeChanged_Params;
	memset(&InputTypeChanged_Params, 0, sizeof(InputTypeChanged_Params));

	this->ProcessEvent(uFnInputTypeChanged, &InputTypeChanged_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_ChapterSelection.GetChapterName
// [0x00022002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// struct FName                   CheckpointName                 (CPF_Parm)

class FString UOLUIFrontEnd_ChapterSelection::GetChapterName(struct FName CheckpointName)
{
	static UFunction* uFnGetChapterName = nullptr;

	if (!uFnGetChapterName)
	{
		uFnGetChapterName = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_ChapterSelection.GetChapterName");
	}

	UOLUIFrontEnd_ChapterSelection_execGetChapterName_Params GetChapterName_Params;
	memset(&GetChapterName_Params, 0, sizeof(GetChapterName_Params));
	memcpy_s(&GetChapterName_Params.CheckpointName, sizeof(GetChapterName_Params.CheckpointName), &CheckpointName, sizeof(CheckpointName));

	UOLUIFrontEnd_ChapterSelection::StaticClass()->ProcessEvent(uFnGetChapterName, &GetChapterName_Params, nullptr);

	return GetChapterName_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_ChapterSelection.HasValidChapters
// [0x00022002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIFrontEnd_ChapterSelection::HasValidChapters()
{
	static UFunction* uFnHasValidChapters = nullptr;

	if (!uFnHasValidChapters)
	{
		uFnHasValidChapters = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_ChapterSelection.HasValidChapters");
	}

	UOLUIFrontEnd_ChapterSelection_execHasValidChapters_Params HasValidChapters_Params;
	memset(&HasValidChapters_Params, 0, sizeof(HasValidChapters_Params));

	UOLUIFrontEnd_ChapterSelection::StaticClass()->ProcessEvent(uFnHasValidChapters, &HasValidChapters_Params, nullptr);

	return HasValidChapters_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_ChapterSelection.Pop
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_ChapterSelection::Pop()
{
	static UFunction* uFnPop = nullptr;

	if (!uFnPop)
	{
		uFnPop = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_ChapterSelection.Pop");
	}

	UOLUIFrontEnd_ChapterSelection_execPop_Params Pop_Params;
	memset(&Pop_Params, 0, sizeof(Pop_Params));

	this->ProcessEvent(uFnPop, &Pop_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_ChapterSelection.OnViewActivated
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_ChapterSelection::OnViewActivated()
{
	static UFunction* uFnOnViewActivated = nullptr;

	if (!uFnOnViewActivated)
	{
		uFnOnViewActivated = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_ChapterSelection.OnViewActivated");
	}

	UOLUIFrontEnd_ChapterSelection_execOnViewActivated_Params OnViewActivated_Params;
	memset(&OnViewActivated_Params, 0, sizeof(OnViewActivated_Params));

	this->ProcessEvent(uFnOnViewActivated, &OnViewActivated_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_ChapterSelection.OnViewLoaded
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_ChapterSelection::OnViewLoaded()
{
	static UFunction* uFnOnViewLoaded = nullptr;

	if (!uFnOnViewLoaded)
	{
		uFnOnViewLoaded = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_ChapterSelection.OnViewLoaded");
	}

	UOLUIFrontEnd_ChapterSelection_execOnViewLoaded_Params OnViewLoaded_Params;
	memset(&OnViewLoaded_Params, 0, sizeof(OnViewLoaded_Params));

	this->ProcessEvent(uFnOnViewLoaded, &OnViewLoaded_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_ChapterSelection.selectConsole
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Console                        (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_ChapterSelection::selectConsole(class FString Console)
{
	static UFunction* uFnselectConsole = nullptr;

	if (!uFnselectConsole)
	{
		uFnselectConsole = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_ChapterSelection.selectConsole");
	}

	UOLUIFrontEnd_ChapterSelection_execselectConsole_Params selectConsole_Params;
	memset(&selectConsole_Params, 0, sizeof(selectConsole_Params));
	memcpy_s(&selectConsole_Params.Console, sizeof(selectConsole_Params.Console), &Console, sizeof(Console));

	this->ProcessEvent(uFnselectConsole, &selectConsole_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_ChapterSelection.OnTopMostView
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bPlayOpenAnimation             (CPF_OptionalParm | CPF_Parm)

void UOLUIFrontEnd_ChapterSelection::OnTopMostView(bool bPlayOpenAnimation)
{
	static UFunction* uFnOnTopMostView = nullptr;

	if (!uFnOnTopMostView)
	{
		uFnOnTopMostView = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_ChapterSelection.OnTopMostView");
	}

	UOLUIFrontEnd_ChapterSelection_execOnTopMostView_Params OnTopMostView_Params;
	memset(&OnTopMostView_Params, 0, sizeof(OnTopMostView_Params));
	OnTopMostView_Params.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent(uFnOnTopMostView, &OnTopMostView_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.WidgetInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   WidgetName                     (CPF_Parm)
// struct FName                   WidgetPath                     (CPF_Parm)
// class UGFxObject*              Widget                         (CPF_Parm)

bool UOLUIFrontEnd_DifficultySelectionScreen::eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget)
{
	static UFunction* uFnWidgetInitialized = nullptr;

	if (!uFnWidgetInitialized)
	{
		uFnWidgetInitialized = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.WidgetInitialized");
	}

	UOLUIFrontEnd_DifficultySelectionScreen_eventWidgetInitialized_Params WidgetInitialized_Params;
	memset(&WidgetInitialized_Params, 0, sizeof(WidgetInitialized_Params));
	memcpy_s(&WidgetInitialized_Params.WidgetName, sizeof(WidgetInitialized_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&WidgetInitialized_Params.WidgetPath, sizeof(WidgetInitialized_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));
	memcpy_s(&WidgetInitialized_Params.Widget, sizeof(WidgetInitialized_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnWidgetInitialized, &WidgetInitialized_Params, nullptr);

	return WidgetInitialized_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.ASShowConfirmInsaneDialog
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class FString                  Title                          (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Message                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  okButtonLabel                  (CPF_Parm | CPF_NeedCtorLink)
// class FString                  cancelButtonLabel              (CPF_Parm | CPF_NeedCtorLink)
// class FString                  callbackName                   (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_DifficultySelectionScreen::ASShowConfirmInsaneDialog(class FString Title, class FString Message, class FString okButtonLabel, class FString cancelButtonLabel, class FString callbackName)
{
	static UFunction* uFnASShowConfirmInsaneDialog = nullptr;

	if (!uFnASShowConfirmInsaneDialog)
	{
		uFnASShowConfirmInsaneDialog = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.ASShowConfirmInsaneDialog");
	}

	UOLUIFrontEnd_DifficultySelectionScreen_execASShowConfirmInsaneDialog_Params ASShowConfirmInsaneDialog_Params;
	memset(&ASShowConfirmInsaneDialog_Params, 0, sizeof(ASShowConfirmInsaneDialog_Params));
	memcpy_s(&ASShowConfirmInsaneDialog_Params.Title, sizeof(ASShowConfirmInsaneDialog_Params.Title), &Title, sizeof(Title));
	memcpy_s(&ASShowConfirmInsaneDialog_Params.Message, sizeof(ASShowConfirmInsaneDialog_Params.Message), &Message, sizeof(Message));
	memcpy_s(&ASShowConfirmInsaneDialog_Params.okButtonLabel, sizeof(ASShowConfirmInsaneDialog_Params.okButtonLabel), &okButtonLabel, sizeof(okButtonLabel));
	memcpy_s(&ASShowConfirmInsaneDialog_Params.cancelButtonLabel, sizeof(ASShowConfirmInsaneDialog_Params.cancelButtonLabel), &cancelButtonLabel, sizeof(cancelButtonLabel));
	memcpy_s(&ASShowConfirmInsaneDialog_Params.callbackName, sizeof(ASShowConfirmInsaneDialog_Params.callbackName), &callbackName, sizeof(callbackName));

	this->ProcessEvent(uFnASShowConfirmInsaneDialog, &ASShowConfirmInsaneDialog_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.FilterButtonInput
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// struct FName                   ButtonName                     (CPF_Parm)
// EInputEvent                    InputEvent                     (CPF_Parm)

bool UOLUIFrontEnd_DifficultySelectionScreen::eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent)
{
	static UFunction* uFnFilterButtonInput = nullptr;

	if (!uFnFilterButtonInput)
	{
		uFnFilterButtonInput = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.FilterButtonInput");
	}

	UOLUIFrontEnd_DifficultySelectionScreen_eventFilterButtonInput_Params FilterButtonInput_Params;
	memset(&FilterButtonInput_Params, 0, sizeof(FilterButtonInput_Params));
	memcpy_s(&FilterButtonInput_Params.ControllerId, sizeof(FilterButtonInput_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&FilterButtonInput_Params.ButtonName, sizeof(FilterButtonInput_Params.ButtonName), &ButtonName, sizeof(ButtonName));
	memcpy_s(&FilterButtonInput_Params.InputEvent, sizeof(FilterButtonInput_Params.InputEvent), &InputEvent, sizeof(InputEvent));

	this->ProcessEvent(uFnFilterButtonInput, &FilterButtonInput_Params, nullptr);

	return FilterButtonInput_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.Press_Back
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_DifficultySelectionScreen::Press_Back(struct FEventData ev)
{
	static UFunction* uFnPress_Back = nullptr;

	if (!uFnPress_Back)
	{
		uFnPress_Back = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.Press_Back");
	}

	UOLUIFrontEnd_DifficultySelectionScreen_execPress_Back_Params Press_Back_Params;
	memset(&Press_Back_Params, 0, sizeof(Press_Back_Params));
	memcpy_s(&Press_Back_Params.ev, sizeof(Press_Back_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Back, &Press_Back_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.Pop
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_DifficultySelectionScreen::Pop()
{
	static UFunction* uFnPop = nullptr;

	if (!uFnPop)
	{
		uFnPop = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.Pop");
	}

	UOLUIFrontEnd_DifficultySelectionScreen_execPop_Params Pop_Params;
	memset(&Pop_Params, 0, sizeof(Pop_Params));

	this->ProcessEvent(uFnPop, &Pop_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.OnViewDeactivated
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_DifficultySelectionScreen::OnViewDeactivated()
{
	static UFunction* uFnOnViewDeactivated = nullptr;

	if (!uFnOnViewDeactivated)
	{
		uFnOnViewDeactivated = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.OnViewDeactivated");
	}

	UOLUIFrontEnd_DifficultySelectionScreen_execOnViewDeactivated_Params OnViewDeactivated_Params;
	memset(&OnViewDeactivated_Params, 0, sizeof(OnViewDeactivated_Params));

	this->ProcessEvent(uFnOnViewDeactivated, &OnViewDeactivated_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.ProceedToStartGame
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_DifficultySelectionScreen::ProceedToStartGame()
{
	static UFunction* uFnProceedToStartGame = nullptr;

	if (!uFnProceedToStartGame)
	{
		uFnProceedToStartGame = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.ProceedToStartGame");
	}

	UOLUIFrontEnd_DifficultySelectionScreen_execProceedToStartGame_Params ProceedToStartGame_Params;
	memset(&ProceedToStartGame_Params, 0, sizeof(ProceedToStartGame_Params));

	this->ProcessEvent(uFnProceedToStartGame, &ProceedToStartGame_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.OnConfirmedInsane
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bOk                            (CPF_Parm)

void UOLUIFrontEnd_DifficultySelectionScreen::OnConfirmedInsane(bool bOk)
{
	static UFunction* uFnOnConfirmedInsane = nullptr;

	if (!uFnOnConfirmedInsane)
	{
		uFnOnConfirmedInsane = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.OnConfirmedInsane");
	}

	UOLUIFrontEnd_DifficultySelectionScreen_execOnConfirmedInsane_Params OnConfirmedInsane_Params;
	memset(&OnConfirmedInsane_Params, 0, sizeof(OnConfirmedInsane_Params));
	OnConfirmedInsane_Params.bOk = bOk;

	this->ProcessEvent(uFnOnConfirmedInsane, &OnConfirmedInsane_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.Press_Insane
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_DifficultySelectionScreen::Press_Insane(struct FEventData ev)
{
	static UFunction* uFnPress_Insane = nullptr;

	if (!uFnPress_Insane)
	{
		uFnPress_Insane = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.Press_Insane");
	}

	UOLUIFrontEnd_DifficultySelectionScreen_execPress_Insane_Params Press_Insane_Params;
	memset(&Press_Insane_Params, 0, sizeof(Press_Insane_Params));
	memcpy_s(&Press_Insane_Params.ev, sizeof(Press_Insane_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Insane, &Press_Insane_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.Press_Nightmare
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_DifficultySelectionScreen::Press_Nightmare(struct FEventData ev)
{
	static UFunction* uFnPress_Nightmare = nullptr;

	if (!uFnPress_Nightmare)
	{
		uFnPress_Nightmare = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.Press_Nightmare");
	}

	UOLUIFrontEnd_DifficultySelectionScreen_execPress_Nightmare_Params Press_Nightmare_Params;
	memset(&Press_Nightmare_Params, 0, sizeof(Press_Nightmare_Params));
	memcpy_s(&Press_Nightmare_Params.ev, sizeof(Press_Nightmare_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Nightmare, &Press_Nightmare_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.Press_Hard
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_DifficultySelectionScreen::Press_Hard(struct FEventData ev)
{
	static UFunction* uFnPress_Hard = nullptr;

	if (!uFnPress_Hard)
	{
		uFnPress_Hard = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.Press_Hard");
	}

	UOLUIFrontEnd_DifficultySelectionScreen_execPress_Hard_Params Press_Hard_Params;
	memset(&Press_Hard_Params, 0, sizeof(Press_Hard_Params));
	memcpy_s(&Press_Hard_Params.ev, sizeof(Press_Hard_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Hard, &Press_Hard_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.Press_Normal
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_DifficultySelectionScreen::Press_Normal(struct FEventData ev)
{
	static UFunction* uFnPress_Normal = nullptr;

	if (!uFnPress_Normal)
	{
		uFnPress_Normal = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.Press_Normal");
	}

	UOLUIFrontEnd_DifficultySelectionScreen_execPress_Normal_Params Press_Normal_Params;
	memset(&Press_Normal_Params, 0, sizeof(Press_Normal_Params));
	memcpy_s(&Press_Normal_Params.ev, sizeof(Press_Normal_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Normal, &Press_Normal_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.Press_Easy
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_DifficultySelectionScreen::Press_Easy(struct FEventData ev)
{
	static UFunction* uFnPress_Easy = nullptr;

	if (!uFnPress_Easy)
	{
		uFnPress_Easy = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.Press_Easy");
	}

	UOLUIFrontEnd_DifficultySelectionScreen_execPress_Easy_Params Press_Easy_Params;
	memset(&Press_Easy_Params, 0, sizeof(Press_Easy_Params));
	memcpy_s(&Press_Easy_Params.ev, sizeof(Press_Easy_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Easy, &Press_Easy_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.OnTopMostView
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bPlayOpenAnimation             (CPF_OptionalParm | CPF_Parm)

void UOLUIFrontEnd_DifficultySelectionScreen::OnTopMostView(bool bPlayOpenAnimation)
{
	static UFunction* uFnOnTopMostView = nullptr;

	if (!uFnOnTopMostView)
	{
		uFnOnTopMostView = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.OnTopMostView");
	}

	UOLUIFrontEnd_DifficultySelectionScreen_execOnTopMostView_Params OnTopMostView_Params;
	memset(&OnTopMostView_Params, 0, sizeof(OnTopMostView_Params));
	OnTopMostView_Params.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent(uFnOnTopMostView, &OnTopMostView_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.OnViewLoaded
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_DifficultySelectionScreen::OnViewLoaded()
{
	static UFunction* uFnOnViewLoaded = nullptr;

	if (!uFnOnViewLoaded)
	{
		uFnOnViewLoaded = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_DifficultySelectionScreen.OnViewLoaded");
	}

	UOLUIFrontEnd_DifficultySelectionScreen_execOnViewLoaded_Params OnViewLoaded_Params;
	memset(&OnViewLoaded_Params, 0, sizeof(OnViewLoaded_Params));

	this->ProcessEvent(uFnOnViewLoaded, &OnViewLoaded_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.ASOnKeyBindingCancelled
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_Options::ASOnKeyBindingCancelled()
{
	static UFunction* uFnASOnKeyBindingCancelled = nullptr;

	if (!uFnASOnKeyBindingCancelled)
	{
		uFnASOnKeyBindingCancelled = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.ASOnKeyBindingCancelled");
	}

	UOLUIFrontEnd_Options_execASOnKeyBindingCancelled_Params ASOnKeyBindingCancelled_Params;
	memset(&ASOnKeyBindingCancelled_Params, 0, sizeof(ASOnKeyBindingCancelled_Params));

	this->ProcessEvent(uFnASOnKeyBindingCancelled, &ASOnKeyBindingCancelled_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.ASOnKeyBindingCaptured
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class FString                  KeyName                        (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_Options::ASOnKeyBindingCaptured(class FString KeyName)
{
	static UFunction* uFnASOnKeyBindingCaptured = nullptr;

	if (!uFnASOnKeyBindingCaptured)
	{
		uFnASOnKeyBindingCaptured = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.ASOnKeyBindingCaptured");
	}

	UOLUIFrontEnd_Options_execASOnKeyBindingCaptured_Params ASOnKeyBindingCaptured_Params;
	memset(&ASOnKeyBindingCaptured_Params, 0, sizeof(ASOnKeyBindingCaptured_Params));
	memcpy_s(&ASOnKeyBindingCaptured_Params.KeyName, sizeof(ASOnKeyBindingCaptured_Params.KeyName), &KeyName, sizeof(KeyName));

	this->ProcessEvent(uFnASOnKeyBindingCaptured, &ASOnKeyBindingCaptured_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.ShowMessageDialog
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class FString                  Title                          (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Message                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  okButtonLabel                  (CPF_Parm | CPF_NeedCtorLink)
// class FString                  callbackName                   (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_Options::ShowMessageDialog(class FString Title, class FString Message, class FString okButtonLabel, class FString callbackName)
{
	static UFunction* uFnShowMessageDialog = nullptr;

	if (!uFnShowMessageDialog)
	{
		uFnShowMessageDialog = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.ShowMessageDialog");
	}

	UOLUIFrontEnd_Options_execShowMessageDialog_Params ShowMessageDialog_Params;
	memset(&ShowMessageDialog_Params, 0, sizeof(ShowMessageDialog_Params));
	memcpy_s(&ShowMessageDialog_Params.Title, sizeof(ShowMessageDialog_Params.Title), &Title, sizeof(Title));
	memcpy_s(&ShowMessageDialog_Params.Message, sizeof(ShowMessageDialog_Params.Message), &Message, sizeof(Message));
	memcpy_s(&ShowMessageDialog_Params.okButtonLabel, sizeof(ShowMessageDialog_Params.okButtonLabel), &okButtonLabel, sizeof(okButtonLabel));
	memcpy_s(&ShowMessageDialog_Params.callbackName, sizeof(ShowMessageDialog_Params.callbackName), &callbackName, sizeof(callbackName));

	this->ProcessEvent(uFnShowMessageDialog, &ShowMessageDialog_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.ShowKeyBindingConflictDialog
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class FString                  Title                          (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Message                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  okButtonLabel                  (CPF_Parm | CPF_NeedCtorLink)
// class FString                  cancelButtonLabel              (CPF_Parm | CPF_NeedCtorLink)
// class FString                  callbackName                   (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_Options::ShowKeyBindingConflictDialog(class FString Title, class FString Message, class FString okButtonLabel, class FString cancelButtonLabel, class FString callbackName)
{
	static UFunction* uFnShowKeyBindingConflictDialog = nullptr;

	if (!uFnShowKeyBindingConflictDialog)
	{
		uFnShowKeyBindingConflictDialog = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.ShowKeyBindingConflictDialog");
	}

	UOLUIFrontEnd_Options_execShowKeyBindingConflictDialog_Params ShowKeyBindingConflictDialog_Params;
	memset(&ShowKeyBindingConflictDialog_Params, 0, sizeof(ShowKeyBindingConflictDialog_Params));
	memcpy_s(&ShowKeyBindingConflictDialog_Params.Title, sizeof(ShowKeyBindingConflictDialog_Params.Title), &Title, sizeof(Title));
	memcpy_s(&ShowKeyBindingConflictDialog_Params.Message, sizeof(ShowKeyBindingConflictDialog_Params.Message), &Message, sizeof(Message));
	memcpy_s(&ShowKeyBindingConflictDialog_Params.okButtonLabel, sizeof(ShowKeyBindingConflictDialog_Params.okButtonLabel), &okButtonLabel, sizeof(okButtonLabel));
	memcpy_s(&ShowKeyBindingConflictDialog_Params.cancelButtonLabel, sizeof(ShowKeyBindingConflictDialog_Params.cancelButtonLabel), &cancelButtonLabel, sizeof(cancelButtonLabel));
	memcpy_s(&ShowKeyBindingConflictDialog_Params.callbackName, sizeof(ShowKeyBindingConflictDialog_Params.callbackName), &callbackName, sizeof(callbackName));

	this->ProcessEvent(uFnShowKeyBindingConflictDialog, &ShowKeyBindingConflictDialog_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.ShowChangeConfirmationDialog
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class FString                  Title                          (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Message                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  okButtonLabel                  (CPF_Parm | CPF_NeedCtorLink)
// class FString                  cancelButtonLabel              (CPF_Parm | CPF_NeedCtorLink)
// class FString                  callbackName                   (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_Options::ShowChangeConfirmationDialog(class FString Title, class FString Message, class FString okButtonLabel, class FString cancelButtonLabel, class FString callbackName)
{
	static UFunction* uFnShowChangeConfirmationDialog = nullptr;

	if (!uFnShowChangeConfirmationDialog)
	{
		uFnShowChangeConfirmationDialog = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.ShowChangeConfirmationDialog");
	}

	UOLUIFrontEnd_Options_execShowChangeConfirmationDialog_Params ShowChangeConfirmationDialog_Params;
	memset(&ShowChangeConfirmationDialog_Params, 0, sizeof(ShowChangeConfirmationDialog_Params));
	memcpy_s(&ShowChangeConfirmationDialog_Params.Title, sizeof(ShowChangeConfirmationDialog_Params.Title), &Title, sizeof(Title));
	memcpy_s(&ShowChangeConfirmationDialog_Params.Message, sizeof(ShowChangeConfirmationDialog_Params.Message), &Message, sizeof(Message));
	memcpy_s(&ShowChangeConfirmationDialog_Params.okButtonLabel, sizeof(ShowChangeConfirmationDialog_Params.okButtonLabel), &okButtonLabel, sizeof(okButtonLabel));
	memcpy_s(&ShowChangeConfirmationDialog_Params.cancelButtonLabel, sizeof(ShowChangeConfirmationDialog_Params.cancelButtonLabel), &cancelButtonLabel, sizeof(cancelButtonLabel));
	memcpy_s(&ShowChangeConfirmationDialog_Params.callbackName, sizeof(ShowChangeConfirmationDialog_Params.callbackName), &callbackName, sizeof(callbackName));

	this->ProcessEvent(uFnShowChangeConfirmationDialog, &ShowChangeConfirmationDialog_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.FilterButtonInput
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// struct FName                   ButtonName                     (CPF_Parm)
// EInputEvent                    InputEvent                     (CPF_Parm)

bool UOLUIFrontEnd_Options::eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent)
{
	static UFunction* uFnFilterButtonInput = nullptr;

	if (!uFnFilterButtonInput)
	{
		uFnFilterButtonInput = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.FilterButtonInput");
	}

	UOLUIFrontEnd_Options_eventFilterButtonInput_Params FilterButtonInput_Params;
	memset(&FilterButtonInput_Params, 0, sizeof(FilterButtonInput_Params));
	memcpy_s(&FilterButtonInput_Params.ControllerId, sizeof(FilterButtonInput_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&FilterButtonInput_Params.ButtonName, sizeof(FilterButtonInput_Params.ButtonName), &ButtonName, sizeof(ButtonName));
	memcpy_s(&FilterButtonInput_Params.InputEvent, sizeof(FilterButtonInput_Params.InputEvent), &InputEvent, sizeof(InputEvent));

	this->ProcessEvent(uFnFilterButtonInput, &FilterButtonInput_Params, nullptr);

	return FilterButtonInput_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options.Tick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void UOLUIFrontEnd_Options::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.Tick");
	}

	UOLUIFrontEnd_Options_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.CloseDialog
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        buttonIdx                      (CPF_Parm)

void UOLUIFrontEnd_Options::CloseDialog(int32_t buttonIdx)
{
	static UFunction* uFnCloseDialog = nullptr;

	if (!uFnCloseDialog)
	{
		uFnCloseDialog = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.CloseDialog");
	}

	UOLUIFrontEnd_Options_execCloseDialog_Params CloseDialog_Params;
	memset(&CloseDialog_Params, 0, sizeof(CloseDialog_Params));
	memcpy_s(&CloseDialog_Params.buttonIdx, sizeof(CloseDialog_Params.buttonIdx), &buttonIdx, sizeof(buttonIdx));

	this->ProcessEvent(uFnCloseDialog, &CloseDialog_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.moveTab
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Side                           (CPF_Parm)

void UOLUIFrontEnd_Options::moveTab(int32_t Side)
{
	static UFunction* uFnmoveTab = nullptr;

	if (!uFnmoveTab)
	{
		uFnmoveTab = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.moveTab");
	}

	UOLUIFrontEnd_Options_execmoveTab_Params moveTab_Params;
	memset(&moveTab_Params, 0, sizeof(moveTab_Params));
	memcpy_s(&moveTab_Params.Side, sizeof(moveTab_Params.Side), &Side, sizeof(Side));

	this->ProcessEvent(uFnmoveTab, &moveTab_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.NotifyAltEnter
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_Options::NotifyAltEnter()
{
	static UFunction* uFnNotifyAltEnter = nullptr;

	if (!uFnNotifyAltEnter)
	{
		uFnNotifyAltEnter = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.NotifyAltEnter");
	}

	UOLUIFrontEnd_Options_execNotifyAltEnter_Params NotifyAltEnter_Params;
	memset(&NotifyAltEnter_Params, 0, sizeof(NotifyAltEnter_Params));

	this->ProcessEvent(uFnNotifyAltEnter, &NotifyAltEnter_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.OnSliderChanged
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ProfileSettingId               (CPF_Parm)
// float                          SliderValue                    (CPF_Parm)

void UOLUIFrontEnd_Options::OnSliderChanged(int32_t ProfileSettingId, float SliderValue)
{
	static UFunction* uFnOnSliderChanged = nullptr;

	if (!uFnOnSliderChanged)
	{
		uFnOnSliderChanged = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.OnSliderChanged");
	}

	UOLUIFrontEnd_Options_execOnSliderChanged_Params OnSliderChanged_Params;
	memset(&OnSliderChanged_Params, 0, sizeof(OnSliderChanged_Params));
	memcpy_s(&OnSliderChanged_Params.ProfileSettingId, sizeof(OnSliderChanged_Params.ProfileSettingId), &ProfileSettingId, sizeof(ProfileSettingId));
	memcpy_s(&OnSliderChanged_Params.SliderValue, sizeof(OnSliderChanged_Params.SliderValue), &SliderValue, sizeof(SliderValue));

	this->ProcessEvent(uFnOnSliderChanged, &OnSliderChanged_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.GetKeyBindingConflicts
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// TArray<class FString>          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

TArray<class FString> UOLUIFrontEnd_Options::GetKeyBindingConflicts()
{
	static UFunction* uFnGetKeyBindingConflicts = nullptr;

	if (!uFnGetKeyBindingConflicts)
	{
		uFnGetKeyBindingConflicts = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.GetKeyBindingConflicts");
	}

	UOLUIFrontEnd_Options_execGetKeyBindingConflicts_Params GetKeyBindingConflicts_Params;
	memset(&GetKeyBindingConflicts_Params, 0, sizeof(GetKeyBindingConflicts_Params));

	this->ProcessEvent(uFnGetKeyBindingConflicts, &GetKeyBindingConflicts_Params, nullptr);

	return GetKeyBindingConflicts_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options.GetCurrentGFxList
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UGFxObject*              ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UGFxObject* UOLUIFrontEnd_Options::GetCurrentGFxList()
{
	static UFunction* uFnGetCurrentGFxList = nullptr;

	if (!uFnGetCurrentGFxList)
	{
		uFnGetCurrentGFxList = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.GetCurrentGFxList");
	}

	UOLUIFrontEnd_Options_execGetCurrentGFxList_Params GetCurrentGFxList_Params;
	memset(&GetCurrentGFxList_Params, 0, sizeof(GetCurrentGFxList_Params));

	this->ProcessEvent(uFnGetCurrentGFxList, &GetCurrentGFxList_Params, nullptr);

	return GetCurrentGFxList_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options.SetGamepadConfigExternally
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ConfigIndex                    (CPF_Parm)

void UOLUIFrontEnd_Options::SetGamepadConfigExternally(int32_t ConfigIndex)
{
	static UFunction* uFnSetGamepadConfigExternally = nullptr;

	if (!uFnSetGamepadConfigExternally)
	{
		uFnSetGamepadConfigExternally = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.SetGamepadConfigExternally");
	}

	UOLUIFrontEnd_Options_execSetGamepadConfigExternally_Params SetGamepadConfigExternally_Params;
	memset(&SetGamepadConfigExternally_Params, 0, sizeof(SetGamepadConfigExternally_Params));
	memcpy_s(&SetGamepadConfigExternally_Params.ConfigIndex, sizeof(SetGamepadConfigExternally_Params.ConfigIndex), &ConfigIndex, sizeof(ConfigIndex));

	this->ProcessEvent(uFnSetGamepadConfigExternally, &SetGamepadConfigExternally_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.GetGamepadConfig
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLUIFrontEnd_Options::GetGamepadConfig()
{
	static UFunction* uFnGetGamepadConfig = nullptr;

	if (!uFnGetGamepadConfig)
	{
		uFnGetGamepadConfig = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.GetGamepadConfig");
	}

	UOLUIFrontEnd_Options_execGetGamepadConfig_Params GetGamepadConfig_Params;
	memset(&GetGamepadConfig_Params, 0, sizeof(GetGamepadConfig_Params));

	this->ProcessEvent(uFnGetGamepadConfig, &GetGamepadConfig_Params, nullptr);

	return GetGamepadConfig_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options.OnKeyBindingCancelled
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_Options::OnKeyBindingCancelled()
{
	static UFunction* uFnOnKeyBindingCancelled = nullptr;

	if (!uFnOnKeyBindingCancelled)
	{
		uFnOnKeyBindingCancelled = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.OnKeyBindingCancelled");
	}

	UOLUIFrontEnd_Options_execOnKeyBindingCancelled_Params OnKeyBindingCancelled_Params;
	memset(&OnKeyBindingCancelled_Params, 0, sizeof(OnKeyBindingCancelled_Params));

	this->ProcessEvent(uFnOnKeyBindingCancelled, &OnKeyBindingCancelled_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.OnKeyBindingCaptured
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FName                   KeyName                        (CPF_Parm)

void UOLUIFrontEnd_Options::OnKeyBindingCaptured(struct FName KeyName)
{
	static UFunction* uFnOnKeyBindingCaptured = nullptr;

	if (!uFnOnKeyBindingCaptured)
	{
		uFnOnKeyBindingCaptured = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.OnKeyBindingCaptured");
	}

	UOLUIFrontEnd_Options_execOnKeyBindingCaptured_Params OnKeyBindingCaptured_Params;
	memset(&OnKeyBindingCaptured_Params, 0, sizeof(OnKeyBindingCaptured_Params));
	memcpy_s(&OnKeyBindingCaptured_Params.KeyName, sizeof(OnKeyBindingCaptured_Params.KeyName), &KeyName, sizeof(KeyName));

	this->ProcessEvent(uFnOnKeyBindingCaptured, &OnKeyBindingCaptured_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.GetBorderlessFullscreenOptionIndex
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLUIFrontEnd_Options::GetBorderlessFullscreenOptionIndex()
{
	static UFunction* uFnGetBorderlessFullscreenOptionIndex = nullptr;

	if (!uFnGetBorderlessFullscreenOptionIndex)
	{
		uFnGetBorderlessFullscreenOptionIndex = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.GetBorderlessFullscreenOptionIndex");
	}

	UOLUIFrontEnd_Options_execGetBorderlessFullscreenOptionIndex_Params GetBorderlessFullscreenOptionIndex_Params;
	memset(&GetBorderlessFullscreenOptionIndex_Params, 0, sizeof(GetBorderlessFullscreenOptionIndex_Params));

	this->ProcessEvent(uFnGetBorderlessFullscreenOptionIndex, &GetBorderlessFullscreenOptionIndex_Params, nullptr);

	return GetBorderlessFullscreenOptionIndex_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options.GetFullscreenOptionIndex
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLUIFrontEnd_Options::GetFullscreenOptionIndex()
{
	static UFunction* uFnGetFullscreenOptionIndex = nullptr;

	if (!uFnGetFullscreenOptionIndex)
	{
		uFnGetFullscreenOptionIndex = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.GetFullscreenOptionIndex");
	}

	UOLUIFrontEnd_Options_execGetFullscreenOptionIndex_Params GetFullscreenOptionIndex_Params;
	memset(&GetFullscreenOptionIndex_Params, 0, sizeof(GetFullscreenOptionIndex_Params));

	this->ProcessEvent(uFnGetFullscreenOptionIndex, &GetFullscreenOptionIndex_Params, nullptr);

	return GetFullscreenOptionIndex_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options.GetResolutionOptionIndex
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLUIFrontEnd_Options::GetResolutionOptionIndex()
{
	static UFunction* uFnGetResolutionOptionIndex = nullptr;

	if (!uFnGetResolutionOptionIndex)
	{
		uFnGetResolutionOptionIndex = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.GetResolutionOptionIndex");
	}

	UOLUIFrontEnd_Options_execGetResolutionOptionIndex_Params GetResolutionOptionIndex_Params;
	memset(&GetResolutionOptionIndex_Params, 0, sizeof(GetResolutionOptionIndex_Params));

	this->ProcessEvent(uFnGetResolutionOptionIndex, &GetResolutionOptionIndex_Params, nullptr);

	return GetResolutionOptionIndex_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options.WidgetInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   WidgetName                     (CPF_Parm)
// struct FName                   WidgetPath                     (CPF_Parm)
// class UGFxObject*              Widget                         (CPF_Parm)

bool UOLUIFrontEnd_Options::eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget)
{
	static UFunction* uFnWidgetInitialized = nullptr;

	if (!uFnWidgetInitialized)
	{
		uFnWidgetInitialized = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.WidgetInitialized");
	}

	UOLUIFrontEnd_Options_eventWidgetInitialized_Params WidgetInitialized_Params;
	memset(&WidgetInitialized_Params, 0, sizeof(WidgetInitialized_Params));
	memcpy_s(&WidgetInitialized_Params.WidgetName, sizeof(WidgetInitialized_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&WidgetInitialized_Params.WidgetPath, sizeof(WidgetInitialized_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));
	memcpy_s(&WidgetInitialized_Params.Widget, sizeof(WidgetInitialized_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnWidgetInitialized, &WidgetInitialized_Params, nullptr);

	return WidgetInitialized_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options.SetSelectionFocus
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UGFxObject*              MovieClip                      (CPF_Parm)

void UOLUIFrontEnd_Options::SetSelectionFocus(class UGFxObject* MovieClip)
{
	static UFunction* uFnSetSelectionFocus = nullptr;

	if (!uFnSetSelectionFocus)
	{
		uFnSetSelectionFocus = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.SetSelectionFocus");
	}

	UOLUIFrontEnd_Options_execSetSelectionFocus_Params SetSelectionFocus_Params;
	memset(&SetSelectionFocus_Params, 0, sizeof(SetSelectionFocus_Params));
	memcpy_s(&SetSelectionFocus_Params.MovieClip, sizeof(SetSelectionFocus_Params.MovieClip), &MovieClip, sizeof(MovieClip));

	this->ProcessEvent(uFnSetSelectionFocus, &SetSelectionFocus_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.GetOLProfile
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UOLProfileSettings*      ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UOLProfileSettings* UOLUIFrontEnd_Options::GetOLProfile()
{
	static UFunction* uFnGetOLProfile = nullptr;

	if (!uFnGetOLProfile)
	{
		uFnGetOLProfile = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.GetOLProfile");
	}

	UOLUIFrontEnd_Options_execGetOLProfile_Params GetOLProfile_Params;
	memset(&GetOLProfile_Params, 0, sizeof(GetOLProfile_Params));

	this->ProcessEvent(uFnGetOLProfile, &GetOLProfile_Params, nullptr);

	return GetOLProfile_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options.SaveSettingsToProfile
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// bool                           bApplyOnly                     (CPF_Parm)

bool UOLUIFrontEnd_Options::SaveSettingsToProfile(bool bApplyOnly)
{
	static UFunction* uFnSaveSettingsToProfile = nullptr;

	if (!uFnSaveSettingsToProfile)
	{
		uFnSaveSettingsToProfile = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.SaveSettingsToProfile");
	}

	UOLUIFrontEnd_Options_execSaveSettingsToProfile_Params SaveSettingsToProfile_Params;
	memset(&SaveSettingsToProfile_Params, 0, sizeof(SaveSettingsToProfile_Params));
	SaveSettingsToProfile_Params.bApplyOnly = bApplyOnly;

	this->ProcessEvent(uFnSaveSettingsToProfile, &SaveSettingsToProfile_Params, nullptr);

	return SaveSettingsToProfile_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options.HasAnyPropertyChanged
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIFrontEnd_Options::HasAnyPropertyChanged()
{
	static UFunction* uFnHasAnyPropertyChanged = nullptr;

	if (!uFnHasAnyPropertyChanged)
	{
		uFnHasAnyPropertyChanged = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.HasAnyPropertyChanged");
	}

	UOLUIFrontEnd_Options_execHasAnyPropertyChanged_Params HasAnyPropertyChanged_Params;
	memset(&HasAnyPropertyChanged_Params, 0, sizeof(HasAnyPropertyChanged_Params));

	this->ProcessEvent(uFnHasAnyPropertyChanged, &HasAnyPropertyChanged_Params, nullptr);

	return HasAnyPropertyChanged_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options.HasPropertyChangedInList
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UGFxObject*              OptionsList                    (CPF_Parm)
// TArray<struct FOptionInfo>     OptionInfos                    (CPF_Parm | CPF_NeedCtorLink)

bool UOLUIFrontEnd_Options::HasPropertyChangedInList(class UGFxObject* OptionsList, TArray<struct FOptionInfo> OptionInfos)
{
	static UFunction* uFnHasPropertyChangedInList = nullptr;

	if (!uFnHasPropertyChangedInList)
	{
		uFnHasPropertyChangedInList = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.HasPropertyChangedInList");
	}

	UOLUIFrontEnd_Options_execHasPropertyChangedInList_Params HasPropertyChangedInList_Params;
	memset(&HasPropertyChangedInList_Params, 0, sizeof(HasPropertyChangedInList_Params));
	memcpy_s(&HasPropertyChangedInList_Params.OptionsList, sizeof(HasPropertyChangedInList_Params.OptionsList), &OptionsList, sizeof(OptionsList));
	memcpy_s(&HasPropertyChangedInList_Params.OptionInfos, sizeof(HasPropertyChangedInList_Params.OptionInfos), &OptionInfos, sizeof(OptionInfos));

	this->ProcessEvent(uFnHasPropertyChangedInList, &HasPropertyChangedInList_Params, nullptr);

	return HasPropertyChangedInList_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options.SaveSettingsForList
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// TArray<struct FOptionInfo>     OptionInfos                    (CPF_Parm | CPF_NeedCtorLink)

bool UOLUIFrontEnd_Options::SaveSettingsForList(TArray<struct FOptionInfo> OptionInfos)
{
	static UFunction* uFnSaveSettingsForList = nullptr;

	if (!uFnSaveSettingsForList)
	{
		uFnSaveSettingsForList = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.SaveSettingsForList");
	}

	UOLUIFrontEnd_Options_execSaveSettingsForList_Params SaveSettingsForList_Params;
	memset(&SaveSettingsForList_Params, 0, sizeof(SaveSettingsForList_Params));
	memcpy_s(&SaveSettingsForList_Params.OptionInfos, sizeof(SaveSettingsForList_Params.OptionInfos), &OptionInfos, sizeof(OptionInfos));

	this->ProcessEvent(uFnSaveSettingsForList, &SaveSettingsForList_Params, nullptr);

	return SaveSettingsForList_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options.TabChanged
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_Options::TabChanged(struct FEventData ev)
{
	static UFunction* uFnTabChanged = nullptr;

	if (!uFnTabChanged)
	{
		uFnTabChanged = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.TabChanged");
	}

	UOLUIFrontEnd_Options_execTabChanged_Params TabChanged_Params;
	memset(&TabChanged_Params, 0, sizeof(TabChanged_Params));
	memcpy_s(&TabChanged_Params.ev, sizeof(TabChanged_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnTabChanged, &TabChanged_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.StoreOptionValuesForList
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class UGFxObject*              OptionsList                    (CPF_Parm)
// TArray<struct FOptionInfo>     OptionInfos                    (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UOLUIFrontEnd_Options::StoreOptionValuesForList(class UGFxObject* OptionsList, TArray<struct FOptionInfo>& OptionInfos)
{
	static UFunction* uFnStoreOptionValuesForList = nullptr;

	if (!uFnStoreOptionValuesForList)
	{
		uFnStoreOptionValuesForList = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.StoreOptionValuesForList");
	}

	UOLUIFrontEnd_Options_execStoreOptionValuesForList_Params StoreOptionValuesForList_Params;
	memset(&StoreOptionValuesForList_Params, 0, sizeof(StoreOptionValuesForList_Params));
	memcpy_s(&StoreOptionValuesForList_Params.OptionsList, sizeof(StoreOptionValuesForList_Params.OptionsList), &OptionsList, sizeof(OptionsList));
	memcpy_s(&StoreOptionValuesForList_Params.OptionInfos, sizeof(StoreOptionValuesForList_Params.OptionInfos), &OptionInfos, sizeof(OptionInfos));

	this->ProcessEvent(uFnStoreOptionValuesForList, &StoreOptionValuesForList_Params, nullptr);

	memcpy_s(&OptionInfos, sizeof(OptionInfos), &StoreOptionValuesForList_Params.OptionInfos, sizeof(StoreOptionValuesForList_Params.OptionInfos));
};

// Function OLGame.OLUIFrontEnd_Options.GetOptionValueStringAt
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class UGFxObject*              OptionsList                    (CPF_Parm)
// int32_t                        Index                          (CPF_Parm)

class FString UOLUIFrontEnd_Options::GetOptionValueStringAt(class UGFxObject* OptionsList, int32_t Index)
{
	static UFunction* uFnGetOptionValueStringAt = nullptr;

	if (!uFnGetOptionValueStringAt)
	{
		uFnGetOptionValueStringAt = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.GetOptionValueStringAt");
	}

	UOLUIFrontEnd_Options_execGetOptionValueStringAt_Params GetOptionValueStringAt_Params;
	memset(&GetOptionValueStringAt_Params, 0, sizeof(GetOptionValueStringAt_Params));
	memcpy_s(&GetOptionValueStringAt_Params.OptionsList, sizeof(GetOptionValueStringAt_Params.OptionsList), &OptionsList, sizeof(OptionsList));
	memcpy_s(&GetOptionValueStringAt_Params.Index, sizeof(GetOptionValueStringAt_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnGetOptionValueStringAt, &GetOptionValueStringAt_Params, nullptr);

	return GetOptionValueStringAt_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options.GetOptionValueAt
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UGFxObject*              OptionsList                    (CPF_Parm)
// int32_t                        Index                          (CPF_Parm)

float UOLUIFrontEnd_Options::GetOptionValueAt(class UGFxObject* OptionsList, int32_t Index)
{
	static UFunction* uFnGetOptionValueAt = nullptr;

	if (!uFnGetOptionValueAt)
	{
		uFnGetOptionValueAt = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.GetOptionValueAt");
	}

	UOLUIFrontEnd_Options_execGetOptionValueAt_Params GetOptionValueAt_Params;
	memset(&GetOptionValueAt_Params, 0, sizeof(GetOptionValueAt_Params));
	memcpy_s(&GetOptionValueAt_Params.OptionsList, sizeof(GetOptionValueAt_Params.OptionsList), &OptionsList, sizeof(OptionsList));
	memcpy_s(&GetOptionValueAt_Params.Index, sizeof(GetOptionValueAt_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnGetOptionValueAt, &GetOptionValueAt_Params, nullptr);

	return GetOptionValueAt_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options.SetDefaultOptionValuesForList
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// TArray<struct FOptionInfo>     OptionInfos                    (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UOLUIFrontEnd_Options::SetDefaultOptionValuesForList(TArray<struct FOptionInfo>& OptionInfos)
{
	static UFunction* uFnSetDefaultOptionValuesForList = nullptr;

	if (!uFnSetDefaultOptionValuesForList)
	{
		uFnSetDefaultOptionValuesForList = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.SetDefaultOptionValuesForList");
	}

	UOLUIFrontEnd_Options_execSetDefaultOptionValuesForList_Params SetDefaultOptionValuesForList_Params;
	memset(&SetDefaultOptionValuesForList_Params, 0, sizeof(SetDefaultOptionValuesForList_Params));
	memcpy_s(&SetDefaultOptionValuesForList_Params.OptionInfos, sizeof(SetDefaultOptionValuesForList_Params.OptionInfos), &OptionInfos, sizeof(OptionInfos));

	this->ProcessEvent(uFnSetDefaultOptionValuesForList, &SetDefaultOptionValuesForList_Params, nullptr);

	memcpy_s(&OptionInfos, sizeof(OptionInfos), &SetDefaultOptionValuesForList_Params.OptionInfos, sizeof(SetDefaultOptionValuesForList_Params.OptionInfos));

	return SetDefaultOptionValuesForList_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options.FillOptionValuesForList
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// TArray<struct FOptionInfo>     OptionInfos                    (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UOLUIFrontEnd_Options::FillOptionValuesForList(TArray<struct FOptionInfo>& OptionInfos)
{
	static UFunction* uFnFillOptionValuesForList = nullptr;

	if (!uFnFillOptionValuesForList)
	{
		uFnFillOptionValuesForList = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.FillOptionValuesForList");
	}

	UOLUIFrontEnd_Options_execFillOptionValuesForList_Params FillOptionValuesForList_Params;
	memset(&FillOptionValuesForList_Params, 0, sizeof(FillOptionValuesForList_Params));
	memcpy_s(&FillOptionValuesForList_Params.OptionInfos, sizeof(FillOptionValuesForList_Params.OptionInfos), &OptionInfos, sizeof(OptionInfos));

	this->ProcessEvent(uFnFillOptionValuesForList, &FillOptionValuesForList_Params, nullptr);

	memcpy_s(&OptionInfos, sizeof(OptionInfos), &FillOptionValuesForList_Params.OptionInfos, sizeof(FillOptionValuesForList_Params.OptionInfos));
};

// Function OLGame.OLUIFrontEnd_Options.FillOptionValuesFromProfile
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_Options::FillOptionValuesFromProfile()
{
	static UFunction* uFnFillOptionValuesFromProfile = nullptr;

	if (!uFnFillOptionValuesFromProfile)
	{
		uFnFillOptionValuesFromProfile = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.FillOptionValuesFromProfile");
	}

	UOLUIFrontEnd_Options_execFillOptionValuesFromProfile_Params FillOptionValuesFromProfile_Params;
	memset(&FillOptionValuesFromProfile_Params, 0, sizeof(FillOptionValuesFromProfile_Params));

	this->ProcessEvent(uFnFillOptionValuesFromProfile, &FillOptionValuesFromProfile_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.PopulateControlsOptions
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_Options::PopulateControlsOptions()
{
	static UFunction* uFnPopulateControlsOptions = nullptr;

	if (!uFnPopulateControlsOptions)
	{
		uFnPopulateControlsOptions = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.PopulateControlsOptions");
	}

	UOLUIFrontEnd_Options_execPopulateControlsOptions_Params PopulateControlsOptions_Params;
	memset(&PopulateControlsOptions_Params, 0, sizeof(PopulateControlsOptions_Params));

	this->ProcessEvent(uFnPopulateControlsOptions, &PopulateControlsOptions_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.PopulateGraphicsOptions
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_Options::PopulateGraphicsOptions()
{
	static UFunction* uFnPopulateGraphicsOptions = nullptr;

	if (!uFnPopulateGraphicsOptions)
	{
		uFnPopulateGraphicsOptions = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.PopulateGraphicsOptions");
	}

	UOLUIFrontEnd_Options_execPopulateGraphicsOptions_Params PopulateGraphicsOptions_Params;
	memset(&PopulateGraphicsOptions_Params, 0, sizeof(PopulateGraphicsOptions_Params));

	this->ProcessEvent(uFnPopulateGraphicsOptions, &PopulateGraphicsOptions_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.PopulateGeneralOptions
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bIgnoreFocus                   (CPF_Parm)

void UOLUIFrontEnd_Options::PopulateGeneralOptions(bool bIgnoreFocus)
{
	static UFunction* uFnPopulateGeneralOptions = nullptr;

	if (!uFnPopulateGeneralOptions)
	{
		uFnPopulateGeneralOptions = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.PopulateGeneralOptions");
	}

	UOLUIFrontEnd_Options_execPopulateGeneralOptions_Params PopulateGeneralOptions_Params;
	memset(&PopulateGeneralOptions_Params, 0, sizeof(PopulateGeneralOptions_Params));
	PopulateGeneralOptions_Params.bIgnoreFocus = bIgnoreFocus;

	this->ProcessEvent(uFnPopulateGeneralOptions, &PopulateGeneralOptions_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.GetLabelTextFromOptionInfo
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// struct FOptionInfo             Info                           (CPF_Parm | CPF_NeedCtorLink)

class FString UOLUIFrontEnd_Options::GetLabelTextFromOptionInfo(struct FOptionInfo Info)
{
	static UFunction* uFnGetLabelTextFromOptionInfo = nullptr;

	if (!uFnGetLabelTextFromOptionInfo)
	{
		uFnGetLabelTextFromOptionInfo = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.GetLabelTextFromOptionInfo");
	}

	UOLUIFrontEnd_Options_execGetLabelTextFromOptionInfo_Params GetLabelTextFromOptionInfo_Params;
	memset(&GetLabelTextFromOptionInfo_Params, 0, sizeof(GetLabelTextFromOptionInfo_Params));
	memcpy_s(&GetLabelTextFromOptionInfo_Params.Info, sizeof(GetLabelTextFromOptionInfo_Params.Info), &Info, sizeof(Info));

	this->ProcessEvent(uFnGetLabelTextFromOptionInfo, &GetLabelTextFromOptionInfo_Params, nullptr);

	return GetLabelTextFromOptionInfo_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options.GetObjectFromOption
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UGFxObject*              ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FOptionInfo             CurrentOptionInfo              (CPF_Parm | CPF_NeedCtorLink)

class UGFxObject* UOLUIFrontEnd_Options::GetObjectFromOptionW(struct FOptionInfo CurrentOptionInfo)
{
	static UFunction* uFnGetObjectFromOptionW = nullptr;

	if (!uFnGetObjectFromOptionW)
	{
		uFnGetObjectFromOptionW = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.GetObjectFromOption");
	}

	UOLUIFrontEnd_Options_execGetObjectFromOptionW_Params GetObjectFromOptionW_Params;
	memset(&GetObjectFromOptionW_Params, 0, sizeof(GetObjectFromOptionW_Params));
	memcpy_s(&GetObjectFromOptionW_Params.CurrentOptionInfo, sizeof(GetObjectFromOptionW_Params.CurrentOptionInfo), &CurrentOptionInfo, sizeof(CurrentOptionInfo));

	this->ProcessEvent(uFnGetObjectFromOptionW, &GetObjectFromOptionW_Params, nullptr);

	return GetObjectFromOptionW_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options.PopulateTabButtons
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_Options::PopulateTabButtons()
{
	static UFunction* uFnPopulateTabButtons = nullptr;

	if (!uFnPopulateTabButtons)
	{
		uFnPopulateTabButtons = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.PopulateTabButtons");
	}

	UOLUIFrontEnd_Options_execPopulateTabButtons_Params PopulateTabButtons_Params;
	memset(&PopulateTabButtons_Params, 0, sizeof(PopulateTabButtons_Params));

	this->ProcessEvent(uFnPopulateTabButtons, &PopulateTabButtons_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.UseInsaneGameplayOptions
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIFrontEnd_Options::UseInsaneGameplayOptions()
{
	static UFunction* uFnUseInsaneGameplayOptions = nullptr;

	if (!uFnUseInsaneGameplayOptions)
	{
		uFnUseInsaneGameplayOptions = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.UseInsaneGameplayOptions");
	}

	UOLUIFrontEnd_Options_execUseInsaneGameplayOptions_Params UseInsaneGameplayOptions_Params;
	memset(&UseInsaneGameplayOptions_Params, 0, sizeof(UseInsaneGameplayOptions_Params));

	this->ProcessEvent(uFnUseInsaneGameplayOptions, &UseInsaneGameplayOptions_Params, nullptr);

	return UseInsaneGameplayOptions_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options.UseMainMenuGameplayOptions
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIFrontEnd_Options::UseMainMenuGameplayOptions()
{
	static UFunction* uFnUseMainMenuGameplayOptions = nullptr;

	if (!uFnUseMainMenuGameplayOptions)
	{
		uFnUseMainMenuGameplayOptions = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.UseMainMenuGameplayOptions");
	}

	UOLUIFrontEnd_Options_execUseMainMenuGameplayOptions_Params UseMainMenuGameplayOptions_Params;
	memset(&UseMainMenuGameplayOptions_Params, 0, sizeof(UseMainMenuGameplayOptions_Params));

	this->ProcessEvent(uFnUseMainMenuGameplayOptions, &UseMainMenuGameplayOptions_Params, nullptr);

	return UseMainMenuGameplayOptions_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options.Press_OptionItemButton
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PSID                           (CPF_Parm)

void UOLUIFrontEnd_Options::Press_OptionItemButton(int32_t PSID)
{
	static UFunction* uFnPress_OptionItemButton = nullptr;

	if (!uFnPress_OptionItemButton)
	{
		uFnPress_OptionItemButton = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.Press_OptionItemButton");
	}

	UOLUIFrontEnd_Options_execPress_OptionItemButton_Params Press_OptionItemButton_Params;
	memset(&Press_OptionItemButton_Params, 0, sizeof(Press_OptionItemButton_Params));
	memcpy_s(&Press_OptionItemButton_Params.PSID, sizeof(Press_OptionItemButton_Params.PSID), &PSID, sizeof(PSID));

	this->ProcessEvent(uFnPress_OptionItemButton, &Press_OptionItemButton_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.Press_Reset
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_Options::Press_Reset(struct FEventData ev)
{
	static UFunction* uFnPress_Reset = nullptr;

	if (!uFnPress_Reset)
	{
		uFnPress_Reset = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.Press_Reset");
	}

	UOLUIFrontEnd_Options_execPress_Reset_Params Press_Reset_Params;
	memset(&Press_Reset_Params, 0, sizeof(Press_Reset_Params));
	memcpy_s(&Press_Reset_Params.ev, sizeof(Press_Reset_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Reset, &Press_Reset_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.Press_Gamma
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_Options::Press_Gamma(struct FEventData ev)
{
	static UFunction* uFnPress_Gamma = nullptr;

	if (!uFnPress_Gamma)
	{
		uFnPress_Gamma = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.Press_Gamma");
	}

	UOLUIFrontEnd_Options_execPress_Gamma_Params Press_Gamma_Params;
	memset(&Press_Gamma_Params, 0, sizeof(Press_Gamma_Params));
	memcpy_s(&Press_Gamma_Params.ev, sizeof(Press_Gamma_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Gamma, &Press_Gamma_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.Press_Back
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_Options::Press_Back(struct FEventData ev)
{
	static UFunction* uFnPress_Back = nullptr;

	if (!uFnPress_Back)
	{
		uFnPress_Back = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.Press_Back");
	}

	UOLUIFrontEnd_Options_execPress_Back_Params Press_Back_Params;
	memset(&Press_Back_Params, 0, sizeof(Press_Back_Params));
	memcpy_s(&Press_Back_Params.ev, sizeof(Press_Back_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Back, &Press_Back_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.OnDiscardChanges
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        bOk                            (CPF_Parm)

void UOLUIFrontEnd_Options::OnDiscardChanges(int32_t bOk)
{
	static UFunction* uFnOnDiscardChanges = nullptr;

	if (!uFnOnDiscardChanges)
	{
		uFnOnDiscardChanges = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.OnDiscardChanges");
	}

	UOLUIFrontEnd_Options_execOnDiscardChanges_Params OnDiscardChanges_Params;
	memset(&OnDiscardChanges_Params, 0, sizeof(OnDiscardChanges_Params));
	memcpy_s(&OnDiscardChanges_Params.bOk, sizeof(OnDiscardChanges_Params.bOk), &bOk, sizeof(bOk));

	this->ProcessEvent(uFnOnDiscardChanges, &OnDiscardChanges_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.OnDismissKeyBindingConflictDialog
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bOk                            (CPF_Parm)

void UOLUIFrontEnd_Options::OnDismissKeyBindingConflictDialog(bool bOk)
{
	static UFunction* uFnOnDismissKeyBindingConflictDialog = nullptr;

	if (!uFnOnDismissKeyBindingConflictDialog)
	{
		uFnOnDismissKeyBindingConflictDialog = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.OnDismissKeyBindingConflictDialog");
	}

	UOLUIFrontEnd_Options_execOnDismissKeyBindingConflictDialog_Params OnDismissKeyBindingConflictDialog_Params;
	memset(&OnDismissKeyBindingConflictDialog_Params, 0, sizeof(OnDismissKeyBindingConflictDialog_Params));
	OnDismissKeyBindingConflictDialog_Params.bOk = bOk;

	this->ProcessEvent(uFnOnDismissKeyBindingConflictDialog, &OnDismissKeyBindingConflictDialog_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.Press_Apply
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_Options::Press_Apply(struct FEventData ev)
{
	static UFunction* uFnPress_Apply = nullptr;

	if (!uFnPress_Apply)
	{
		uFnPress_Apply = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.Press_Apply");
	}

	UOLUIFrontEnd_Options_execPress_Apply_Params Press_Apply_Params;
	memset(&Press_Apply_Params, 0, sizeof(Press_Apply_Params));
	memcpy_s(&Press_Apply_Params.ev, sizeof(Press_Apply_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Apply, &Press_Apply_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.OnMustRestartAccepted
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_Options::OnMustRestartAccepted()
{
	static UFunction* uFnOnMustRestartAccepted = nullptr;

	if (!uFnOnMustRestartAccepted)
	{
		uFnOnMustRestartAccepted = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.OnMustRestartAccepted");
	}

	UOLUIFrontEnd_Options_execOnMustRestartAccepted_Params OnMustRestartAccepted_Params;
	memset(&OnMustRestartAccepted_Params, 0, sizeof(OnMustRestartAccepted_Params));

	this->ProcessEvent(uFnOnMustRestartAccepted, &OnMustRestartAccepted_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.ExitOptionsScreen
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_Options::ExitOptionsScreen()
{
	static UFunction* uFnExitOptionsScreen = nullptr;

	if (!uFnExitOptionsScreen)
	{
		uFnExitOptionsScreen = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.ExitOptionsScreen");
	}

	UOLUIFrontEnd_Options_execExitOptionsScreen_Params ExitOptionsScreen_Params;
	memset(&ExitOptionsScreen_Params, 0, sizeof(ExitOptionsScreen_Params));

	this->ProcessEvent(uFnExitOptionsScreen, &ExitOptionsScreen_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.back
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIFrontEnd_Options::back()
{
	static UFunction* uFnback = nullptr;

	if (!uFnback)
	{
		uFnback = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.back");
	}

	UOLUIFrontEnd_Options_execback_Params back_Params;
	memset(&back_Params, 0, sizeof(back_Params));

	this->ProcessEvent(uFnback, &back_Params, nullptr);

	return back_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options.OnTopMostView
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bPlayOpenAnimation             (CPF_OptionalParm | CPF_Parm)

void UOLUIFrontEnd_Options::OnTopMostView(bool bPlayOpenAnimation)
{
	static UFunction* uFnOnTopMostView = nullptr;

	if (!uFnOnTopMostView)
	{
		uFnOnTopMostView = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.OnTopMostView");
	}

	UOLUIFrontEnd_Options_execOnTopMostView_Params OnTopMostView_Params;
	memset(&OnTopMostView_Params, 0, sizeof(OnTopMostView_Params));
	OnTopMostView_Params.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent(uFnOnTopMostView, &OnTopMostView_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.OnViewDeactivated
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_Options::OnViewDeactivated()
{
	static UFunction* uFnOnViewDeactivated = nullptr;

	if (!uFnOnViewDeactivated)
	{
		uFnOnViewDeactivated = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.OnViewDeactivated");
	}

	UOLUIFrontEnd_Options_execOnViewDeactivated_Params OnViewDeactivated_Params;
	memset(&OnViewDeactivated_Params, 0, sizeof(OnViewDeactivated_Params));

	this->ProcessEvent(uFnOnViewDeactivated, &OnViewDeactivated_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.OnViewActivated
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_Options::OnViewActivated()
{
	static UFunction* uFnOnViewActivated = nullptr;

	if (!uFnOnViewActivated)
	{
		uFnOnViewActivated = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.OnViewActivated");
	}

	UOLUIFrontEnd_Options_execOnViewActivated_Params OnViewActivated_Params;
	memset(&OnViewActivated_Params, 0, sizeof(OnViewActivated_Params));

	this->ProcessEvent(uFnOnViewActivated, &OnViewActivated_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options.OnViewLoaded
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_Options::OnViewLoaded()
{
	static UFunction* uFnOnViewLoaded = nullptr;

	if (!uFnOnViewLoaded)
	{
		uFnOnViewLoaded = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options.OnViewLoaded");
	}

	UOLUIFrontEnd_Options_execOnViewLoaded_Params OnViewLoaded_Params;
	memset(&OnViewLoaded_Params, 0, sizeof(OnViewLoaded_Params));

	this->ProcessEvent(uFnOnViewLoaded, &OnViewLoaded_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.WidgetInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   WidgetName                     (CPF_Parm)
// struct FName                   WidgetPath                     (CPF_Parm)
// class UGFxObject*              Widget                         (CPF_Parm)

bool UOLUIFrontEnd_SaveLocationList::eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget)
{
	static UFunction* uFnWidgetInitialized = nullptr;

	if (!uFnWidgetInitialized)
	{
		uFnWidgetInitialized = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.WidgetInitialized");
	}

	UOLUIFrontEnd_SaveLocationList_eventWidgetInitialized_Params WidgetInitialized_Params;
	memset(&WidgetInitialized_Params, 0, sizeof(WidgetInitialized_Params));
	memcpy_s(&WidgetInitialized_Params.WidgetName, sizeof(WidgetInitialized_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&WidgetInitialized_Params.WidgetPath, sizeof(WidgetInitialized_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));
	memcpy_s(&WidgetInitialized_Params.Widget, sizeof(WidgetInitialized_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnWidgetInitialized, &WidgetInitialized_Params, nullptr);

	return WidgetInitialized_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.SetupActionButtonString
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_SaveLocationList::SetupActionButtonString()
{
	static UFunction* uFnSetupActionButtonString = nullptr;

	if (!uFnSetupActionButtonString)
	{
		uFnSetupActionButtonString = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.SetupActionButtonString");
	}

	UOLUIFrontEnd_SaveLocationList_execSetupActionButtonString_Params SetupActionButtonString_Params;
	memset(&SetupActionButtonString_Params, 0, sizeof(SetupActionButtonString_Params));

	this->ProcessEvent(uFnSetupActionButtonString, &SetupActionButtonString_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.GetHighlightedIndex
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// bool                           bAllowSelectedIndex            (CPF_Parm)

int32_t UOLUIFrontEnd_SaveLocationList::GetHighlightedIndex(bool bAllowSelectedIndex)
{
	static UFunction* uFnGetHighlightedIndex = nullptr;

	if (!uFnGetHighlightedIndex)
	{
		uFnGetHighlightedIndex = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.GetHighlightedIndex");
	}

	UOLUIFrontEnd_SaveLocationList_execGetHighlightedIndex_Params GetHighlightedIndex_Params;
	memset(&GetHighlightedIndex_Params, 0, sizeof(GetHighlightedIndex_Params));
	GetHighlightedIndex_Params.bAllowSelectedIndex = bAllowSelectedIndex;

	this->ProcessEvent(uFnGetHighlightedIndex, &GetHighlightedIndex_Params, nullptr);

	return GetHighlightedIndex_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.ASTraceFocus
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_SaveLocationList::ASTraceFocus()
{
	static UFunction* uFnASTraceFocus = nullptr;

	if (!uFnASTraceFocus)
	{
		uFnASTraceFocus = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.ASTraceFocus");
	}

	UOLUIFrontEnd_SaveLocationList_execASTraceFocus_Params ASTraceFocus_Params;
	memset(&ASTraceFocus_Params, 0, sizeof(ASTraceFocus_Params));

	this->ProcessEvent(uFnASTraceFocus, &ASTraceFocus_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.ASInitButtonFocus
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_SaveLocationList::ASInitButtonFocus()
{
	static UFunction* uFnASInitButtonFocus = nullptr;

	if (!uFnASInitButtonFocus)
	{
		uFnASInitButtonFocus = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.ASInitButtonFocus");
	}

	UOLUIFrontEnd_SaveLocationList_execASInitButtonFocus_Params ASInitButtonFocus_Params;
	memset(&ASInitButtonFocus_Params, 0, sizeof(ASInitButtonFocus_Params));

	this->ProcessEvent(uFnASInitButtonFocus, &ASInitButtonFocus_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.ASShowConfirmDialog
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class FString                  Title                          (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Message                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  okButtonLabel                  (CPF_Parm | CPF_NeedCtorLink)
// class FString                  cancelButtonLabel              (CPF_Parm | CPF_NeedCtorLink)
// class FString                  callbackName                   (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_SaveLocationList::ASShowConfirmDialog(class FString Title, class FString Message, class FString okButtonLabel, class FString cancelButtonLabel, class FString callbackName)
{
	static UFunction* uFnASShowConfirmDialog = nullptr;

	if (!uFnASShowConfirmDialog)
	{
		uFnASShowConfirmDialog = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.ASShowConfirmDialog");
	}

	UOLUIFrontEnd_SaveLocationList_execASShowConfirmDialog_Params ASShowConfirmDialog_Params;
	memset(&ASShowConfirmDialog_Params, 0, sizeof(ASShowConfirmDialog_Params));
	memcpy_s(&ASShowConfirmDialog_Params.Title, sizeof(ASShowConfirmDialog_Params.Title), &Title, sizeof(Title));
	memcpy_s(&ASShowConfirmDialog_Params.Message, sizeof(ASShowConfirmDialog_Params.Message), &Message, sizeof(Message));
	memcpy_s(&ASShowConfirmDialog_Params.okButtonLabel, sizeof(ASShowConfirmDialog_Params.okButtonLabel), &okButtonLabel, sizeof(okButtonLabel));
	memcpy_s(&ASShowConfirmDialog_Params.cancelButtonLabel, sizeof(ASShowConfirmDialog_Params.cancelButtonLabel), &cancelButtonLabel, sizeof(cancelButtonLabel));
	memcpy_s(&ASShowConfirmDialog_Params.callbackName, sizeof(ASShowConfirmDialog_Params.callbackName), &callbackName, sizeof(callbackName));

	this->ProcessEvent(uFnASShowConfirmDialog, &ASShowConfirmDialog_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.ShowMessageDialog
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class FString                  Title                          (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Message                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  okButtonLabel                  (CPF_Parm | CPF_NeedCtorLink)
// class FString                  callbackName                   (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_SaveLocationList::ShowMessageDialog(class FString Title, class FString Message, class FString okButtonLabel, class FString callbackName)
{
	static UFunction* uFnShowMessageDialog = nullptr;

	if (!uFnShowMessageDialog)
	{
		uFnShowMessageDialog = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.ShowMessageDialog");
	}

	UOLUIFrontEnd_SaveLocationList_execShowMessageDialog_Params ShowMessageDialog_Params;
	memset(&ShowMessageDialog_Params, 0, sizeof(ShowMessageDialog_Params));
	memcpy_s(&ShowMessageDialog_Params.Title, sizeof(ShowMessageDialog_Params.Title), &Title, sizeof(Title));
	memcpy_s(&ShowMessageDialog_Params.Message, sizeof(ShowMessageDialog_Params.Message), &Message, sizeof(Message));
	memcpy_s(&ShowMessageDialog_Params.okButtonLabel, sizeof(ShowMessageDialog_Params.okButtonLabel), &okButtonLabel, sizeof(okButtonLabel));
	memcpy_s(&ShowMessageDialog_Params.callbackName, sizeof(ShowMessageDialog_Params.callbackName), &callbackName, sizeof(callbackName));

	this->ProcessEvent(uFnShowMessageDialog, &ShowMessageDialog_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.back
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIFrontEnd_SaveLocationList::back()
{
	static UFunction* uFnback = nullptr;

	if (!uFnback)
	{
		uFnback = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.back");
	}

	UOLUIFrontEnd_SaveLocationList_execback_Params back_Params;
	memset(&back_Params, 0, sizeof(back_Params));

	this->ProcessEvent(uFnback, &back_Params, nullptr);

	return back_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.Press_Back
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_SaveLocationList::Press_Back(struct FEventData ev)
{
	static UFunction* uFnPress_Back = nullptr;

	if (!uFnPress_Back)
	{
		uFnPress_Back = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.Press_Back");
	}

	UOLUIFrontEnd_SaveLocationList_execPress_Back_Params Press_Back_Params;
	memset(&Press_Back_Params, 0, sizeof(Press_Back_Params));
	memcpy_s(&Press_Back_Params.ev, sizeof(Press_Back_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Back, &Press_Back_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.FilterButtonInput
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// struct FName                   ButtonName                     (CPF_Parm)
// EInputEvent                    InputEvent                     (CPF_Parm)

bool UOLUIFrontEnd_SaveLocationList::eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent)
{
	static UFunction* uFnFilterButtonInput = nullptr;

	if (!uFnFilterButtonInput)
	{
		uFnFilterButtonInput = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.FilterButtonInput");
	}

	UOLUIFrontEnd_SaveLocationList_eventFilterButtonInput_Params FilterButtonInput_Params;
	memset(&FilterButtonInput_Params, 0, sizeof(FilterButtonInput_Params));
	memcpy_s(&FilterButtonInput_Params.ControllerId, sizeof(FilterButtonInput_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&FilterButtonInput_Params.ButtonName, sizeof(FilterButtonInput_Params.ButtonName), &ButtonName, sizeof(ButtonName));
	memcpy_s(&FilterButtonInput_Params.InputEvent, sizeof(FilterButtonInput_Params.InputEvent), &InputEvent, sizeof(InputEvent));

	this->ProcessEvent(uFnFilterButtonInput, &FilterButtonInput_Params, nullptr);

	return FilterButtonInput_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.ReloadScreen
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_SaveLocationList::ReloadScreen()
{
	static UFunction* uFnReloadScreen = nullptr;

	if (!uFnReloadScreen)
	{
		uFnReloadScreen = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.ReloadScreen");
	}

	UOLUIFrontEnd_SaveLocationList_execReloadScreen_Params ReloadScreen_Params;
	memset(&ReloadScreen_Params, 0, sizeof(ReloadScreen_Params));

	this->ProcessEvent(uFnReloadScreen, &ReloadScreen_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.OnConfirmedDelete
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bOk                            (CPF_Parm)

void UOLUIFrontEnd_SaveLocationList::OnConfirmedDelete(bool bOk)
{
	static UFunction* uFnOnConfirmedDelete = nullptr;

	if (!uFnOnConfirmedDelete)
	{
		uFnOnConfirmedDelete = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.OnConfirmedDelete");
	}

	UOLUIFrontEnd_SaveLocationList_execOnConfirmedDelete_Params OnConfirmedDelete_Params;
	memset(&OnConfirmedDelete_Params, 0, sizeof(OnConfirmedDelete_Params));
	OnConfirmedDelete_Params.bOk = bOk;

	this->ProcessEvent(uFnOnConfirmedDelete, &OnConfirmedDelete_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.OnConfirmedOverwrite
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bOk                            (CPF_Parm)

void UOLUIFrontEnd_SaveLocationList::OnConfirmedOverwrite(bool bOk)
{
	static UFunction* uFnOnConfirmedOverwrite = nullptr;

	if (!uFnOnConfirmedOverwrite)
	{
		uFnOnConfirmedOverwrite = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.OnConfirmedOverwrite");
	}

	UOLUIFrontEnd_SaveLocationList_execOnConfirmedOverwrite_Params OnConfirmedOverwrite_Params;
	memset(&OnConfirmedOverwrite_Params, 0, sizeof(OnConfirmedOverwrite_Params));
	OnConfirmedOverwrite_Params.bOk = bOk;

	this->ProcessEvent(uFnOnConfirmedOverwrite, &OnConfirmedOverwrite_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.OnMessageDialogAcknowledged
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_SaveLocationList::OnMessageDialogAcknowledged()
{
	static UFunction* uFnOnMessageDialogAcknowledged = nullptr;

	if (!uFnOnMessageDialogAcknowledged)
	{
		uFnOnMessageDialogAcknowledged = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.OnMessageDialogAcknowledged");
	}

	UOLUIFrontEnd_SaveLocationList_execOnMessageDialogAcknowledged_Params OnMessageDialogAcknowledged_Params;
	memset(&OnMessageDialogAcknowledged_Params, 0, sizeof(OnMessageDialogAcknowledged_Params));

	this->ProcessEvent(uFnOnMessageDialogAcknowledged, &OnMessageDialogAcknowledged_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.ShowContentNotAvailaible
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_SaveLocationList::ShowContentNotAvailaible()
{
	static UFunction* uFnShowContentNotAvailaible = nullptr;

	if (!uFnShowContentNotAvailaible)
	{
		uFnShowContentNotAvailaible = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.ShowContentNotAvailaible");
	}

	UOLUIFrontEnd_SaveLocationList_execShowContentNotAvailaible_Params ShowContentNotAvailaible_Params;
	memset(&ShowContentNotAvailaible_Params, 0, sizeof(ShowContentNotAvailaible_Params));

	this->ProcessEvent(uFnShowContentNotAvailaible, &ShowContentNotAvailaible_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.ShowBadCheckpointMsg
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_SaveLocationList::ShowBadCheckpointMsg()
{
	static UFunction* uFnShowBadCheckpointMsg = nullptr;

	if (!uFnShowBadCheckpointMsg)
	{
		uFnShowBadCheckpointMsg = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.ShowBadCheckpointMsg");
	}

	UOLUIFrontEnd_SaveLocationList_execShowBadCheckpointMsg_Params ShowBadCheckpointMsg_Params;
	memset(&ShowBadCheckpointMsg_Params, 0, sizeof(ShowBadCheckpointMsg_Params));

	this->ProcessEvent(uFnShowBadCheckpointMsg, &ShowBadCheckpointMsg_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.OnButtonClick
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_SaveLocationList::OnButtonClick(struct FEventData ev)
{
	static UFunction* uFnOnButtonClick = nullptr;

	if (!uFnOnButtonClick)
	{
		uFnOnButtonClick = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.OnButtonClick");
	}

	UOLUIFrontEnd_SaveLocationList_execOnButtonClick_Params OnButtonClick_Params;
	memset(&OnButtonClick_Params, 0, sizeof(OnButtonClick_Params));
	memcpy_s(&OnButtonClick_Params.ev, sizeof(OnButtonClick_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnOnButtonClick, &OnButtonClick_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.ResetFocus
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// int32_t                        focusIndex                     (CPF_Parm)

void UOLUIFrontEnd_SaveLocationList::ResetFocus(int32_t focusIndex)
{
	static UFunction* uFnResetFocus = nullptr;

	if (!uFnResetFocus)
	{
		uFnResetFocus = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.ResetFocus");
	}

	UOLUIFrontEnd_SaveLocationList_execResetFocus_Params ResetFocus_Params;
	memset(&ResetFocus_Params, 0, sizeof(ResetFocus_Params));
	memcpy_s(&ResetFocus_Params.focusIndex, sizeof(ResetFocus_Params.focusIndex), &focusIndex, sizeof(focusIndex));

	this->ProcessEvent(uFnResetFocus, &ResetFocus_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.PopulateSaves
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_SaveLocationList::PopulateSaves()
{
	static UFunction* uFnPopulateSaves = nullptr;

	if (!uFnPopulateSaves)
	{
		uFnPopulateSaves = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.PopulateSaves");
	}

	UOLUIFrontEnd_SaveLocationList_execPopulateSaves_Params PopulateSaves_Params;
	memset(&PopulateSaves_Params, 0, sizeof(PopulateSaves_Params));

	this->ProcessEvent(uFnPopulateSaves, &PopulateSaves_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.GetSaveFileDisplayName
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// struct FSaveFileInfo           SaveFile                       (CPF_Parm | CPF_NeedCtorLink)

class FString UOLUIFrontEnd_SaveLocationList::GetSaveFileDisplayName(struct FSaveFileInfo SaveFile)
{
	static UFunction* uFnGetSaveFileDisplayName = nullptr;

	if (!uFnGetSaveFileDisplayName)
	{
		uFnGetSaveFileDisplayName = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.GetSaveFileDisplayName");
	}

	UOLUIFrontEnd_SaveLocationList_execGetSaveFileDisplayName_Params GetSaveFileDisplayName_Params;
	memset(&GetSaveFileDisplayName_Params, 0, sizeof(GetSaveFileDisplayName_Params));
	memcpy_s(&GetSaveFileDisplayName_Params.SaveFile, sizeof(GetSaveFileDisplayName_Params.SaveFile), &SaveFile, sizeof(SaveFile));

	this->ProcessEvent(uFnGetSaveFileDisplayName, &GetSaveFileDisplayName_Params, nullptr);

	return GetSaveFileDisplayName_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.GetDifficultyStr
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// int32_t                        Difficulty                     (CPF_Parm)

class FString UOLUIFrontEnd_SaveLocationList::GetDifficultyStr(int32_t Difficulty)
{
	static UFunction* uFnGetDifficultyStr = nullptr;

	if (!uFnGetDifficultyStr)
	{
		uFnGetDifficultyStr = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.GetDifficultyStr");
	}

	UOLUIFrontEnd_SaveLocationList_execGetDifficultyStr_Params GetDifficultyStr_Params;
	memset(&GetDifficultyStr_Params, 0, sizeof(GetDifficultyStr_Params));
	memcpy_s(&GetDifficultyStr_Params.Difficulty, sizeof(GetDifficultyStr_Params.Difficulty), &Difficulty, sizeof(Difficulty));

	this->ProcessEvent(uFnGetDifficultyStr, &GetDifficultyStr_Params, nullptr);

	return GetDifficultyStr_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.Pop
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_SaveLocationList::Pop()
{
	static UFunction* uFnPop = nullptr;

	if (!uFnPop)
	{
		uFnPop = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.Pop");
	}

	UOLUIFrontEnd_SaveLocationList_execPop_Params Pop_Params;
	memset(&Pop_Params, 0, sizeof(Pop_Params));

	this->ProcessEvent(uFnPop, &Pop_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.InputTypeChanged
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_SaveLocationList::eventInputTypeChanged()
{
	static UFunction* uFnInputTypeChanged = nullptr;

	if (!uFnInputTypeChanged)
	{
		uFnInputTypeChanged = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.InputTypeChanged");
	}

	UOLUIFrontEnd_SaveLocationList_eventInputTypeChanged_Params InputTypeChanged_Params;
	memset(&InputTypeChanged_Params, 0, sizeof(InputTypeChanged_Params));

	this->ProcessEvent(uFnInputTypeChanged, &InputTypeChanged_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.OnViewDeactivated
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_SaveLocationList::OnViewDeactivated()
{
	static UFunction* uFnOnViewDeactivated = nullptr;

	if (!uFnOnViewDeactivated)
	{
		uFnOnViewDeactivated = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.OnViewDeactivated");
	}

	UOLUIFrontEnd_SaveLocationList_execOnViewDeactivated_Params OnViewDeactivated_Params;
	memset(&OnViewDeactivated_Params, 0, sizeof(OnViewDeactivated_Params));

	this->ProcessEvent(uFnOnViewDeactivated, &OnViewDeactivated_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.OnTopMostView
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bPlayOpenAnimation             (CPF_OptionalParm | CPF_Parm)

void UOLUIFrontEnd_SaveLocationList::OnTopMostView(bool bPlayOpenAnimation)
{
	static UFunction* uFnOnTopMostView = nullptr;

	if (!uFnOnTopMostView)
	{
		uFnOnTopMostView = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.OnTopMostView");
	}

	UOLUIFrontEnd_SaveLocationList_execOnTopMostView_Params OnTopMostView_Params;
	memset(&OnTopMostView_Params, 0, sizeof(OnTopMostView_Params));
	OnTopMostView_Params.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent(uFnOnTopMostView, &OnTopMostView_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.selectConsole
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Console                        (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_SaveLocationList::selectConsole(class FString Console)
{
	static UFunction* uFnselectConsole = nullptr;

	if (!uFnselectConsole)
	{
		uFnselectConsole = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.selectConsole");
	}

	UOLUIFrontEnd_SaveLocationList_execselectConsole_Params selectConsole_Params;
	memset(&selectConsole_Params, 0, sizeof(selectConsole_Params));
	memcpy_s(&selectConsole_Params.Console, sizeof(selectConsole_Params.Console), &Console, sizeof(Console));

	this->ProcessEvent(uFnselectConsole, &selectConsole_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.OnViewLoaded
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_SaveLocationList::OnViewLoaded()
{
	static UFunction* uFnOnViewLoaded = nullptr;

	if (!uFnOnViewLoaded)
	{
		uFnOnViewLoaded = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.OnViewLoaded");
	}

	UOLUIFrontEnd_SaveLocationList_execOnViewLoaded_Params OnViewLoaded_Params;
	memset(&OnViewLoaded_Params, 0, sizeof(OnViewLoaded_Params));

	this->ProcessEvent(uFnOnViewLoaded, &OnViewLoaded_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_SaveLocationList.TrySkipScreen
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  StartCPName                    (CPF_Parm | CPF_NeedCtorLink)

bool UOLUIFrontEnd_SaveLocationList::TrySkipScreen(class FString StartCPName)
{
	static UFunction* uFnTrySkipScreen = nullptr;

	if (!uFnTrySkipScreen)
	{
		uFnTrySkipScreen = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_SaveLocationList.TrySkipScreen");
	}

	UOLUIFrontEnd_SaveLocationList_execTrySkipScreen_Params TrySkipScreen_Params;
	memset(&TrySkipScreen_Params, 0, sizeof(TrySkipScreen_Params));
	memcpy_s(&TrySkipScreen_Params.StartCPName, sizeof(TrySkipScreen_Params.StartCPName), &StartCPName, sizeof(StartCPName));

	this->ProcessEvent(uFnTrySkipScreen, &TrySkipScreen_Params, nullptr);

	return TrySkipScreen_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_PausedPrompt.SetMessage
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Message                        (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_PausedPrompt::SetMessage(class FString Message)
{
	static UFunction* uFnSetMessage = nullptr;

	if (!uFnSetMessage)
	{
		uFnSetMessage = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_PausedPrompt.SetMessage");
	}

	UOLUIFrontEnd_PausedPrompt_execSetMessage_Params SetMessage_Params;
	memset(&SetMessage_Params, 0, sizeof(SetMessage_Params));
	memcpy_s(&SetMessage_Params.Message, sizeof(SetMessage_Params.Message), &Message, sizeof(Message));

	this->ProcessEvent(uFnSetMessage, &SetMessage_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_PausedPrompt.FilterButtonInput
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// struct FName                   ButtonName                     (CPF_Parm)
// EInputEvent                    InputEvent                     (CPF_Parm)

bool UOLUIFrontEnd_PausedPrompt::eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent)
{
	static UFunction* uFnFilterButtonInput = nullptr;

	if (!uFnFilterButtonInput)
	{
		uFnFilterButtonInput = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_PausedPrompt.FilterButtonInput");
	}

	UOLUIFrontEnd_PausedPrompt_eventFilterButtonInput_Params FilterButtonInput_Params;
	memset(&FilterButtonInput_Params, 0, sizeof(FilterButtonInput_Params));
	memcpy_s(&FilterButtonInput_Params.ControllerId, sizeof(FilterButtonInput_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&FilterButtonInput_Params.ButtonName, sizeof(FilterButtonInput_Params.ButtonName), &ButtonName, sizeof(ButtonName));
	memcpy_s(&FilterButtonInput_Params.InputEvent, sizeof(FilterButtonInput_Params.InputEvent), &InputEvent, sizeof(InputEvent));

	this->ProcessEvent(uFnFilterButtonInput, &FilterButtonInput_Params, nullptr);

	return FilterButtonInput_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_PausedPrompt.OnPressContinue
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ControllerId                   (CPF_Parm)

void UOLUIFrontEnd_PausedPrompt::OnPressContinue(int32_t ControllerId)
{
	static UFunction* uFnOnPressContinue = nullptr;

	if (!uFnOnPressContinue)
	{
		uFnOnPressContinue = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_PausedPrompt.OnPressContinue");
	}

	UOLUIFrontEnd_PausedPrompt_execOnPressContinue_Params OnPressContinue_Params;
	memset(&OnPressContinue_Params, 0, sizeof(OnPressContinue_Params));
	memcpy_s(&OnPressContinue_Params.ControllerId, sizeof(OnPressContinue_Params.ControllerId), &ControllerId, sizeof(ControllerId));

	this->ProcessEvent(uFnOnPressContinue, &OnPressContinue_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_PausedPrompt.OnTopMostView
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bPlayOpenAnimation             (CPF_OptionalParm | CPF_Parm)

void UOLUIFrontEnd_PausedPrompt::OnTopMostView(bool bPlayOpenAnimation)
{
	static UFunction* uFnOnTopMostView = nullptr;

	if (!uFnOnTopMostView)
	{
		uFnOnTopMostView = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_PausedPrompt.OnTopMostView");
	}

	UOLUIFrontEnd_PausedPrompt_execOnTopMostView_Params OnTopMostView_Params;
	memset(&OnTopMostView_Params, 0, sizeof(OnTopMostView_Params));
	OnTopMostView_Params.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent(uFnOnTopMostView, &OnTopMostView_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_PausedPrompt.OnViewLoaded
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_PausedPrompt::OnViewLoaded()
{
	static UFunction* uFnOnViewLoaded = nullptr;

	if (!uFnOnViewLoaded)
	{
		uFnOnViewLoaded = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_PausedPrompt.OnViewLoaded");
	}

	UOLUIFrontEnd_PausedPrompt_execOnViewLoaded_Params OnViewLoaded_Params;
	memset(&OnViewLoaded_Params, 0, sizeof(OnViewLoaded_Params));

	this->ProcessEvent(uFnOnViewLoaded, &OnViewLoaded_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_PauseMenu.FilterButtonInput
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// struct FName                   ButtonName                     (CPF_Parm)
// EInputEvent                    InputEvent                     (CPF_Parm)

bool UOLUIFrontEnd_PauseMenu::eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent)
{
	static UFunction* uFnFilterButtonInput = nullptr;

	if (!uFnFilterButtonInput)
	{
		uFnFilterButtonInput = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_PauseMenu.FilterButtonInput");
	}

	UOLUIFrontEnd_PauseMenu_eventFilterButtonInput_Params FilterButtonInput_Params;
	memset(&FilterButtonInput_Params, 0, sizeof(FilterButtonInput_Params));
	memcpy_s(&FilterButtonInput_Params.ControllerId, sizeof(FilterButtonInput_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&FilterButtonInput_Params.ButtonName, sizeof(FilterButtonInput_Params.ButtonName), &ButtonName, sizeof(ButtonName));
	memcpy_s(&FilterButtonInput_Params.InputEvent, sizeof(FilterButtonInput_Params.InputEvent), &InputEvent, sizeof(InputEvent));

	this->ProcessEvent(uFnFilterButtonInput, &FilterButtonInput_Params, nullptr);

	return FilterButtonInput_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_PauseMenu.WidgetInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   WidgetName                     (CPF_Parm)
// struct FName                   WidgetPath                     (CPF_Parm)
// class UGFxObject*              Widget                         (CPF_Parm)

bool UOLUIFrontEnd_PauseMenu::eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget)
{
	static UFunction* uFnWidgetInitialized = nullptr;

	if (!uFnWidgetInitialized)
	{
		uFnWidgetInitialized = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_PauseMenu.WidgetInitialized");
	}

	UOLUIFrontEnd_PauseMenu_eventWidgetInitialized_Params WidgetInitialized_Params;
	memset(&WidgetInitialized_Params, 0, sizeof(WidgetInitialized_Params));
	memcpy_s(&WidgetInitialized_Params.WidgetName, sizeof(WidgetInitialized_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&WidgetInitialized_Params.WidgetPath, sizeof(WidgetInitialized_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));
	memcpy_s(&WidgetInitialized_Params.Widget, sizeof(WidgetInitialized_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnWidgetInitialized, &WidgetInitialized_Params, nullptr);

	return WidgetInitialized_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_PauseMenu.Tick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void UOLUIFrontEnd_PauseMenu::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_PauseMenu.Tick");
	}

	UOLUIFrontEnd_PauseMenu_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_PauseMenu.ASShowConfirmExitDialog
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class FString                  Title                          (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Message                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  okButtonLabel                  (CPF_Parm | CPF_NeedCtorLink)
// class FString                  cancelButtonLabel              (CPF_Parm | CPF_NeedCtorLink)
// class FString                  callbackName                   (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_PauseMenu::ASShowConfirmExitDialog(class FString Title, class FString Message, class FString okButtonLabel, class FString cancelButtonLabel, class FString callbackName)
{
	static UFunction* uFnASShowConfirmExitDialog = nullptr;

	if (!uFnASShowConfirmExitDialog)
	{
		uFnASShowConfirmExitDialog = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_PauseMenu.ASShowConfirmExitDialog");
	}

	UOLUIFrontEnd_PauseMenu_execASShowConfirmExitDialog_Params ASShowConfirmExitDialog_Params;
	memset(&ASShowConfirmExitDialog_Params, 0, sizeof(ASShowConfirmExitDialog_Params));
	memcpy_s(&ASShowConfirmExitDialog_Params.Title, sizeof(ASShowConfirmExitDialog_Params.Title), &Title, sizeof(Title));
	memcpy_s(&ASShowConfirmExitDialog_Params.Message, sizeof(ASShowConfirmExitDialog_Params.Message), &Message, sizeof(Message));
	memcpy_s(&ASShowConfirmExitDialog_Params.okButtonLabel, sizeof(ASShowConfirmExitDialog_Params.okButtonLabel), &okButtonLabel, sizeof(okButtonLabel));
	memcpy_s(&ASShowConfirmExitDialog_Params.cancelButtonLabel, sizeof(ASShowConfirmExitDialog_Params.cancelButtonLabel), &cancelButtonLabel, sizeof(cancelButtonLabel));
	memcpy_s(&ASShowConfirmExitDialog_Params.callbackName, sizeof(ASShowConfirmExitDialog_Params.callbackName), &callbackName, sizeof(callbackName));

	this->ProcessEvent(uFnASShowConfirmExitDialog, &ASShowConfirmExitDialog_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_PauseMenu.CloseDialog
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        buttonIdx                      (CPF_Parm)

void UOLUIFrontEnd_PauseMenu::CloseDialog(int32_t buttonIdx)
{
	static UFunction* uFnCloseDialog = nullptr;

	if (!uFnCloseDialog)
	{
		uFnCloseDialog = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_PauseMenu.CloseDialog");
	}

	UOLUIFrontEnd_PauseMenu_execCloseDialog_Params CloseDialog_Params;
	memset(&CloseDialog_Params, 0, sizeof(CloseDialog_Params));
	memcpy_s(&CloseDialog_Params.buttonIdx, sizeof(CloseDialog_Params.buttonIdx), &buttonIdx, sizeof(buttonIdx));

	this->ProcessEvent(uFnCloseDialog, &CloseDialog_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_PauseMenu.SetSelectionFocus
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UGFxObject*              MovieClip                      (CPF_Parm)

void UOLUIFrontEnd_PauseMenu::SetSelectionFocus(class UGFxObject* MovieClip)
{
	static UFunction* uFnSetSelectionFocus = nullptr;

	if (!uFnSetSelectionFocus)
	{
		uFnSetSelectionFocus = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_PauseMenu.SetSelectionFocus");
	}

	UOLUIFrontEnd_PauseMenu_execSetSelectionFocus_Params SetSelectionFocus_Params;
	memset(&SetSelectionFocus_Params, 0, sizeof(SetSelectionFocus_Params));
	memcpy_s(&SetSelectionFocus_Params.MovieClip, sizeof(SetSelectionFocus_Params.MovieClip), &MovieClip, sizeof(MovieClip));

	this->ProcessEvent(uFnSetSelectionFocus, &SetSelectionFocus_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_PauseMenu.OnExitConfirmed
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bOk                            (CPF_Parm)

void UOLUIFrontEnd_PauseMenu::OnExitConfirmed(bool bOk)
{
	static UFunction* uFnOnExitConfirmed = nullptr;

	if (!uFnOnExitConfirmed)
	{
		uFnOnExitConfirmed = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_PauseMenu.OnExitConfirmed");
	}

	UOLUIFrontEnd_PauseMenu_execOnExitConfirmed_Params OnExitConfirmed_Params;
	memset(&OnExitConfirmed_Params, 0, sizeof(OnExitConfirmed_Params));
	OnExitConfirmed_Params.bOk = bOk;

	this->ProcessEvent(uFnOnExitConfirmed, &OnExitConfirmed_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_PauseMenu.OnExitToMenuButtonPress
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_PauseMenu::OnExitToMenuButtonPress(struct FEventData ev)
{
	static UFunction* uFnOnExitToMenuButtonPress = nullptr;

	if (!uFnOnExitToMenuButtonPress)
	{
		uFnOnExitToMenuButtonPress = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_PauseMenu.OnExitToMenuButtonPress");
	}

	UOLUIFrontEnd_PauseMenu_execOnExitToMenuButtonPress_Params OnExitToMenuButtonPress_Params;
	memset(&OnExitToMenuButtonPress_Params, 0, sizeof(OnExitToMenuButtonPress_Params));
	memcpy_s(&OnExitToMenuButtonPress_Params.ev, sizeof(OnExitToMenuButtonPress_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnOnExitToMenuButtonPress, &OnExitToMenuButtonPress_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_PauseMenu.back
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIFrontEnd_PauseMenu::back()
{
	static UFunction* uFnback = nullptr;

	if (!uFnback)
	{
		uFnback = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_PauseMenu.back");
	}

	UOLUIFrontEnd_PauseMenu_execback_Params back_Params;
	memset(&back_Params, 0, sizeof(back_Params));

	this->ProcessEvent(uFnback, &back_Params, nullptr);

	return back_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_PauseMenu.OnSaveCompleted
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bSuccess                       (CPF_Parm)

void UOLUIFrontEnd_PauseMenu::OnSaveCompleted(bool bSuccess)
{
	static UFunction* uFnOnSaveCompleted = nullptr;

	if (!uFnOnSaveCompleted)
	{
		uFnOnSaveCompleted = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_PauseMenu.OnSaveCompleted");
	}

	UOLUIFrontEnd_PauseMenu_execOnSaveCompleted_Params OnSaveCompleted_Params;
	memset(&OnSaveCompleted_Params, 0, sizeof(OnSaveCompleted_Params));
	OnSaveCompleted_Params.bSuccess = bSuccess;

	this->ProcessEvent(uFnOnSaveCompleted, &OnSaveCompleted_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_PauseMenu.OnSaveButtonPress
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_PauseMenu::OnSaveButtonPress(struct FEventData ev)
{
	static UFunction* uFnOnSaveButtonPress = nullptr;

	if (!uFnOnSaveButtonPress)
	{
		uFnOnSaveButtonPress = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_PauseMenu.OnSaveButtonPress");
	}

	UOLUIFrontEnd_PauseMenu_execOnSaveButtonPress_Params OnSaveButtonPress_Params;
	memset(&OnSaveButtonPress_Params, 0, sizeof(OnSaveButtonPress_Params));
	memcpy_s(&OnSaveButtonPress_Params.ev, sizeof(OnSaveButtonPress_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnOnSaveButtonPress, &OnSaveButtonPress_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_PauseMenu.OnOptionsButtonPress
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_PauseMenu::OnOptionsButtonPress(struct FEventData ev)
{
	static UFunction* uFnOnOptionsButtonPress = nullptr;

	if (!uFnOnOptionsButtonPress)
	{
		uFnOnOptionsButtonPress = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_PauseMenu.OnOptionsButtonPress");
	}

	UOLUIFrontEnd_PauseMenu_execOnOptionsButtonPress_Params OnOptionsButtonPress_Params;
	memset(&OnOptionsButtonPress_Params, 0, sizeof(OnOptionsButtonPress_Params));
	memcpy_s(&OnOptionsButtonPress_Params.ev, sizeof(OnOptionsButtonPress_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnOnOptionsButtonPress, &OnOptionsButtonPress_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_PauseMenu.OnReturnButtonPress
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_PauseMenu::OnReturnButtonPress(struct FEventData ev)
{
	static UFunction* uFnOnReturnButtonPress = nullptr;

	if (!uFnOnReturnButtonPress)
	{
		uFnOnReturnButtonPress = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_PauseMenu.OnReturnButtonPress");
	}

	UOLUIFrontEnd_PauseMenu_execOnReturnButtonPress_Params OnReturnButtonPress_Params;
	memset(&OnReturnButtonPress_Params, 0, sizeof(OnReturnButtonPress_Params));
	memcpy_s(&OnReturnButtonPress_Params.ev, sizeof(OnReturnButtonPress_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnOnReturnButtonPress, &OnReturnButtonPress_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_PauseMenu.OnButtonClick
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_PauseMenu::OnButtonClick(struct FEventData ev)
{
	static UFunction* uFnOnButtonClick = nullptr;

	if (!uFnOnButtonClick)
	{
		uFnOnButtonClick = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_PauseMenu.OnButtonClick");
	}

	UOLUIFrontEnd_PauseMenu_execOnButtonClick_Params OnButtonClick_Params;
	memset(&OnButtonClick_Params, 0, sizeof(OnButtonClick_Params));
	memcpy_s(&OnButtonClick_Params.ev, sizeof(OnButtonClick_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnOnButtonClick, &OnButtonClick_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_PauseMenu.PopulateButtons
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_PauseMenu::PopulateButtons()
{
	static UFunction* uFnPopulateButtons = nullptr;

	if (!uFnPopulateButtons)
	{
		uFnPopulateButtons = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_PauseMenu.PopulateButtons");
	}

	UOLUIFrontEnd_PauseMenu_execPopulateButtons_Params PopulateButtons_Params;
	memset(&PopulateButtons_Params, 0, sizeof(PopulateButtons_Params));

	this->ProcessEvent(uFnPopulateButtons, &PopulateButtons_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_PauseMenu.OnTopMostView
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bPlayOpenAnimation             (CPF_OptionalParm | CPF_Parm)

void UOLUIFrontEnd_PauseMenu::OnTopMostView(bool bPlayOpenAnimation)
{
	static UFunction* uFnOnTopMostView = nullptr;

	if (!uFnOnTopMostView)
	{
		uFnOnTopMostView = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_PauseMenu.OnTopMostView");
	}

	UOLUIFrontEnd_PauseMenu_execOnTopMostView_Params OnTopMostView_Params;
	memset(&OnTopMostView_Params, 0, sizeof(OnTopMostView_Params));
	OnTopMostView_Params.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent(uFnOnTopMostView, &OnTopMostView_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_PauseMenu.OnViewLoaded
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_PauseMenu::OnViewLoaded()
{
	static UFunction* uFnOnViewLoaded = nullptr;

	if (!uFnOnViewLoaded)
	{
		uFnOnViewLoaded = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_PauseMenu.OnViewLoaded");
	}

	UOLUIFrontEnd_PauseMenu_execOnViewLoaded_Params OnViewLoaded_Params;
	memset(&OnViewLoaded_Params, 0, sizeof(OnViewLoaded_Params));

	this->ProcessEvent(uFnOnViewLoaded, &OnViewLoaded_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GammaScreen.GetCurrentGammaSetting
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float UOLUIFrontEnd_GammaScreen::GetCurrentGammaSetting()
{
	static UFunction* uFnGetCurrentGammaSetting = nullptr;

	if (!uFnGetCurrentGammaSetting)
	{
		uFnGetCurrentGammaSetting = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen.GetCurrentGammaSetting");
	}

	UOLUIFrontEnd_GammaScreen_execGetCurrentGammaSetting_Params GetCurrentGammaSetting_Params;
	memset(&GetCurrentGammaSetting_Params, 0, sizeof(GetCurrentGammaSetting_Params));

	this->ProcessEvent(uFnGetCurrentGammaSetting, &GetCurrentGammaSetting_Params, nullptr);

	return GetCurrentGammaSetting_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_GammaScreen.IsGammaInitialized
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIFrontEnd_GammaScreen::IsGammaInitialized()
{
	static UFunction* uFnIsGammaInitialized = nullptr;

	if (!uFnIsGammaInitialized)
	{
		uFnIsGammaInitialized = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen.IsGammaInitialized");
	}

	UOLUIFrontEnd_GammaScreen_execIsGammaInitialized_Params IsGammaInitialized_Params;
	memset(&IsGammaInitialized_Params, 0, sizeof(IsGammaInitialized_Params));

	this->ProcessEvent(uFnIsGammaInitialized, &IsGammaInitialized_Params, nullptr);

	return IsGammaInitialized_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_GammaScreen.WidgetInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   WidgetName                     (CPF_Parm)
// struct FName                   WidgetPath                     (CPF_Parm)
// class UGFxObject*              Widget                         (CPF_Parm)

bool UOLUIFrontEnd_GammaScreen::eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget)
{
	static UFunction* uFnWidgetInitialized = nullptr;

	if (!uFnWidgetInitialized)
	{
		uFnWidgetInitialized = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen.WidgetInitialized");
	}

	UOLUIFrontEnd_GammaScreen_eventWidgetInitialized_Params WidgetInitialized_Params;
	memset(&WidgetInitialized_Params, 0, sizeof(WidgetInitialized_Params));
	memcpy_s(&WidgetInitialized_Params.WidgetName, sizeof(WidgetInitialized_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&WidgetInitialized_Params.WidgetPath, sizeof(WidgetInitialized_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));
	memcpy_s(&WidgetInitialized_Params.Widget, sizeof(WidgetInitialized_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnWidgetInitialized, &WidgetInitialized_Params, nullptr);

	return WidgetInitialized_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_GammaScreen.FilterButtonInput
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// struct FName                   ButtonName                     (CPF_Parm)
// EInputEvent                    InputEvent                     (CPF_Parm)

bool UOLUIFrontEnd_GammaScreen::eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent)
{
	static UFunction* uFnFilterButtonInput = nullptr;

	if (!uFnFilterButtonInput)
	{
		uFnFilterButtonInput = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen.FilterButtonInput");
	}

	UOLUIFrontEnd_GammaScreen_eventFilterButtonInput_Params FilterButtonInput_Params;
	memset(&FilterButtonInput_Params, 0, sizeof(FilterButtonInput_Params));
	memcpy_s(&FilterButtonInput_Params.ControllerId, sizeof(FilterButtonInput_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&FilterButtonInput_Params.ButtonName, sizeof(FilterButtonInput_Params.ButtonName), &ButtonName, sizeof(ButtonName));
	memcpy_s(&FilterButtonInput_Params.InputEvent, sizeof(FilterButtonInput_Params.InputEvent), &InputEvent, sizeof(InputEvent));

	this->ProcessEvent(uFnFilterButtonInput, &FilterButtonInput_Params, nullptr);

	return FilterButtonInput_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_GammaScreen.Change_Slider
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_GammaScreen::Change_Slider(struct FEventData ev)
{
	static UFunction* uFnChange_Slider = nullptr;

	if (!uFnChange_Slider)
	{
		uFnChange_Slider = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen.Change_Slider");
	}

	UOLUIFrontEnd_GammaScreen_execChange_Slider_Params Change_Slider_Params;
	memset(&Change_Slider_Params, 0, sizeof(Change_Slider_Params));
	memcpy_s(&Change_Slider_Params.ev, sizeof(Change_Slider_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnChange_Slider, &Change_Slider_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GammaScreen.Pop
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_GammaScreen::Pop()
{
	static UFunction* uFnPop = nullptr;

	if (!uFnPop)
	{
		uFnPop = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen.Pop");
	}

	UOLUIFrontEnd_GammaScreen_execPop_Params Pop_Params;
	memset(&Pop_Params, 0, sizeof(Pop_Params));

	this->ProcessEvent(uFnPop, &Pop_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GammaScreen.OnViewDeactivated
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_GammaScreen::OnViewDeactivated()
{
	static UFunction* uFnOnViewDeactivated = nullptr;

	if (!uFnOnViewDeactivated)
	{
		uFnOnViewDeactivated = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen.OnViewDeactivated");
	}

	UOLUIFrontEnd_GammaScreen_execOnViewDeactivated_Params OnViewDeactivated_Params;
	memset(&OnViewDeactivated_Params, 0, sizeof(OnViewDeactivated_Params));

	this->ProcessEvent(uFnOnViewDeactivated, &OnViewDeactivated_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GammaScreen.back
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIFrontEnd_GammaScreen::back()
{
	static UFunction* uFnback = nullptr;

	if (!uFnback)
	{
		uFnback = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen.back");
	}

	UOLUIFrontEnd_GammaScreen_execback_Params back_Params;
	memset(&back_Params, 0, sizeof(back_Params));

	this->ProcessEvent(uFnback, &back_Params, nullptr);

	return back_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_GammaScreen.Press_Back
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_GammaScreen::Press_Back(struct FEventData ev)
{
	static UFunction* uFnPress_Back = nullptr;

	if (!uFnPress_Back)
	{
		uFnPress_Back = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen.Press_Back");
	}

	UOLUIFrontEnd_GammaScreen_execPress_Back_Params Press_Back_Params;
	memset(&Press_Back_Params, 0, sizeof(Press_Back_Params));
	memcpy_s(&Press_Back_Params.ev, sizeof(Press_Back_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Back, &Press_Back_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GammaScreen.OnAccept
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_GammaScreen::OnAccept()
{
	static UFunction* uFnOnAccept = nullptr;

	if (!uFnOnAccept)
	{
		uFnOnAccept = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen.OnAccept");
	}

	UOLUIFrontEnd_GammaScreen_execOnAccept_Params OnAccept_Params;
	memset(&OnAccept_Params, 0, sizeof(OnAccept_Params));

	this->ProcessEvent(uFnOnAccept, &OnAccept_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GammaScreen.Press_Accept
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_GammaScreen::Press_Accept(struct FEventData ev)
{
	static UFunction* uFnPress_Accept = nullptr;

	if (!uFnPress_Accept)
	{
		uFnPress_Accept = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen.Press_Accept");
	}

	UOLUIFrontEnd_GammaScreen_execPress_Accept_Params Press_Accept_Params;
	memset(&Press_Accept_Params, 0, sizeof(Press_Accept_Params));
	memcpy_s(&Press_Accept_Params.ev, sizeof(Press_Accept_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Accept, &Press_Accept_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GammaScreen.OnTopMostView
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bPlayOpenAnimation             (CPF_OptionalParm | CPF_Parm)

void UOLUIFrontEnd_GammaScreen::OnTopMostView(bool bPlayOpenAnimation)
{
	static UFunction* uFnOnTopMostView = nullptr;

	if (!uFnOnTopMostView)
	{
		uFnOnTopMostView = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen.OnTopMostView");
	}

	UOLUIFrontEnd_GammaScreen_execOnTopMostView_Params OnTopMostView_Params;
	memset(&OnTopMostView_Params, 0, sizeof(OnTopMostView_Params));
	OnTopMostView_Params.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent(uFnOnTopMostView, &OnTopMostView_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GammaScreen.OnViewLoaded
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_GammaScreen::OnViewLoaded()
{
	static UFunction* uFnOnViewLoaded = nullptr;

	if (!uFnOnViewLoaded)
	{
		uFnOnViewLoaded = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GammaScreen.OnViewLoaded");
	}

	UOLUIFrontEnd_GammaScreen_execOnViewLoaded_Params OnViewLoaded_Params;
	memset(&OnViewLoaded_Params, 0, sizeof(OnViewLoaded_Params));

	this->ProcessEvent(uFnOnViewLoaded, &OnViewLoaded_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GamepadScreen.ASUpdateGamepadLabels
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ConfigType                     (CPF_Parm)

void UOLUIFrontEnd_GamepadScreen::ASUpdateGamepadLabels(int32_t ConfigType)
{
	static UFunction* uFnASUpdateGamepadLabels = nullptr;

	if (!uFnASUpdateGamepadLabels)
	{
		uFnASUpdateGamepadLabels = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GamepadScreen.ASUpdateGamepadLabels");
	}

	UOLUIFrontEnd_GamepadScreen_execASUpdateGamepadLabels_Params ASUpdateGamepadLabels_Params;
	memset(&ASUpdateGamepadLabels_Params, 0, sizeof(ASUpdateGamepadLabels_Params));
	memcpy_s(&ASUpdateGamepadLabels_Params.ConfigType, sizeof(ASUpdateGamepadLabels_Params.ConfigType), &ConfigType, sizeof(ConfigType));

	this->ProcessEvent(uFnASUpdateGamepadLabels, &ASUpdateGamepadLabels_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GamepadScreen.TabChanged
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_GamepadScreen::TabChanged(struct FEventData ev)
{
	static UFunction* uFnTabChanged = nullptr;

	if (!uFnTabChanged)
	{
		uFnTabChanged = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GamepadScreen.TabChanged");
	}

	UOLUIFrontEnd_GamepadScreen_execTabChanged_Params TabChanged_Params;
	memset(&TabChanged_Params, 0, sizeof(TabChanged_Params));
	memcpy_s(&TabChanged_Params.ev, sizeof(TabChanged_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnTabChanged, &TabChanged_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GamepadScreen.WidgetInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   WidgetName                     (CPF_Parm)
// struct FName                   WidgetPath                     (CPF_Parm)
// class UGFxObject*              Widget                         (CPF_Parm)

bool UOLUIFrontEnd_GamepadScreen::eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget)
{
	static UFunction* uFnWidgetInitialized = nullptr;

	if (!uFnWidgetInitialized)
	{
		uFnWidgetInitialized = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GamepadScreen.WidgetInitialized");
	}

	UOLUIFrontEnd_GamepadScreen_eventWidgetInitialized_Params WidgetInitialized_Params;
	memset(&WidgetInitialized_Params, 0, sizeof(WidgetInitialized_Params));
	memcpy_s(&WidgetInitialized_Params.WidgetName, sizeof(WidgetInitialized_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&WidgetInitialized_Params.WidgetPath, sizeof(WidgetInitialized_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));
	memcpy_s(&WidgetInitialized_Params.Widget, sizeof(WidgetInitialized_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnWidgetInitialized, &WidgetInitialized_Params, nullptr);

	return WidgetInitialized_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_GamepadScreen.PopulateTabButtons
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_GamepadScreen::PopulateTabButtons()
{
	static UFunction* uFnPopulateTabButtons = nullptr;

	if (!uFnPopulateTabButtons)
	{
		uFnPopulateTabButtons = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GamepadScreen.PopulateTabButtons");
	}

	UOLUIFrontEnd_GamepadScreen_execPopulateTabButtons_Params PopulateTabButtons_Params;
	memset(&PopulateTabButtons_Params, 0, sizeof(PopulateTabButtons_Params));

	this->ProcessEvent(uFnPopulateTabButtons, &PopulateTabButtons_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GamepadScreen.Pop
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_GamepadScreen::Pop()
{
	static UFunction* uFnPop = nullptr;

	if (!uFnPop)
	{
		uFnPop = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GamepadScreen.Pop");
	}

	UOLUIFrontEnd_GamepadScreen_execPop_Params Pop_Params;
	memset(&Pop_Params, 0, sizeof(Pop_Params));

	this->ProcessEvent(uFnPop, &Pop_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GamepadScreen.OnViewDeactivated
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_GamepadScreen::OnViewDeactivated()
{
	static UFunction* uFnOnViewDeactivated = nullptr;

	if (!uFnOnViewDeactivated)
	{
		uFnOnViewDeactivated = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GamepadScreen.OnViewDeactivated");
	}

	UOLUIFrontEnd_GamepadScreen_execOnViewDeactivated_Params OnViewDeactivated_Params;
	memset(&OnViewDeactivated_Params, 0, sizeof(OnViewDeactivated_Params));

	this->ProcessEvent(uFnOnViewDeactivated, &OnViewDeactivated_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GamepadScreen.Press_Back
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_GamepadScreen::Press_Back(struct FEventData ev)
{
	static UFunction* uFnPress_Back = nullptr;

	if (!uFnPress_Back)
	{
		uFnPress_Back = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GamepadScreen.Press_Back");
	}

	UOLUIFrontEnd_GamepadScreen_execPress_Back_Params Press_Back_Params;
	memset(&Press_Back_Params, 0, sizeof(Press_Back_Params));
	memcpy_s(&Press_Back_Params.ev, sizeof(Press_Back_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Back, &Press_Back_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GamepadScreen.Press_Accept
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_GamepadScreen::Press_Accept(struct FEventData ev)
{
	static UFunction* uFnPress_Accept = nullptr;

	if (!uFnPress_Accept)
	{
		uFnPress_Accept = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GamepadScreen.Press_Accept");
	}

	UOLUIFrontEnd_GamepadScreen_execPress_Accept_Params Press_Accept_Params;
	memset(&Press_Accept_Params, 0, sizeof(Press_Accept_Params));
	memcpy_s(&Press_Accept_Params.ev, sizeof(Press_Accept_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Accept, &Press_Accept_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GamepadScreen.OnTopMostView
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bPlayOpenAnimation             (CPF_OptionalParm | CPF_Parm)

void UOLUIFrontEnd_GamepadScreen::OnTopMostView(bool bPlayOpenAnimation)
{
	static UFunction* uFnOnTopMostView = nullptr;

	if (!uFnOnTopMostView)
	{
		uFnOnTopMostView = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GamepadScreen.OnTopMostView");
	}

	UOLUIFrontEnd_GamepadScreen_execOnTopMostView_Params OnTopMostView_Params;
	memset(&OnTopMostView_Params, 0, sizeof(OnTopMostView_Params));
	OnTopMostView_Params.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent(uFnOnTopMostView, &OnTopMostView_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GamepadScreen.OnViewLoaded
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_GamepadScreen::OnViewLoaded()
{
	static UFunction* uFnOnViewLoaded = nullptr;

	if (!uFnOnViewLoaded)
	{
		uFnOnViewLoaded = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GamepadScreen.OnViewLoaded");
	}

	UOLUIFrontEnd_GamepadScreen_execOnViewLoaded_Params OnViewLoaded_Params;
	memset(&OnViewLoaded_Params, 0, sizeof(OnViewLoaded_Params));

	this->ProcessEvent(uFnOnViewLoaded, &OnViewLoaded_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options_Console.WidgetInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   WidgetName                     (CPF_Parm)
// struct FName                   WidgetPath                     (CPF_Parm)
// class UGFxObject*              Widget                         (CPF_Parm)

bool UOLUIFrontEnd_Options_Console::eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget)
{
	static UFunction* uFnWidgetInitialized = nullptr;

	if (!uFnWidgetInitialized)
	{
		uFnWidgetInitialized = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options_Console.WidgetInitialized");
	}

	UOLUIFrontEnd_Options_Console_eventWidgetInitialized_Params WidgetInitialized_Params;
	memset(&WidgetInitialized_Params, 0, sizeof(WidgetInitialized_Params));
	memcpy_s(&WidgetInitialized_Params.WidgetName, sizeof(WidgetInitialized_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&WidgetInitialized_Params.WidgetPath, sizeof(WidgetInitialized_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));
	memcpy_s(&WidgetInitialized_Params.Widget, sizeof(WidgetInitialized_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnWidgetInitialized, &WidgetInitialized_Params, nullptr);

	return WidgetInitialized_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options_Console.FilterButtonInput
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// struct FName                   ButtonName                     (CPF_Parm)
// EInputEvent                    InputEvent                     (CPF_Parm)

bool UOLUIFrontEnd_Options_Console::eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent)
{
	static UFunction* uFnFilterButtonInput = nullptr;

	if (!uFnFilterButtonInput)
	{
		uFnFilterButtonInput = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options_Console.FilterButtonInput");
	}

	UOLUIFrontEnd_Options_Console_eventFilterButtonInput_Params FilterButtonInput_Params;
	memset(&FilterButtonInput_Params, 0, sizeof(FilterButtonInput_Params));
	memcpy_s(&FilterButtonInput_Params.ControllerId, sizeof(FilterButtonInput_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&FilterButtonInput_Params.ButtonName, sizeof(FilterButtonInput_Params.ButtonName), &ButtonName, sizeof(ButtonName));
	memcpy_s(&FilterButtonInput_Params.InputEvent, sizeof(FilterButtonInput_Params.InputEvent), &InputEvent, sizeof(InputEvent));

	this->ProcessEvent(uFnFilterButtonInput, &FilterButtonInput_Params, nullptr);

	return FilterButtonInput_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options_Console.GetFullscreenOptionIndex
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLUIFrontEnd_Options_Console::GetFullscreenOptionIndex()
{
	static UFunction* uFnGetFullscreenOptionIndex = nullptr;

	if (!uFnGetFullscreenOptionIndex)
	{
		uFnGetFullscreenOptionIndex = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options_Console.GetFullscreenOptionIndex");
	}

	UOLUIFrontEnd_Options_Console_execGetFullscreenOptionIndex_Params GetFullscreenOptionIndex_Params;
	memset(&GetFullscreenOptionIndex_Params, 0, sizeof(GetFullscreenOptionIndex_Params));

	this->ProcessEvent(uFnGetFullscreenOptionIndex, &GetFullscreenOptionIndex_Params, nullptr);

	return GetFullscreenOptionIndex_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options_Console.GetResolutionOptionIndex
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UOLUIFrontEnd_Options_Console::GetResolutionOptionIndex()
{
	static UFunction* uFnGetResolutionOptionIndex = nullptr;

	if (!uFnGetResolutionOptionIndex)
	{
		uFnGetResolutionOptionIndex = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options_Console.GetResolutionOptionIndex");
	}

	UOLUIFrontEnd_Options_Console_execGetResolutionOptionIndex_Params GetResolutionOptionIndex_Params;
	memset(&GetResolutionOptionIndex_Params, 0, sizeof(GetResolutionOptionIndex_Params));

	this->ProcessEvent(uFnGetResolutionOptionIndex, &GetResolutionOptionIndex_Params, nullptr);

	return GetResolutionOptionIndex_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options_Console.HasResolutionChanged
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIFrontEnd_Options_Console::HasResolutionChanged()
{
	static UFunction* uFnHasResolutionChanged = nullptr;

	if (!uFnHasResolutionChanged)
	{
		uFnHasResolutionChanged = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options_Console.HasResolutionChanged");
	}

	UOLUIFrontEnd_Options_Console_execHasResolutionChanged_Params HasResolutionChanged_Params;
	memset(&HasResolutionChanged_Params, 0, sizeof(HasResolutionChanged_Params));

	this->ProcessEvent(uFnHasResolutionChanged, &HasResolutionChanged_Params, nullptr);

	return HasResolutionChanged_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options_Console.TabChanged
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_Options_Console::TabChanged(struct FEventData ev)
{
	static UFunction* uFnTabChanged = nullptr;

	if (!uFnTabChanged)
	{
		uFnTabChanged = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options_Console.TabChanged");
	}

	UOLUIFrontEnd_Options_Console_execTabChanged_Params TabChanged_Params;
	memset(&TabChanged_Params, 0, sizeof(TabChanged_Params));
	memcpy_s(&TabChanged_Params.ev, sizeof(TabChanged_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnTabChanged, &TabChanged_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options_Console.ResetConsoleOptions
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_Options_Console::ResetConsoleOptions()
{
	static UFunction* uFnResetConsoleOptions = nullptr;

	if (!uFnResetConsoleOptions)
	{
		uFnResetConsoleOptions = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options_Console.ResetConsoleOptions");
	}

	UOLUIFrontEnd_Options_Console_execResetConsoleOptions_Params ResetConsoleOptions_Params;
	memset(&ResetConsoleOptions_Params, 0, sizeof(ResetConsoleOptions_Params));

	this->ProcessEvent(uFnResetConsoleOptions, &ResetConsoleOptions_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options_Console.Press_Reset
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_Options_Console::Press_Reset(struct FEventData ev)
{
	static UFunction* uFnPress_Reset = nullptr;

	if (!uFnPress_Reset)
	{
		uFnPress_Reset = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options_Console.Press_Reset");
	}

	UOLUIFrontEnd_Options_Console_execPress_Reset_Params Press_Reset_Params;
	memset(&Press_Reset_Params, 0, sizeof(Press_Reset_Params));
	memcpy_s(&Press_Reset_Params.ev, sizeof(Press_Reset_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Reset, &Press_Reset_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options_Console.FillOptionValuesFromProfile
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_Options_Console::FillOptionValuesFromProfile()
{
	static UFunction* uFnFillOptionValuesFromProfile = nullptr;

	if (!uFnFillOptionValuesFromProfile)
	{
		uFnFillOptionValuesFromProfile = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options_Console.FillOptionValuesFromProfile");
	}

	UOLUIFrontEnd_Options_Console_execFillOptionValuesFromProfile_Params FillOptionValuesFromProfile_Params;
	memset(&FillOptionValuesFromProfile_Params, 0, sizeof(FillOptionValuesFromProfile_Params));

	this->ProcessEvent(uFnFillOptionValuesFromProfile, &FillOptionValuesFromProfile_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options_Console.PopulateControlsOptions
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_Options_Console::PopulateControlsOptions()
{
	static UFunction* uFnPopulateControlsOptions = nullptr;

	if (!uFnPopulateControlsOptions)
	{
		uFnPopulateControlsOptions = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options_Console.PopulateControlsOptions");
	}

	UOLUIFrontEnd_Options_Console_execPopulateControlsOptions_Params PopulateControlsOptions_Params;
	memset(&PopulateControlsOptions_Params, 0, sizeof(PopulateControlsOptions_Params));

	this->ProcessEvent(uFnPopulateControlsOptions, &PopulateControlsOptions_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options_Console.PopulateTabButtons
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_Options_Console::PopulateTabButtons()
{
	static UFunction* uFnPopulateTabButtons = nullptr;

	if (!uFnPopulateTabButtons)
	{
		uFnPopulateTabButtons = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options_Console.PopulateTabButtons");
	}

	UOLUIFrontEnd_Options_Console_execPopulateTabButtons_Params PopulateTabButtons_Params;
	memset(&PopulateTabButtons_Params, 0, sizeof(PopulateTabButtons_Params));

	this->ProcessEvent(uFnPopulateTabButtons, &PopulateTabButtons_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options_Console.Press_Apply
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_Options_Console::Press_Apply(struct FEventData ev)
{
	static UFunction* uFnPress_Apply = nullptr;

	if (!uFnPress_Apply)
	{
		uFnPress_Apply = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options_Console.Press_Apply");
	}

	UOLUIFrontEnd_Options_Console_execPress_Apply_Params Press_Apply_Params;
	memset(&Press_Apply_Params, 0, sizeof(Press_Apply_Params));
	memcpy_s(&Press_Apply_Params.ev, sizeof(Press_Apply_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Apply, &Press_Apply_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options_Console.Press_OptionItemButton
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PSID                           (CPF_Parm)

void UOLUIFrontEnd_Options_Console::Press_OptionItemButton(int32_t PSID)
{
	static UFunction* uFnPress_OptionItemButton = nullptr;

	if (!uFnPress_OptionItemButton)
	{
		uFnPress_OptionItemButton = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options_Console.Press_OptionItemButton");
	}

	UOLUIFrontEnd_Options_Console_execPress_OptionItemButton_Params Press_OptionItemButton_Params;
	memset(&Press_OptionItemButton_Params, 0, sizeof(Press_OptionItemButton_Params));
	memcpy_s(&Press_OptionItemButton_Params.PSID, sizeof(Press_OptionItemButton_Params.PSID), &PSID, sizeof(PSID));

	this->ProcessEvent(uFnPress_OptionItemButton, &Press_OptionItemButton_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options_Console.Press_Gamma
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_Options_Console::Press_Gamma(struct FEventData ev)
{
	static UFunction* uFnPress_Gamma = nullptr;

	if (!uFnPress_Gamma)
	{
		uFnPress_Gamma = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options_Console.Press_Gamma");
	}

	UOLUIFrontEnd_Options_Console_execPress_Gamma_Params Press_Gamma_Params;
	memset(&Press_Gamma_Params, 0, sizeof(Press_Gamma_Params));
	memcpy_s(&Press_Gamma_Params.ev, sizeof(Press_Gamma_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnPress_Gamma, &Press_Gamma_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options_Console.back
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIFrontEnd_Options_Console::back()
{
	static UFunction* uFnback = nullptr;

	if (!uFnback)
	{
		uFnback = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options_Console.back");
	}

	UOLUIFrontEnd_Options_Console_execback_Params back_Params;
	memset(&back_Params, 0, sizeof(back_Params));

	this->ProcessEvent(uFnback, &back_Params, nullptr);

	return back_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_Options_Console.OnTopMostView
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bPlayOpenAnimation             (CPF_OptionalParm | CPF_Parm)

void UOLUIFrontEnd_Options_Console::OnTopMostView(bool bPlayOpenAnimation)
{
	static UFunction* uFnOnTopMostView = nullptr;

	if (!uFnOnTopMostView)
	{
		uFnOnTopMostView = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options_Console.OnTopMostView");
	}

	UOLUIFrontEnd_Options_Console_execOnTopMostView_Params OnTopMostView_Params;
	memset(&OnTopMostView_Params, 0, sizeof(OnTopMostView_Params));
	OnTopMostView_Params.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent(uFnOnTopMostView, &OnTopMostView_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options_Console.OnViewDeactivated
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_Options_Console::OnViewDeactivated()
{
	static UFunction* uFnOnViewDeactivated = nullptr;

	if (!uFnOnViewDeactivated)
	{
		uFnOnViewDeactivated = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options_Console.OnViewDeactivated");
	}

	UOLUIFrontEnd_Options_Console_execOnViewDeactivated_Params OnViewDeactivated_Params;
	memset(&OnViewDeactivated_Params, 0, sizeof(OnViewDeactivated_Params));

	this->ProcessEvent(uFnOnViewDeactivated, &OnViewDeactivated_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options_Console.OnViewActivated
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_Options_Console::OnViewActivated()
{
	static UFunction* uFnOnViewActivated = nullptr;

	if (!uFnOnViewActivated)
	{
		uFnOnViewActivated = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options_Console.OnViewActivated");
	}

	UOLUIFrontEnd_Options_Console_execOnViewActivated_Params OnViewActivated_Params;
	memset(&OnViewActivated_Params, 0, sizeof(OnViewActivated_Params));

	this->ProcessEvent(uFnOnViewActivated, &OnViewActivated_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_Options_Console.OnViewLoaded
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_Options_Console::OnViewLoaded()
{
	static UFunction* uFnOnViewLoaded = nullptr;

	if (!uFnOnViewLoaded)
	{
		uFnOnViewLoaded = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_Options_Console.OnViewLoaded");
	}

	UOLUIFrontEnd_Options_Console_execOnViewLoaded_Params OnViewLoaded_Params;
	memset(&OnViewLoaded_Params, 0, sizeof(OnViewLoaded_Params));

	this->ProcessEvent(uFnOnViewLoaded, &OnViewLoaded_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GamepadScreen_Console.ASUpdateGamepadLabels
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ConfigType                     (CPF_Parm)

void UOLUIFrontEnd_GamepadScreen_Console::ASUpdateGamepadLabels(int32_t ConfigType)
{
	static UFunction* uFnASUpdateGamepadLabels = nullptr;

	if (!uFnASUpdateGamepadLabels)
	{
		uFnASUpdateGamepadLabels = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GamepadScreen_Console.ASUpdateGamepadLabels");
	}

	UOLUIFrontEnd_GamepadScreen_Console_execASUpdateGamepadLabels_Params ASUpdateGamepadLabels_Params;
	memset(&ASUpdateGamepadLabels_Params, 0, sizeof(ASUpdateGamepadLabels_Params));
	memcpy_s(&ASUpdateGamepadLabels_Params.ConfigType, sizeof(ASUpdateGamepadLabels_Params.ConfigType), &ConfigType, sizeof(ConfigType));

	this->ProcessEvent(uFnASUpdateGamepadLabels, &ASUpdateGamepadLabels_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GamepadScreen_Console.TabChanged
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              ev                             (CPF_Parm | CPF_NeedCtorLink)

void UOLUIFrontEnd_GamepadScreen_Console::TabChanged(struct FEventData ev)
{
	static UFunction* uFnTabChanged = nullptr;

	if (!uFnTabChanged)
	{
		uFnTabChanged = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GamepadScreen_Console.TabChanged");
	}

	UOLUIFrontEnd_GamepadScreen_Console_execTabChanged_Params TabChanged_Params;
	memset(&TabChanged_Params, 0, sizeof(TabChanged_Params));
	memcpy_s(&TabChanged_Params.ev, sizeof(TabChanged_Params.ev), &ev, sizeof(ev));

	this->ProcessEvent(uFnTabChanged, &TabChanged_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GamepadScreen_Console.WidgetInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FName                   WidgetName                     (CPF_Parm)
// struct FName                   WidgetPath                     (CPF_Parm)
// class UGFxObject*              Widget                         (CPF_Parm)

bool UOLUIFrontEnd_GamepadScreen_Console::eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget)
{
	static UFunction* uFnWidgetInitialized = nullptr;

	if (!uFnWidgetInitialized)
	{
		uFnWidgetInitialized = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GamepadScreen_Console.WidgetInitialized");
	}

	UOLUIFrontEnd_GamepadScreen_Console_eventWidgetInitialized_Params WidgetInitialized_Params;
	memset(&WidgetInitialized_Params, 0, sizeof(WidgetInitialized_Params));
	memcpy_s(&WidgetInitialized_Params.WidgetName, sizeof(WidgetInitialized_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&WidgetInitialized_Params.WidgetPath, sizeof(WidgetInitialized_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));
	memcpy_s(&WidgetInitialized_Params.Widget, sizeof(WidgetInitialized_Params.Widget), &Widget, sizeof(Widget));

	this->ProcessEvent(uFnWidgetInitialized, &WidgetInitialized_Params, nullptr);

	return WidgetInitialized_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_GamepadScreen_Console.FilterButtonInput
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// struct FName                   ButtonName                     (CPF_Parm)
// EInputEvent                    InputEvent                     (CPF_Parm)

bool UOLUIFrontEnd_GamepadScreen_Console::eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent)
{
	static UFunction* uFnFilterButtonInput = nullptr;

	if (!uFnFilterButtonInput)
	{
		uFnFilterButtonInput = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GamepadScreen_Console.FilterButtonInput");
	}

	UOLUIFrontEnd_GamepadScreen_Console_eventFilterButtonInput_Params FilterButtonInput_Params;
	memset(&FilterButtonInput_Params, 0, sizeof(FilterButtonInput_Params));
	memcpy_s(&FilterButtonInput_Params.ControllerId, sizeof(FilterButtonInput_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&FilterButtonInput_Params.ButtonName, sizeof(FilterButtonInput_Params.ButtonName), &ButtonName, sizeof(ButtonName));
	memcpy_s(&FilterButtonInput_Params.InputEvent, sizeof(FilterButtonInput_Params.InputEvent), &InputEvent, sizeof(InputEvent));

	this->ProcessEvent(uFnFilterButtonInput, &FilterButtonInput_Params, nullptr);

	return FilterButtonInput_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_GamepadScreen_Console.PopulateTabButtons
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_GamepadScreen_Console::PopulateTabButtons()
{
	static UFunction* uFnPopulateTabButtons = nullptr;

	if (!uFnPopulateTabButtons)
	{
		uFnPopulateTabButtons = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GamepadScreen_Console.PopulateTabButtons");
	}

	UOLUIFrontEnd_GamepadScreen_Console_execPopulateTabButtons_Params PopulateTabButtons_Params;
	memset(&PopulateTabButtons_Params, 0, sizeof(PopulateTabButtons_Params));

	this->ProcessEvent(uFnPopulateTabButtons, &PopulateTabButtons_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GamepadScreen_Console.Pop
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_GamepadScreen_Console::Pop()
{
	static UFunction* uFnPop = nullptr;

	if (!uFnPop)
	{
		uFnPop = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GamepadScreen_Console.Pop");
	}

	UOLUIFrontEnd_GamepadScreen_Console_execPop_Params Pop_Params;
	memset(&Pop_Params, 0, sizeof(Pop_Params));

	this->ProcessEvent(uFnPop, &Pop_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GamepadScreen_Console.OnViewDeactivated
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_GamepadScreen_Console::OnViewDeactivated()
{
	static UFunction* uFnOnViewDeactivated = nullptr;

	if (!uFnOnViewDeactivated)
	{
		uFnOnViewDeactivated = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GamepadScreen_Console.OnViewDeactivated");
	}

	UOLUIFrontEnd_GamepadScreen_Console_execOnViewDeactivated_Params OnViewDeactivated_Params;
	memset(&OnViewDeactivated_Params, 0, sizeof(OnViewDeactivated_Params));

	this->ProcessEvent(uFnOnViewDeactivated, &OnViewDeactivated_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GamepadScreen_Console.back
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UOLUIFrontEnd_GamepadScreen_Console::back()
{
	static UFunction* uFnback = nullptr;

	if (!uFnback)
	{
		uFnback = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GamepadScreen_Console.back");
	}

	UOLUIFrontEnd_GamepadScreen_Console_execback_Params back_Params;
	memset(&back_Params, 0, sizeof(back_Params));

	this->ProcessEvent(uFnback, &back_Params, nullptr);

	return back_Params.ReturnValue;
};

// Function OLGame.OLUIFrontEnd_GamepadScreen_Console.OnTopMostView
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           bPlayOpenAnimation             (CPF_OptionalParm | CPF_Parm)

void UOLUIFrontEnd_GamepadScreen_Console::OnTopMostView(bool bPlayOpenAnimation)
{
	static UFunction* uFnOnTopMostView = nullptr;

	if (!uFnOnTopMostView)
	{
		uFnOnTopMostView = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GamepadScreen_Console.OnTopMostView");
	}

	UOLUIFrontEnd_GamepadScreen_Console_execOnTopMostView_Params OnTopMostView_Params;
	memset(&OnTopMostView_Params, 0, sizeof(OnTopMostView_Params));
	OnTopMostView_Params.bPlayOpenAnimation = bPlayOpenAnimation;

	this->ProcessEvent(uFnOnTopMostView, &OnTopMostView_Params, nullptr);
};

// Function OLGame.OLUIFrontEnd_GamepadScreen_Console.OnViewLoaded
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIFrontEnd_GamepadScreen_Console::OnViewLoaded()
{
	static UFunction* uFnOnViewLoaded = nullptr;

	if (!uFnOnViewLoaded)
	{
		uFnOnViewLoaded = UFunction::FindFunction("Function OLGame.OLUIFrontEnd_GamepadScreen_Console.OnViewLoaded");
	}

	UOLUIFrontEnd_GamepadScreen_Console_execOnViewLoaded_Params OnViewLoaded_Params;
	memset(&OnViewLoaded_Params, 0, sizeof(OnViewLoaded_Params));

	this->ProcessEvent(uFnOnViewLoaded, &OnViewLoaded_Params, nullptr);
};

// Function OLGame.OLUIPopupScreen.FilterButtonInput
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)
// struct FName                   ButtonName                     (CPF_Parm)
// EInputEvent                    InputEvent                     (CPF_Parm)

bool UOLUIPopupScreen::eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent)
{
	static UFunction* uFnFilterButtonInput = nullptr;

	if (!uFnFilterButtonInput)
	{
		uFnFilterButtonInput = UFunction::FindFunction("Function OLGame.OLUIPopupScreen.FilterButtonInput");
	}

	UOLUIPopupScreen_eventFilterButtonInput_Params FilterButtonInput_Params;
	memset(&FilterButtonInput_Params, 0, sizeof(FilterButtonInput_Params));
	memcpy_s(&FilterButtonInput_Params.ControllerId, sizeof(FilterButtonInput_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&FilterButtonInput_Params.ButtonName, sizeof(FilterButtonInput_Params.ButtonName), &ButtonName, sizeof(ButtonName));
	memcpy_s(&FilterButtonInput_Params.InputEvent, sizeof(FilterButtonInput_Params.InputEvent), &InputEvent, sizeof(InputEvent));

	this->ProcessEvent(uFnFilterButtonInput, &FilterButtonInput_Params, nullptr);

	return FilterButtonInput_Params.ReturnValue;
};

// Function OLGame.OLUIPopupScreen.OnClose
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UOLUIPopupScreen::OnClose()
{
	static UFunction* uFnOnClose = nullptr;

	if (!uFnOnClose)
	{
		uFnOnClose = UFunction::FindFunction("Function OLGame.OLUIPopupScreen.OnClose");
	}

	UOLUIPopupScreen_execOnClose_Params OnClose_Params;
	memset(&OnClose_Params, 0, sizeof(OnClose_Params));

	this->ProcessEvent(uFnOnClose, &OnClose_Params, nullptr);
};

// Function OLGame.OLUIPopupScreen.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// bool                           StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UOLUIPopupScreen::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function OLGame.OLUIPopupScreen.Start");
	}

	UOLUIPopupScreen_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

/*
# ========================================================================================= #
#
# ========================================================================================= #
*/

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
