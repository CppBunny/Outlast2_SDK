/*
#############################################################################################
# Outlast2 (1.0.0.0) SDK
# Generated with the CodeRedGenerator v1.0.2
# ========================================================================================= #
# File: OLGame_classes.hpp
# ========================================================================================= #
# Credits: TheFeckless, ItsBranK
# Links: www.github.com/CodeRedModding/CodeRed-Generator, www.twitter.com/ItsBranK
#############################################################################################
*/
#pragma once

#ifdef _MSC_VER
	#pragma pack(push, 0x4)
#endif

/*
# ========================================================================================= #
# Constants
# ========================================================================================= #
*/

#define CONST_NUMBER_OF_DAMAGE_COLUMN                           3

/*
# ========================================================================================= #
# Enums
# ========================================================================================= #
*/

// Enum OLGame.OLTypes.ECamcorderHudType
enum class ECamcorderHudType : uint8_t
{
	CHT_None                                           = 0,
	CHT_Fullscreen                                     = 1,
	CHT_RenderTarget                                   = 2,
	CHT_Files                                          = 3,
	CHT_END                                            = 4
};

// Enum OLGame.OLTypes.FootstepDecalType
enum class EFootstepDecalType : uint8_t
{
	FDT_None                                           = 0,
	FDT_Blood                                          = 1,
	FDT_Snow                                           = 2,
	FDT_END                                            = 3
};

// Enum OLGame.OLTypes.BotCollisionType
enum class EBotCollisionType : uint8_t
{
	BCT_None                                           = 0,
	BCT_HeadToHead                                     = 1,
	BCT_SideCollision                                  = 2,
	BCT_TakeOver                                       = 3,
	BCT_Merge                                          = 4,
	BCT_END                                            = 5
};

// Enum OLGame.OLTypes.ExoticTeleportType
enum class ExoticTeleportType : uint8_t
{
	ETT_LockerToWardrobe                               = 0,
	ETT_SqueezeToLocker                                = 1,
	ETT_LedgeHangToLedgeHang                           = 2,
	ETT_SqueezeToSqueeze                               = 3,
	ETT_END                                            = 4
};

// Enum OLGame.OLTypes.DeathGripVariantType
enum class EDeathGripVariantType : uint8_t
{
	DGVT_Generic                                       = 0,
	DGVT_CrawlerA                                      = 1,
	DGVT_CrawlerB                                      = 2,
	DGVT_END                                           = 3
};

// Enum OLGame.OLTypes.PushableMaterial
enum class EPushableMaterial : uint8_t
{
	PM_Wood                                            = 0,
	PM_Metal                                           = 1,
	PM_MineCart                                        = 2,
	PM_WoodenCart                                      = 3,
	PM_BarnDoor                                        = 4,
	PM_RollingCart                                     = 5,
	PM_BigBucket                                       = 6,
	PM_END                                             = 7
};

// Enum OLGame.OLTypes.GamepadShakeDirection
enum class EGamepadShakeDirection : uint8_t
{
	GSD_Undefined                                      = 0,
	GSD_Left                                           = 1,
	GSD_Right                                          = 2,
	GSD_END                                            = 3
};

// Enum OLGame.OLTypes.KismetLogEventType
enum class EKismetLogEventType : uint8_t
{
	KLET_NodeActivated                                 = 0,
	KLET_NodeDeactivated                               = 1,
	KLET_EventFired                                    = 2,
	KLET_Message                                       = 3,
	KLET_END                                           = 4
};

// Enum OLGame.OLTypes.ENVEvent
enum class ENVEvent : uint8_t
{
	NVE_CamcorderActivated                             = 0,
	NVE_CamcorderDeactivated                           = 1,
	NVE_DefaultViewSelected                            = 2,
	NVE_PassiveNVSelected                              = 3,
	NVE_ActiveNVSelected                               = 4,
	NVE_OutOfBatteries                                 = 5,
	NVE_END                                            = 6
};

// Enum OLGame.OLTypes.PairedWalkAnimStyle
enum class EPairedWalkAnimStyle : uint8_t
{
	PWAS_Default                                       = 0,
	PWAS_HurtingLynn                                   = 1,
	PWAS_HurtingPregnant                               = 2,
	PWAS_JessicaLookAt                                 = 3,
	PWAS_END                                           = 4
};

// Enum OLGame.OLTypes.PairedWalkScenario
enum class EPairedWalkScenario : uint8_t
{
	PWS_PregnantLynn                                   = 0,
	PWS_YoungBlakeAndJessica                           = 1,
	PWS_LeadingLynn                                    = 2,
	PWS_END                                            = 3
};

// Enum OLGame.OLTypes.PairedWalkType
enum class EPairedWalkType : uint8_t
{
	PWT_HeroRelative                                   = 0,
	PWT_LeadingPartner                                 = 1,
	PWT_END                                            = 2
};

// Enum OLGame.OLTypes.EAIMusicState
enum class EAIMusicState : uint8_t
{
	EAIMS_None                                         = 0,
	EAIMS_Patrol                                       = 1,
	EAIMS_Investigate                                  = 2,
	EAIMS_Chase                                        = 3,
	EAIMS_END                                          = 4
};

// Enum OLGame.OLTypes.EBotDestSelectionHeuristic
enum class EBotDestSelectionHeuristic : uint8_t
{
	BDSH_ClosestToBot                                  = 0,
	BDSH_FarthestFromBot                               = 1,
	BDSH_FarthestFromPlayer                            = 2,
	BDSH_END                                           = 3
};

// Enum OLGame.OLTypes.EVOContext
enum class EVOContext : uint8_t
{
	EVOC_Undefined                                     = 0,
	EVOC_Kismet                                        = 1,
	EVOC_AfterSpawn                                    = 2,
	EVOC_ReactToDisturbance                            = 3,
	EVOC_InvestigateDisturbance                        = 4,
	EVOC_ReactToPlayerBeforeChase                      = 5,
	EVOC_ReactNoChase                                  = 6,
	EVOC_StartChaseNoReaction                          = 7,
	EVOC_StartChase                                    = 8,
	EVOC_StartChaseMultiple                            = 9,
	EVOC_JoinChase                                     = 10,
	EVOC_LostSightOfPlayer                             = 11,
	EVOC_ReachedLastKnownPosition                      = 12,
	EVOC_ReachedLastKnownPositionMultiple              = 13,
	EVOC_ReachedInvestigationPoint                     = 14,
	EVOC_FinishedInvestigatingPoint                    = 15,
	EVOC_InvestigationGiveUp                           = 16,
	EVOC_InvestigationGiveUpMultiple                   = 17,
	EVOC_AttackPlayer                                  = 18,
	EVOC_KillingPlayer                                 = 19,
	EVOC_DeathGripStarted                              = 20,
	EVOC_DeathGripPlayerEscaped                        = 21,
	EVOC_ChaseClosingInToPlayer                        = 22,
	EVOC_ChaseReachedLeashLimit                        = 23,
	EVOC_SawPlayerEnterHidingSpot                      = 24,
	EVOC_FoundHiddenPlayer                             = 25,
	EVOC_PatrolRandom                                  = 26,
	EVOC_InvestigateRandom                             = 27,
	EVOC_ChaseRandom                                   = 28,
	EVOC_PatrolQuestion                                = 29,
	EVOC_PatrolAnswer                                  = 30,
	EVOC_InvestigateQuestion                           = 31,
	EVOC_InvestigateAnswer                             = 32,
	EVOC_END                                           = 33
};

// Enum OLGame.OLTypes.EDeathCountLoopMode
enum class EDeathCountLoopMode : uint8_t
{
	ELM_Random                                         = 0,
	ELM_Loop                                           = 1,
	ELM_RepeatLast                                     = 2,
	ELM_END                                            = 3
};

// Enum OLGame.OLTypes.OutlastGameType
enum class EOutlastGameType : uint8_t
{
	OGT_Outlast2                                       = 0,
	OGT_Demo                                           = 1,
	OGT_END                                            = 2
};

// Enum OLGame.OLTypes.EForceFeedbackWaveformTemplate
enum class EForceFeedbackWaveformTemplate : uint8_t
{
	FFW_None                                           = 0,
	FFW_A                                              = 1,
	FFW_B                                              = 2,
	FFW_C                                              = 3,
	FFW_D                                              = 4,
	FFW_E                                              = 5,
	FFW_END                                            = 6
};

// Enum OLGame.OLTypes.EDamageType
enum class EDamageType : uint8_t
{
	EDTP_None                                          = 0,
	EDTP_Default                                       = 1,
	EDTP_GenericHit                                    = 2,
	EDTP_Electrified                                   = 3,
	EDTP_Fire                                          = 4,
	EDTP_Fell                                          = 5,
	EDTP_Scripted                                      = 6,
	EDTP_SpikyPlant                                    = 7,
	EDTP_OutOfAir                                      = 8,
	EDTP_Arrow                                         = 9,
	EDTP_Throwable                                     = 10,
	EDTP_CrucifiedHands                                = 11,
	EDTP_Custom                                        = 12,
	EDTP_Debug                                         = 13,
	EDTP_END                                           = 14
};

// Enum OLGame.OLPawn.ESpecialMoveType
enum class ESpecialMoveType : uint8_t
{
	SMT_None                                           = 0,
	SMT_Crouch                                         = 1,
	SMT_Uncrouch                                       = 2,
	SMT_JumpOnSpot                                     = 3,
	SMT_Dodge                                          = 4,
	SMT_BigLanding                                     = 5,
	SMT_JumpOver                                       = 6,
	SMT_JumpOverAndGrabLedge                           = 7,
	SMT_SlideOver                                      = 8,
	SMT_ClimbUpObstacle                                = 9,
	SMT_ClimbUpWall                                    = 10,
	SMT_ClimbOverWall                                  = 11,
	SMT_ClimbUpToCrawl                                 = 12,
	SMT_StepUpAndLand                                  = 13,
	SMT_EnterLookBack                                  = 14,
	SMT_ExitLookBack                                   = 15,
	SMT_GrabLedgeFromGround                            = 16,
	SMT_GrabLedgeFromAir                               = 17,
	SMT_LedgeHangTransition                            = 18,
	SMT_ClimbUpLedge                                   = 19,
	SMT_DropFromLedge                                  = 20,
	SMT_GrabAndClimb                                   = 21,
	SMT_EnterLedgeWalk                                 = 22,
	SMT_ExitLedgeWalk                                  = 23,
	SMT_LedgeWalkTransition                            = 24,
	SMT_JumpFromLedgeWalk                              = 25,
	SMT_StepOffFromLedgeWalk                           = 26,
	SMT_EnterSqueeze                                   = 27,
	SMT_ExitSqueeze                                    = 28,
	SMT_AutomaticSqueeze                               = 29,
	SMT_SqueezeReload                                  = 30,
	SMT_EnterDoorInteraction                           = 31,
	SMT_OpenDoorInstant                                = 32,
	SMT_OpenDoorPartial                                = 33,
	SMT_TryOpenLockedDoor                              = 34,
	SMT_KnockOnDoor                                    = 35,
	SMT_RunThroughDoor                                 = 36,
	SMT_CloseDoor                                      = 37,
	SMT_CloseDoorPositionned                           = 38,
	SMT_ClearClosingDoor                               = 39,
	SMT_DoorClosedFromOtherSide                        = 40,
	SMT_OpenLockerFromOutside                          = 41,
	SMT_EnterLocker                                    = 42,
	SMT_ExitLocker                                     = 43,
	SMT_ExitOpenLocker                                 = 44,
	SMT_EnterBed                                       = 45,
	SMT_ExitBed                                        = 46,
	SMT_BedReload                                      = 47,
	SMT_EnterLadderFromGround                          = 48,
	SMT_EnterLadderFromAbove                           = 49,
	SMT_ExitLadderOnGround                             = 50,
	SMT_ExitLadderOnTop                                = 51,
	SMT_DropFromLadder                                 = 52,
	SMT_GrabLadderFromAir                              = 53,
	SMT_PickupObject                                   = 54,
	SMT_CSA                                            = 55,
	SMT_EnterStruggle                                  = 56,
	SMT_ExitStruggle                                   = 57,
	SMT_KilledInStruggle                               = 58,
	SMT_StartPushingObject                             = 59,
	SMT_StopPushingObject                              = 60,
	SMT_PushFromLedgeProcedural                        = 61,
	SMT_PushFromLedgeAnimated                          = 62,
	SMT_EnterContextualLean                            = 63,
	SMT_ExitContextualLean                             = 64,
	SMT_ExitContextualLeanForward                      = 65,
	SMT_ContextualLeanCrouch                           = 66,
	SMT_ContextualLeanUncrouch                         = 67,
	SMT_ContextualLeanInsideTransition                 = 68,
	SMT_SlideToCrouch                                  = 69,
	SMT_SlideToFreeCrawl                               = 70,
	SMT_SlideToConstrainedCrawl                        = 71,
	SMT_SlideUnder                                     = 72,
	SMT_SlideToLedge                                   = 73,
	SMT_SlideUnderBed                                  = 74,
	SMT_EnterCrawl                                     = 75,
	SMT_ExitCrawl                                      = 76,
	SMT_EnterAutoCrawl                                 = 77,
	SMT_OpenWindow                                     = 78,
	SMT_CloseWindow                                    = 79,
	SMT_LockDoor                                       = 80,
	SMT_UnlockDoor                                     = 81,
	SMT_UnlockAndOpenDoor                              = 82,
	SMT_EnterBasement                                  = 83,
	SMT_ExitBasement                                   = 84,
	SMT_EnterSlidingSlope                              = 85,
	SMT_ExitSlidingSlope                               = 86,
	SMT_EnterTripping                                  = 87,
	SMT_EnterHurting                                   = 88,
	SMT_EnterHidingBarrel                              = 89,
	SMT_ExitHidingBarrel                               = 90,
	SMT_EnterWardRobe                                  = 91,
	SMT_TryOpenLockedWardRobe                          = 92,
	SMT_ExitWardRobe                                   = 93,
	SMT_AdjustPositionForPeekFromWardrobe              = 94,
	SMT_EnterUnderwater                                = 95,
	SMT_ExitUnderwater                                 = 96,
	SMT_AnimatedDeath                                  = 97,
	SMT_EnterRaft                                      = 98,
	SMT_ExitRaft                                       = 99,
	SMT_PutGlassesOn                                   = 100,
	SMT_BeamLanding                                    = 101,
	SMT_ClimbUpOnBeam                                  = 102,
	SMT_GetUpAfterPunt                                 = 103,
	SMT_OpenInventory                                  = 104,
	SMT_CloseInventory                                 = 105,
	SMT_UseBandage                                     = 106,
	SMT_RaiseCamcorderHud                              = 107,
	SMT_LowerCamcorderHud                              = 108,
	SMT_PickupObjectForSnapshot                        = 109,
	SMT_DropObjectFromSnapshot                         = 110,
	SMT_RunStumble                                     = 111,
	SMT_WatchCrucifiedHands                            = 112,
	SMT_FallingDeath                                   = 113,
	SMT_HeroGrabbedFromSqueeze                         = 114,
	SMT_HeroGrabbedFromLocker                          = 115,
	SMT_HeroGrabbedFromBed                             = 116,
	SMT_HeroGrabbedFromUnder                           = 117,
	SMT_HeroGrabbedFromBarrel                          = 118,
	SMT_HeroGrabbedFromWardrobe                        = 119,
	SMT_HeroGrabbedUnderwater                          = 120,
	SMT_HeroFatalityBarrel                             = 121,
	SMT_HeroKilled                                     = 122,
	SMT_HeroEnterDeathGrip                             = 123,
	SMT_HeroDeathGripKill                              = 124,
	SMT_HeroDeathGripEscape                            = 125,
	SMT_HeroMultiKilled                                = 126,
	SMT_HeroScriptedContact                            = 127,
	SMT_HeroAttackedCrawling                           = 128,
	SMT_Dying                                          = 129,
	SMT_AttackNormal                                   = 130,
	SMT_AttackDirectional                              = 131,
	SMT_AttackLocker                                   = 132,
	SMT_AttackBed                                      = 133,
	SMT_AttackGrabUnder                                = 134,
	SMT_AttackQuick                                    = 135,
	SMT_AttackBack                                     = 136,
	SMT_AttackPush                                     = 137,
	SMT_AttackCrawl                                    = 138,
	SMT_AttackCrouch                                   = 139,
	SMT_AttackBeam                                     = 140,
	SMT_AttackBarrel                                   = 141,
	SMT_AttackWardrobe                                 = 142,
	SMT_AttackCrawlingPlayer                           = 143,
	SMT_AttackArrow                                    = 144,
	SMT_AttackUnderwater                               = 145,
	SMT_AttackSqueezeSuccess                           = 146,
	SMT_AttackSqueezeFail                              = 147,
	SMT_EnemyEnterDeathGrip                            = 148,
	SMT_EnemyDeathGripKill                             = 149,
	SMT_EnemyDeathGripEscape                           = 150,
	SMT_EnemyMultiKillOwner                            = 151,
	SMT_EnemyMultiKillAssitant                         = 152,
	SMT_KillHero                                       = 153,
	SMT_Investigate                                    = 154,
	SMT_InvestigateLocker                              = 155,
	SMT_InvestigateBed                                 = 156,
	SMT_InvestigateWindow                              = 157,
	SMT_InvestigateCrawl                               = 158,
	SMT_InvestigateBarrel                              = 159,
	SMT_InvestigateWardrobe                            = 160,
	SMT_InvestigateConfessional                        = 161,
	SMT_Bash                                           = 162,
	SMT_BashDoorStart                                  = 163,
	SMT_BashDoorLoop                                   = 164,
	SMT_BashDoorFinish                                 = 165,
	SMT_BashDoorFailed                                 = 166,
	SMT_Avoiding                                       = 167,
	SMT_Knockedback                                    = 168,
	SMT_TurnOnSpot                                     = 169,
	SMT_AlignAnim                                      = 170,
	SMT_SlideToNavMesh                                 = 171,
	SMT_Disturbed                                      = 172,
	SMT_ReactToPlayer                                  = 173,
	SMT_EnemyVault                                     = 174,
	SMT_EnemyJump                                      = 175,
	SMT_EnemyPassAndCloseDoor                          = 176,
	SMT_EnemyUnlockAndOpenDoor                         = 177,
	SMT_EnemyOpenWindow                                = 178,
	SMT_EnemyBashThroughWindow                         = 179,
	SMT_WaypointAnim                                   = 180,
	SMT_EnemySlamDoor                                  = 181,
	SMT_EnemyEnterAmbush                               = 182,
	SMT_EnemyExitAmbush                                = 183,
	SMT_EnemyShootBlindArrow                           = 184,
	SMT_EnemyShootScriptedArrow                        = 185,
	SMT_EnemyEnterCrawl                                = 186,
	SMT_EnemyExitCrawl                                 = 187,
	SMT_EnemyEnterBeamPerch                            = 188,
	SMT_EnemyExitPerchToBeam                           = 189,
	SMT_EnemyExitStairs                                = 190,
	SMT_EnemyAnimatedUnspawn                           = 191,
	SMT_EnemyEquipWeapon                               = 192,
	SMT_EnemyUnequipWeapon                             = 193,
	SMT_MartaWallBreak                                 = 194,
	SMT_InnerDemonScare                                = 195,
	SMTTT_FixCompileErrorWithSteam_SMT_END             = 196,
	ESpecialMoveType_END                               = 197
};

// Enum OLGame.OLPawn.ELocomotionMode
enum class ELocomotionMode : uint8_t
{
	LM_Walk                                            = 0,
	LM_Fall                                            = 1,
	LM_SpecialMove                                     = 2,
	LM_Ladder                                          = 3,
	LM_LedgeHang                                       = 4,
	LM_LedgeWalk                                       = 5,
	LM_Squeeze                                         = 6,
	LM_Door                                            = 7,
	LM_Locker                                          = 8,
	LM_Cinematic                                       = 9,
	LM_Bed                                             = 10,
	LM_LookBack                                        = 11,
	LM_Struggle                                        = 12,
	LM_Grabbed                                         = 13,
	LM_Pushing                                         = 14,
	LM_ContextualLean                                  = 15,
	LM_FreeCrawl                                       = 16,
	LM_ConstrainedCrawl                                = 17,
	LM_DeathGrip                                       = 18,
	LM_SlidingSlope                                    = 19,
	LM_HiddenInBarrel                                  = 20,
	LM_HiddenInWardrobe                                = 21,
	LM_PeekFromWardrobe                                = 22,
	LM_Beam                                            = 23,
	LM_HiddenUnderwater                                = 24,
	LM_River                                           = 25,
	LM_PairedWalk                                      = 26,
	LM_Punt                                            = 27,
	LM_Swimming                                        = 28,
	LM_Inventory                                       = 29,
	LM_CamcorderHud                                    = 30,
	LM_LookingAtObject                                 = 31,
	LM_HoldingBaby                                     = 32,
	LM_END                                             = 33
};

// Enum OLGame.OLPawn.EAdjustPositionTargetType
enum class EAdjustPositionTargetType : uint8_t
{
	APTT_TargetAtStart                                 = 0,
	APTT_TargetAtEnd                                   = 1,
	APTT_END                                           = 2
};

// Enum OLGame.OLPawn.ProceduralAnimInterpType
enum class EProceduralAnimInterpType : uint8_t
{
	PAIT_Smooth                                        = 0,
	PAIT_Linear                                        = 1,
	PAIT_Decel                                         = 2,
	PAIT_Accel                                         = 3,
	PAIT_ExpDecel                                      = 4,
	PAIT_ExpAccel                                      = 5,
	PAIT_EaseOut                                       = 6,
	PAIT_END                                           = 7
};

// Enum OLGame.OLPawn.NoiseChannelType
enum class ENoiseChannelType : uint8_t
{
	NCT_None                                           = 0,
	NCT_Movement                                       = 1,
	NCT_Camcorder                                      = 2,
	NCT_END                                            = 3
};

// Enum OLGame.OLPawn.ClearanceTestType
enum class EClearanceTestType : uint8_t
{
	CTT_Navmesh                                        = 0,
	CTT_Geometry                                       = 1,
	CTT_END                                            = 2
};

// Enum OLGame.OLPawn.EPhysicsLOD
enum class EPhysicsLOD : uint8_t
{
	PLOD_Complex                                       = 0,
	PLOD_SimpleAdv                                     = 1,
	PLOD_Simple                                        = 2,
	PLOD_END                                           = 3
};

// Enum OLGame.OLPawn.CameraRotationMode
enum class ECameraRotationMode : uint8_t
{
	CRM_UserControlled                                 = 0,
	CRM_Limited                                        = 1,
	CRM_Spring                                         = 2,
	CRM_FullyAnimated                                  = 3,
	CRM_Locked                                         = 4,
	CRM_END                                            = 5
};

// Enum OLGame.OLAIConfig.EWeapon
enum class EWeapon : uint8_t
{
	Weapon_None                                        = 0,
	Weapon_Knife                                       = 1,
	Weapon_Machete                                     = 2,
	Weapon_Axe                                         = 3,
	Weapon_MarthaMace                                  = 4,
	Weapon_HereticBoneSword                            = 5,
	Weapon_CrawlerShiv                                 = 6,
	Weapon_END                                         = 7
};

// Enum OLGame.OLAIConfig.EDoorClosingBehavior
enum class EDoorClosingBehavior : uint8_t
{
	DCB_Never                                          = 0,
	DCB_Always                                         = 1,
	DCB_Normal                                         = 2,
	DCB_END                                            = 3
};

// Enum OLGame.OLAIConfig.LookAtNoisePreset
enum class ELookAtNoisePreset : uint8_t
{
	LANP_None                                          = 0,
	LANP_SlowScan                                      = 1,
	LANP_FastScan                                      = 2,
	LANP_SlowDrift                                     = 3,
	LANP_FastDrift                                     = 4,
	LANP_SlowRandom                                    = 5,
	LANP_FastRandom                                    = 6,
	LANP_Custom                                        = 7,
	LANP_END                                           = 8
};

// Enum OLGame.OLAIConfig.LookAtNoiseType
enum class ELookAtNoiseType : uint8_t
{
	LANT_Scan                                          = 0,
	LANT_Drift                                         = 1,
	LANT_Random                                        = 2,
	LANT_END                                           = 3
};

// Enum OLGame.OLEnemyPawn.MultiplicityConfig
enum class EMultiplicityConfig : uint8_t
{
	MC_ClassDefault                                    = 0,
	MC_Allow                                           = 1,
	MC_UnspawnExisting                                 = 2,
	MC_DontSpawnIfExists                               = 3,
	MC_END                                             = 4
};

// Enum OLGame.OLEnemyPawn.InvestigationAnimType
enum class EInvestigationAnimType : uint8_t
{
	IAT_OnSpot                                         = 0,
	IAT_Narrow                                         = 1,
	IAT_Broad                                          = 2,
	IAT_Full                                           = 3,
	IAT_END                                            = 4
};

// Enum OLGame.OLEnemyPawn.EFacialSystemState
enum class EFacialSystemState : uint8_t
{
	FSS_None                                           = 0,
	FSS_IdleUnaware                                    = 1,
	FSS_IdleAlert                                      = 2,
	FSS_Chase                                          = 3,
	FSS_Investigate                                    = 4,
	FSS_END                                            = 5
};

// Enum OLGame.OLEnemyPawn.EFacialAnimSource
enum class EFacialAnimSource : uint8_t
{
	FAS_Default                                        = 0,
	FAS_Scripted                                       = 1,
	FAS_SpecialMove                                    = 2,
	FAS_Other                                          = 3,
	FAS_END                                            = 4
};

// Enum OLGame.OLEnemyPawn.EAttackSide
enum class EAttackSide : uint8_t
{
	EAS_Left                                           = 0,
	EAS_Right                                          = 1,
	EAS_Middle                                         = 2,
	EAS_END                                            = 3
};

// Enum OLGame.OLEnemyPawn.EEnemyAnimStyle
enum class EEnemyAnimStyle : uint8_t
{
	EM_Unaware                                         = 0,
	EM_Alert                                           = 1,
	EM_END                                             = 2
};

// Enum OLGame.OLEnemyPawn.StairsStyle
enum class EStairsStyle : uint8_t
{
	SS_Slow                                            = 0,
	SS_Fast                                            = 1,
	SS_Run                                             = 2,
	SS_END                                             = 3
};

// Enum OLGame.OLEnemyPawn.ERotationMode
enum class ERotationMode : uint8_t
{
	RM_FaceVelocity                                    = 0,
	RM_FaceTarget                                      = 1,
	RM_Explicit                                        = 2,
	RM_END                                             = 3
};

// Enum OLGame.OLEnemyPawn.EAILocoMode
enum class EAILocoMode : uint8_t
{
	ALM_Normal                                         = 0,
	ALM_FaceOff                                        = 1,
	ALM_DeathGrip                                      = 2,
	ALM_Stairs                                         = 3,
	ALM_ConstrainedCrawl                               = 4,
	ALM_FreeCrawl                                      = 5,
	ALM_Scripted                                       = 6,
	ALM_Disturbed                                      = 7,
	ALM_Demonic                                        = 8,
	ALM_DirectionalAttack                              = 9,
	ALM_Beam                                           = 10,
	ALM_Ambush                                         = 11,
	ALM_Perched                                        = 12,
	ALM_PairedWalk                                     = 13,
	ALM_ConstrainedCrouch                              = 14,
	ALM_END                                            = 15
};

// Enum OLGame.OLEnemyPawn.EnemyType
enum class EnemyType : uint8_t
{
	ET_Generic                                         = 0,
	ET_Martha                                          = 1,
	ET_InnerDemon                                      = 2,
	ET_Heretic                                         = 3,
	ET_Syphilitic                                      = 4,
	ET_Crawler                                         = 5,
	ET_NickAndLaird                                    = 6,
	ET_Jessica                                         = 7,
	ET_Lynn                                            = 8,
	ET_END                                             = 9
};

// Enum OLGame.OLAIAnimMapping.AIAnimId
enum class EAIAnimId : uint8_t
{
	AAI_Idle                                           = 0,
	AAI_FacialUnaware                                  = 1,
	AAI_FacialAware                                    = 2,
	AAI_FacialChase                                    = 3,
	AAI_FacialSurprised                                = 4,
	AAI_FacialInvestigate                              = 5,
	AAI_EyesLookLR                                     = 6,
	AAI_EyesLookUD                                     = 7,
	AAI_END                                            = 8
};

// Enum OLGame.ActorFactoryOLAI.EVOMappingsMergeType
enum class EVOMappingsMergeType : uint8_t
{
	VMMT_OverrideMatching                              = 0,
	VMMT_AppendToExisting                              = 1,
	VMMT_END                                           = 2
};

// Enum OLGame.OLAIGroup.GroupFormation
enum class EGroupFormation : uint8_t
{
	GF_None                                            = 0,
	GF_SideBySide                                      = 1,
	GF_Natural                                         = 2,
	GF_CheckerBoard                                    = 3,
	GF_StraightLine                                    = 4,
	GF_Columns                                         = 5,
	GF_FlyingV                                         = 6,
	GF_END                                             = 7
};

// Enum OLGame.OLAIInvestigationPoint.IRotationAlignBehavior
enum class EIRotationAlignBehavior : uint8_t
{
	RAB_None                                           = 0,
	RAB_LookAtThisPoint                                = 1,
	RAB_LookAtTarget                                   = 2,
	RAB_LookInDirection                                = 3,
	RAB_LookInAxisEitherDirection                      = 4,
	RAB_LookInPlayerDirection                          = 5,
	RAB_END                                            = 6
};

// Enum OLGame.OLAnimBlendByEnemySpeedSimple.ESpeedType
enum class ESpeedType : uint8_t
{
	EAST_MinSpeed                                      = 0,
	EAST_MedSpeed                                      = 1,
	EAST_MaxSpeed                                      = 2,
	EAST_RunSpeed                                      = 3,
	EAST_END                                           = 4
};

// Enum OLGame.OLAnimEnemyStruggle.EStruggleAnimPhase
enum class EStruggleAnimPhase : uint8_t
{
	SAP_StartIdle                                      = 0,
	SAP_Entry                                          = 1,
	SAP_Cycle                                          = 2,
	SAP_Success                                        = 3,
	SAP_Fail                                           = 4,
	SAP_SuccessIdle                                    = 5,
	SAP_END                                            = 6
};

// Enum OLGame.OLAnimHandShielding.HandShieldingType
enum class EHandShieldingType : uint8_t
{
	HST_IdxNormal                                      = 0,
	HST_IdxHeatShieldingLow                            = 1,
	HST_IdxHeatShieldingHigh                           = 2,
	HST_IdxFoliageShielding                            = 3,
	HST_IdxFlySwatting                                 = 4,
	HST_IdxBrightLightShielding                        = 5,
	HST_IdxBranchShielding                             = 6,
	HST_END                                            = 7
};

// Enum OLGame.OLAnimLocomotion.LocomotionAnimState
enum class ELocomotionAnimState : uint8_t
{
	LAS_Idle                                           = 0,
	LAS_Moving                                         = 1,
	LAS_Starting                                       = 2,
	LAS_Stopping                                       = 3,
	LAS_Turning                                        = 4,
	LAS_END                                            = 5
};

// Enum OLGame.OLAnimNotify_Door.EDoorInteraction
enum class EDoorInteraction : uint8_t
{
	DI_Open                                            = 0,
	DI_Close                                           = 1,
	DI_END                                             = 2
};

// Enum OLGame.OLHero.EGameplayItemShape
enum class EGameplayItemShape : uint8_t
{
	GIS_None                                           = 0,
	GIS_Small                                          = 1,
	GIS_Cylinder                                       = 2,
	GIS_END                                            = 3
};

// Enum OLGame.OLHero.EOutOfItemType
enum class EOutOfItemType : uint8_t
{
	EOOIT_None                                         = 0,
	EOOIT_Batteries                                    = 1,
	EOOIT_Bandages                                     = 2,
	EOOIT_Camcorder                                    = 3,
	EOOIT_END                                          = 4
};

// Enum OLGame.OLHero.ESlidingSlopeSlideType
enum class ESlidingSlopeSlideType : uint8_t
{
	ESSST_Sliding                                      = 0,
	ESSST_Falling                                      = 1,
	ESSST_Stepping                                     = 2,
	ESSST_END                                          = 3
};

// Enum OLGame.OLHero.EUnderwaterHidingType
enum class EUnderwaterHidingType : uint8_t
{
	UHT_None                                           = 0,
	UHT_Shallow                                        = 1,
	UHT_Deep                                           = 2,
	UHT_Swimming                                       = 3,
	UHT_END                                            = 4
};

// Enum OLGame.OLHero.ERaftIdleAnimationType
enum class ERaftIdleAnimationType : uint8_t
{
	RIAT_Normal                                        = 0,
	RIAT_Broken                                        = 1,
	RIAT_END                                           = 2
};

// Enum OLGame.OLHero.RaftCollisionType
enum class ERaftCollisionType : uint8_t
{
	RCT_None                                           = 0,
	RCT_Light                                          = 1,
	RCT_Medium                                         = 2,
	RCT_Hard                                           = 3,
	RCT_END                                            = 4
};

// Enum OLGame.OLHero.EHeroBodySetup
enum class EHeroBodySetup : uint8_t
{
	HBS_Normal                                         = 0,
	HBS_NoProxy                                        = 1,
	HBS_CamcorderRaised                                = 2,
	HBS_CamcorderRaisedNoShadow                        = 3,
	HBS_CamcorderVisible                               = 4,
	HBS_END                                            = 5
};

// Enum OLGame.OLHero.EDoorClosingType
enum class EDoorClosingType : uint8_t
{
	DCT_LeftFront                                      = 0,
	DCT_LeftSide                                       = 1,
	DCT_LeftBack                                       = 2,
	DCT_LeftInside                                     = 3,
	DCT_RightFront                                     = 4,
	DCT_RightSide                                      = 5,
	DCT_RightBack                                      = 6,
	DCT_RightInside                                    = 7,
	DCT_END                                            = 8
};

// Enum OLGame.OLHero.EDoorPartialOpenType
enum class EDoorPartialOpenType : uint8_t
{
	DPOT_LeftPush                                      = 0,
	DPOT_LeftPull                                      = 1,
	DPOT_LeftSwipe                                     = 2,
	DPOT_RightPush                                     = 3,
	DPOT_RightPull                                     = 4,
	DPOT_RightSwipe                                    = 5,
	DPOT_END                                           = 6
};

// Enum OLGame.OLHero.EDoorOpeningType
enum class EDoorOpeningType : uint8_t
{
	DOT_LeftPush                                       = 0,
	DOT_LeftPull                                       = 1,
	DOT_RightPush                                      = 2,
	DOT_RightPull                                      = 3,
	DOT_END                                            = 4
};

// Enum OLGame.OLHero.ELedgeClimbType
enum class ELedgeClimbType : uint8_t
{
	LCT_ClimbUpToStand                                 = 0,
	LCT_ClimbUpToCrouch                                = 1,
	LCT_ClimbUpToCrawl                                 = 2,
	LCT_ClimbOverToFalling                             = 3,
	LCT_ClimbOverToStand                               = 4,
	LCT_ClimbUpBeam                                    = 5,
	LCT_END                                            = 6
};

// Enum OLGame.OLHero.ELedgeTransitionType
enum class ELedgeTransitionType : uint8_t
{
	LTT_LeftInside                                     = 0,
	LTT_LeftOutside                                    = 1,
	LTT_RightInside                                    = 2,
	LTT_RightOutside                                   = 3,
	LTT_LeftBeam                                       = 4,
	LTT_RightBeam                                      = 5,
	LTT_Forward                                        = 6,
	LTT_Backward                                       = 7,
	LTT_END                                            = 8
};

// Enum OLGame.OLHero.EHeroWalkingStyle
enum class EHeroWalkingStyle : uint8_t
{
	HWS_Default                                        = 0,
	HWS_Water                                          = 1,
	HWS_Limping                                        = 2,
	HWS_Hobbling                                       = 3,
	HWS_PrototypeStyleA                                = 4,
	HWS_PrototypeStyleB                                = 5,
	HWS_PrototypeStyleC                                = 6,
	HWS_PrototypeStyleD                                = 7,
	HWS_PrototypeStyleE                                = 8,
	HWS_END                                            = 9
};

// Enum OLGame.OLHero.NVGlitchType
enum class ENVGlitchType : uint8_t
{
	NVGT_SuddenDrop                                    = 0,
	NVGT_SlowDrop                                      = 1,
	NVGT_Buzz                                          = 2,
	NVGT_LastBreath                                    = 3,
	NVGT_END                                           = 4
};

// Enum OLGame.OLHero.ECamcorderState
enum class ECamcorderState : uint8_t
{
	CCS_Inactive                                       = 0,
	CCS_Active                                         = 1,
	CCS_Raising                                        = 2,
	CCS_Lowering                                       = 3,
	CCS_ReloadingActive                                = 4,
	CCS_ReloadingInactive                              = 5,
	CCS_END                                            = 6
};

// Enum OLGame.OLHero.ECamcorderMode
enum class ECamcorderMode : uint8_t
{
	CCM_Default                                        = 0,
	CCM_PoweredNightVision                             = 1,
	CCM_NightVision                                    = 2,
	CCM_END                                            = 3
};

// Enum OLGame.OLHero.ObjectivePrompt
enum class EObjectivePrompt : uint8_t
{
	EOP_None                                           = 0,
	EOP_Top                                            = 1,
	EOP_Bottom                                         = 2,
	EOP_END                                            = 3
};

// Enum OLGame.OLHero.ECornerPeekType
enum class ECornerPeekType : uint8_t
{
	ECPT_Standing                                      = 0,
	ECPT_Crouched                                      = 1,
	ECPT_END                                           = 2
};

// Enum OLGame.OLHero.EPregLynnState
enum class EPregLynnState : uint8_t
{
	PLS_Normal                                         = 0,
	PLS_Hurting                                        = 1,
	PLS_Limited                                        = 2,
	PLS_END                                            = 3
};

// Enum OLGame.OLHero.PushSideType
enum class EPushSideType : uint8_t
{
	EPST_Forward                                       = 0,
	EPST_Backward                                      = 1,
	EPST_Leftward                                      = 2,
	EPST_Rightward                                     = 3,
	EPST_Custom                                        = 4,
	EPST_END                                           = 5
};

// Enum OLGame.OLHero.EPushObjectType
enum class EPushObjectType : uint8_t
{
	POT_Left                                           = 0,
	POT_Right                                          = 1,
	POT_Low                                            = 2,
	POT_BarnDoor                                       = 3,
	POT_Light                                          = 4,
	POT_Projector                                      = 5,
	POT_END                                            = 6
};

// Enum OLGame.OLHero.CrawlModeAnimIndices
enum class ECrawlModeAnimIndices : uint8_t
{
	CMAI_IdxFree                                       = 0,
	CMAI_IdxConstrained                                = 1,
	CMAI_LookbackLeft                                  = 2,
	CMAI_LookbackRight                                 = 3,
	CMAI_END                                           = 4
};

// Enum OLGame.OLHero.CornerPeekPosition
enum class ECornerPeekPosition : uint8_t
{
	CPP_Left                                           = 0,
	CPP_Right                                          = 1,
	CPP_MiddleLeft                                     = 2,
	CPP_MiddleRight                                    = 3,
	CPP_END                                            = 4
};

// Enum OLGame.OLHero.IKTargetType
enum class EIKTargetType : uint8_t
{
	IKTT_DoorKnob                                      = 0,
	IKTT_CSAPropDestination                            = 1,
	IKTT_Other                                         = 2,
	IKTT_END                                           = 3
};

// Enum OLGame.OLHero.ESubSkinType
enum class ESubSkinType : uint8_t
{
	SST_None                                           = 0,
	SST_Injured                                        = 1,
	SST_Bandaged                                       = 2,
	SST_END                                            = 3
};

// Enum OLGame.OLHero.ESkinType
enum class ESkinType : uint8_t
{
	SkinType_Dirty                                     = 0,
	SkinType_JustCrucified                             = 1,
	SkinType_Crucified                                 = 2,
	SkinType_Bloody                                    = 3,
	SkinType_Vomit                                     = 4,
	SkinType_BloodyArms                                = 5,
	SkinType_END                                       = 6
};

// Enum OLGame.OLHeroCamera.ECameraShakeType
enum class ECameraShakeType : uint8_t
{
	ECST_Environment                                   = 0,
	ECST_Exhausted                                     = 1,
	ECST_Scripted                                      = 2,
	ECST_Wind                                          = 3,
	ECST_END                                           = 4
};

// Enum OLGame.OLAnimRiver.ERowingAnimSet
enum class ERowingAnimSet : uint8_t
{
	ERAS_RowRight                                      = 0,
	ERAS_RowLeft                                       = 1,
	ERAS_RowFastRight                                  = 2,
	ERAS_RowFastLeft                                   = 3,
	ERAS_END                                           = 4
};

// Enum OLGame.OLArrow.EArrowState
enum class EArrowState : uint8_t
{
	EAMS_Dead                                          = 0,
	EAMS_FreeTravel                                    = 1,
	EAMS_PreciseTravel                                 = 2,
	EAMS_StuckInDoor                                   = 3,
	EAMS_HeldByBot                                     = 4,
	EAMS_StuckInPawn                                   = 5,
	EAMS_END                                           = 6
};

// Enum OLGame.OLBot.BotErrorType
enum class EBotErrorType : uint8_t
{
	BET_Generic                                        = 0,
	BET_MoveFailed                                     = 1,
	BET_BadCommand                                     = 2,
	BET_NoCommand                                      = 3,
	BET_END                                            = 4
};

// Enum OLGame.OLBot.EAILogVerbosity
enum class EAILogVerbosity : uint8_t
{
	LV_Always                                          = 0,
	LV_Normal                                          = 1,
	LV_Verbose                                         = 2,
	LV_END                                             = 3
};

// Enum OLGame.OLBot.EMoveFailedReason
enum class EMoveFailedReason : uint8_t
{
	MFR_Unknown                                        = 0,
	MFR_AINotOnNavMesh                                 = 1,
	MFR_TargetNotOnNavMesh                             = 2,
	MFR_NoPathToTarget                                 = 3,
	MFR_Aborted                                        = 4,
	MFR_END                                            = 5
};

// Enum OLGame.OLBot.EMoveType
enum class EMoveType : uint8_t
{
	MT_Invalid                                         = 0,
	MT_Point                                           = 1,
	MT_Actor                                           = 2,
	MT_ManualPath                                      = 3,
	MT_Dynamic                                         = 4,
	MT_END                                             = 5
};

// Enum OLGame.OLBot.EMoveStatus
enum class EMoveStatus : uint8_t
{
	MS_Moving                                          = 0,
	MS_Success                                         = 1,
	MS_Failed                                          = 2,
	MS_Pending                                         = 3,
	MS_END                                             = 4
};

// Enum OLGame.OLBot.EAIEvent
enum class EAIEvent : uint8_t
{
	AIE_SeePlayer                                      = 0,
	AIE_HearPlayer                                     = 1,
	AIE_ReactToDisturbance                             = 2,
	AIE_InvestigateDisturbance                         = 3,
	AIE_ChasePlayer                                    = 4,
	AIE_ReactToPlayerBeforeChase                       = 5,
	AIE_ReactNoChase                                   = 6,
	AIE_StartChaseNoReaction                           = 7,
	AIE_InvestigateLostSight                           = 8,
	AIE_FindHiddenPlayer                               = 9,
	AIE_InvestigatePoint                               = 10,
	AIE_PuntPlayer                                     = 11,
	AIE_AttackPlayer                                   = 12,
	AIE_ChaseReachedLeashLimit                         = 13,
	AIE_LostSightOfPlayer                              = 14,
	AIE_ReachedLastKnownPosition                       = 15,
	AIE_ReachedInvestigationPoint                      = 16,
	AIE_FinishedInvestigatingPoint                     = 17,
	AIE_InvestigationGiveUp                            = 18,
	AIE_MoveToResumeLocation                           = 19,
	AIE_ResumePreviousActivity                         = 20,
	AIE_DeathGripStarted                               = 21,
	AIE_DeathGripPlayerEscaped                         = 22,
	AIE_DestinationUnreacheable                        = 23,
	AIE_NoPathToTarget                                 = 24,
	AIE_KillingPlayer                                  = 25,
	AIE_END                                            = 26
};

// Enum OLGame.OLBot.DisturbanceType
enum class EDisturbanceType : uint8_t
{
	EDT_Audio                                          = 0,
	EDT_Visual                                         = 1,
	EDT_END                                            = 2
};

// Enum OLGame.OLBot.DisturbanceReactionType
enum class EDisturbanceReactionType : uint8_t
{
	DRT_None                                           = 0,
	DRT_SlowDownAndLook                                = 1,
	DRT_StopAndLook                                    = 2,
	DRT_LookThenGoto                                   = 3,
	DRT_StraightToInvestigate                          = 4,
	DRT_END                                            = 5
};

// Enum OLGame.OLBot.DisturbanceReactionPhase
enum class EDisturbanceReactionPhase : uint8_t
{
	DRP_Inactive                                       = 0,
	DRP_Pending                                        = 1,
	DRP_React                                          = 2,
	DRP_Wait                                           = 3,
	DRP_Exit                                           = 4,
	DRP_END                                            = 5
};

// Enum OLGame.OLBot.ECrawlerState
enum class ECrawlerState : uint8_t
{
	EBAS_Wait                                          = 0,
	EBAS_Follow                                        = 1,
	EBAS_React                                         = 2,
	EBAS_BackOff                                       = 3,
	EBAS_Warn                                          = 4,
	EBAS_Chase                                         = 5,
	EBAS_GiveUp                                        = 6,
	EBAS_END                                           = 7
};

// Enum OLGame.OLBot.EGuardState
enum class EGuardState : uint8_t
{
	EGS_Relaxed                                        = 0,
	EGS_Alert                                          = 1,
	EGS_Attacking                                      = 2,
	EGS_END                                            = 3
};

// Enum OLGame.OLBot.ScriptedBehaviorState
enum class EScriptedBehaviorState : uint8_t
{
	SBS_None                                           = 0,
	SBS_PlayAnim                                       = 1,
	SBS_AmbiantLooking                                 = 2,
	SBS_AmbiantAntiLook                                = 3,
	SBS_WaitAndReact                                   = 4,
	SBS_MovingToResumeLocation                         = 5,
	SBS_MovingToCommandLocation                        = 6,
	SBS_PerformingCommand                              = 7,
	SBS_MovingToPlayer                                 = 8,
	SBS_PlayerContact                                  = 9,
	SBS_Guard                                          = 10,
	SBS_SpecialAttack                                  = 11,
	SBS_END                                            = 12
};

// Enum OLGame.OLBot.EWaitAndReactState
enum class EWaitAndReactState : uint8_t
{
	WRS_None                                           = 0,
	WRS_Idle                                           = 1,
	WRS_Reacting                                       = 2,
	WRS_Aware                                          = 3,
	WRS_BackToUnaware                                  = 4,
	WRS_Exiting                                        = 5,
	WRS_Exited                                         = 6,
	WRS_END                                            = 7
};

// Enum OLGame.OLBot.InvestigationPointIrrelevanceReason
enum class EInvestigationPointIrrelevanceReason : uint8_t
{
	IPIR_NoWeight                                      = 0,
	IPIR_NotInSameVolume                               = 1,
	IPIR_TooManyBotsInVolume                           = 2,
	IPIR_WasRecentlyInvestigated                       = 3,
	IPIR_TooClose                                      = 4,
	IPIR_OutsideLeash                                  = 5,
	IPIR_FindingPlayerNotAllowed                       = 6,
	IPIR_NotFindingPlayerThisTime                      = 7,
	IPIR_NotPlayerOpenedDoor                           = 8,
	IPIR_ObstacleInPath                                = 9,
	IPIR_AlreadyUnderInvestigation                     = 10,
	IPIR_ProhibitedByKismet                            = 11,
	IPIR_END                                           = 12
};

// Enum OLGame.OLBot.EOLInvestigationPointType
enum class EOLInvestigationPointType : uint8_t
{
	OLIPT_SimpleLocation                               = 0,
	OLIPT_InvestigationPoint                           = 1,
	OLIPT_Locker                                       = 2,
	OLIPT_Bed                                          = 3,
	OLIPT_Window                                       = 4,
	OLIPT_Door                                         = 5,
	OLIPT_Crawl                                        = 6,
	OLIPT_Barrel                                       = 7,
	OLIPT_Wardrobe                                     = 8,
	OLIPT_Confessional                                 = 9,
	OLIPT_END                                          = 10
};

// Enum OLGame.OLBot.PatrolType
enum class EPatrolType : uint8_t
{
	PT_None                                            = 0,
	PT_Route                                           = 1,
	PT_Point                                           = 2,
	PT_SingleWaypoint                                  = 3,
	PT_FollowActor                                     = 4,
	PT_FollowLead                                      = 5,
	PT_Ambush                                          = 6,
	PT_UnspawnAtLocation                               = 7,
	PT_END                                             = 8
};

// Enum OLGame.OLBot.ChaseMoveDestination
enum class EChaseMoveDestination : uint8_t
{
	CMD_Player                                         = 0,
	CMD_Bed                                            = 1,
	CMD_Locker                                         = 2,
	CMD_Crawl                                          = 3,
	CMD_Beam                                           = 4,
	CMD_Barrel                                         = 5,
	CMD_Wardrobe                                       = 6,
	CMD_Squeeze                                        = 7,
	CMD_LastKnownPos                                   = 8,
	CMD_AttackStrategy                                 = 9,
	CMD_FollowDistance                                 = 10,
	CMD_BackOff                                        = 11,
	CMD_END                                            = 12
};

// Enum OLGame.OLBot.AttackStrategyType
enum class EAttackStrategyType : uint8_t
{
	AIST_None                                          = 0,
	AIST_NormalAttack                                  = 1,
	AIST_FaceOff                                       = 2,
	AIST_StayBack                                      = 3,
	AIST_MultiKill                                     = 4,
	AIST_END                                           = 5
};

// Enum OLGame.OLBot.DeathGripPhase
enum class EDeathGripPhase : uint8_t
{
	DGP_None                                           = 0,
	DGP_Entry                                          = 1,
	DGP_Struggle                                       = 2,
	DGP_Kill                                           = 3,
	DGP_Escape                                         = 4,
	DGP_MultiKill                                      = 5,
	DGP_Inactive                                       = 6,
	DGP_END                                            = 7
};

// Enum OLGame.OLBot.EAIActivity
enum class EAIActivity : uint8_t
{
	AIA_None                                           = 0,
	AIA_Idle                                           = 1,
	AIA_Ambush                                         = 2,
	AIA_Patrol                                         = 3,
	AIA_Investigate                                    = 4,
	AIA_Chase                                          = 5,
	AIA_SpecialLocomotion                              = 6,
	AIA_DeathGrip                                      = 7,
	AIA_FaceOff                                        = 8,
	AIA_Scripted                                       = 9,
	AIA_PairedWalk                                     = 10,
	AIA_Matinee                                        = 11,
	AIA_END                                            = 12
};

// Enum OLGame.OLBotCondition_Difficulty.BotDifficultyCondition
enum class EBotDifficultyCondition : uint8_t
{
	BDC_LesserOrEqualsTo                               = 0,
	BDC_Equals                                         = 1,
	BDC_GreaterOrEqualsTo                              = 2,
	BDC_END                                            = 3
};

// Enum OLGame.OLGame.GameplayDataType
enum class EGameplayDataType : uint8_t
{
	GDT_CheckpointReached                              = 0,
	GDT_Death                                          = 1,
	GDT_CamcorderReloaded                              = 2,
	GDT_BatteryPickedUp                                = 3,
	GDT_Movement                                       = 4,
	GDT_OpenDoorFast                                   = 5,
	GDT_CloseDoorFast                                  = 6,
	GDT_OpenDoorSlow                                   = 7,
	GDT_CloseDoorSlow                                  = 8,
	GDT_LockDoor                                       = 9,
	GDT_UnlockDoor                                     = 10,
	GDT_OpenWindow                                     = 11,
	GDT_CloseWindow                                    = 12,
	GDT_Hiding                                         = 13,
	GDT_Ghosting                                       = 14,
	GDT_Idle                                           = 15,
	GDT_BandagePickedUp                                = 16,
	GDT_BandageUsed                                    = 17,
	GDT_Damage                                         = 18,
	GDT_RecordingMoment                                = 19,
	GDT_GenericPickup                                  = 20,
	GDT_END                                            = 21
};

// Enum OLGame.OLGame.EDifficultyModeModifier
enum class EDifficultyModeModifier : uint8_t
{
	EDMM_Easier                                        = 0,
	EDMM_Untouched                                     = 1,
	EDMM_Harder                                        = 2,
	EDMM_END                                           = 3
};

// Enum OLGame.OLGame.EDifficultyMode
enum class EDifficultyMode : uint8_t
{
	EDM_Easy                                           = 0,
	EDM_Normal                                         = 1,
	EDM_NormalPlus                                     = 2,
	EDM_Hard                                           = 3,
	EDM_HardPlus                                       = 4,
	EDM_Nightmare                                      = 5,
	EDM_END                                            = 6
};

// Enum OLGame.OLGame.EDifficultyModeOption
enum class EDifficultyModeOption : uint8_t
{
	EDMO_Normal                                        = 0,
	EDMO_Hard                                          = 1,
	EDMO_Nightmare                                     = 2,
	EDMO_Insane                                        = 3,
	EDMO_Easy                                          = 4,
	EDMO_END                                           = 5
};

// Enum OLGame.OLBushesVolume.EBushHidingStance
enum class EBushHidingStance : uint8_t
{
	EBHS_CrawlOnly                                     = 0,
	EBHS_CrouchedAndCrawl                              = 1,
	EBHS_Any                                           = 2,
	EBHS_END                                           = 3
};

// Enum OLGame.OLCamcorderFilesHud.EFolderCategory
enum class EFolderCategory : uint8_t
{
	EFC_01_Genesis                                     = 0,
	EFC_02_Job                                         = 1,
	EFC_03_Lamentations                                = 2,
	EFC_04_Judges                                      = 3,
	EFC_05_Leviticus                                   = 4,
	EFC_06_Revelations                                 = 5,
	EFC_END                                            = 6
};

// Enum OLGame.OLCamcorderFilesHud.ESortingCategoryType
enum class ESortingCategoryType : uint8_t
{
	ESCT_Chronologically                               = 0,
	ESCT_Category                                      = 1,
	ESCT_Type                                          = 2,
	ESCT_END                                           = 3
};

// Enum OLGame.OLCheatManager.EDebugTrajectoryType
enum class EDebugTrajectoryType : uint8_t
{
	DTT_Walking                                        = 0,
	DTT_Falling                                        = 1,
	DTT_AdjustPosition                                 = 2,
	DTT_ProceduralAnim                                 = 3,
	DTT_SpecialMove                                    = 4,
	DTT_Camera                                         = 5,
	DTT_Other                                          = 6,
	DTT_END                                            = 7
};

// Enum OLGame.OLCollectiblePickup.EPickupNightVisionState
enum class EPickupNightVisionState : uint8_t
{
	PNVS_DoNothing                                     = 0,
	PNVS_ForceNightVision                              = 1,
	PNVS_ForceNoNightVision                            = 2,
	PNVS_END                                           = 3
};

// Enum OLGame.OLCollectiblePickup.ECollectibleType
enum class ECollectibleType : uint8_t
{
	ECT_Static                                         = 0,
	ECT_Dynamic                                        = 1,
	ECT_END                                            = 2
};

// Enum OLGame.OLEngine.LoadGameResult
enum class ELoadGameResult : uint8_t
{
	LGR_LoadError                                      = 0,
	LGR_BadCheckpoint                                  = 1,
	LGR_CheckpointNotDownloaded                        = 2,
	LGR_SuccessOnLastCheckpoint                        = 3,
	LGR_Success                                        = 4,
	LGR_END                                            = 5
};

// Enum OLGame.OLEngine.ECheckpointAction
enum class ECheckpointAction : uint8_t
{
	Checkpoint_Default                                 = 0,
	Checkpoint_Load                                    = 1,
	Checkpoint_SaveToDisk                              = 2,
	Checkpoint_SaveToMemory                            = 3,
	Checkpoint_END                                     = 4
};

// Enum OLGame.OLDoor.DoorEventType
enum class EDoorEventType : uint8_t
{
	DET_StartOpening                                   = 0,
	DET_Opened                                         = 1,
	DET_Closed                                         = 2,
	DET_TriedOnLocked                                  = 3,
	DET_OpenThresholdReached                           = 4,
	DET_Bashed                                         = 5,
	DET_StartedBashing                                 = 6,
	DET_StartedClosing                                 = 7,
	DET_Locked                                         = 8,
	DET_Unlocked                                       = 9,
	DET_END                                            = 10
};

// Enum OLGame.OLDoor.EDoorState
enum class EDoorState : uint8_t
{
	DS_Idle                                            = 0,
	DS_Opening                                         = 1,
	DS_Closing                                         = 2,
	DS_PlayerInteracting                               = 3,
	DS_Animating                                       = 4,
	DS_Matinee                                         = 5,
	DS_END                                             = 6
};

// Enum OLGame.OLDoor.EDoorBreakState
enum class EDoorBreakState : uint8_t
{
	DBS_Normal                                         = 0,
	DBS_Breaking                                       = 1,
	DBS_Broken                                         = 2,
	DBS_END                                            = 3
};

// Enum OLGame.OLDoor.ECancelBashDirection
enum class ECancelBashDirection : uint8_t
{
	ECBD_Both                                          = 0,
	ECBD_Forward                                       = 1,
	ECBD_Backward                                      = 2,
	ECBD_END                                           = 3
};

// Enum OLGame.OLDoor.EOLDoorMeshType
enum class EOLDoorMeshType : uint8_t
{
	DMesh_Undefined                                    = 0,
	DMesh_Door_Ext                                     = 1,
	DMesh_Door_Ext_Windows                             = 2,
	DMesh_Door_Int                                     = 3,
	DMesh_School_Int                                   = 4,
	DMesh_School_Int_Window                            = 5,
	DMesh_School_Int_Locked                            = 6,
	DMesh_School_Int_Locked_Window                     = 7,
	DMesh_School_Metal_Window                          = 8,
	DMesh_School_Ext                                   = 9,
	DMesh_School_Bathroom                              = 10,
	DMesh_School_Locker                                = 11,
	DMesh_Church                                       = 12,
	DMesh_School_OneWay                                = 13,
	DMesh_SchoolWindow_OneWay                          = 14,
	DMesh_OldLockers                                   = 15,
	DMesh_ScreenDoor                                   = 16,
	DMesh_SyphiliticDoor                               = 17,
	DMesh_KnothDungeonDoor                             = 18,
	DMesh_END                                          = 19
};

// Enum OLGame.OLDoor.EDoorMaterial
enum class EDoorMaterial : uint8_t
{
	OLDM_Wood                                          = 0,
	OLDM_Metal                                         = 1,
	OLDM_School                                        = 2,
	OLDM_END                                           = 3
};

// Enum OLGame.OLDoor.EOLDoorType
enum class EOLDoorType : uint8_t
{
	DT_Normal                                          = 0,
	DT_Locker                                          = 1,
	DT_END                                             = 2
};

// Enum OLGame.OLDoor.GameFlowDoorAction
enum class EGameFlowDoorAction : uint8_t
{
	GFDA_Reset                                         = 0,
	GFDA_ClosedUnlocked                                = 1,
	GFDA_ClosedLocked                                  = 2,
	GFDA_Opened                                        = 3,
	GFDA_BrokenFwd                                     = 4,
	GFDA_BrokenBwd                                     = 5,
	GFDA_PartiallyOpened                               = 6,
	GFDA_END                                           = 7
};

// Enum OLGame.OLFlashLight.FlashlightType
enum class EFlashlightType : uint8_t
{
	EFT_Flashlight                                     = 0,
	EFT_Torch                                          = 1,
	EFT_Lantern                                        = 2,
	EFT_END                                            = 3
};

// Enum OLGame.OLFXManager.EPPSMode
enum class EPPSMode : uint8_t
{
	PPS_Default                                        = 0,
	PPS_Camcorder                                      = 1,
	PPS_NightVision                                    = 2,
	PPS_GammaCalibration                               = 3,
	PPS_Death                                          = 4,
	PPS_END                                            = 5
};

// Enum OLGame.OLGameplayItemPickup.GameFlowPickupAction
enum class EGameFlowPickupAction : uint8_t
{
	GFPA_Hide                                          = 0,
	GFPA_Unhide                                        = 1,
	GFPA_GiveAndHide                                   = 2,
	GFPA_END                                           = 3
};

// Enum OLGame.OLHidingBarrel.BarrelEventType
enum class EBarrelEventType : uint8_t
{
	EBET_StartedEntering                               = 0,
	EBET_Entered                                       = 1,
	EBET_StartedExiting                                = 2,
	EBET_Exited                                        = 3,
	EBET_EnteredWater                                  = 4,
	EBET_ExitedWater                                   = 5,
	EBET_END                                           = 6
};

// Enum OLGame.OLHidingBarrel.BarrelMaterialType
enum class EBarrelMaterialType : uint8_t
{
	BMT_EmptyBarrel                                    = 0,
	BMT_WaterBarrel                                    = 1,
	BMT_BloodBarrel                                    = 2,
	BMT_TreeStump                                      = 3,
	BMT_END                                            = 4
};

// Enum OLGame.OLHUD.EHUDMessageType
enum class EHUDMessageType : uint8_t
{
	EHMT_None                                          = 0,
	EHMT_Objective                                     = 1,
	EHMT_Tutorial                                      = 2,
	EHMT_Generic                                       = 3,
	EHMT_Interaction                                   = 4,
	EHMT_Subtitle                                      = 5,
	EHMT_ShakeMouse                                    = 6,
	EHMT_ShakeStick                                    = 7,
	EHMT_ObjectiveCam                                  = 8,
	EHMT_QTE                                           = 9,
	EHMT_END                                           = 10
};

// Enum OLGame.OLHUD.EMenuType
enum class EMenuType : uint8_t
{
	EMT_MainMenu                                       = 0,
	EMT_PauseMenu                                      = 1,
	EMT_PausedPromptMenu                               = 2,
	EMT_CleanText                                      = 3,
	EMT_Credits                                        = 4,
	EMT_END                                            = 5
};

// Enum OLGame.OLHUD.EHUDMessagePriority
enum class EHUDMessagePriority : uint8_t
{
	EHMP_Generic_SuperHighPriority                     = 0,
	EHMP_Tutorial_HighPriority                         = 1,
	EHMP_Gameplay_HighPriority                         = 2,
	EHMP_Tutorial_MediumPriority                       = 3,
	EHMP_Gameplay_MediumPriority                       = 4,
	EHMP_Tutorial_LowPriority                          = 5,
	EHMP_Gameplay_LowPriority                          = 6,
	EHMP_Gameplay_VeryLowPriority                      = 7,
	EHMP_Generic_SuperLowPriority                      = 8,
	EHMP_Generic_NoPriority                            = 9,
	EHMP_END                                           = 10
};

// Enum OLGame.OLInterpTrackPPSEffectParam.TrackPropertyType
enum class ETrackPropertyType : uint8_t
{
	TPP_MaterialInstance                               = 0,
	TPP_END                                            = 1
};

// Enum OLGame.OLLadderMarker.LadderMaterial
enum class ELadderMaterial : uint8_t
{
	LMT_Wood                                           = 0,
	LMT_Metal                                          = 1,
	LMT_END                                            = 2
};

// Enum OLGame.OLLeashMarker.ELeashType
enum class ELeashType : uint8_t
{
	ELT_CantLeave                                      = 0,
	ELT_CantEnter                                      = 1,
	ELT_END                                            = 2
};

// Enum OLGame.OLPlayerController.EOutlastAchievement
enum class EOutlastAchievement : uint8_t
{
	OA_000_Platinum                                    = 0,
	OA_001_FinishAny                                   = 1,
	OA_002_FinishHard                                  = 2,
	OA_003_FinishNightmare                             = 3,
	OA_004_FinishInsane                                = 4,
	OA_005_FinishNoHide                                = 5,
	OA_006_InsaneNoBattery                             = 6,
	OA_007_Speedrun                                    = 7,
	OA_008_GM1                                         = 8,
	OA_009_GM2                                         = 9,
	OA_010_GM3                                         = 10,
	OA_011_GM4                                         = 11,
	OA_012_GM5                                         = 12,
	OA_013_GM6                                         = 13,
	OA_014_GM7                                         = 14,
	OA_015_GM8                                         = 15,
	OA_016_MilestoneDocuments                          = 16,
	OA_017_AllDocuments                                = 17,
	OA_018_MilestoneRecordings                         = 18,
	OA_019_AllRecordings                               = 19,
	OA_020_Bandages                                    = 20,
	OA_021_Underwater                                  = 21,
	OA_022_Mike                                        = 22,
	OA_023_Slide                                       = 23,
	OA_024_Crawl                                       = 24,
	OA_END                                             = 25
};

// Enum OLGame.OLPlayerController.ZoomMovementType
enum class EZoomMovementType : uint8_t
{
	Zoom_Undefined                                     = 0,
	Zoom_MovingLeft                                    = 1,
	Zoom_NotMoving                                     = 2,
	Zoom_MovingRight                                   = 3,
	Zoom_END                                           = 4
};

// Enum OLGame.OLPlayerController.EPlayerInteractionType
enum class EPlayerInteractionType : uint8_t
{
	PIT_CSA                                            = 0,
	PIT_PickupObject                                   = 1,
	PIT_BatteriesFull                                  = 2,
	PIT_EnterBed                                       = 3,
	PIT_EnterLocker                                    = 4,
	PIT_ExitLocker                                     = 5,
	PIT_OpenDoor                                       = 6,
	PIT_OpenDoorTutorial                               = 7,
	PIT_OpenPartiallyOpenDoor                          = 8,
	PIT_CloseDoor                                      = 9,
	PIT_LockedDoor                                     = 10,
	PIT_KnockOnDoor                                    = 11,
	PIT_KnownLockedDoor                                = 12,
	PIT_KnownJammedDoor                                = 13,
	PIT_KnownBlockedDoor                               = 14,
	PIT_AutoCloseDoor                                  = 15,
	PIT_ClimbUpLedge                                   = 16,
	PIT_ReloadBatteries                                = 17,
	PIT_DeathgripQTE                                   = 18,
	PIT_DeathgripShake                                 = 19,
	PIT_PushObject                                     = 20,
	PIT_PushObjectInteraction                          = 21,
	PIT_OpenWindow                                     = 22,
	PIT_CloseWindow                                    = 23,
	PIT_LockDoor                                       = 24,
	PIT_UnlockDoor                                     = 25,
	PIT_UnlockAndOpenDoor                              = 26,
	PIT_EnterBasement                                  = 27,
	PIT_ExitBasement                                   = 28,
	PIT_EnterWardrobe                                  = 29,
	PIT_ExitWardrobe                                   = 30,
	PIT_ExitWardrobeTutorial                           = 31,
	PIT_EnterConfessional                              = 32,
	PIT_ExitConfessional                               = 33,
	PIT_EnterHidingBarrel                              = 34,
	PIT_EnterCoveredHidingBarrel                       = 35,
	PIT_ExitHidingBarrel                               = 36,
	PIT_ExitCoveredHidingBarrel                        = 37,
	PIT_EnterTreeStump                                 = 38,
	PIT_ExitTreeStump                                  = 39,
	PIT_QTEDrivenMatinee                               = 40,
	PIT_InteractiveDoorPush                            = 41,
	PIT_InteractiveDoorPull                            = 42,
	PIT_BandagesFull                                   = 43,
	PIT_PromptBleedingNoBandage                        = 44,
	PIT_PromptBleedingWithBandage                      = 45,
	PIT_PutDownCollectible                             = 46,
	PIT_InventoryUseBattery                            = 47,
	PIT_InventoryUseBandage                            = 48,
	PIT_InventoryUseCamcorder                          = 49,
	PIT_InventoryUseNoBattery                          = 50,
	PIT_InventoryUseNoBandage                          = 51,
	PIT_InventoryUseUselessBattery                     = 52,
	PIT_InventoryUseUselessBandage                     = 53,
	PIT_InventoryUseUselessBatteryNoCamcorder          = 54,
	PIT_InventoryUseNoCamcorder                        = 55,
	PIT_END                                            = 56
};

// Enum OLGame.OLOrbisEngine.OrbisDialogType
enum class EOrbisDialogType : uint8_t
{
	ODT_None                                           = 0,
	ODT_SelectSaveLocation                             = 1,
	ODT_LoadGame                                       = 2,
	ODT_SystemError                                    = 3,
	ODT_LoadedBadCheckpoint                            = 4,
	ODT_CheckpointNotDownloaded                        = 5,
	ODT_CheckpointNotValidWithSaveGame                 = 6,
	ODT_RecordingDataCorrupted                         = 7,
	ODT_PSStore                                        = 8,
	ODT_END                                            = 9
};

// Enum OLGame.OLPhysicsVolume.WaterFootstep
enum class EWaterFootstep : uint8_t
{
	WFS_Small                                          = 0,
	WFS_Deep                                           = 1,
	WFS_END                                            = 2
};

// Enum OLGame.OLPhysicsVolume.ECustomLandingType
enum class ECustomLandingType : uint8_t
{
	CLT_BigLanding                                     = 0,
	CLT_FallForward                                    = 1,
	CLT_LoseGlasses                                    = 2,
	CLT_END                                            = 3
};

// Enum OLGame.OLPlayerInput.GamepadBindingsType
enum class EGamepadBindingsType : uint8_t
{
	GBT_A                                              = 0,
	GBT_B                                              = 1,
	GBT_C                                              = 2,
	GBT_D                                              = 3,
	GBT_E                                              = 4,
	GBT_END                                            = 5
};

// Enum OLGame.OLProfileSettings.ProfileQualityLevel5
enum class EProfileQualityLevel5 : uint8_t
{
	PQL5_VeryLow                                       = 0,
	PQL5_Low                                           = 1,
	PQL5_Medium                                        = 2,
	PQL5_High                                          = 3,
	PQL5_VeryHigh                                      = 4,
	PQL5_END                                           = 5
};

// Enum OLGame.OLProfileSettings.ProfileQualityLevel3
enum class EProfileQualityLevel3 : uint8_t
{
	PQL3_Low                                           = 0,
	PQL3_Medium                                        = 1,
	PQL3_High                                          = 2,
	PQL3_END                                           = 3
};

// Enum OLGame.OLProfileSettings.ProfileQualityLevel2
enum class EProfileQualityLevel2 : uint8_t
{
	PQL2_Low                                           = 0,
	PQL2_High                                          = 1,
	PQL2_END                                           = 2
};

// Enum OLGame.OLProfileSettings.EGamepadConfigId
enum class EGamepadConfigId : uint8_t
{
	GC_TypeA                                           = 0,
	GC_TypeB                                           = 1,
	GC_TypeC                                           = 2,
	GC_TypeD                                           = 3,
	GC_TypeE                                           = 4,
	GC_END                                             = 5
};

// Enum OLGame.OLProfileSettings.ELanguage
enum class ELanguage : uint8_t
{
	EL_English                                         = 0,
	EL_French                                          = 1,
	EL_Spanish                                         = 2,
	EL_Italian                                         = 3,
	EL_German                                          = 4,
	EL_Russian                                         = 5,
	EL_Polish                                          = 6,
	EL_Brazilian                                       = 7,
	EL_Japanese                                        = 8,
	EL_Chinese                                         = 9,
	EL_END                                             = 10
};

// Enum OLGame.OLProfileSettings.EFilteringQuality
enum class EFilteringQuality : uint8_t
{
	EFQ_1x                                             = 0,
	EFQ_2x                                             = 1,
	EFQ_4x                                             = 2,
	EFQ_8x                                             = 3,
	EFQ_16x                                            = 4,
	EFQ_END                                            = 5
};

// Enum OLGame.OLProfileSettings.EAntialiasingType
enum class EAntialiasingType : uint8_t
{
	AAT_Off                                            = 0,
	AAT_FXAA                                           = 1,
	AAT_Temporal                                       = 2,
	AAT_END                                            = 3
};

// Enum OLGame.OLPushableObject.GameFlowPushableAction
enum class EGameFlowPushableAction : uint8_t
{
	GFPUA_Reset                                        = 0,
	GFPUA_PushedFwd                                    = 1,
	GFPUA_PushedBwd                                    = 2,
	GFPUA_END                                          = 3
};

// Enum OLGame.OLPushableObject.PushableEventType
enum class EPushableEventType : uint8_t
{
	PET_StartedPushing                                 = 0,
	PET_StoppedPushing                                 = 1,
	PET_UnblockedDoor                                  = 2,
	PET_BlockedDoor                                    = 3,
	PET_ReachedLimitBwd                                = 4,
	PET_ReachedLimitFwd                                = 5,
	PET_END                                            = 6
};

// Enum OLGame.OLPushableObject.EPushableCollisionType
enum class EPushableCollisionType : uint8_t
{
	PCT_NoHit                                          = 0,
	PCT_PushableHit                                    = 1,
	PCT_PlayerHit                                      = 2,
	PCT_END                                            = 3
};

// Enum OLGame.OLSeqAct_AIGuard.GuardAttackType
enum class EGuardAttackType : uint8_t
{
	GAT_Push                                           = 0,
	GAT_Attack                                         = 1,
	GAT_Kill                                           = 2,
	GAT_DeathGrip                                      = 3,
	GAT_END                                            = 4
};

// Enum OLGame.OLSeqAct_AIInvestigatePoint.ScriptedInvestigationType
enum class EScriptedInvestigationType : uint8_t
{
	SIT_SinglePoint                                    = 0,
	SIT_AllSpecifiedOnce                               = 1,
	SIT_AllSpecifiedLoop                               = 2,
	SIT_UseConfig                                      = 3,
	SIT_END                                            = 4
};

// Enum OLGame.OLSeqAct_AILookAt.LookAtBehavior
enum class ELookAtBehavior : uint8_t
{
	LAB_TurnTowardsTarget                              = 0,
	LAB_OnlyIfFacingTarget                             = 1,
	LAB_END                                            = 2
};

// Enum OLGame.OLSeqAct_AIPlayerContact.PlayerContactPawnMovementMode
enum class EPlayerContactPawnMovementMode : uint8_t
{
	PCPMM_MovePlayer                                   = 0,
	PCPMM_MoveEnemy                                    = 1,
	PCPMM_END                                          = 2
};

// Enum OLGame.OLSeqAct_AIPlayerContact.PlayerContactPawnRotationMode
enum class EPlayerContactPawnRotationMode : uint8_t
{
	PCPRM_RotateBoth                                   = 0,
	PCPRM_RotatePlayer                                 = 1,
	PCPRM_RotateEnemy                                  = 2,
	PCPRM_END                                          = 3
};

// Enum OLGame.OLSeqAct_AISetConditions.EConditionMergeType
enum class EConditionMergeType : uint8_t
{
	CMT_ClearAll                                       = 0,
	CMT_Override                                       = 1,
	CMT_AppendToExisting                               = 2,
	CMT_END                                            = 3
};

// Enum OLGame.OLSeqAct_ChangeDynamicDifficulty.EDynamicDifficultyIncreaseType
enum class EDynamicDifficultyIncreaseType : uint8_t
{
	EDDI_Decrease                                      = 0,
	EDDI_Increase                                      = 1,
	EDDI_END                                           = 2
};

// Enum OLGame.OLSeqAct_ChangeHeroType.EHeroType
enum class EHeroType : uint8_t
{
	EHT_YoungBlake                                     = 0,
	EHT_AdultBlake                                     = 1,
	EHT_END                                            = 2
};

// Enum OLGame.OLSeqAct_Dialogue.EDialogueSpeaker
enum class EDialogueSpeaker : uint8_t
{
	DSp_A                                              = 0,
	DSp_B                                              = 1,
	DSp_C                                              = 2,
	DSp_D                                              = 3,
	DSp_E                                              = 4,
	DSp_END                                            = 5
};

// Enum OLGame.OLSeqAct_DisablePrompts.EDisablePromptGroup
enum class EDisablePromptGroup : uint8_t
{
	EDPG_Tutorials                                     = 0,
	EDPG_None                                          = 1,
	EDPG_END                                           = 2
};

// Enum OLGame.OLSeqAct_Dizzy.DizzinessTemplateType
enum class EDizzinessTemplateType : uint8_t
{
	EDTT_Concussion                                    = 0,
	EDTT_Poison                                        = 1,
	EDTT_Hallucination                                 = 2,
	EDTT_FastDrop                                      = 3,
	EDTT_END                                           = 4
};

// Enum OLGame.OLSeqAct_Glasses.GlassesAction
enum class EGlassesAction : uint8_t
{
	GA_Remove                                          = 0,
	GA_Lose                                            = 1,
	GA_PickedUp                                        = 2,
	GA_SnapOn                                          = 3,
	GA_END                                             = 4
};

// Enum OLGame.OLSeqAct_HeroControl.HeroControlRotationType
enum class EHeroControlRotationType : uint8_t
{
	HCRT_LikeTarget                                    = 0,
	HCRT_None                                          = 1,
	HCRT_ToTarget                                      = 2,
	HCRT_END                                           = 3
};

// Enum OLGame.OLSeqAct_HeroSetSkinMaterials.SkinMaterialsType
enum class ESkinMaterialsType : uint8_t
{
	ESkinMT_BloodyArms                                 = 0,
	ESkinMT_Vomit                                      = 1,
	ESkinMT_END                                        = 2
};

// Enum OLGame.OLSeqAct_HeroTeleport.HeroTeleportStance
enum class EHeroTeleportStance : uint8_t
{
	HTS_Standing                                       = 0,
	HTS_Crawl                                          = 1,
	HTS_Crouch                                         = 2,
	HTS_END                                            = 3
};

// Enum OLGame.OLSeqAct_Limp.EHobbleIntensity
enum class EHobbleIntensity : uint8_t
{
	HI_VeryBad                                         = 0,
	HI_Bad                                             = 1,
	HI_NotSoBad                                        = 2,
	HI_RatherOk                                        = 3,
	HI_Healed                                          = 4,
	HI_END                                             = 5
};

// Enum OLGame.OLSeqAct_OutOfSight.OoSOp
enum class EOoSOp : uint8_t
{
	OOSO_Hide                                          = 0,
	OOSO_Unhide                                        = 1,
	OOSO_TeleportFrom                                  = 2,
	OOSO_TeleportTo                                    = 3,
	OOSO_Unspawn                                       = 4,
	OOSO_NoAction                                      = 5,
	OOSO_END                                           = 6
};

// Enum OLGame.OLSeqAct_Silhouette.SilhouetteState
enum class ESilhouetteState : uint8_t
{
	ESS_Inactive                                       = 0,
	ESS_Ready                                          = 1,
	ESS_Active                                         = 2,
	ESS_Done                                           = 3,
	ESS_END                                            = 4
};

// Enum OLGame.OLSeqAct_SplineNode.ESplineAction
enum class ESplineAction : uint8_t
{
	SA_Enable                                          = 0,
	SA_Disable                                         = 1,
	SA_DoNothing                                       = 2,
	SA_END                                             = 3
};

// Enum OLGame.OLSeqAct_Tutorial.ETutorialPriority
enum class ETutorialPriority : uint8_t
{
	ETP_High                                           = 0,
	ETP_Medium                                         = 1,
	ETP_Low                                            = 2,
	ETP_END                                            = 3
};

// Enum OLGame.OLSeqAct_WaitForCamcorderEvent.ECamcorderEventType
enum class ECamcorderEventType : uint8_t
{
	CET_CamcorderActive                                = 0,
	CET_CamcorderInactive                              = 1,
	CET_NightVisionActive                              = 2,
	CET_NightVisionInactive                            = 3,
	CET_MicrophoneActive                               = 4,
	CET_MicrophoneInactive                             = 5,
	CET_OutOfBatteries                                 = 6,
	CET_CompletelyOutOfBatteries                       = 7,
	CET_ZoomedIn                                       = 8,
	CET_END                                            = 9
};

// Enum OLGame.OLSeqAct_WaitForSpecificConditions.SpecificConditionType
enum class ESpecificConditionType : uint8_t
{
	SCT_DoorsAreOpen                                   = 0,
	SCT_DoorsAreClosed                                 = 1,
	SCT_WindowsAreOpen                                 = 2,
	SCT_WindowsAreClosed                               = 3,
	SCT_PlayerInsideAnyVolume                          = 4,
	SCT_PlayerOutsideAllVolumes                        = 5,
	SCT_PlayerIsCrawling                               = 6,
	SCT_PlayerIsCrouching                              = 7,
	SCT_PlayerIsStanding                               = 8,
	SCT_PlayerInBasicState                             = 9,
	SCT_PlayerIsHiding                                 = 10,
	SCT_PlayerInLedgeHang                              = 11,
	SCT_PlayerInLedgeWalk                              = 12,
	SCT_PlayerInLadder                                 = 13,
	SCT_PlayerInSqueeze                                = 14,
	SCT_PlayerPushing                                  = 15,
	SCT_PlayerInSlidingSlope                           = 16,
	SCT_PlayerInBarrel                                 = 17,
	SCT_PlayerInLocker                                 = 18,
	SCT_PlayerInWardrobe                               = 19,
	SCT_PlayerOnBeam                                   = 20,
	SCT_PlayerSwimming                                 = 21,
	SCT_PlayerUnderwater                               = 22,
	SCT_PlayerInInventory                              = 23,
	SCT_UsingNightVision                               = 24,
	SCT_NotUsingNightVision                            = 25,
	SCT_UsingMicrophone                                = 26,
	SCT_NotUsingMicrophone                             = 27,
	SCT_PlayerKilled                                   = 28,
	SCT_END                                            = 29
};

// Enum OLGame.OLSeqCond_DifficultyCondition.SequenceDifficultyCondition
enum class ESequenceDifficultyCondition : uint8_t
{
	SDC_LesserOrEqualsTo                               = 0,
	SDC_Equals                                         = 1,
	SDC_GreaterOrEqualsTo                              = 2,
	SDC_END                                            = 3
};

// Enum OLGame.OLSeqEvent_Door.DoorOpenEventFilter
enum class EDoorOpenEventFilter : uint8_t
{
	DOEF_Any                                           = 0,
	DOEF_QuietOnly                                     = 1,
	DOEF_NoisyOnly                                     = 2,
	DOEF_END                                           = 3
};

// Enum OLGame.OLSkelControl_GameTime.GameTimeHand
enum class EGameTimeHand : uint8_t
{
	GTH_Hour                                           = 0,
	GTH_Minute                                         = 1,
	GTH_Second                                         = 2,
	GTH_END                                            = 3
};

// Enum OLGame.OLSlidingSlopeMarker.GameFlowSlidingSlopeAction
enum class EGameFlowSlidingSlopeAction : uint8_t
{
	GFPSS_Enabled                                      = 0,
	GFPSS_Disabled                                     = 1,
	GFPSS_END                                          = 2
};

// Enum OLGame.OLSlidingSlopeMarker.SlopeLanding
enum class ESlopeLanding : uint8_t
{
	FeetSoft                                           = 0,
	FeetHard                                           = 1,
	FeetShort                                          = 2,
	LoseGlasses                                        = 3,
	SlopeLanding_END                                   = 4
};

// Enum OLGame.OLSlidingSlopeMarker.SlopeMaterial
enum class ESlopeMaterial : uint8_t
{
	SSM_Dirt                                           = 0,
	SSM_Leaves                                         = 1,
	SSM_Wood                                           = 2,
	SSM_END                                            = 3
};

// Enum OLGame.OLSoundEmitter.EmitterUpdateDetail
enum class EmitterUpdateDetail : uint8_t
{
	EUD_Irrelevant                                     = 0,
	EUD_VeryLow                                        = 1,
	EUD_Low                                            = 2,
	EUD_Normal                                         = 3,
	EUD_High                                           = 4,
	EUD_END                                            = 5
};

// Enum OLGame.OLSoundEnvironmentVolume.EVolumePriority
enum class EVolumePriority : uint8_t
{
	EVP_VeryLow                                        = 0,
	EVP_Low                                            = 1,
	EVP_Normal                                         = 2,
	EVP_High                                           = 3,
	EVP_VeryHigh                                       = 4,
	EVP_END                                            = 5
};

// Enum OLGame.OLSqueezeMarker.ESqueezeAnimType
enum class ESqueezeAnimType : uint8_t
{
	EST_HandsInFront                                   = 0,
	EST_HandsOnBack                                    = 1,
	EST_END                                            = 2
};

// Enum OLGame.OLThrowable.EThrowableState
enum class EThrowableState : uint8_t
{
	ETMS_Dead                                          = 0,
	ETMS_PreciseTravel                                 = 1,
	ETMS_FreeTravel                                    = 2,
	ETMS_RigidBody                                     = 3,
	ETMS_Sinking                                       = 4,
	ETMS_END                                           = 5
};

// Enum OLGame.OLUberPostProcessEffect.ECameraMode
enum class ECameraMode : uint8_t
{
	CM_Off                                             = 0,
	CM_On                                              = 1,
	CM_OnNightVision                                   = 2,
	CM_OffGammaScreen                                  = 3,
	CM_END                                             = 4
};

// Enum OLGame.OLUIFrontEnd_Options.ENonProfileOption
enum class ENonProfileOption : uint8_t
{
	NPO_None                                           = 0,
	NPO_DisableMotionBlur                              = 1,
	NPO_Difficulty                                     = 2,
	NPO_END                                            = 3
};

// Enum OLGame.OLUIFrontEnd_Options.EOptionSelectorType
enum class EOptionSelectorType : uint8_t
{
	OST_CheckBox                                       = 0,
	OST_Dropdown                                       = 1,
	OST_Slider                                         = 2,
	OST_KeyBinding                                     = 3,
	OST_ControllerConfigButton                         = 4,
	OST_GammaButton                                    = 5,
	OST_Label                                          = 6,
	OST_END                                            = 7
};

// Enum OLGame.OLUIFrontEnd_Options.EOptionTabs
enum class EOptionTabs : uint8_t
{
	OT_Gameplay                                        = 0,
	OT_Graphics                                        = 1,
	OT_Controls                                        = 2,
	OT_END                                             = 3
};

// Enum OLGame.OLWardrobe.WardrobeDoorEventType
enum class EWardrobeDoorEventType : uint8_t
{
	WDET_StartEntering                                 = 0,
	WDET_Entered                                       = 1,
	WDET_StartExiting                                  = 2,
	WDET_Exited                                        = 3,
	WDET_StartedPeeking                                = 4,
	WDET_StartedPeekingToExiting                       = 5,
	WDET_TriedLockedDoor                               = 6,
	WDET_LeftDoorOpened                                = 7,
	WDET_LeftDoorClosed                                = 8,
	WDET_RightDoorOpened                               = 9,
	WDET_RightDoorClosed                               = 10,
	WDET_END                                           = 11
};

// Enum OLGame.OLWaypoint.ActionSelectionMethod
enum class EActionSelectionMethod : uint8_t
{
	ASM_FirstValid                                     = 0,
	ASM_Random                                         = 1,
	ASM_DeathCount                                     = 2,
	ASM_END                                            = 3
};

// Enum OLGame.OLWindow.GameFlowWindowAction
enum class EGameFlowWindowAction : uint8_t
{
	GFWA_Reset                                         = 0,
	GFWA_Closed                                        = 1,
	GFWA_Opened                                        = 2,
	GFWA_Broken                                        = 3,
	GFWA_END                                           = 4
};

// Enum OLGame.OLWindow.EOLWindowType
enum class EOLWindowType : uint8_t
{
	OLWT_Default                                       = 0,
	OLWT_ArrowBreakable                                = 1,
	OLWT_END                                           = 2
};

// Enum OLGame.OLWindow.EWindowState
enum class EWindowState : uint8_t
{
	WS_Closed                                          = 0,
	WS_PartiallyOpened                                 = 1,
	WS_Opened                                          = 2,
	WS_Opening                                         = 3,
	WS_Closing                                         = 4,
	WS_Broken                                          = 5,
	WS_PlayerInteracting                               = 6,
	WS_BotInteracting                                  = 7,
	WS_END                                             = 8
};

// Enum OLGame.OLWindow.WindowEventType
enum class EWindowEventType : uint8_t
{
	WET_StartOpening                                   = 0,
	WET_Opened                                         = 1,
	WET_StartClosing                                   = 2,
	WET_Closed                                         = 3,
	WET_Broken                                         = 4,
	WET_END                                            = 5
};

// Enum OLGame.OLWindow.EWindowInitialState
enum class EWindowInitialState : uint8_t
{
	WIS_Closed                                         = 0,
	WIS_PartiallyOpen                                  = 1,
	WIS_Open                                           = 2,
	WIS_Broken                                         = 3,
	WIS_END                                            = 4
};


/*
# ========================================================================================= #
# Classes
# ========================================================================================= #
*/

// Class OLGame.ActorFactoryOLAmbientSound
// 0x0000 OR 0x00AC (0x00AC - 0x00AC)
// 0 OR 172 (172 - 172)
class UActorFactoryOLAmbientSound : public UActorFactoryAkAmbientSound
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.ActorFactoryOLAmbientSound");
		}

		return uClassPointer;
	};

};

// Class OLGame.ActorFactoryOLAmbientSoundMovable
// 0x0000 OR 0x00AC (0x00AC - 0x00AC)
// 0 OR 172 (172 - 172)
class UActorFactoryOLAmbientSoundMovable : public UActorFactoryOLAmbientSound
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.ActorFactoryOLAmbientSoundMovable");
		}

		return uClassPointer;
	};

};

// Class OLGame.ActorFactoryOLSoundEmittingMeshActor
// 0x0010 OR 0x00CC (0x00CC - 0x00BC)
// 16 OR 204 (204 - 188)
class UActorFactoryOLSoundEmittingMeshActor : public UActorFactoryStaticMesh
{
public:
	class UAkEvent*                                    StartEvent;                                    // 0x00BC (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    StopEvent;                                     // 0x00C4 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.ActorFactoryOLSoundEmittingMeshActor");
		}

		return uClassPointer;
	};

};

// Class OLGame.Interface_CornerOwner
// 0x0000 OR 0x0068 (0x0068 - 0x0068)
// 0 OR 104 (104 - 104)
class UInterface_CornerOwner : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.Interface_CornerOwner");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLActorFactoryInteractiveSkeletalFoliage
// 0x0000 OR 0x00BC (0x00BC - 0x00BC)
// 0 OR 188 (188 - 188)
class UOLActorFactoryInteractiveSkeletalFoliage : public UActorFactoryInteractiveSkeletalFoliage
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLActorFactoryInteractiveSkeletalFoliage");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLActorFactoryTripActor
// 0x0000 OR 0x00BC (0x00BC - 0x00BC)
// 0 OR 188 (188 - 188)
class UOLActorFactoryTripActor : public UActorFactoryStaticMesh
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLActorFactoryTripActor");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAITrigger
// 0x0008 OR 0x0250 (0x0250 - 0x0248)
// 8 OR 592 (592 - 584)
class AOLAITrigger : public AActor
{
public:
	class UCylinderComponent*                          CylinderComponent;                             // 0x0248 (0x0008) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAITrigger");
		}

		return uClassPointer;
	};

	void eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal);
	void NativeOnTouch(class AActor* Other);
	void eventPostBeginPlay();
};

// Class OLGame.OLAmbientSound
// 0x001C OR 0x0278 (0x0278 - 0x025C)
// 28 OR 632 (632 - 604)
class AOLAmbientSound : public AAkAmbientSound
{
public:
	uint32_t                                           bAllowVirtualization : 1;                      // 0x025C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bHighFidelityDynamicUpdate : 1;                // 0x025C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	TArray<class AOLAmbientSoundClone*>                Clones;                                        // 0x0260 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              MaxPathingDistance;                            // 0x0270 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaximumAudibleRange;                           // 0x0274 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAmbientSound");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAmbientSoundMovable
// 0x000C OR 0x0284 (0x0284 - 0x0278)
// 12 OR 644 (644 - 632)
class AOLAmbientSoundMovable : public AOLAmbientSound
{
public:
	class AOLSplineGameplayMarker*                     LinkedSpline;                                  // 0x0278 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              SplineOffset;                                  // 0x0280 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAmbientSoundMovable");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAmbientSoundClone
// 0x001C OR 0x0264 (0x0264 - 0x0248)
// 28 OR 612 (612 - 584)
class AOLAmbientSoundClone : public AActor
{
public:
	class USpriteComponent*                            SpriteComp;                                    // 0x0248 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class AOLAmbientSound*                             Master;                                        // 0x0250 (0x0008) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	uint32_t                                           bAllowVirtualization : 1;                      // 0x0258 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              MaxPathingDistance;                            // 0x025C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaximumAudibleRange;                           // 0x0260 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAmbientSoundClone");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLArrow
// 0x025C OR 0x04A4 (0x04A4 - 0x0248)
// 604 OR 1188 (1188 - 584)
class AOLArrow : public AActor
{
public:
	uint32_t                                           bPreviewComponents : 1;                        // 0x0248 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bHasHitHero : 1;                               // 0x0248 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bHasPlayedFlyBy : 1;                           // 0x0248 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bFireActive : 1;                               // 0x0248 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	uint32_t                                           bHasValidHeldByBotState : 1;                   // 0x0248 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bAttachedToAnimatedSocket : 1;                 // 0x0248 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	uint32_t                                           bTransitionningAttachPoint : 1;                // 0x0248 (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	class UStaticMeshComponent*                        ArrowMesh;                                     // 0x024C (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UPointLightComponent*                        FirePointLight;                                // 0x0254 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    FireEmitter1;                                  // 0x025C (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    FireEmitter2;                                  // 0x0264 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    BreakingPS;                                    // 0x026C (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UVolumetricFogLightComponent*                FogLight;                                      // 0x0274 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	EArrowState                                        ArrowState;                                    // 0x027C (0x0001) [0x0000000000000000]               
	float                                              LaunchTime;                                    // 0x0280 (0x0004) [0x0000000000000000]               
	float                                              StoppedTime;                                   // 0x0284 (0x0004) [0x0000000000000000]               
	float                                              DelayedDeleteTime;                             // 0x0288 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FArrowSettings                              Settings;                                      // 0x028C (0x0064) [0x0000000000000000]               
	struct FArrowPreciseTravelData                     PreciseTravel;                                 // 0x02F0 (0x0034) [0x0000000000000000]               
	struct FArrowShakeData                             Shake;                                         // 0x0324 (0x0014) [0x0000000000000000]               
	uint8_t                                           UnknownData00[0x8];                            // 0x0338 (0x0008) MISSED OFFSET
	struct FArrowLandingData                           Landing;                                       // 0x0340 (0x0040) [0x0000000000000000]               
	struct FArrowWobbleData                            Wobble;                                        // 0x0380 (0x0014) [0x0000000000000000]               
	uint8_t                                           UnknownData01[0xC];                            // 0x0394 (0x000C) MISSED OFFSET
	struct FArrowStuckDoorData                         StuckDoor;                                     // 0x03A0 (0x0060) [0x0000000000000000]               
	class AOLBot*                                      OwnerBot;                                      // 0x0400 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              FireDeactivationTime;                          // 0x0408 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TransitionStartTime;                           // 0x040C (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     TransitionStartLoc;                            // 0x0410 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     TransitionStartDir;                            // 0x041C (0x000C) [0x0000000000002000] (CPF_Transient)
	class AOLPawn*                                     StruckPawn;                                    // 0x0428 (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     LastWaterCheckPosition;                        // 0x0430 (0x000C) [0x0000000000002000] (CPF_Transient)
	class ALandscapeProxy*                             ActiveWaterLandscape;                          // 0x043C (0x0008) [0x0000000000002000] (CPF_Transient)
	class ULandscapeHeightfieldCollisionComponent*     LastWaterLandscapeCollidingComponent;          // 0x0444 (0x0008) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	class UAkEvent*                                    FlyByEvent;                                    // 0x044C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    ImpactEvent;                                   // 0x0454 (0x0008) [0x0000000000000002] (CPF_Const)   
	class FString                                      ArrowSwitchGroup;                              // 0x045C (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      SwitchPlayerHit;                               // 0x046C (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      SwitchWindowHit;                               // 0x047C (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      SwitchOtherHit;                                // 0x048C (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	struct FName                                       HeroThroatSocketName;                          // 0x049C (0x0008) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLArrow");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBasementWindow
// 0x0044 OR 0x028C (0x028C - 0x0248)
// 68 OR 652 (652 - 584)
class AOLBasementWindow : public AActor
{
public:
	uint32_t                                           bDisabled : 1;                                 // 0x0248 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bHalfBasement : 1;                             // 0x0248 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bInitiallyDisabled : 1;                        // 0x0248 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bHeroInteracting : 1;                          // 0x0248 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	float                                              ExplicitOcclusionFactor;                       // 0x024C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DefaultOcclusionFactor;                        // 0x0250 (0x0004) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	TArray<class UMaterialInstance*>                   MaterialOverrides;                             // 0x0254 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              WindowHeight;                                  // 0x0264 (0x0004) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	float                                              WindowWidth;                                   // 0x0268 (0x0004) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	class UStaticMeshComponent*                        FrameMesh;                                     // 0x026C (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        WindowMesh;                                    // 0x0274 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UDynamicLightEnvironmentComponent*           WindowLightEnvironment;                        // 0x027C (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UOLSoundConnectorComponent*                  SoundConnectorComp;                            // 0x0284 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBasementWindow");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
};

// Class OLGame.OLBashableObject
// 0x00FC OR 0x0344 (0x0344 - 0x0248)
// 252 OR 836 (836 - 584)
class AOLBashableObject : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObstacle;        // 0x0248 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	uint32_t                                           bEnabled : 1;                                  // 0x0250 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bCanBreakForward : 1;                          // 0x0250 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bCanBreakBackward : 1;                         // 0x0250 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bCameraShakeOnBreak : 1;                       // 0x0250 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bBreaking : 1;                                 // 0x0250 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bBroken : 1;                                   // 0x0250 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	uint32_t                                           bBrokenFwd : 1;                                // 0x0250 (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	uint32_t                                           bObstacleRegistered : 1;                       // 0x0250 (0x0004) [0x0000000000002000] [0x00000080] (CPF_Transient)
	uint32_t                                           bInitiallyEnabled : 1;                         // 0x0250 (0x0004) [0x0000000000002000] [0x00000100] (CPF_Transient)
	TArray<struct FBashableTriggerData>                TriggersForward;                               // 0x0254 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<struct FBashableTriggerData>                TriggersBackward;                              // 0x0264 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              PlayerTriggerDistFwd;                          // 0x0274 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PlayerTriggerDistSide;                         // 0x0278 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BreakDurationFwd;                              // 0x027C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BreakDurationBwd;                              // 0x0280 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SpawnPointOffset;                              // 0x0284 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    BreakingSoundEvent;                            // 0x0288 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FCameraShakeData                            CamShakeParams;                                // 0x0290 (0x0098) [0x0000000000000001] (CPF_Edit)    
	class UStaticMeshComponent*                        Mesh;                                          // 0x0328 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                              // 0x0330 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              NavmeshObstacleWidth;                          // 0x0338 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              NavmeshObstacleDepth;                          // 0x033C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BreakStartedTime;                              // 0x0340 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBashableObject");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
};

// Class OLGame.OLBlockingObject
// 0x0014 OR 0x025C (0x025C - 0x0248)
// 20 OR 604 (604 - 584)
class AOLBlockingObject : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObstacle;        // 0x0248 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	uint32_t                                           bEnabled : 1;                                  // 0x0250 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bInitiallyEnabled : 1;                         // 0x0250 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	class UStaticMeshComponent*                        Mesh;                                          // 0x0254 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBlockingObject");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
	void OnDisable();
	void OnEnable();
};

// Class OLGame.OLBotCondition
// 0x0004 OR 0x006C (0x006C - 0x0068)
// 4 OR 108 (108 - 104)
class UOLBotCondition : public UObject
{
public:
	uint32_t                                           bInversed : 1;                                 // 0x0068 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_AllOfSubConditions
// 0x0010 OR 0x007C (0x007C - 0x006C)
// 16 OR 124 (124 - 108)
class UOLBotCondition_AllOfSubConditions : public UOLBotCondition
{
public:
	TArray<class UOLBotCondition*>                     SubConditions;                                 // 0x006C (0x0010) [0x0000000004400009] (CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_AllOfSubConditions");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_AnyOfSubConditions
// 0x0010 OR 0x007C (0x007C - 0x006C)
// 16 OR 124 (124 - 108)
class UOLBotCondition_AnyOfSubConditions : public UOLBotCondition
{
public:
	TArray<class UOLBotCondition*>                     SubConditions;                                 // 0x006C (0x0010) [0x0000000004400009] (CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_AnyOfSubConditions");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_CloseToAnotherBot
// 0x0008 OR 0x0074 (0x0074 - 0x006C)
// 8 OR 116 (116 - 108)
class UOLBotCondition_CloseToAnotherBot : public UOLBotCondition
{
public:
	float                                              MaxHorzDistance;                               // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxVertDistance;                               // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_CloseToAnotherBot");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_CloseToPlayer
// 0x0008 OR 0x0074 (0x0074 - 0x006C)
// 8 OR 116 (116 - 108)
class UOLBotCondition_CloseToPlayer : public UOLBotCondition
{
public:
	float                                              MaxHorzDistance;                               // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxVertDistance;                               // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_CloseToPlayer");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_CloseToPoint
// 0x0010 OR 0x007C (0x007C - 0x006C)
// 16 OR 124 (124 - 108)
class UOLBotCondition_CloseToPoint : public UOLBotCondition
{
public:
	class AActor*                                      TestActor;                                     // 0x006C (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxHorzDistance;                               // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxVertDistance;                               // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_CloseToPoint");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_Difficulty
// 0x0002 OR 0x006E (0x006E - 0x006C)
// 2 OR 110 (110 - 108)
class UOLBotCondition_Difficulty : public UOLBotCondition
{
public:
	EBotDifficultyCondition                            ConditionType;                                 // 0x006C (0x0001) [0x0000000000000001] (CPF_Edit)    
	EDifficultyMode                                    Difficulty;                                    // 0x006D (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_Difficulty");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_FacingPlayer
// 0x0004 OR 0x0070 (0x0070 - 0x006C)
// 4 OR 112 (112 - 108)
class UOLBotCondition_FacingPlayer : public UOLBotCondition
{
public:
	float                                              MaxAngle;                                      // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_FacingPlayer");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_FacingPoint
// 0x000C OR 0x0078 (0x0078 - 0x006C)
// 12 OR 120 (120 - 108)
class UOLBotCondition_FacingPoint : public UOLBotCondition
{
public:
	class AActor*                                      TestActor;                                     // 0x006C (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxAngle;                                      // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_FacingPoint");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_FasterThan
// 0x0004 OR 0x0070 (0x0070 - 0x006C)
// 4 OR 112 (112 - 108)
class UOLBotCondition_FasterThan : public UOLBotCondition
{
public:
	float                                              Speed;                                         // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_FasterThan");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_GameFlow
// 0x0014 OR 0x0080 (0x0080 - 0x006C)
// 20 OR 128 (128 - 108)
class UOLBotCondition_GameFlow : public UOLBotCondition
{
public:
	EGameFlowCondition                                 Condition;                                     // 0x006C (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       ControlName;                                   // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       RangeEndCheckpoint;                            // 0x0078 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_GameFlow");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_HasAttackedPlayer
// 0x0004 OR 0x0070 (0x0070 - 0x006C)
// 4 OR 112 (112 - 108)
class UOLBotCondition_HasAttackedPlayer : public UOLBotCondition
{
public:
	float                                              TimeWindow;                                    // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_HasAttackedPlayer");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_HasBeenDisturbed
// 0x0004 OR 0x0070 (0x0070 - 0x006C)
// 4 OR 112 (112 - 108)
class UOLBotCondition_HasBeenDisturbed : public UOLBotCondition
{
public:
	float                                              TimeWindow;                                    // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_HasBeenDisturbed");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_HasLostSightAfterChase
// 0x0000 OR 0x006C (0x006C - 0x006C)
// 0 OR 108 (108 - 108)
class UOLBotCondition_HasLostSightAfterChase : public UOLBotCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_HasLostSightAfterChase");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_HasSeenPlayer
// 0x0004 OR 0x0070 (0x0070 - 0x006C)
// 4 OR 112 (112 - 108)
class UOLBotCondition_HasSeenPlayer : public UOLBotCondition
{
public:
	float                                              TimeWindow;                                    // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_HasSeenPlayer");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_HasStoppedChasing
// 0x0000 OR 0x006C (0x006C - 0x006C)
// 0 OR 108 (108 - 108)
class UOLBotCondition_HasStoppedChasing : public UOLBotCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_HasStoppedChasing");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_InvestigationCount
// 0x0004 OR 0x0070 (0x0070 - 0x006C)
// 4 OR 112 (112 - 108)
class UOLBotCondition_InvestigationCount : public UOLBotCondition
{
public:
	int32_t                                            Count;                                         // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_InvestigationCount");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_InVolume
// 0x0008 OR 0x0074 (0x0074 - 0x006C)
// 8 OR 116 (116 - 108)
class UOLBotCondition_InVolume : public UOLBotCondition
{
public:
	class AVolume*                                     TestVolume;                                    // 0x006C (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_InVolume");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_IsAtSpawnLocation
// 0x0004 OR 0x0070 (0x0070 - 0x006C)
// 4 OR 112 (112 - 108)
class UOLBotCondition_IsAtSpawnLocation : public UOLBotCondition
{
public:
	float                                              MaxDistance;                                   // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_IsAtSpawnLocation");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_IsChasing
// 0x0000 OR 0x006C (0x006C - 0x006C)
// 0 OR 108 (108 - 108)
class UOLBotCondition_IsChasing : public UOLBotCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_IsChasing");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_IsInvestigating
// 0x0000 OR 0x006C (0x006C - 0x006C)
// 0 OR 108 (108 - 108)
class UOLBotCondition_IsInvestigating : public UOLBotCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_IsInvestigating");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_IsPatrolling
// 0x0000 OR 0x006C (0x006C - 0x006C)
// 0 OR 108 (108 - 108)
class UOLBotCondition_IsPatrolling : public UOLBotCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_IsPatrolling");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_IsVisibleByPlayer
// 0x0000 OR 0x006C (0x006C - 0x006C)
// 0 OR 108 (108 - 108)
class UOLBotCondition_IsVisibleByPlayer : public UOLBotCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_IsVisibleByPlayer");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_PlayerCloseToPoint
// 0x0010 OR 0x007C (0x007C - 0x006C)
// 16 OR 124 (124 - 108)
class UOLBotCondition_PlayerCloseToPoint : public UOLBotCondition
{
public:
	class AActor*                                      TestActor;                                     // 0x006C (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxHorzDistance;                               // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxVertDistance;                               // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_PlayerCloseToPoint");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_PlayerFasterThan
// 0x0004 OR 0x0070 (0x0070 - 0x006C)
// 4 OR 112 (112 - 108)
class UOLBotCondition_PlayerFasterThan : public UOLBotCondition
{
public:
	float                                              Speed;                                         // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_PlayerFasterThan");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_PlayerInNightVision
// 0x0000 OR 0x006C (0x006C - 0x006C)
// 0 OR 108 (108 - 108)
class UOLBotCondition_PlayerInNightVision : public UOLBotCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_PlayerInNightVision");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_PlayerInSight
// 0x0000 OR 0x006C (0x006C - 0x006C)
// 0 OR 108 (108 - 108)
class UOLBotCondition_PlayerInSight : public UOLBotCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_PlayerInSight");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_PlayerInVolume
// 0x0008 OR 0x0074 (0x0074 - 0x006C)
// 8 OR 116 (116 - 108)
class UOLBotCondition_PlayerInVolume : public UOLBotCondition
{
public:
	class AVolume*                                     TestVolume;                                    // 0x006C (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_PlayerInVolume");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_PlayerIsCrawling
// 0x0000 OR 0x006C (0x006C - 0x006C)
// 0 OR 108 (108 - 108)
class UOLBotCondition_PlayerIsCrawling : public UOLBotCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_PlayerIsCrawling");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_PlayerIsCrouched
// 0x0000 OR 0x006C (0x006C - 0x006C)
// 0 OR 108 (108 - 108)
class UOLBotCondition_PlayerIsCrouched : public UOLBotCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_PlayerIsCrouched");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_PlayerIsFacing
// 0x0004 OR 0x0070 (0x0070 - 0x006C)
// 4 OR 112 (112 - 108)
class UOLBotCondition_PlayerIsFacing : public UOLBotCondition
{
public:
	float                                              MaxAngle;                                      // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_PlayerIsFacing");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_PlayerIsHiding
// 0x000C OR 0x0078 (0x0078 - 0x006C)
// 12 OR 120 (120 - 108)
class UOLBotCondition_PlayerIsHiding : public UOLBotCondition
{
public:
	class AActor*                                      HidingLocation;                                // 0x006C (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              MinimumDuration;                               // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_PlayerIsHiding");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_PlayerIsHurt
// 0x0004 OR 0x0070 (0x0070 - 0x006C)
// 4 OR 112 (112 - 108)
class UOLBotCondition_PlayerIsHurt : public UOLBotCondition
{
public:
	float                                              MaxHealth;                                     // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_PlayerIsHurt");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_PlayerIsPushing
// 0x0000 OR 0x006C (0x006C - 0x006C)
// 0 OR 108 (108 - 108)
class UOLBotCondition_PlayerIsPushing : public UOLBotCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_PlayerIsPushing");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_PlayerIsStanding
// 0x0000 OR 0x006C (0x006C - 0x006C)
// 0 OR 108 (108 - 108)
class UOLBotCondition_PlayerIsStanding : public UOLBotCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_PlayerIsStanding");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_PlayerLitByFlashlight
// 0x0000 OR 0x006C (0x006C - 0x006C)
// 0 OR 108 (108 - 108)
class UOLBotCondition_PlayerLitByFlashlight : public UOLBotCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_PlayerLitByFlashlight");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_PlayerUsingCamcorder
// 0x0000 OR 0x006C (0x006C - 0x006C)
// 0 OR 108 (108 - 108)
class UOLBotCondition_PlayerUsingCamcorder : public UOLBotCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_PlayerUsingCamcorder");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_PlayerWasChased
// 0x0004 OR 0x0070 (0x0070 - 0x006C)
// 4 OR 112 (112 - 108)
class UOLBotCondition_PlayerWasChased : public UOLBotCondition
{
public:
	float                                              MaxTimeAgo;                                    // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_PlayerWasChased");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBotCondition_WasSeenByPlayer
// 0x0004 OR 0x0070 (0x0070 - 0x006C)
// 4 OR 112 (112 - 108)
class UOLBotCondition_WasSeenByPlayer : public UOLBotCondition
{
public:
	float                                              TimeWindow;                                    // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBotCondition_WasSeenByPlayer");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBugTracker
// 0x0030 OR 0x0098 (0x0098 - 0x0068)
// 48 OR 152 (152 - 104)
class UOLBugTracker : public UObject
{
public:
	class FString                                      BugTrackerProject;                             // 0x0068 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	TArray<struct FOLBugTrackerBinding>                BugTrackerBindings;                            // 0x0078 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class FString                                      DefaultBugTrackerName;                         // 0x0088 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBugTracker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLCamcorderFilesHud
// 0x0144 OR 0x0330 (0x0330 - 0x01EC)
// 324 OR 816 (816 - 492)
class UOLCamcorderFilesHud : public UGFxMoviePlayer
{
public:
	class AOLHUD*                                      HUD;                                           // 0x01EC (0x0008) [0x0000000000000000]               
	uint32_t                                           bVisible : 1;                                  // 0x01F4 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bDynamicalyLoadedVOBankLoaded : 1;             // 0x01F4 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bWaitingForDynamicallyLoadedVOBank : 1;        // 0x01F4 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bShowFoundOnly : 1;                            // 0x01F4 (0x0004) [0x0000000000004000] [0x00000008] (CPF_Config)
	uint32_t                                           HiRezCamcorderPhotoTexturesIndexChanged : 1;   // 0x01F4 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bVideoEnded : 1;                               // 0x01F4 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	uint32_t                                           bIgnoreLoadingTexture : 1;                     // 0x01F4 (0x0004) [0x0000000000000000] [0x00000040] 
	class UGFxObject*                                  FolderList;                                    // 0x01F8 (0x0008) [0x0000000000002000] (CPF_Transient)
	TArray<class UGFxObject*>                          FolderSubList;                                 // 0x0200 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class FString>                              TypeNameList;                                  // 0x0210 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	TArray<class FString>                              DisplayGroundNameList;                         // 0x0220 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	ESortingCategoryType                               SortingType;                                   // 0x0230 (0x0001) [0x0000000000000000]               
	class UAkEvent*                                    PauseVOSndEvent;                               // 0x0234 (0x0008) [0x0000000000000000]               
	class UAkEvent*                                    ResumeVOSndEvent;                              // 0x023C (0x0008) [0x0000000000000000]               
	class UAkEvent*                                    MoveCursorSndEvent;                            // 0x0244 (0x0008) [0x0000000000000000]               
	class UAkEvent*                                    SelectSndEvent;                                // 0x024C (0x0008) [0x0000000000000000]               
	class UAkEvent*                                    BackSndEvent;                                  // 0x0254 (0x0008) [0x0000000000000000]               
	class UAkEvent*                                    DynamicalyLoadedVO;                            // 0x025C (0x0008) [0x0000000000002000] (CPF_Transient)
	class UAkEvent*                                    CustomVideoEventStart;                         // 0x0264 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UAkEvent*                                    CustomVideoEventStop;                          // 0x026C (0x0008) [0x0000000000002000] (CPF_Transient)
	TArray<struct FCamcorderRecord>                    CamcorderRecords;                              // 0x0274 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	int32_t                                            SplitCamcorderRecordIndex;                     // 0x0284 (0x0004) [0x0000000000004000] (CPF_Config)  
	TArray<struct FCachedNamedTexture>                 HiRezCamcorderPhotoTextures;                   // 0x0288 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FName                                       HiRezCamcorderPhotoName;                       // 0x0298 (0x0008) [0x0000000000002000] (CPF_Transient)
	int32_t                                            HiRezCamcorderPhotoTexturesIndex;              // 0x02A0 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              HiRezCamcorderPhotoTextureScale;               // 0x02A4 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FVector2D                                   HiRezCamcorderPhotoTextureTranslation;         // 0x02A8 (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FVector2D                                   HiRezCamcorderPhotoTextureTranslationSmoothInput;// 0x02B0 (0x0008) [0x0000000000002000] (CPF_Transient)
	TArray<struct FCachedNamedTexture>                 ThumbnailCamcorderPhotoTextures;               // 0x02B8 (0x0010) [0x0000000000502000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<struct FCachedThumbnailData>                LatestThumbnailCamcorderPhotoTextures;         // 0x02C8 (0x0010) [0x0000000000502000] (CPF_Transient | CPF_NeedCtorLink)
	struct FCachedThumbnailData                        LatestFullSizedPhotoTexture;                   // 0x02D8 (0x0020) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class UTexture2D*>                          FolderThumbnailCamcorderPhotoTextures;         // 0x02F8 (0x0010) [0x0000000000502000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class UTexture2D*>                          TypeThumbnailCamcorderPhotoTextures;           // 0x0308 (0x0010) [0x0000000000502000] (CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            ThumbnailCamcorderPhotoTexturesListIndex;      // 0x0318 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            ThumbnailCamcorderPhotoTexturesStartIndex;     // 0x031C (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            RecordingVOPlayingId;                          // 0x0320 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              MaxZoomFactor;                                 // 0x0324 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DelayBeforeVO;                                 // 0x0328 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LastHUDSoundTimestamp;                         // 0x032C (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLCamcorderFilesHud");
		}

		return uClassPointer;
	};

	void eventSetPCInputLabel(class FString navigationLabelUp, class FString navigationLabelLeft, class FString navigationLabelDown, class FString navigationLabelRight, class FString nextLabel, class FString previousLabel, class FString backLabel, class FString displayLabel, class FString playLabel, class FString selectLabelText);
	void SetPCInputLabelFunction(class FString navigationLabelUp, class FString navigationLabelLeft, class FString navigationLabelDown, class FString navigationLabelRight, class FString nextLabel, class FString previousLabel, class FString backLabel, class FString displayLabel, class FString playLabel, class FString selectLabelText);
	void selectConsole(class FString Console);
	void eventUsingPC();
	void eventUsingXboxOne();
	void eventUsingPS4();
	void eventSetSouthPaw(bool bSouthPaw);
	void eventSetLocalizedText(class FString zoomLabel, class FString navigationLabel, class FString cleanTextLabel, class FString selectLabel, class FString backLabel, class FString previousLabel, class FString nextLabel, class FString playLabel, class FString pauseLabel, class FString moveImage);
	void PopulateFolderList(bool optionalBRefreshOnly);
	bool eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget);
	void eventHideImageNavigateLabel();
	void eventShowImageNavigateLabel();
	void eventPause();
	void eventTogglePlayPause();
	void eventInputTypeChanged();
	void NativeInputTypeChanged();
	void NativePlaySound(class UAkEvent* SndEvent);
	void OnStop();
	void NativeOnStop();
	void NativeFullStop();
	void OnPlay();
	void NativeOnPlay();
	void OnDisplayChange();
	void NativeOnDisplayChange();
	void OnMove();
	void OnSelect();
	void OnBack();
	void OnBackOnRootMenu();
	void NativeOnBackOnRootMenu();
	void OnScrollToIndexChange(int32_t ListIndex, int32_t StartIndex, int32_t endIndex);
	void NativeOnScrollToIndexChange(int32_t ListIndex, int32_t StartIndex, int32_t endIndex, bool optionalBForce);
	void OnFullScaleImageChanged(bool bInView, class FString photoName);
	void NativeOnFullScaleImageChanged(bool bInView, class FString photoName);
	void NativeQuickOpen();
	void eventSetLargePhotoURL(int32_t folderIndex, int32_t imageIndex, class FString largePhotoURL);
	void eventSelectRecording(int32_t folderIndex, int32_t imageIndex);
	bool eventSetAllowSingleFolder(bool bAllowSingleFolder);
	bool eventSetDisplayLabel(class FString Label);
	void eventSetVisible(bool bShow);
	void eventFlagRecordingAsRead(int32_t folderIndex, int32_t recordingIndex);
	void eventDisplayChange();
	void eventRefreshData();
	bool eventSetListFocusIndex(int32_t indexA, int32_t indexB, int32_t indexC, int32_t indexD, int32_t indexE, int32_t indexF);
	bool eventSetLargeImageSize(float SizeX, float SizeY, float PosX, float PosY);
	void eventDisallowInputChangeFocus();
	void eventAllowInputChangeFocus();
	bool eventPauseVideo();
	bool eventConfigUI();
	bool eventback();
	bool eventBackToMainMenu();
	bool eventNext();
	bool eventPrevious();
	bool eventRefreshLargeImage();
	bool eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent);
};

// Class OLGame.OLCamcorderHud
// 0x00AC OR 0x0298 (0x0298 - 0x01EC)
// 172 OR 664 (664 - 492)
class UOLCamcorderHud : public UGFxMoviePlayer
{
public:
	class AOLHUD*                                      HUD;                                           // 0x01EC (0x0008) [0x0000000000000000]               
	uint32_t                                           bVisible : 1;                                  // 0x01F4 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bPaused : 1;                                   // 0x01F4 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FCamcorderHudObjects                        Objects;                                       // 0x01F8 (0x0070) [0x0000000000002000] (CPF_Transient)
	struct FCamcorderHudState                          HudState;                                      // 0x0268 (0x0030) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLCamcorderHud");
		}

		return uClassPointer;
	};

	void UpdateRecordingTime(float DeltaTime);
	bool eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget);
	void eventHandleUnpaused();
	void eventHandlePaused();
	void eventSetVisible(bool bShow);
};

// Class OLGame.OLCameraActor
// 0x0000 OR 0x04AC (0x04AC - 0x04AC)
// 0 OR 1196 (1196 - 1196)
class AOLCameraActor : public ACameraActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLCameraActor");
		}

		return uClassPointer;
	};

	void GetCameraView(float DeltaTime, struct FTPOV& OutPOV);
	void NativeGetCameraView(struct FTPOV& OutPOV);
};

// Class OLGame.OLCharacterProxy
// 0x0043 OR 0x00D0 (0x00D0 - 0x008D)
// 67 OR 208 (208 - 141)
class UOLCharacterProxy : public UActorComponent
{
public:
	struct FPointer                                    ControllerProxy;                               // 0x0090 (0x0008) [0x0000000000001002] (CPF_Const | CPF_Native)
	int32_t                                            CollisionGroups;                               // 0x0098 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              Radius;                                        // 0x009C (0x0004) [0x0000000000000000]               
	float                                              HalfHeight;                                    // 0x00A0 (0x0004) [0x0000000000000000]               
	float                                              SlopedPushDistance;                            // 0x00A4 (0x0004) [0x0000000000000000]               
	class AOLPawn*                                     Pawn;                                          // 0x00A8 (0x0008) [0x0000000000000000]               
	float                                              MeshXOffset;                                   // 0x00B0 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              AccelerationWithNoMovementTime;                // 0x00B4 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              SimplifiedStuckTime;                           // 0x00B8 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     LastMoveVelocity;                              // 0x00BC (0x000C) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           StuckLastFrame : 1;                            // 0x00C8 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           MovedLastFrame : 1;                            // 0x00C8 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bStuckOptimOn : 1;                             // 0x00C8 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	float                                              StuckOptimRetryTimeAcc;                        // 0x00CC (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLCharacterProxy");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLPlayerController
// 0x04B4 OR 0x10EC (0x10EC - 0x0C38)
// 1204 OR 4332 (4332 - 3128)
class AOLPlayerController : public AUDKPlayerController
{
public:
	class AOLHero*                                     HeroPawn;                                      // 0x0C38 (0x0008) [0x0000000000000000]               
	class AOLHUD*                                      HUD;                                           // 0x0C40 (0x0008) [0x0000000000000000]               
	class UOLInventoryManager*                         InventoryManager;                              // 0x0C48 (0x0008) [0x0000000000000000]               
	class UOLTutorialManager*                          TutorialManager;                               // 0x0C50 (0x0008) [0x0000000000000000]               
	class UOLSoundEnvironmentManager*                  SoundEnvManager;                               // 0x0C58 (0x0008) [0x0000000000000000]               
	class UOLFXManager*                                FXManager;                                     // 0x0C60 (0x0008) [0x0000000000000000]               
	class UOLAICoordinator*                            AICoordinator;                                 // 0x0C68 (0x0008) [0x0000000000000000]               
	class UOLSeqAct_SplashScreen*                      ActiveSplashScreen;                            // 0x0C70 (0x0008) [0x0000000000000000]               
	uint32_t                                           bTravellingToCheckpoint : 1;                   // 0x0C78 (0x0004) [0x0000000000000000] [0xFFFFFFFF80000000] 
	uint32_t                                           bFlushingStreaming : 1;                        // 0x0C78 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bHasCamcorder : 1;                             // 0x0C78 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bBlockedOnLoading : 1;                         // 0x0C78 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bShowingKismetControlledLoadingScreen : 1;     // 0x0C78 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bShowingLoadingOverlay : 1;                    // 0x0C78 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bClearWorldStateOnFirstCheckpoint : 1;         // 0x0C78 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	uint32_t                                           bProfileSettingsUpdated : 1;                   // 0x0C78 (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bApplyPawnCheckpointStateOnNextCheckpoint : 1; // 0x0C78 (0x0004) [0x0000000000002000] [0x00000080] (CPF_Transient)
	uint32_t                                           bRunInput : 1;                                 // 0x0C78 (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bRunHeld : 1;                                  // 0x0C78 (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bCrouchButtonDown : 1;                         // 0x0C78 (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bValidDoorHold : 1;                            // 0x0C78 (0x0004) [0x0000000000000000] [0x00000800] 
	uint32_t                                           bWardrobeValidDoorHold : 1;                    // 0x0C78 (0x0004) [0x0000000000000000] [0x00001000] 
	uint32_t                                           bInvalidateLeanInput : 1;                      // 0x0C78 (0x0004) [0x0000000000000000] [0x00002000] 
	uint32_t                                           bInvalidateReleasedUse : 1;                    // 0x0C78 (0x0004) [0x0000000000000000] [0x00004000] 
	uint32_t                                           bReloadButtonDown : 1;                         // 0x0C78 (0x0004) [0x0000000000000000] [0x00008000] 
	uint32_t                                           bLeanLeftReleased : 1;                         // 0x0C78 (0x0004) [0x0000000000000000] [0x00010000] 
	uint32_t                                           bLeanRightReleased : 1;                        // 0x0C78 (0x0004) [0x0000000000000000] [0x00020000] 
	uint32_t                                           bLookBackReleased : 1;                         // 0x0C78 (0x0004) [0x0000000000000000] [0x00040000] 
	uint32_t                                           bLeftStickReleased : 1;                        // 0x0C78 (0x0004) [0x0000000000000000] [0x00080000] 
	uint32_t                                           bReloadButtonDownReleased : 1;                 // 0x0C78 (0x0004) [0x0000000000000000] [0x00100000] 
	uint32_t                                           bBackOnCamcorderHudRoot : 1;                   // 0x0C78 (0x0004) [0x0000000000000000] [0x00200000] 
	uint32_t                                           ResetAllowFocusChange : 1;                     // 0x0C78 (0x0004) [0x0000000000000000] [0x00400000] 
	uint32_t                                           bToggleCrouch : 1;                             // 0x0C78 (0x0004) [0x0000000000000000] [0x00800000] 
	uint32_t                                           bForceToggleCrouch : 1;                        // 0x0C78 (0x0004) [0x0000000000004000] [0x01000000] (CPF_Config)
	uint32_t                                           bDeathGripNoFail : 1;                          // 0x0C78 (0x0004) [0x0000000000000000] [0x02000000] 
	uint32_t                                           bIsVideoRecording : 1;                         // 0x0C78 (0x0004) [0x0000000000000000] [0x04000000] 
	uint32_t                                           bIgnoreRecordingTime : 1;                      // 0x0C78 (0x0004) [0x0000000000000000] [0x08000000] 
	uint32_t                                           bPendingInputStyleChangedNotify : 1;           // 0x0C78 (0x0004) [0x0000000000002000] [0x10000000] (CPF_Transient)
	uint32_t                                           bOverriddenMusic : 1;                          // 0x0C78 (0x0004) [0x0000000000000000] [0x20000000] 
	uint32_t                                           bOverrideMusicStateAsMinimum : 1;              // 0x0C78 (0x0004) [0x0000000000000000] [0x40000000] 
	uint32_t                                           bTravelCheckPersistent : 1;                    // 0x0C7C (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bTravelCheckForceUnload : 1;                   // 0x0C7C (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bForceLevelReset : 1;                          // 0x0C7C (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bUsedHidingSpot : 1;                           // 0x0C7C (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bReloadedBatteries : 1;                        // 0x0C7C (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bGameStartedFromChapter : 1;                   // 0x0C7C (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bShowCompletePushablePrompt : 1;               // 0x0C7C (0x0004) [0x0000000000004000] [0x00000040] (CPF_Config)
	uint32_t                                           bBehindView : 1;                               // 0x0C7C (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bDebugFixedCam : 1;                            // 0x0C7C (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bDebugFreeCam : 1;                             // 0x0C7C (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bDebugGhost : 1;                               // 0x0C7C (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bSlowDownFPS : 1;                              // 0x0C7C (0x0004) [0x0000000000000000] [0x00000800] 
	uint32_t                                           bWasLeftMouseBtnDown : 1;                      // 0x0C7C (0x0004) [0x0000000000000000] [0x00001000] 
	uint32_t                                           bLeftMouseBtnDown : 1;                         // 0x0C7C (0x0004) [0x0000000000000000] [0x00002000] 
	uint32_t                                           bWasRightMouseBtnDown : 1;                     // 0x0C7C (0x0004) [0x0000000000000000] [0x00004000] 
	uint32_t                                           bRightMouseBtnDown : 1;                        // 0x0C7C (0x0004) [0x0000000000000000] [0x00008000] 
	uint32_t                                           bWasShiftBtnDown : 1;                          // 0x0C7C (0x0004) [0x0000000000000000] [0x00010000] 
	uint32_t                                           bShiftBtnDown : 1;                             // 0x0C7C (0x0004) [0x0000000000000000] [0x00020000] 
	int32_t                                            NumBatteries;                                  // 0x0C80 (0x0004) [0x0000000000000000]               
	int32_t                                            MaxNumBatteries;                               // 0x0C84 (0x0004) [0x0000000000000000]               
	int32_t                                            NumBandages;                                   // 0x0C88 (0x0004) [0x0000000000000000]               
	int32_t                                            MaxNumBandages;                                // 0x0C8C (0x0004) [0x0000000000000000]               
	int32_t                                            NrmMaxNumBatteries;                            // 0x0C90 (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            HardMaxNumBatteries;                           // 0x0C94 (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            NightmareMaxNumBatteries;                      // 0x0C98 (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            NrmMaxNumBandages;                             // 0x0C9C (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            HardMaxNumBandages;                            // 0x0CA0 (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            NightmareMaxNumBandages;                       // 0x0CA4 (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            DefaultNumBatteries;                           // 0x0CA8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              LowBatteryWarningThreshold;                    // 0x0CAC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              GameOverActivatedTimestamp;                    // 0x0CB0 (0x0004) [0x0000000000000000]               
	float                                              HoldActionDelay;                               // 0x0CB4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              TryExitCrawlTimeStamp;                         // 0x0CB8 (0x0004) [0x0000000000002000] (CPF_Transient)
	TArray<EPlayerInteractionType>                     AvailableInteractions;                         // 0x0CBC (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<EPlayerInteractionType>                     IgnoredInteractions;                           // 0x0CCC (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      CSAPrompt;                                     // 0x0CDC (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      PickupTargetName;                              // 0x0CEC (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class UOLProfileSettings*                          ProfileSettings;                               // 0x0CFC (0x0008) [0x0000000000000000]               
	float                                              MasterVolume;                                  // 0x0D04 (0x0004) [0x0000000000000000]               
	int32_t                                            RecordingCapturedSinceLastLookAt;              // 0x0D08 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            NumberOfPlayerDeath;                           // 0x0D0C (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FDigitalInputs                              Inputs;                                        // 0x0D10 (0x0004) [0x0000000000000000]               
	uint8_t                                            bLeanInputLeft;                                // 0x0D14 (0x0001) [0x0000000000000004] (CPF_Input)   
	uint8_t                                            bLeanInputRight;                               // 0x0D15 (0x0001) [0x0000000000000004] (CPF_Input)   
	uint8_t                                            bUseButtonDown;                                // 0x0D16 (0x0001) [0x0000000000000004] (CPF_Input)   
	uint8_t                                            bLookbackInput;                                // 0x0D17 (0x0001) [0x0000000000000004] (CPF_Input)   
	EAIMusicState                                      AIMusic;                                       // 0x0D18 (0x0001) [0x0000000000000000]               
	EAIMusicState                                      OverriddenMusicState;                          // 0x0D19 (0x0001) [0x0000000000000000]               
	float                                              PureMouseX;                                    // 0x0D1C (0x0004) [0x0000000000000004] (CPF_Input)   
	float                                              AnalogLeanInputLeft;                           // 0x0D20 (0x0004) [0x0000000000000004] (CPF_Input)   
	float                                              AnalogLeanInputRight;                          // 0x0D24 (0x0004) [0x0000000000000004] (CPF_Input)   
	int32_t                                            ZoomInput;                                     // 0x0D28 (0x0004) [0x0000000000000000]               
	float                                              UsePressedDuration;                            // 0x0D2C (0x0004) [0x0000000000000000]               
	float                                              CrouchPressedDuration;                         // 0x0D30 (0x0004) [0x0000000000000000]               
	float                                              ToggleRunActivatedTime;                        // 0x0D34 (0x0004) [0x0000000000000000]               
	float                                              ReloadPressedDurationForBandage;               // 0x0D38 (0x0004) [0x0000000000000000]               
	struct FVector2D                                   MouseMoveAccum;                                // 0x0D3C (0x0008) [0x0000000000000000]               
	float                                              MouseMoveTimestamp;                            // 0x0D44 (0x0004) [0x0000000000000000]               
	struct FVector2D                                   LeftStickInitialDirection;                     // 0x0D48 (0x0008) [0x0000000000000000]               
	float                                              LeftStickIntialDirectionTime;                  // 0x0D50 (0x0004) [0x0000000000000000]               
	struct FVector                                     LastPlayerInputIntent;                         // 0x0D54 (0x000C) [0x0000000000000000]               
	float                                              ViewStabilizationRatio;                        // 0x0D60 (0x0004) [0x0000000000000000]               
	struct FName                                       RecordingMomentName;                           // 0x0D64 (0x0008) [0x0000000000000000]               
	TArray<uint8_t>                                    RecordingBuffer;                               // 0x0D6C (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<uint8_t>                                    ThumbnailBuffer;                               // 0x0D7C (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FThreadSafeCounter                          RecordingWrittenCounter;                       // 0x0D8C (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FThreadSafeCounter                          RecordingReadCounter;                          // 0x0D90 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FName                                       LastRecordingMomentName;                       // 0x0D94 (0x0008) [0x0000000000000000]               
	float                                              LastRecordingMomentTime;                       // 0x0D9C (0x0004) [0x0000000000000000]               
	TArray<struct FCamcorderShot>                      CamcorderShots;                                // 0x0DA0 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              LastInputStyleChangedTimestamp;                // 0x0DB0 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              MinIntervalForInputChangedNotify;              // 0x0DB4 (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FTouchZoomData                              TouchZoom;                                     // 0x0DB8 (0x0014) [0x0000000000000000]               
	struct FLinearColor                                LightBarColor;                                 // 0x0DCC (0x0010) [0x0000000000000000]               
	float                                              LightBarPulsePhase;                            // 0x0DDC (0x0004) [0x0000000000000000]               
	TArray<struct FName>                               CompletedRecordingMoments;                     // 0x0DE0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<struct FName>                               CompletedRecordingMomentGroups;                // 0x0DF0 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<struct FName>                               UnreadRecordingMoments;                        // 0x0E00 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class AOLRecordingMarker*                          PendingRecordingMarker;                        // 0x0E10 (0x0008) [0x0000000000000000]               
	float                                              RecordingCompletedTime;                        // 0x0E18 (0x0004) [0x0000000000000000]               
	struct FStruggleData                               Struggle;                                      // 0x0E1C (0x00CC) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              StruggleInputThresholdForWin;                  // 0x0EE8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              StruggleShakesThresholdForWin;                 // 0x0EEC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              StruggleInputThresholdForWinNoFail;            // 0x0EF0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              StruggleShakesThresholdForWinNoFail;           // 0x0EF4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              AIDistance;                                    // 0x0EF8 (0x0004) [0x0000000000000000]               
	float                                              OverriddenMusicDistance;                       // 0x0EFC (0x0004) [0x0000000000000000]               
	float                                              AIChaseMusicTimer;                             // 0x0F00 (0x0004) [0x0000000000000000]               
	float                                              AIChaseMusicTimeDelay;                         // 0x0F04 (0x0004) [0x0000000000004000] (CPF_Config)  
	struct FName                                       MusicAIStateGroup;                             // 0x0F08 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       MusicAIStateNone;                              // 0x0F10 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       MusicAIStatePatrol;                            // 0x0F18 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       MusicAIStateInvestigate;                       // 0x0F20 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       MusicAIStateChase;                             // 0x0F28 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       LoadingStateGroup;                             // 0x0F30 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       LoadingStateOn;                                // 0x0F38 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       LoadingStateOff;                               // 0x0F40 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AIDistanceRTPC;                                // 0x0F48 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndResetMixStates;                             // 0x0F50 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndStopAllMusic;                               // 0x0F58 (0x0008) [0x0000000000000002] (CPF_Const)   
	float                                              StableLevelsTimestamp;                         // 0x0F60 (0x0004) [0x0000000000000000]               
	struct FName                                       SpecificLoadingMovie;                          // 0x0F64 (0x0008) [0x0000000000000000]               
	class UOLSeqAct_PrepareMapTransition*              PreloadingDuringTravelSeqAct;                  // 0x0F6C (0x0008) [0x0000000000000000]               
	struct AOLPlayerController_FCheckpointRecord       LastCheckpointRecord;                          // 0x0F74 (0x00D4) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FObjectiveData                              CurrentObjectiveData;                          // 0x1048 (0x0024) [0x0000000000000000]               
	class UAkEvent*                                    CurrentObjectiveVO;                            // 0x106C (0x0008) [0x0000000000000000]               
	int32_t                                            NumUsedBandages;                               // 0x1074 (0x0004) [0x0000000000000000]               
	float                                              TotalTimeUnderwater;                           // 0x1078 (0x0004) [0x0000000000000000]               
	float                                              MicrophoneUsedTime;                            // 0x107C (0x0004) [0x0000000000000000]               
	float                                              TotalCrawlDistance;                            // 0x1080 (0x0004) [0x0000000000000000]               
	float                                              TotalPlayTime;                                 // 0x1084 (0x0004) [0x0000000000000000]               
	int32_t                                            EasiestGameDifficulty;                         // 0x1088 (0x0004) [0x0000000000000000]               
	float                                              LastDeathQTETimestamp;                         // 0x108C (0x0004) [0x0000000000000000]               
	int32_t                                            NumberOfDeathQTE;                              // 0x1090 (0x0004) [0x0000000000000000]               
	struct FRenderingPerformanceOverrides              RenderingOverrides;                            // 0x1094 (0x0004) [0x0000000000000000]               
	class UClass*                                      MatineeCameraClass;                            // 0x1098 (0x0008) [0x0000000000000000]               
	struct FVector                                     CalcViewLocation;                              // 0x10A0 (0x000C) [0x0000000000000000]               
	struct FRotator                                    CalcViewRotation;                              // 0x10AC (0x000C) [0x0000000000000000]               
	struct FRotator                                    DebugCamRot;                                   // 0x10B8 (0x000C) [0x0000000000000000]               
	struct FVector                                     DebugCamPos;                                   // 0x10C4 (0x000C) [0x0000000000000000]               
	float                                              DebugFreeCamSpeed;                             // 0x10D0 (0x0004) [0x0000000000000000]               
	float                                              DebugFreeCamFOV;                               // 0x10D4 (0x0004) [0x0000000000000000]               
	float                                              SlowDownFactor;                                // 0x10D8 (0x0004) [0x0000000000000000]               
	TArray<class UCodecMovieOutlast*>                  PendingCodecMovieOutlast;                      // 0x10DC (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLPlayerController");
		}

		return uClassPointer;
	};

	void eventUnlockAchievement(EOutlastAchievement achievement);
	void NotifyDifficultyChanged();
	void UpdateDifficultyBasedValues();
	void eventCheckForProfileUpdate();
	void eventUpdateLocalCacheOfProfileSettings(class UOLProfileSettings* EffectiveProfileSettings);
	void ClientSaveAllPlayerData(bool optionalBShouldForce, bool optionalBSkipCacheUpdate);
	void OnProfileWriteComplete(uint8_t LocalUserNum, bool bWasSuccessful);
	void ClearSaveProfileDelegate(int32_t ControllerId, struct FScriptDelegate WriteProfileSettingsCompleteDelegate);
	void eventResetProfile();
	void eventSaveProfile();
	void OnControllerChanged(int32_t ControllerId, bool bIsConnected);
	void NativeOnControllerChanged(int32_t ControllerId, bool bIsConnected);
	void UnregisterPlayerDataStores();
	void RegisterCustomPlayerDataStores();
	void CheatGiveAllCollectibles();
	bool ShippingCheat_GiveAllCheckpoints();
	void QueueClearWorldState();
	void ClearSavedStates();
	void ClearAllProgress();
	void SaveBeforeQuitting();
	void eventClientCommitMapChangeNoOverlay();
	void eventClientCommitMapChange();
	void StartNewGameAtCheckpoint(bool bSaveToDisk, class FString& CheckpointStr);
	void ApplyCheckpointRecord(struct AOLPlayerController_FCheckpointRecord& Record);
	void GetSaveGameNameFromRecord(struct AOLPlayerController_FCheckpointRecord& Record, class FString& SaveGameName);
	void CreateCheckpointRecord(struct AOLPlayerController_FCheckpointRecord& Record);
	void SetSaveGameName(class FString SaveGameName);
	void GetSaveGameName(class FString& SaveGameName);
	void NativeGetSaveGameNameFromRecord(struct AOLPlayerController_FCheckpointRecord& Record, class FString& SaveGameName);
	void NativeApplyCheckpointRecord(struct AOLPlayerController_FCheckpointRecord& Record);
	void NativeGetCurrentCheckpointRecord(struct AOLPlayerController_FCheckpointRecord& Record);
	void StopAllSounds();
	void DrawHUD(class AHUD* H);
	void eventFullScreenOverlayChanged();
	void eventForcePause(bool bPause);
	void ClientSetHUD(class UClass* newHUDType);
	void eventOnSetMesh(class USeqAct_SetMesh* Action);
	void eventClientSetCameraFade(bool _enableFading, struct FColor optional_FadeColor, struct FVector2D optional_FadeAlpha, float optional_FadeTime, bool optional_fadeAudio);
	void SetCinematicMode(class USeqAct_ToggleCinematicMode* Action, bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsButtons);
	void eventGetPlayerViewPoint(struct FVector& POVLocation, struct FRotator& POVRotation);
	float eventGetFOVAngle();
	void SpawnCamera();
	void SetCameraMode(struct FName NewCamMode);
	bool UsingFirstPersonCamera();
	void SetBehindView(bool bNewBehindView);
	void BehindView();
	void NotifyProfileChanged();
	bool CleanTextFilterButtonInput(struct FName ButtonName);
	bool eventIsLookInputIgnored();
	void ToggleCrawl();
	void PrototypeActionE();
	void PrototypeActionD();
	void PrototypeActionC();
	void PrototypeActionB();
	void PrototypeActionA();
	void GammaCalibration();
	void ToggleInventory();
	void ToggleMicrophone();
	void ToggleRun();
	void PressedJump();
	void PressedUseBandage();
	void ReleasedReloadBatteries();
	void PressedReloadBatteries();
	void StopZoom();
	void StartZoomOut();
	void StartZoomIn();
	void ZoomOut();
	void ZoomIn();
	void ToggleCamcorder();
	void ToggleNightVision();
	void ReleasedUseButton();
	void PressedUseButton();
	bool PerformedUseAction();
	void ResetWorldNoCheckpoint();
	void eventDestroyed();
	void ClientRestart(class APawn* NewPawn);
	void Reset();
	void eventUnPossess();
	void eventPossess(class APawn* inPawn, bool bVehicleTransition);
	void eventPostBeginPlay();
	bool ShowRecordingTime();
	class FString GetGraphicAPIString();
	bool ShowGraphicAPIString();
	void HideLoadingOverlay();
	void ShowLoadingOverlay();
	void SetVolume(float VolumeLevel);
	bool ApplyKeyBindings(class UOLProfileSettings* UserConfiguredSettings);
	void SetGamma(float GammaValue);
	float GetGamma();
	void NativePlayerMove(float DeltaTime);
};

// Class OLGame.OLCheatManager
// 0x00C8 OR 0x0170 (0x0170 - 0x00A8)
// 200 OR 368 (368 - 168)
class UOLCheatManager : public UGameCheatManager
{
public:
	int32_t                                            GameSpeedLevel;                                // 0x00A8 (0x0004) [0x0000000000000000]               
	uint32_t                                           bSuppressAllMessages : 1;                      // 0x00AC (0x0004) [0x0000000000004000] [0xFFFFFFFF80000000] (CPF_Config)
	uint32_t                                           bCheatsEnabled : 1;                            // 0x00AC (0x0004) [0x0000000000004000] [0x00000001] (CPF_Config)
	uint32_t                                           bUnlimitedBatteries : 1;                       // 0x00AC (0x0004) [0x0000000000004000] [0x00000002] (CPF_Config)
	uint32_t                                           bGamepadCheatsEnabled : 1;                     // 0x00AC (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bDebugGameplay : 1;                            // 0x00AC (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bDebugSoundEnvironment : 1;                    // 0x00AC (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bDebugSoundMeter : 1;                          // 0x00AC (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bDebugGameState : 1;                           // 0x00AC (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bDebugVO : 1;                                  // 0x00AC (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bDebugSubtitles : 1;                           // 0x00AC (0x0004) [0x0000000000004000] [0x00000100] (CPF_Config)
	uint32_t                                           bDebugPerception : 1;                          // 0x00AC (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bDebugCamera : 1;                              // 0x00AC (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bDebugTrajectory : 1;                          // 0x00AC (0x0004) [0x0000000000000000] [0x00000800] 
	uint32_t                                           bDebugKismet : 1;                              // 0x00AC (0x0004) [0x0000000000000000] [0x00001000] 
	uint32_t                                           bDebugInvestigation : 1;                       // 0x00AC (0x0004) [0x0000000000000000] [0x00002000] 
	uint32_t                                           bDebugAIAnims : 1;                             // 0x00AC (0x0004) [0x0000000000000000] [0x00004000] 
	uint32_t                                           bDebugAIConfig : 1;                            // 0x00AC (0x0004) [0x0000000000000000] [0x00008000] 
	uint32_t                                           bDebugLineChecks : 1;                          // 0x00AC (0x0004) [0x0000000000000000] [0x00010000] 
	uint32_t                                           bDrawDebugHero : 1;                            // 0x00AC (0x0004) [0x0000000000000000] [0x00020000] 
	uint32_t                                           bDrawDebugAI : 1;                              // 0x00AC (0x0004) [0x0000000000000000] [0x00040000] 
	uint32_t                                           bDebugClearanceChecks : 1;                     // 0x00AC (0x0004) [0x0000000000000000] [0x00080000] 
	uint32_t                                           bEnableNewPhysicsHero : 1;                     // 0x00AC (0x0004) [0x0000000000000000] [0x00100000] 
	uint32_t                                           bEnableNewPhysicsBots : 1;                     // 0x00AC (0x0004) [0x0000000000000000] [0x00200000] 
	uint32_t                                           bSimplifiedPhysicsHero : 1;                    // 0x00AC (0x0004) [0x0000000000000000] [0x00400000] 
	uint32_t                                           bSimplifiedPhysicsBots : 1;                    // 0x00AC (0x0004) [0x0000000000000000] [0x00800000] 
	uint32_t                                           bSimplifiedPhysics : 1;                        // 0x00AC (0x0004) [0x0000000000000000] [0x01000000] 
	uint32_t                                           bDebugPhysXVolumeView : 1;                     // 0x00AC (0x0004) [0x0000000000000000] [0x02000000] 
	uint32_t                                           bForceShowScreenMessages : 1;                  // 0x00AC (0x0004) [0x0000000000000000] [0x04000000] 
	uint32_t                                           bShowPrecomputedLightVolumes : 1;              // 0x00AC (0x0004) [0x0000000000000000] [0x08000000] 
	uint32_t                                           bForceFakeLongSubtitles : 1;                   // 0x00AC (0x0004) [0x0000000000000000] [0x10000000] 
	uint32_t                                           bSimulateSlowStreaming : 1;                    // 0x00AC (0x0004) [0x0000000000000000] [0x20000000] 
	uint32_t                                           bMuted : 1;                                    // 0x00AC (0x0004) [0x0000000000004000] [0x40000000] (CPF_Config)
	uint32_t                                           bDebugPhysMaterials : 1;                       // 0x00B0 (0x0004) [0x0000000000004000] [0x00000001] (CPF_Config)
	uint32_t                                           bDebugDeathGrip : 1;                           // 0x00B0 (0x0004) [0x0000000000004000] [0x00000002] (CPF_Config)
	uint32_t                                           bPausedForFreeCam : 1;                         // 0x00B0 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bGamepadPressedLS : 1;                         // 0x00B0 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bGamepadPressedRS : 1;                         // 0x00B0 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bGamepadPressedLT : 1;                         // 0x00B0 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bGamepadPressedRT : 1;                         // 0x00B0 (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bFakeWriteRecordingFails : 1;                  // 0x00B0 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bFakeReadRecordingFails : 1;                   // 0x00B0 (0x0004) [0x0000000000000000] [0x00000100] 
	int32_t                                            GamepadCPIdx;                                  // 0x00B4 (0x0004) [0x0000000000000000]               
	int32_t                                            AILogVerbosity;                                // 0x00B8 (0x0004) [0x0000000000004000] (CPF_Config)  
	class FString                                      DebugSoundEnvFilter;                           // 0x00BC (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      DebugKismetFilter;                             // 0x00CC (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            DebugKismetPage;                               // 0x00DC (0x0004) [0x0000000000000000]               
	float                                              NextSpikeTime;                                 // 0x00E0 (0x0004) [0x0000000000000000]               
	float                                              AutoSpikeDelay;                                // 0x00E4 (0x0004) [0x0000000000000000]               
	float                                              LastGamepadCheatInputTime;                     // 0x00E8 (0x0004) [0x0000000000000000]               
	TArray<struct FDebugTrajectoryPoint>               DebugTrajectoryPoints;                         // 0x00EC (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<struct FDebugClearanceCheck>                DebugClearanceChecks;                          // 0x00FC (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<struct FDebugNoiseData>                     DebugNoise;                                    // 0x010C (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FDebugSoundMeterData                        SoundMeterInfo;                                // 0x011C (0x0030) [0x0000000000000000]               
	TArray<struct FKismetLogData>                      KismetLog;                                     // 0x014C (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<struct FLineCheckLogData>                   LineCheckLog;                                  // 0x015C (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            CurrentFrameId;                                // 0x016C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLCheatManager");
		}

		return uClassPointer;
	};

	void ToggleFakeLongSubtitles();
	void ToggleFakeRecordingReadFailure();
	void ToggleFakeRecordingWriteFailure();
	void ClearAllDingoRecordings();
	void FakeDingoRecordingRight();
	void DingoTest();
	void ResetTutorialReminderTimers();
	bool IsFakeNotFullyDownloaded();
	void ToggleGameFullyDownloaded();
	void TriggerNotDownloadScreen();
	void FakeControllerDisconnected(bool bDelayedPause);
	void ForceHandsCrucifixion();
	void DecrementDifficultyModeModifier();
	void IncrementDifficultyModeModifier();
	void DecrementDifficultyMode();
	void IncrementDifficultyMode();
	void ToggleCharacterPhysicDebug();
	void TryGeneratePath(float PosX, float PosY, float PosZ, bool optionalBTight, float optionalBufferDist);
	void SetAIVerbosity(int32_t NewVerbosity);
	void KillSelectedEnemy();
	void KillAllEnemiesButSelected();
	void KillAllEnemies();
	void CleanupAfterKillAll();
	void SetLanguage(class FString LanguageCode);
	void ReloadSoundBanks(bool bFrenchVO);
	bool eventProcessCheatInput(struct FName Key, bool bPressed);
	void StartGamepadCheckpoint();
	void ScrollGamepadCPIdx(bool bForward);
	bool IsViewModeUnlit();
	void ResetProfileProgression();
	void SetLastCheckpointName(class FString CPName);
	void SetLastCheckpointId(int32_t Index);
	void SetFinishedGame(bool hasFinishedGame, bool hasFinishedDLC);
	void OutlastPause();
	void DebugClosestAI();
	void ResetGS();
	void DeactivateGS(struct FName gsName);
	void ActivateGS(struct FName gsName);
	void DumpGS();
	void DebugPhysMaterials();
	void DebugPerception();
	void OldBotPhysics();
	void NewBotPhysics();
	void OldHeroPhysics();
	void NewHeroPhysics();
	void OldPhysics();
	void newPhysics();
	void ToggleHeroInclusionForSimplifiedPhysics();
	void TogglePhysicsMode();
	void SetSimplifiedPhysics(bool bHero, bool bBots, bool bSimplified);
	void SetNewPhysics(bool bHero, bool bBots);
	void SuppressAllMessages();
	void AIEvents(int32_t optionalNumLines);
	void AILogs(int32_t optionalNumLines);
	void DrawDebug();
	void ToggleMute();
	void SetVolumeThreshold(float NewThreshold);
	void MakeNoise(float optionalNoiseAmount);
	void InflictDamage(float optionalAmount);
	void ResetTutorials();
	void ResetWorldToSavedState();
	void ResetWorldState();
	void ResetPushables();
	void ResetDoors();
	void GammaDown();
	void GammaUp();
	void SetGamma(float newGamma);
	void LoadGame(class FString Filename);
	void SaveGame(class FString Filename);
	void LoseBandages();
	void GiveItem(class FString ItemName);
	void ApplyCP(class FString CPName);
	void cplist();
	void cp(class FString CPName);
	void Checkpoint(class FString CPName);
	void KillFade();
	void ToggleUnlimitedBatteries();
	void LoseAllProfileRecordingMoment();
	void LoseRecordingMoment(class FString moment);
	void GetRecordingMoment(class FString moment);
	void GetAllRecordingMoments();
	void ResetBandageTime();
	void ForceHeroSkin(int32_t Type, int32_t SubType);
	void AddBandage();
	void RechargeNightVision();
	void Ghost();
	void GhostPawn(bool ghosting);
	void FasterGameSpeed();
	void SlowerGameSpeed();
	void NormalGameSpeed();
	void UpdateGameSpeed();
	void SingleFrame();
	void TeleportToFreeCam();
	void ToggleFixedCam();
	void ToggleFreeCamNoPause();
	void ToggleFreeCam();
	void AutoSpike(float optionalSpike, float optionalDelay);
	void Spike(float optionalSpike);
	void BadFPS(float optionalSlowdown);
	void DebugAI();
	void ShowHeroDebug();
	void ShowOLProfiler();
	void ShowPerformance();
	void ShowCollisions();
	void ShowPaths();
	void ShowStatLevels();
	void DebugSubtitles();
	void LogSoundEvents();
	void DebugVO();
	void DebugGameState();
	void DebugAIConfig();
	void SlowStreaming();
	void DebugAIAnims();
	void DebugInvestigation();
	void DebugClearance();
	void DebugSoundMeter();
	void ShowPrecomputedLightVolumes();
	void DebugTrajectory();
	void DebugKismet(class FString optionalFilter);
	void DebugCamera();
	void DebugLineChecks();
	void DumpKismetLog(class FString optionalFilter);
	void DebugSoundEnvironment(class FString optionalFilter);
	void DebugGameplay();
	void SaveAllCheckpoints();
	void DeleteAllSaves();
	void KillAll(class UClass* aClass);
	void God();
	void TakeScreenshot();
	void CycleCollisionView();
	void ViewShaderComplexity();
	void ViewDetailLighting();
	void ViewLit();
	void ViewUnlit();
	void ViewWireframe();
	void ToggleGamepadCheats();
	void ToggleCheats();
	void eventCheatMessage(class FString Message);
	static class UOLCheatManager* GetCheatManager();
};

// Class OLGame.OLCheckpoint
// 0x0048 OR 0x03B8 (0x03B8 - 0x0370)
// 72 OR 952 (952 - 880)
class AOLCheckpoint : public APlayerStart
{
public:
	struct FName                                       CheckpointName;                                // 0x0370 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       PersistentLevelName;                           // 0x0378 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FGameTime                                   WorldTime;                                     // 0x0380 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FGameTime                                   SegmentEndTime;                                // 0x038C (0x000C) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bSnapWorldTime : 1;                            // 0x0398 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bSpawnCrouched : 1;                            // 0x0398 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bSpawnCrawling : 1;                            // 0x0398 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bSpawnInLocker : 1;                            // 0x0398 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bSpawnInWardrobe : 1;                          // 0x0398 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bSpawnInWardrobeLeftSide : 1;                  // 0x0398 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bSpawnOnRaft : 1;                              // 0x0398 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bSpawnOnBrokenRaft : 1;                        // 0x0398 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bSpawnLedgeHanging : 1;                        // 0x0398 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bSpawnSqueezing : 1;                           // 0x0398 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bSpawnInBarrel : 1;                            // 0x0398 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bSpawnSwimming : 1;                            // 0x0398 (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	uint32_t                                           bYoungBlake : 1;                               // 0x0398 (0x0004) [0x0000000000000001] [0x00001000] (CPF_Edit)
	uint32_t                                           bForceGiveBandages : 1;                        // 0x0398 (0x0004) [0x0000000000000001] [0x00002000] (CPF_Edit)
	uint32_t                                           bClearBandages : 1;                            // 0x0398 (0x0004) [0x0000000000000001] [0x00004000] (CPF_Edit)
	uint32_t                                           ParDeathCanIncreaseDifficulty : 1;             // 0x0398 (0x0004) [0x0000000000000000] [0x00008000] 
	uint32_t                                           ParDeathCanLowerDifficulty : 1;                // 0x0398 (0x0004) [0x0000000000000001] [0x00010000] (CPF_Edit)
	int32_t                                            MinimumNumberOfBandageOnSpawn;                 // 0x039C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FDynamicDifficulty                          DifficultyData;                                // 0x03A0 (0x0010) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            LowParDeath;                                   // 0x03B0 (0x0004) [0x0000000000000000]               
	int32_t                                            HighParDeath;                                  // 0x03B4 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLCheckpoint");
		}

		return uClassPointer;
	};

	void OnPlayerSpawn();
};

// Class OLGame.OLCheckpointList
// 0x0034 OR 0x027C (0x027C - 0x0248)
// 52 OR 636 (636 - 584)
class AOLCheckpointList : public AActor
{
public:
	TArray<struct FName>                               CheckpointList;                                // 0x0248 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<struct FCheckpointRedirectItem>             RenameTable;                                   // 0x0258 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	EOutlastGameType                                   GameType;                                      // 0x0268 (0x0001) [0x0000000000000001] (CPF_Edit)    
	TArray<class AOLCheckpoint*>                       CheckpointObjects;                             // 0x026C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLCheckpointList");
		}

		return uClassPointer;
	};

	static bool Script_IsUnreached(struct FName& TestCheckpoint, struct FName& CurrentCheckpoint);
};

// Class OLGame.OLConsole
// 0x0000 OR 0x0280 (0x0280 - 0x0280)
// 0 OR 640 (640 - 640)
class UOLConsole : public UConsole
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLConsole");
		}

		return uClassPointer;
	};

	bool InputKey(int32_t ControllerId, struct FName Key, EInputEvent Event, float optionalAmountDepressed, bool optionalBGamepad);
	void AddCustomCommandsToAutoComplete();
};

// Class OLGame.OLDamageActor
// 0x0050 OR 0x0298 (0x0298 - 0x0248)
// 80 OR 664 (664 - 584)
class AOLDamageActor : public AActor
{
public:
	uint32_t                                           bEnabled : 1;                                  // 0x0248 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bReactToHit : 1;                               // 0x0248 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bNonFatal : 1;                                 // 0x0248 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bInitiallyEnabled : 1;                         // 0x0248 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	float                                              Radius;                                        // 0x024C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FIntByDifficulty                            Damage;                                        // 0x0250 (0x0034) [0x0000000000000001] (CPF_Edit)    
	float                                              MinDelayBeforeHits;                            // 0x0284 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HitStrength;                                   // 0x0288 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LastHitTime;                                   // 0x028C (0x0004) [0x0000000000002000] (CPF_Transient)
	class UDrawSphereComponent*                        PreviewComp;                                   // 0x0290 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLDamageActor");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
};

// Class OLGame.OLDifficultyConfig
// 0x0000 OR 0x0068 (0x0068 - 0x0068)
// 0 OR 104 (104 - 104)
class UOLDifficultyConfig : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLDifficultyConfig");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLDLCManager
// 0x0004 OR 0x0128 (0x0128 - 0x0124)
// 4 OR 296 (296 - 292)
class UOLDLCManager : public UDownloadableContentManager
{
public:
	uint32_t                                           bDLCInstalled : 1;                             // 0x0124 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bFakeDLCInstalledCooked : 1;                   // 0x0124 (0x0004) [0x0000000000004000] [0x00000002] (CPF_Config)
	uint32_t                                           bFakeDLCInstalledLoose : 1;                    // 0x0124 (0x0004) [0x0000000000004000] [0x00000004] (CPF_Config)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLDLCManager");
		}

		return uClassPointer;
	};

	bool FindAndInstallDLC();
};

// Class OLGame.OLDoor
// 0x032C OR 0x0574 (0x0574 - 0x0248)
// 812 OR 1396 (1396 - 584)
class AOLDoor : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;          // 0x0248 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IInterface_NavMeshPathObstacle;        // 0x0250 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IInterface_CornerOwner;                // 0x0258 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class UStaticMeshComponent*                        Mesh;                                          // 0x0260 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        DoorMainMesh;                                  // 0x0268 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class USkeletalMeshComponent*                      DoorSkelMesh;                                  // 0x0270 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	struct FName                                       IdleAnim;                                      // 0x0278 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       BrokenForwardAnim;                             // 0x0280 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       BrokenBackwardAnim;                            // 0x0288 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UDynamicLightEnvironmentComponent*           DoorMainLightEnvironment;                      // 0x0290 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UOLSoundConnectorComponent*                  SoundConnectorComp;                            // 0x0298 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        LockPartA;                                     // 0x02A0 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        LockPartB;                                     // 0x02A8 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        LockPartC;                                     // 0x02B0 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        PushBar;                                       // 0x02B8 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        DoorChimesRBCollider;                          // 0x02C0 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        BlockingCollision;                             // 0x02C8 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              InitialOpenAngle;                              // 0x02D0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxOpenAngle;                                  // 0x02D4 (0x0004) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	float                                              PlayerOpenedAngle;                             // 0x02D8 (0x0004) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	uint32_t                                           bBrokenForward : 1;                            // 0x02DC (0x0004) [0x0000000000000000] [0xFFFFFFFF80000000] 
	uint32_t                                           bReverseDirection : 1;                         // 0x02DC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bHasInteractiveLock : 1;                       // 0x02DC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bLocked : 1;                                   // 0x02DC (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bFakeBlocked : 1;                              // 0x02DC (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bFakeUnlocked : 1;                             // 0x02DC (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bFirstTryKnocking : 1;                         // 0x02DC (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bNoLockedInteraction : 1;                      // 0x02DC (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bAutoClose : 1;                                // 0x02DC (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bAutoClosePlayerOnly : 1;                      // 0x02DC (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bCantClose : 1;                                // 0x02DC (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bNoPushKnob : 1;                               // 0x02DC (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bSimplePushToOpen : 1;                         // 0x02DC (0x0004) [0x0000000000020001] [0x00000800] (CPF_Edit | CPF_EditConst)
	uint32_t                                           bHasPushBar : 1;                               // 0x02DC (0x0004) [0x0000000000020001] [0x00001000] (CPF_Edit | CPF_EditConst)
	uint32_t                                           bOneWayDoor : 1;                               // 0x02DC (0x0004) [0x0000000000020001] [0x00002000] (CPF_Edit | CPF_EditConst)
	uint32_t                                           bApplyRulesLive : 1;                           // 0x02DC (0x0004) [0x0000000000200001] [0x00004000] (CPF_Edit)
	uint32_t                                           bNoSavedState : 1;                             // 0x02DC (0x0004) [0x0000000000200001] [0x00008000] (CPF_Edit)
	uint32_t                                           bMatineePlayDefaultSounds : 1;                 // 0x02DC (0x0004) [0x0000000000000001] [0x00010000] (CPF_Edit)
	uint32_t                                           bAICanUseDoor : 1;                             // 0x02DC (0x0004) [0x0000000000000001] [0x00020000] (CPF_Edit)
	uint32_t                                           bDontBreak : 1;                                // 0x02DC (0x0004) [0x0000000000000001] [0x00040000] (CPF_Edit)
	uint32_t                                           bBashWontBreak : 1;                            // 0x02DC (0x0004) [0x0000000000000001] [0x00080000] (CPF_Edit)
	uint32_t                                           bAlwaysBreak : 1;                              // 0x02DC (0x0004) [0x0000000000000001] [0x00100000] (CPF_Edit)
	uint32_t                                           bWaitForTriggerToBreak : 1;                    // 0x02DC (0x0004) [0x0000000000000001] [0x00200000] (CPF_Edit)
	uint32_t                                           bTrimToDoorForInvestigate : 1;                 // 0x02DC (0x0004) [0x0000000000000001] [0x00400000] (CPF_Edit)
	uint32_t                                           bSplitNavMesh : 1;                             // 0x02DC (0x0004) [0x0000000000000001] [0x00800000] (CPF_Edit)
	uint32_t                                           bAIAlwaysCloses : 1;                           // 0x02DC (0x0004) [0x0000000000000001] [0x01000000] (CPF_Edit)
	uint32_t                                           bAIClosesOnlyPullSide : 1;                     // 0x02DC (0x0004) [0x0000000000000001] [0x02000000] (CPF_Edit)
	uint32_t                                           bAIClosesOnlyPushSide : 1;                     // 0x02DC (0x0004) [0x0000000000000001] [0x04000000] (CPF_Edit)
	uint32_t                                           bAIUnspawnGate : 1;                            // 0x02DC (0x0004) [0x0000000000000001] [0x08000000] (CPF_Edit)
	uint32_t                                           bUseObstacleOnClose : 1;                       // 0x02DC (0x0004) [0x0000000000000001] [0x10000000] (CPF_Edit)
	uint32_t                                           bCollideWithDoorChimes : 1;                    // 0x02DC (0x0004) [0x0000000000000001] [0x20000000] (CPF_Edit)
	uint32_t                                           bSpecialAnimatedDoor : 1;                      // 0x02DC (0x0004) [0x0000000000000001] [0x40000000] (CPF_Edit)
	uint32_t                                           bPlayingLockedAnim : 1;                        // 0x02E0 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bPlayingBlockedAnim : 1;                       // 0x02E0 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bPlayingFrenzyAnim : 1;                        // 0x02E0 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bAnimatingLockHandle : 1;                      // 0x02E0 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	uint32_t                                           bBreakTriggered : 1;                           // 0x02E0 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bBlocked : 1;                                  // 0x02E0 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	uint32_t                                           bWasInitiallyLocked : 1;                       // 0x02E0 (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	uint32_t                                           bInstantBreak : 1;                             // 0x02E0 (0x0004) [0x0000000000002000] [0x00000080] (CPF_Transient)
	uint32_t                                           bPreciseCloseTiming : 1;                       // 0x02E0 (0x0004) [0x0000000000002000] [0x00000100] (CPF_Transient)
	uint32_t                                           bWasOpenedByPlayer : 1;                        // 0x02E0 (0x0004) [0x0000000000002000] [0x00000200] (CPF_Transient)
	uint32_t                                           bWasOpenedByPlayerFromInside : 1;              // 0x02E0 (0x0004) [0x0000000000002000] [0x00000400] (CPF_Transient)
	uint32_t                                           bUsingPawnBoneRotation : 1;                    // 0x02E0 (0x0004) [0x0000000000002000] [0x00000800] (CPF_Transient)
	uint32_t                                           bKnownLocked : 1;                              // 0x02E0 (0x0004) [0x0000000000002000] [0x00001000] (CPF_Transient)
	uint32_t                                           bPreventKnocking : 1;                          // 0x02E0 (0x0004) [0x0000000000002000] [0x00002000] (CPF_Transient)
	uint32_t                                           bAITraversing : 1;                             // 0x02E0 (0x0004) [0x0000000000002000] [0x00004000] (CPF_Transient)
	uint32_t                                           bMatineeIsLooping : 1;                         // 0x02E0 (0x0004) [0x0000000000002000] [0x00008000] (CPF_Transient)
	uint32_t                                           bObstacleRegistered : 1;                       // 0x02E0 (0x0004) [0x0000000000000000] [0x00010000] 
	uint32_t                                           bPlayingOpeningSound : 1;                      // 0x02E0 (0x0004) [0x0000000000002000] [0x00020000] (CPF_Transient)
	uint32_t                                           bPlayingACS : 1;                               // 0x02E0 (0x0004) [0x0000000000002000] [0x00040000] (CPF_Transient)
	float                                              OpeningSpeed;                                  // 0x02E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ClosingSpeed;                                  // 0x02E8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ExplicitOcclusionFactor;                       // 0x02EC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DefaultOcclusionFactor;                        // 0x02F0 (0x0004) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	float                                              OverrideInteractionSideOffset;                 // 0x02F4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UStaticMesh*                                 MeshOverrideLeft;                              // 0x02F8 (0x0008) [0x0000000000000000]               
	class UStaticMesh*                                 MeshOverrideRight;                             // 0x0300 (0x0008) [0x0000000000000000]               
	class UStaticMesh*                                 MeshOverride;                                  // 0x0308 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class USkeletalMesh*                               SkelMeshOverride;                              // 0x0310 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FCornerData                                 CornerDoorForward;                             // 0x0318 (0x0038) [0x0000000000000001] (CPF_Edit)    
	struct FCornerData                                 CornerDoorBackward;                            // 0x0350 (0x0038) [0x0000000000000001] (CPF_Edit)    
	class AOLCSA*                                      UnlockingCSA;                                  // 0x0388 (0x0008) [0x0000000000000001] (CPF_Edit)    
	TArray<struct FGameFlowDoorRule>                   GameFlowRules;                                 // 0x0390 (0x0010) [0x0000000000600001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              LockerOpeningSpeed;                            // 0x03A0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LockerClosingSpeed;                            // 0x03A4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              StaticOffsetFwdToCenterNormal;                 // 0x03A8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              StaticOffsetFwdToCenterLocker;                 // 0x03AC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LockedAnimTotalTime;                           // 0x03B0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LockedAnimAmplitude;                           // 0x03B4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              BlockedAnimTotalTime;                          // 0x03B8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              BlockedAnimAmplitude;                          // 0x03BC (0x0004) [0x0000000000000002] (CPF_Const)   
	EOLDoorType                                        DoorType;                                      // 0x03C0 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EDoorMaterial                                      DoorMaterial;                                  // 0x03C1 (0x0001) [0x0000000000000000]               
	EOLDoorMeshType                                    DoorMeshType;                                  // 0x03C2 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EDoorState                                         DoorState;                                     // 0x03C3 (0x0001) [0x0000000000002000] (CPF_Transient)
	EDoorBreakState                                    DoorBreakState;                                // 0x03C4 (0x0001) [0x0000000000000000]               
	TArray<class UMaterialInstance*>                   MaterialOverrides;                             // 0x03C8 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	struct FVector                                     DoorKnobOffset;                                // 0x03D8 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              MatineeAngle;                                  // 0x03E4 (0x0004) [0x0000000200000001] (CPF_Edit)    
	float                                              MatineeAdjustToValidAngleSpeed;                // 0x03E8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OverrideMatineeStopAngle;                      // 0x03EC (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    AutomaticMatineeStopSoundEvent;                // 0x03F0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              PathPointOffset;                               // 0x03F8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            NumBashesAfterBlocked;                         // 0x03FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PathfindingCostOpen;                           // 0x0400 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PathfindingCostMustOpen;                       // 0x0404 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PathfindingCostMustUnlock;                     // 0x0408 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PathfindingCostMustBash;                       // 0x040C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PathfindingCostExtraBots;                      // 0x0410 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AIOpenDoorKnockback;                           // 0x0414 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    SndLocking;                                    // 0x0418 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    SndUnlocking;                                  // 0x0420 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    BashDoorSnd;                                   // 0x0428 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              OpenRatio;                                     // 0x0430 (0x0004) [0x0000000000000000]               
	float                                              TargetOpenRatio;                               // 0x0434 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              CurrentSpeed;                                  // 0x0438 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ProceduralAnimElapsedTime;                     // 0x043C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LockedRatio;                                   // 0x0440 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TargetLockedRatio;                             // 0x0444 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              PreciseCloseDuration;                          // 0x0448 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              PreciseCloseStartTime;                         // 0x044C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LastFinishedClosingTime;                       // 0x0450 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              AutoCloseStartTime;                            // 0x0454 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              PawnBoneControlEndTime;                        // 0x0458 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              InitialBoneControlYaw;                         // 0x045C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              AutoCloseDelay;                                // 0x0460 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              FrenzyAnimationDuration;                       // 0x0464 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              FrenzyAnimationOpeningPct;                     // 0x0468 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              FrenzyAnimationOpenedPct;                      // 0x046C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              FrenzyAnimationMaxAngle;                       // 0x0470 (0x0004) [0x0000000000002000] (CPF_Transient)
	class USeqAct_Interp*                              DrivingMatinee;                                // 0x0474 (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FDoorShakeData                              ShakeData;                                     // 0x047C (0x0040) [0x0000000000000000]               
	struct FDoorShakeData                              BashShakeData;                                 // 0x04BC (0x0040) [0x0000000000000001] (CPF_Edit)    
	class AOLDoor*                                     TwinDoor;                                      // 0x04FC (0x0008) [0x0000000000002000] (CPF_Transient)
	class AOLPawn*                                     DoorUser;                                      // 0x0504 (0x0008) [0x0000000000002000] (CPF_Transient)
	class AOLPawn*                                     DoorInstigator;                                // 0x050C (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              InitialOpeningAngle;                           // 0x0514 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UOLInvestigationComponent*                   InvestigationComponent;                        // 0x0518 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	TArray<struct FDoorAttachmentData>                 DoorAttachments;                               // 0x0520 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class AOLDoorChimes*                               LinkedChimes;                                  // 0x0530 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              LastChimesAngle;                               // 0x0538 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LastChimesTime;                                // 0x053C (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     Edge0Dest;                                     // 0x0540 (0x000C) [0x0000000000000000]               
	struct FVector                                     Edge1Dest;                                     // 0x054C (0x000C) [0x0000000000000000]               
	struct FGuid                                       DoorGuid;                                      // 0x0558 (0x0010) [0x0000000000220002] (CPF_Const | CPF_EditConst)
	float                                              OpeningIntensity;                              // 0x0568 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FName                                       RTPCOpeningDoorIntensity;                      // 0x056C (0x0008) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLDoor");
		}

		return uClassPointer;
	};

	void BreakDoor(class AOLPawn* Breaker, bool bReversed, bool bNoSound);
	void eventBashDoor(bool bReversed);
	bool eventShouldBreak(class AOLBot* Bot);
	void eventInterpolationFinished(class USeqAct_Interp* InterpAction);
	void eventInterpolationStarted(class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst);
	void StopMatineeAnim(bool bHeroTriggered);
	void StartMatineeAnim(bool bLooping);
	void OnDestroy(class USeqAct_Destroy* Action);
	void SoftDestroy();
	void NotifyHandlesToWait();
	void NotifyHandlesToRepath();
	void ForcePushBlockingHero();
	void FastOpen(class AOLPawn* OpeningPawn);
	bool IsOnPullSide(struct FVector& TestLocation);
	float GetOpenAngle();
	void OnStateChanged();
	void TriggerEvent(EDoorEventType EventType, class AOLPawn* Triggerer);
	void TriggerBreakDoorCameraShake();
	void StopShaking();
	void StartShaking(struct FDoorShakeData ShakeParams, bool optionalBSwitchToBreakingMesh, bool optionalBReversed, bool optionalBFromAI);
	bool IsBroken();
	void UnregisterNavmeshObstacle();
	void RegisterNavMeshObstacle();
	struct FVector ScriptGetCenterLocation();
};

// Class OLGame.OLDoorChimes
// 0x000C OR 0x02B4 (0x02B4 - 0x02A8)
// 12 OR 692 (692 - 680)
class AOLDoorChimes : public ASkeletalMeshActor
{
public:
	class UAkEvent*                                    SoundEvent;                                    // 0x02A8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              TouchTime;                                     // 0x02B0 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLDoorChimes");
		}

		return uClassPointer;
	};

	void eventUnTouch(class AActor* Other);
	void eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal);
	void eventPlayChimes();
};

// Class OLGame.OLDoorData
// 0x08A0 OR 0x0908 (0x0908 - 0x0068)
// 2208 OR 2312 (2312 - 104)
class UOLDoorData : public UObject
{
public:
	class UPhysicsAsset*                               LeftPhysicsAsset;                              // 0x0068 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UPhysicsAsset*                               RightPhysicsAsset;                             // 0x0070 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FDoorMeshTypeData                           DoorMeshData[0x13];                            // 0x0078 (0x07B8) [0x0000000000400000] (CPF_NeedCtorLink)
	class UAnimSet*                                    DoorsAnimSet;                                  // 0x0830 (0x0008) [0x0000000000000000]               
	struct FName                                       IdleAnim;                                      // 0x0838 (0x0008) [0x0000000000000000]               
	struct FName                                       ForwardBrokenAnimation;                        // 0x0840 (0x0008) [0x0000000000000000]               
	struct FName                                       BackwardBrokenAnimation;                       // 0x0848 (0x0008) [0x0000000000000000]               
	struct FDoorSoundEvents                            Sounds[0x3];                                   // 0x0850 (0x00A8) [0x0000000000000000]               
	class UAkEvent*                                    SndStopOpening;                                // 0x08F8 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndLockerBash;                                 // 0x0900 (0x0008) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLDoorData");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLEngine
// 0x0078 OR 0x0C10 (0x0C10 - 0x0B98)
// 120 OR 3088 (3088 - 2968)
class UOLEngine : public UGameEngine
{
public:
	TArray<struct FSaveFileInfo>                       SaveFiles;                                     // 0x0B98 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	ECheckpointAction                                  PendingCheckpointAction;                       // 0x0BA8 (0x0001) [0x0000000000000000]               
	TArray<uint8_t>                                    SaveDataBuffer;                                // 0x0BAC (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FName                                       SaveGameOriginalCheckpointName;                // 0x0BBC (0x0008) [0x0000000000000000]               
	struct FName                                       OverrideCheckpointName;                        // 0x0BC4 (0x0008) [0x0000000000000000]               
	uint32_t                                           bDisableMotionBlur : 1;                        // 0x0BCC (0x0004) [0x0000000000004000] [0x00000001] (CPF_Config)
	class UAkEvent*                                    StartupMovieSound;                             // 0x0BD0 (0x0008) [0x0000000000000000]               
	float                                              NextRefreshDLCTime;                            // 0x0BD8 (0x0004) [0x0000000000000000]               
	struct FColor                                      Chroma_InactiveColor;                          // 0x0BDC (0x0004) [0x0000000000004000] (CPF_Config)  
	struct FColor                                      Chroma_BaseColor;                              // 0x0BE0 (0x0004) [0x0000000000004000] (CPF_Config)  
	struct FColor                                      Chroma_BaseMedHealth;                          // 0x0BE4 (0x0004) [0x0000000000004000] (CPF_Config)  
	struct FColor                                      Chroma_Hidden;                                 // 0x0BE8 (0x0004) [0x0000000000004000] (CPF_Config)  
	struct FColor                                      Chroma_HiddenMedHealth;                        // 0x0BEC (0x0004) [0x0000000000004000] (CPF_Config)  
	struct FColor                                      Chroma_Underwater;                             // 0x0BF0 (0x0004) [0x0000000000004000] (CPF_Config)  
	struct FColor                                      Chroma_NV;                                     // 0x0BF4 (0x0004) [0x0000000000004000] (CPF_Config)  
	struct FColor                                      Chroma_NVNoBat;                                // 0x0BF8 (0x0004) [0x0000000000004000] (CPF_Config)  
	struct FColor                                      Chroma_NVMedHealth;                            // 0x0BFC (0x0004) [0x0000000000004000] (CPF_Config)  
	struct FColor                                      Chroma_HurtPulseHigh;                          // 0x0C00 (0x0004) [0x0000000000004000] (CPF_Config)  
	struct FColor                                      Chroma_HurtPulseLow;                           // 0x0C04 (0x0004) [0x0000000000004000] (CPF_Config)  
	struct FColor                                      Chroma_Damage1;                                // 0x0C08 (0x0004) [0x0000000000004000] (CPF_Config)  
	struct FColor                                      Chroma_Damage2;                                // 0x0C0C (0x0004) [0x0000000000004000] (CPF_Config)  

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLEngine");
		}

		return uClassPointer;
	};

	bool UsingFixedSaveLocation();
	void SaveGameImmediate(bool bSaveToDisk, class FString ForceSaveGameName, bool optionalBNewSave, class FString optionalOverrideSaveCheckpointName);
	void InitiateSaveGame(bool bSaveToDisk);
	ELoadGameResult HasAnyValidSaveGame();
	ELoadGameResult HasValidSaveGame();
	void RefreshSaveFiles();
	bool IsGameFullyDownloaded();
	bool TryStartDLCGame();
	bool ShouldShowNewDLCGame();
	bool RefreshDLC();
	bool CheckReloadForDLC();
};

// Class OLGame.OLDingoEngine
// 0x0028 OR 0x0C38 (0x0C38 - 0x0C10)
// 40 OR 3128 (3128 - 3088)
class UOLDingoEngine : public UOLEngine
{
public:
	struct FPointer                                    VfTable_FCallbackEventDevice;                  // 0x0C10 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	TArray<uint8_t>                                    PendingCallbacks;                              // 0x0C18 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __DingoUserInitializedCallback__Delegate;      // 0x0C28 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLDingoEngine");
		}

		return uClassPointer;
	};

	void Dingo_OnPressedContinue(int32_t ControllerId);
	void ReturnToPressStartScreen();
	bool ShouldOpenPressStartScreen();
	bool Dingo_ShowLoginUIAndInitializeUser(struct FScriptDelegate Callback);
	bool DingoNative_ShowLoginUIAndInitializeUser();
	bool Dingo_ShouldShowLoginUI(int32_t ControllerId);
	int32_t Dingo_OnInitialPressStart(int32_t ControllerId);
	void Dingo_AllowAllControllersInput();
	void eventOnDingoUserInitialized(bool bSuccess);
	void Dingo_InitializeUser(struct FScriptDelegate Callback);
	void DingoNative_StartInitializeUser();
	void DingoUserInitializedCallback(bool bSuccess);
	void GiveRightForRecording();
	void ClearRecordings();
	bool HasEnoughRightsLeftForRecording();
	bool HasRightsForRecording();
	class FString Dingo_GetActiveGamertag();
	class FString Dingo_GetSaveFileIdStr(class FString SaveFileName);
	class FString Dingo_GetSaveFileIconName(struct FName CheckpointName);
	bool Dingo_ShowHelpUI();
	bool Dingo_DeleteSaveGame(class FString SaveFileName);
	bool Dingo_SaveGameImmediateToNewSave();
	bool Dingo_SaveGameImmediate(class FString SaveFileName);
	bool Dingo_StartNewGameWithNewSave(class FString startCP);
	bool Dingo_StartNewGameWithSave(class FString startCP, class FString SaveFileName);
	ELoadGameResult Dingo_LoadMostRecentSaveFile();
	ELoadGameResult Dingo_LoadSaveGame(class FString SaveFileName);
	bool IsGameFullyDownloaded();
	ELoadGameResult HasAnyValidSaveGame();
	ELoadGameResult HasValidSaveGame();
	void RefreshSaveFiles();
};

// Class OLGame.OLOrbisEngine
// 0x0020 OR 0x0C30 (0x0C30 - 0x0C10)
// 32 OR 3120 (3120 - 3088)
class UOLOrbisEngine : public UOLEngine
{
public:
	EOrbisDialogType                                   ActiveOrbisDialog;                             // 0x0C10 (0x0001) [0x0000000000000000]               
	uint32_t                                           bPausedForSystemDialog : 1;                    // 0x0C14 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           PlayGoCheckResult : 1;                         // 0x0C14 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	float                                              PlayGoTimeStamp;                               // 0x0C18 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            MaxCheckpointId;                               // 0x0C1C (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FScriptDelegate                             __SaveDataDialogDoneCallback__Delegate;        // 0x0C20 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLOrbisEngine");
		}

		return uClassPointer;
	};

	void SetMaxCheckpointId(int32_t MaxCheckpoint);
	bool IsGameFullyDownloaded();
	bool PS4_LoadMostRecentSaveFile();
	bool PS4_LoadCurrentSaveFile();
	ELoadGameResult HasAnyValidSaveGame();
	ELoadGameResult HasValidSaveGame();
	int32_t GetNumberOfSaveGames();
	bool SelectAndLoadGame(struct FScriptDelegate Callback);
	bool NativeSelectAndLoadGame();
	void NewSaveLocation(class FString startCP);
	void NativeNewSaveLocation(class FString startCP);
	bool SelectSaveLocation(class FString startCP, struct FScriptDelegate Callback);
	bool NativeSelectSaveLocation(class FString startCP);
	void eventFinishedSaveDataDialog(bool bSuccess);
	void SaveDataDialogDoneCallback(bool bSuccess);
	bool UsingFixedSaveLocation();
};

// Class OLGame.OLWinEngine
// 0x0008 OR 0x0C18 (0x0C18 - 0x0C10)
// 8 OR 3096 (3096 - 3088)
class UOLWinEngine : public UOLEngine
{
public:
	uint32_t                                           bPendingGraphicalSettingsChange : 1;           // 0x0C10 (0x0004) [0x0000000000000000] [0x00000001] 
	int32_t                                            PendingNewLanguage;                            // 0x0C14 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLWinEngine");
		}

		return uClassPointer;
	};

	bool UpdateProfileKeyBindingsFromSystem(class UOLProfileSettings* ProfileSettings);
	bool UpdateProfileFromSystemSettings(class UOLProfileSettings* ProfileSettings);
	bool UpdateFullscreenFromSystemSettings(class UOLProfileSettings* ProfileSettings);
	bool ApplySystemSettings(class UOLProfileSettings* ProfileSettings);
	void DebugLoadGame(class FString Filename);
	void DebugSaveGame(class FString Filename);
	void SaveAllCheckpoints();
	void RefreshSaveFiles();
	void DeleteSaveFile(class FString Filename);
	ELoadGameResult LoadSaveFile(class FString Filename);
	ELoadGameResult HasAnyValidSaveGame();
	ELoadGameResult HasValidSaveGame();
};

// Class OLGame.OLFlashLight
// 0x002C OR 0x0310 (0x0310 - 0x02E4)
// 44 OR 784 (784 - 740)
class AOLFlashLight : public AInterpActor
{
public:
	class UStaticMeshComponent*                        FlashLightMesh;                                // 0x02E4 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class ULensFlareComponent*                         LensFlareEye;                                  // 0x02EC (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class ULensFlareComponent*                         LensFlareCam;                                  // 0x02F4 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class USpotLightComponent*                         LightSpotLight;                                // 0x02FC (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class AOLEnemyPawn*                                OwnerPawn;                                     // 0x0304 (0x0008) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bDisabled : 1;                                 // 0x030C (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLFlashLight");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
	void TurnOff(bool bHideMesh);
	void TurnOn();
};

// Class OLGame.OLLantern
// 0x003C OR 0x034C (0x034C - 0x0310)
// 60 OR 844 (844 - 784)
class AOLLantern : public AOLFlashLight
{
public:
	class USkeletalMeshComponent*                      LanternMesh;                                   // 0x0310 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class USpotLightComponent*                         LightSpotLight2;                               // 0x0318 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	struct FHandleData                                 Handle;                                        // 0x0320 (0x0018) [0x0000000000000000]               
	struct FHingeData                                  Hinge;                                         // 0x0338 (0x0004) [0x0000000000000000]               
	struct FName                                       Light1Socket;                                  // 0x033C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       Light2Socket;                                  // 0x0344 (0x0008) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLLantern");
		}

		return uClassPointer;
	};

	void TurnOff(bool bHideMesh);
	void TurnOn();
};

// Class OLGame.OLTorch
// 0x0010 OR 0x0320 (0x0320 - 0x0310)
// 16 OR 800 (800 - 784)
class AOLTorch : public AOLFlashLight
{
public:
	class UPointLightComponent*                        TorchPointLight;                               // 0x0310 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    TorchEmitter;                                  // 0x0318 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLTorch");
		}

		return uClassPointer;
	};

	void TurnOff(bool bHideMesh);
	void TurnOn();
};

// Class OLGame.OLFloatingObjectBase
// 0x00A0 OR 0x02E8 (0x02E8 - 0x0248)
// 160 OR 744 (744 - 584)
class AOLFloatingObjectBase : public AActor
{
public:
	uint32_t                                           bEnabled : 1;                                  // 0x0248 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bApplyWaterImpulse : 1;                        // 0x0248 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bEnableWorldCollision : 1;                     // 0x0248 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bInitiallyEnabled : 1;                         // 0x0248 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	uint32_t                                           bValidWaterLandscape : 1;                      // 0x0248 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bNoRiverAtThisLocation : 1;                    // 0x0248 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	uint32_t                                           bBlendingOut : 1;                              // 0x0248 (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	uint32_t                                           bFakingWaterMovement : 1;                      // 0x0248 (0x0004) [0x0000000000002000] [0x00000080] (CPF_Transient)
	struct FBobbingConfigData                          BobbingConfig;                                 // 0x024C (0x0020) [0x0000000000000001] (CPF_Edit)    
	float                                              CurrentEffect;                                 // 0x026C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              YawDriftVelocity;                              // 0x0270 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SurfacingSpeed;                                // 0x0274 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WaterImpulseStrength;                          // 0x0278 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WaterImpulseRadius;                            // 0x027C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RepulsionRadius;                               // 0x0280 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     InitialPos;                                    // 0x0284 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FRotator                                    InitialRot;                                    // 0x0290 (0x000C) [0x0000000000002000] (CPF_Transient)
	float                                              WaterZ;                                        // 0x029C (0x0004) [0x0000000000002000] (CPF_Transient)
	class AOLRiverMarker*                              ActiveRiverMarker;                             // 0x02A0 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              BlendingOutStartedTime;                        // 0x02A8 (0x0004) [0x0000000000002000] (CPF_Transient)
	class AOLRiverMarker*                              RiverStartMarker;                              // 0x02AC (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              RiverSideRatio;                                // 0x02B4 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     FakeMovementVelocity;                          // 0x02B8 (0x000C) [0x0000000000002000] (CPF_Transient)
	float                                              LastCollisionTime;                             // 0x02C4 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     LastCollisionNormal;                           // 0x02C8 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FBobbingData                                Bobbing;                                       // 0x02D4 (0x0014) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLFloatingObjectBase");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
};

// Class OLGame.OLFloatingSkeletalMesh
// 0x0024 OR 0x030C (0x030C - 0x02E8)
// 36 OR 780 (780 - 744)
class AOLFloatingSkeletalMesh : public AOLFloatingObjectBase
{
public:
	class USkeletalMeshComponent*                      SkeletalMesh;                                  // 0x02E8 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                              // 0x02F0 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              BaseTranslationZ;                              // 0x02F8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       IdleAnimName;                                  // 0x02FC (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       ImpactAnimName;                                // 0x0304 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLFloatingSkeletalMesh");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLFloatingStaticMesh
// 0x0014 OR 0x02FC (0x02FC - 0x02E8)
// 20 OR 764 (764 - 744)
class AOLFloatingStaticMesh : public AOLFloatingObjectBase
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                    // 0x02E8 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              BaseTranslationZ;                              // 0x02F0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                              // 0x02F4 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLFloatingStaticMesh");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLFloorMaterialVolume
// 0x0010 OR 0x0294 (0x0294 - 0x0284)
// 16 OR 660 (660 - 644)
class AOLFloorMaterialVolume : public AVolume
{
public:
	uint32_t                                           bEnabled : 1;                                  // 0x0284 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	int32_t                                            Priority;                                      // 0x0288 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UPhysicalMaterial*                           PhysMaterial;                                  // 0x028C (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLFloorMaterialVolume");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
};

// Class OLGame.OLFXHolder
// 0x0000 OR 0x0248 (0x0248 - 0x0248)
// 0 OR 584 (584 - 584)
class AOLFXHolder : public AActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLFXHolder");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLFXManager
// 0x1658 OR 0x16C0 (0x16C0 - 0x0068)
// 5720 OR 5824 (5824 - 104)
class UOLFXManager : public UObject
{
public:
	struct FPostProcessSettings                        CamcorderPPSSettings;                          // 0x0068 (0x023C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FPostProcessSettings                        NVPPSSettings;                                 // 0x02A4 (0x023C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FPostProcessSettings                        DeathPPSSettings;                              // 0x04E0 (0x023C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FPostProcessSettings                        UnderwaterPPSSettings;                         // 0x071C (0x023C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FPostProcessSettings                        UnderwaterBloodPPSSettings;                    // 0x0958 (0x023C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FPostProcessSettings                        NoGlassesPPSSettings;                          // 0x0B94 (0x023C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FPostProcessSettings                        CamcorderHudPPSSettings;                       // 0x0DD0 (0x023C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FPostProcessSettings                        InnerDemonPPSSettings;                         // 0x100C (0x023C) [0x0000000000400000] (CPF_NeedCtorLink)
	class UPostProcessChain*                           DefaultPPSChain;                               // 0x1248 (0x0008) [0x0000000000000000]               
	class UPostProcessChain*                           CamcorderPPSChain;                             // 0x1250 (0x0008) [0x0000000000000000]               
	class UPostProcessChain*                           CamcorderPPSChainConsole;                      // 0x1258 (0x0008) [0x0000000000000000]               
	class UPostProcessChain*                           NVPPSChain;                                    // 0x1260 (0x0008) [0x0000000000000000]               
	class UPostProcessChain*                           GammaCalibrationPPSChain;                      // 0x1268 (0x0008) [0x0000000000000000]               
	TArray<class UMaterialInstanceConstant*>           NVSensitiveMaterials;                          // 0x1270 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<class UMaterialInstanceConstant*>           CamSensitiveMaterials;                         // 0x1280 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<class UMaterialInstanceConstant*>           TimeSensitiveMaterials;                        // 0x1290 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class UMaterialInstanceConstant*                   CameraWaveMaterial;                            // 0x12A0 (0x0008) [0x0000000000000000]               
	class UOLUberPostProcessEffect*                    CurrentUberPostEffect;                         // 0x12A8 (0x0008) [0x0000000000000000]               
	class UParticleSystemComponent*                    ElectricSparksParticles;                       // 0x12B0 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    WaterSplashParticles;                          // 0x12B8 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UMaterialInstanceConstant*                   BloodMaterial;                                 // 0x12C0 (0x0008) [0x0000000000000000]               
	class AOLFXHolder*                                 FXHolder;                                      // 0x12C8 (0x0008) [0x0000000000000000]               
	struct FDamageTypeParams                           DamageParams[0xE];                             // 0x12D0 (0x01C0) [0x0000000000000000]               
	class UForceFeedbackWaveform*                      ForceFeedbackWaveformA;                        // 0x1490 (0x0008) [0x0000000000000000]               
	class UForceFeedbackWaveform*                      ForceFeedbackWaveformB;                        // 0x1498 (0x0008) [0x0000000000000000]               
	class UForceFeedbackWaveform*                      ForceFeedbackWaveformC;                        // 0x14A0 (0x0008) [0x0000000000000000]               
	class UForceFeedbackWaveform*                      ForceFeedbackWaveformD;                        // 0x14A8 (0x0008) [0x0000000000000000]               
	class UForceFeedbackWaveform*                      ForceFeedbackWaveformE;                        // 0x14B0 (0x0008) [0x0000000000000000]               
	TArray<class AOLInnerDemonEffectActor*>            ActiveInnerDemonEffectActors;                  // 0x14B8 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<struct FInnerDemonEffectSensitiveActor>     CachedSensitiveActors;                         // 0x14C8 (0x0010) [0x0000000000482000] (CPF_Transient | CPF_Component | CPF_NeedCtorLink)
	struct FHaarpEffectData                            HaarpEffect;                                   // 0x14D8 (0x0014) [0x0000000000000000]               
	TArray<struct FRandomHaarpEffectKey>               HaarpEffectKeys;                               // 0x14EC (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	struct FRandomHaarpEffectConfig                    RandomHaarpConfig;                             // 0x14FC (0x0028) [0x0000000000000000]               
	struct FDamageColumn                               DamageColumns[0x3];                            // 0x1524 (0x0030) [0x0000000000000000]               
	float                                              CurrentBleedAmount;                            // 0x1554 (0x0004) [0x0000000000000000]               
	float                                              DesiredBleedAmount;                            // 0x1558 (0x0004) [0x0000000000000000]               
	float                                              OverrideBleedAscFactor;                        // 0x155C (0x0004) [0x0000000000000000]               
	struct FPPSEffectConfig                            GenericPPSConfig;                              // 0x1560 (0x004C) [0x0000000000480000] (CPF_Component | CPF_NeedCtorLink)
	struct FGenericPPSData                             GenericPPS;                                    // 0x15AC (0x0030) [0x0000000000000000]               
	struct FName                                       UberPostEffectName;                            // 0x15DC (0x0008) [0x0000000000000000]               
	struct FName                                       NVParamName;                                   // 0x15E4 (0x0008) [0x0000000000000000]               
	struct FName                                       NVLightParamName;                              // 0x15EC (0x0008) [0x0000000000000000]               
	struct FName                                       CamParamName;                                  // 0x15F4 (0x0008) [0x0000000000000000]               
	struct FName                                       TimeParamName;                                 // 0x15FC (0x0008) [0x0000000000000000]               
	float                                              CamcorderPPSOpacity;                           // 0x1604 (0x0004) [0x0000000000000000]               
	float                                              CurrentElectricEffect;                         // 0x1608 (0x0004) [0x0000000000000000]               
	float                                              LastSetElectricEffect;                         // 0x160C (0x0004) [0x0000000000000000]               
	float                                              CurrentHurtEffect;                             // 0x1610 (0x0004) [0x0000000000000000]               
	float                                              CurrentOutOfBreathEffect;                      // 0x1614 (0x0004) [0x0000000000000000]               
	uint32_t                                           bShowingHurtEffect : 1;                        // 0x1618 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bShowingElectricityEffect : 1;                 // 0x1618 (0x0004) [0x0000000000000000] [0x00000002] 
	EPPSMode                                           CurrentPPSMode;                                // 0x161C (0x0001) [0x0000000000000000]               
	struct FBlurData                                   CurrentBlur;                                   // 0x1620 (0x001C) [0x0000000000000000]               
	struct FBlurData                                   HeatBlur;                                      // 0x163C (0x001C) [0x0000000000000000]               
	struct FBlurData                                   GlassesBlur;                                   // 0x1658 (0x001C) [0x0000000000000000]               
	float                                              CamcorderHudRatio;                             // 0x1674 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              OverrideMotionBlurRatio;                       // 0x1678 (0x0004) [0x0000000000000000]               
	float                                              OverrideMotionBlurAmount;                      // 0x167C (0x0004) [0x0000000000000000]               
	float                                              OverrideGrainRatio;                            // 0x1680 (0x0004) [0x0000000000000000]               
	float                                              OverrideGrainAmount;                           // 0x1684 (0x0004) [0x0000000000000000]               
	int32_t                                            LastUpdateTimeMinute;                          // 0x1688 (0x0004) [0x0000000000000000]               
	struct FRandomHaarpEffectConfig                    DefaultSchoolHaarpConfig;                      // 0x168C (0x0028) [0x0000000000004000] (CPF_Config)  
	float                                              HaarpSmoothFactorAsc;                          // 0x16B4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              HaarpSmoothFactorDsc;                          // 0x16B8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DoubleVisionIntensity;                         // 0x16BC (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLFXManager");
		}

		return uClassPointer;
	};

	void SetFXForEnemyPawn(class AOLEnemyPawn* EnemyPawn);
	void DeactivateNightVisionEffect();
	void ActivateCamcorderEffect();
	void ActivateNightVisionEffect(bool bPowered);
	void SetPPSFromScript(EPPSMode newPPS);
	static class UOLFXManager* GetFXManager();
};

// Class OLGame.OLGame
// 0x00F0 OR 0x0594 (0x0594 - 0x04A4)
// 240 OR 1428 (1428 - 1188)
class AOLGame : public AUDKGame
{
public:
	class UOLVoiceManager*                             VoiceManager;                                  // 0x04A4 (0x0008) [0x0000000000000000]               
	class UOLWorld*                                    TheWorld;                                      // 0x04AC (0x0008) [0x0000000000000000]               
	class UOLUIMessage*                                HintScreen;                                    // 0x04B4 (0x0008) [0x0000000000000000]               
	EDifficultyModeOption                              DifficultyMode;                                // 0x04BC (0x0001) [0x0000000000000000]               
	EDifficultyModeModifier                            DifficultyModeModifier;                        // 0x04BD (0x0001) [0x0000000000002000] (CPF_Transient)
	int32_t                                            TemporaryDifficultyModeModifier;               // 0x04C0 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bResetProfileOnOpenMainMenu : 1;               // 0x04C4 (0x0004) [0x0000000000004000] [0x00000001] (CPF_Config)
	uint32_t                                           bFreezeMinuteHands : 1;                        // 0x04C4 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bIsPlayingDLC : 1;                             // 0x04C4 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bSoundOnPause : 1;                             // 0x04C4 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bGameplayDataGathering : 1;                    // 0x04C4 (0x0004) [0x0000000000004000] [0x00000010] (CPF_Config)
	uint32_t                                           bGameplayDataGatheringLocalOnly : 1;           // 0x04C4 (0x0004) [0x0000000000004000] [0x00000020] (CPF_Config)
	uint32_t                                           bAutoOpenGameplayData : 1;                     // 0x04C4 (0x0004) [0x0000000000004000] [0x00000040] (CPF_Config)
	struct FName                                       DefaultMapName;                                // 0x04C8 (0x0008) [0x0000000000004000] (CPF_Config)  
	struct FName                                       DemoMapName;                                   // 0x04D0 (0x0008) [0x0000000000004000] (CPF_Config)  
	struct FName                                       DLCInstalledMapName;                           // 0x04D8 (0x0008) [0x0000000000004000] (CPF_Config)  
	TArray<struct FName>                               PersistentMaps;                                // 0x04E0 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	struct FName                                       CurrentCheckpointName;                         // 0x04F0 (0x0008) [0x0000000000000000]               
	struct FName                                       PendingCheckpointName;                         // 0x04F8 (0x0008) [0x0000000000000000]               
	float                                              BaseGameTime;                                  // 0x0500 (0x0004) [0x0000000000000000]               
	float                                              SegmentEndGameTime;                            // 0x0504 (0x0004) [0x0000000000000000]               
	float                                              CurrentGameTime;                               // 0x0508 (0x0004) [0x0000000000000000]               
	float                                              CPStartWorldTime;                              // 0x050C (0x0004) [0x0000000000000000]               
	int32_t                                            NumberDeathSinceLastCP;                        // 0x0510 (0x0004) [0x0000000000000000]               
	int32_t                                            NumberDeathConsideredSinceLastCP;              // 0x0514 (0x0004) [0x0000000000000000]               
	int32_t                                            DelayedShowPauseMenuCount;                     // 0x0518 (0x0004) [0x0000000000000000]               
	int32_t                                            DelayedHidePauseMenuCount;                     // 0x051C (0x0004) [0x0000000000000000]               
	int32_t                                            DelayedShowPausedPromptCount;                  // 0x0520 (0x0004) [0x0000000000000000]               
	int32_t                                            DelayedHidePausedPromptCount;                  // 0x0524 (0x0004) [0x0000000000000000]               
	class UAkEvent*                                    SndPause;                                      // 0x0528 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndUnpause;                                    // 0x0530 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndPauseNoSound;                               // 0x0538 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndUnpauseNoSound;                             // 0x0540 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndPauseSFX;                                   // 0x0548 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndUnpauseSFX;                                 // 0x0550 (0x0008) [0x0000000000000002] (CPF_Const)   
	float                                              LastPauseSoundTimestamp;                       // 0x0558 (0x0004) [0x0000000000000000]               
	float                                              LastUnpauseSoundTimestamp;                     // 0x055C (0x0004) [0x0000000000000000]               
	class UOLDifficultyConfig*                         DifficultyConfig;                              // 0x0560 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       FinalCheckpoint;                               // 0x0568 (0x0008) [0x0000000000000002] (CPF_Const)   
	int32_t                                            GameplayDataGatheringVersion;                  // 0x0570 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              LastHintTimeStamp;                             // 0x0574 (0x0004) [0x0000000000000000]               
	int32_t                                            LastHintIndex;                                 // 0x0578 (0x0004) [0x0000000000000000]               
	TArray<struct FChapterDefinition>                  MainChapters;                                  // 0x057C (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	struct FName                                       CPPlayGoSeparator;                             // 0x058C (0x0008) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLGame");
		}

		return uClassPointer;
	};

	void eventCloseHint();
	void eventHideHint();
	void eventShowHint(class FString MessageText);
	void eventClearPause();
	bool SetPause(class APlayerController* PC, struct FScriptDelegate optionalCanUnpauseDelegate);
	void HandleUnpaused();
	void HandlePaused();
	void SetGameSpeed(float T);
	void eventTravelToStartupMap();
	void OnTravelToStartupMap();
	void RestartPlayer(class AController* NewPlayer);
	void eventEvtRestartPlayer(class AController* NewPlayer);
	void UpdateGameType();
	void eventOnPlayerSpawned(class AController* NewPlayer, class ANavigationPoint* StartPoint);
	class ANavigationPoint* FindPlayerStart(class AController* Player, uint8_t optionalInTeam, class FString optionalIncomingName);
	void NewPolish();
	void NewOptim();
	void NewTask();
	void NewBug();
	EDifficultyMode GetDifficultyMode();
	class FString GetFirstCheckpoint(EOutlastGameType GameType);
	class AOLCheckpoint* MatchCheckpoint(class FString PortalName);
	void SetCurrentCheckpoint(struct FName CheckpointName);
	void CheckpointReached(struct FName CheckpointName);
	bool AllowCheats(class APlayerController* P);
	void GenerateNewHint();
	bool IsDLCInstalled();
	bool IsPlayingDLC();
	bool IsCensored();
	bool IsPlaytest();
	bool IsDemo();
	static class UClass* eventSetGameType(class FString MapName, class FString Options, class FString Portal);
};

// Class OLGame.OLGameplayMarker
// 0x0004 OR 0x024C (0x024C - 0x0248)
// 4 OR 588 (588 - 584)
class AOLGameplayMarker : public AActor
{
public:
	uint32_t                                           bEnabled : 1;                                  // 0x0248 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bInitiallyEnabled : 1;                         // 0x0248 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bExternallyBoundState : 1;                     // 0x0248 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLGameplayMarker");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
	void eventPostBeginPlay();
};

// Class OLGame.OLAIVaultMarker
// 0x0058 OR 0x02A4 (0x02A4 - 0x024C)
// 88 OR 676 (676 - 588)
class AOLAIVaultMarker : public AOLGameplayMarker
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;          // 0x024C (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	float                                              VaultWidth;                                    // 0x0254 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            NonChaseCostMultiplier;                        // 0x0258 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PathfindingCostNormal;                         // 0x025C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PathfindingCostChase;                          // 0x0260 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     EndPointOne;                                   // 0x0264 (0x000C) [0x0000000000000000]               
	struct FVector                                     EndPointTwo;                                   // 0x0270 (0x000C) [0x0000000000000000]               
	struct FGuid                                       NavGuid;                                       // 0x027C (0x0010) [0x0000000000220002] (CPF_Const | CPF_EditConst)
	class AOLBot*                                      ActiveBot;                                     // 0x028C (0x0008) [0x0000000000000000]               
	TArray<class AOLBot*>                              Bots;                                          // 0x0294 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAIVaultMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAmbushMarker
// 0x0054 OR 0x02A0 (0x02A0 - 0x024C)
// 84 OR 672 (672 - 588)
class AOLAmbushMarker : public AOLGameplayMarker
{
public:
	struct FName                                       EntryAnimName;                                 // 0x024C (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       IdleAnimName;                                  // 0x0254 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       ExitAnimName;                                  // 0x025C (0x0008) [0x0000000000000001] (CPF_Edit)    
	class AOLJumpMarker*                               ExitThroughJumpMarker;                         // 0x0264 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              EntryOffsetSide;                               // 0x026C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EntryOffsetFwd;                                // 0x0270 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bSyncIdleToPosition : 1;                       // 0x0274 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bSyncIdleToRotation : 1;                       // 0x0274 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bEntryAnimFacesOppositeMarker : 1;             // 0x0274 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bExitIfPlayerClose : 1;                        // 0x0274 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bHasBeenUsed : 1;                              // 0x0274 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	float                                              TriggerDistanceHorz;                           // 0x0278 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TriggerDistanceDown;                           // 0x027C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TriggerDistanceUp;                             // 0x0280 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxAngleToPlayerForExit;                       // 0x0284 (0x0004) [0x0000000000000001] (CPF_Edit)    
	TArray<class UOLBotCondition*>                     ExitConditions;                                // 0x0288 (0x0010) [0x0000000004400009] (CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	class AOLBot*                                      BotReservation;                                // 0x0298 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAmbushMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBed
// 0x0020 OR 0x026C (0x026C - 0x024C)
// 32 OR 620 (620 - 588)
class AOLBed : public AOLGameplayMarker
{
public:
	class UOLInvestigationComponent*                   InvestigationComponent;                        // 0x024C (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              ThrowOffsetLeft;                               // 0x0254 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ThrowOffsetRight;                              // 0x0258 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FindHiddenPlayerProbability;                   // 0x025C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DistFwd;                                       // 0x0260 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DistBwd;                                       // 0x0264 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              HalfWidth;                                     // 0x0268 (0x0004) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBed");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLCornerMarker
// 0x0048 OR 0x0294 (0x0294 - 0x024C)
// 72 OR 660 (660 - 588)
class AOLCornerMarker : public AOLGameplayMarker
{
public:
	struct FCornerData                                 Data;                                          // 0x024C (0x0038) [0x0000000004000001] (CPF_Edit | CPF_EditInline)
	class FString                                      BoundStaticMesh;                               // 0x0284 (0x0010) [0x0000000000420001] (CPF_Edit | CPF_EditConst | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLCornerMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLCSA
// 0x00A0 OR 0x02EC (0x02EC - 0x024C)
// 160 OR 748 (748 - 588)
class AOLCSA : public AOLGameplayMarker
{
public:
	uint32_t                                           bAutomatic : 1;                                // 0x024C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bCheckLOS : 1;                                 // 0x024C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bConsumeItem : 1;                              // 0x024C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bNoPrompt : 1;                                 // 0x024C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bCanReactToHit : 1;                            // 0x024C (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bKeepPositionOrientation : 1;                  // 0x024C (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bClearDynamicDataW : 1;                        // 0x024C (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bKeepCameraPitchAfterCompletion : 1;           // 0x024C (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	int32_t                                            MaxTriggerCount;                               // 0x0250 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              InteractDistHorz;                              // 0x0254 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              InteractDistVert;                              // 0x0258 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              InteractRadius;                                // 0x025C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxPlayerAngle;                                // 0x0260 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       RequiredItem;                                  // 0x0264 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       AnimName;                                      // 0x026C (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UAnimSet*                                    SpecificAnimSet;                               // 0x0274 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              AnimStartDistFwd;                              // 0x027C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AnimStartDistRight;                            // 0x0280 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AActor*                                      ReferenceAnimActor;                            // 0x0284 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       ActivationPromptTextId;                        // 0x028C (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       RequiredItemPromptTextId;                      // 0x0294 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class AStaticMeshActor*                            AnimatedProp;                                  // 0x029C (0x0008) [0x0000000000000001] (CPF_Edit)    
	class AActor*                                      GlowingInteractObject;                         // 0x02A4 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInstanceConstant*                   GlowingTemplateMatInst;                        // 0x02AC (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInstanceConstant*                   GlowingClonedMatInst;                          // 0x02B4 (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FName                                       GlowingParamName;                              // 0x02BC (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              GlowingOnValue;                                // 0x02C4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              GlowingOffValue;                               // 0x02C8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      PromptColor;                                   // 0x02CC (0x0004) [0x0000000000000001] (CPF_Edit)    
	TArray<struct FGameFlowRuleEnable>                 GameFlowRules;                                 // 0x02D0 (0x0010) [0x0000000000600001] (CPF_Edit | CPF_NeedCtorLink)
	int32_t                                            TriggerCount;                                  // 0x02E0 (0x0004) [0x0000000000000000]               
	class UDrawSphereComponent*                        PreviewComp;                                   // 0x02E4 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLCSA");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
	void SetEnabled(bool bNewEnabled);
};

// Class OLGame.OLHandReactionMarker
// 0x001C OR 0x0268 (0x0268 - 0x024C)
// 28 OR 616 (616 - 588)
class AOLHandReactionMarker : public AOLGameplayMarker
{
public:
	class UDrawSphereComponent*                        PreviewComp;                                   // 0x024C (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              Radius;                                        // 0x0254 (0x0004) [0x0000000000000000]               
	class FString                                      BoundStaticMesh;                               // 0x0258 (0x0010) [0x0000000000420001] (CPF_Edit | CPF_EditConst | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLHandReactionMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBranchShieldingMarker
// 0x0060 OR 0x02C8 (0x02C8 - 0x0268)
// 96 OR 712 (712 - 616)
class AOLBranchShieldingMarker : public AOLHandReactionMarker
{
public:
	float                                              CylinderHeight;                                // 0x0268 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CylinderRadius;                                // 0x026C (0x0004) [0x0000000000000001] (CPF_Edit)    
	TArray<class UAkEvent*>                            OnPlayerEnterEvents;                           // 0x0270 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<class UAkEvent*>                            OnPlayerExitEvents;                            // 0x0280 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<class UAkEvent*>                            OnEnterEvents;                                 // 0x0290 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<class UAkEvent*>                            OnExitEvents;                                  // 0x02A0 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class UDrawCylinderComponent*                      CylinderPreviewComp;                           // 0x02B0 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UArrowComponent*                             ArrowPreviewComp;                              // 0x02B8 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UObject*                                     SpriteObj;                                     // 0x02C0 (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBranchShieldingMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBrightLightMarker
// 0x0014 OR 0x027C (0x027C - 0x0268)
// 20 OR 636 (636 - 616)
class AOLBrightLightMarker : public AOLHandReactionMarker
{
public:
	float                                              ViewHeightLimits;                              // 0x0268 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ViewRadiusLimits;                              // 0x026C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Delay;                                         // 0x0270 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UDrawCylinderComponent*                      CylinderPreviewComp;                           // 0x0274 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBrightLightMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLFlySwattingMarker
// 0x0000 OR 0x0268 (0x0268 - 0x0268)
// 0 OR 616 (616 - 616)
class AOLFlySwattingMarker : public AOLHandReactionMarker
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLFlySwattingMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLHeatMarker
// 0x0004 OR 0x026C (0x026C - 0x0268)
// 4 OR 620 (620 - 616)
class AOLHeatMarker : public AOLHandReactionMarker
{
public:
	uint32_t                                           bNoHandShielding : 1;                          // 0x0268 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bNoDamage : 1;                                 // 0x0268 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLHeatMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLHidingSpot
// 0x0014 OR 0x0260 (0x0260 - 0x024C)
// 20 OR 608 (608 - 588)
class AOLHidingSpot : public AOLGameplayMarker
{
public:
	class UOLInvestigationComponent*                   InvestigationComponent;                        // 0x024C (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class AOLDoor*                                     AssociatedDoor;                                // 0x0254 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              FindHiddenPlayerProbability;                   // 0x025C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLHidingSpot");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLJumpMarker
// 0x005C OR 0x02A8 (0x02A8 - 0x024C)
// 92 OR 680 (680 - 588)
class AOLJumpMarker : public AOLGameplayMarker
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;          // 0x024C (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class AOLJumpMarker*                               OtherMarker;                                   // 0x0254 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bOnBeam : 1;                                   // 0x025C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bMaster : 1;                                   // 0x025C (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	float                                              PathfindingCostNormal;                         // 0x0260 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PathfindingCostChase;                          // 0x0264 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OverrideAngle;                                 // 0x0268 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OverrideControlStrength;                       // 0x026C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinHorzDist;                                   // 0x0270 (0x0004) [0x0000000000020003] (CPF_Edit | CPF_Const | CPF_EditConst)
	float                                              MaxHorzDist;                                   // 0x0274 (0x0004) [0x0000000000020003] (CPF_Edit | CPF_Const | CPF_EditConst)
	float                                              MinVertDist;                                   // 0x0278 (0x0004) [0x0000000000020003] (CPF_Edit | CPF_Const | CPF_EditConst)
	float                                              MaxVertDist;                                   // 0x027C (0x0004) [0x0000000000020003] (CPF_Edit | CPF_Const | CPF_EditConst)
	struct FGuid                                       NavGuid;                                       // 0x0280 (0x0010) [0x0000000000220002] (CPF_Const | CPF_EditConst)
	class AOLBot*                                      ActiveBot;                                     // 0x0290 (0x0008) [0x0000000000000000]               
	TArray<class AOLBot*>                              Bots;                                          // 0x0298 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLJumpMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLLadderMarker
// 0x0028 OR 0x0274 (0x0274 - 0x024C)
// 40 OR 628 (628 - 588)
class AOLLadderMarker : public AOLGameplayMarker
{
public:
	class AOLLadderMarker*                             OtherMarker;                                   // 0x024C (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bNoHandle : 1;                                 // 0x0254 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bNoFailTopEntry : 1;                           // 0x0254 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bEnterOnlyIfCrouching : 1;                     // 0x0254 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	ELadderMaterial                                    LadderType;                                    // 0x0258 (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       SwitchLadderType;                              // 0x025C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       SwitchLadderTypeMetal;                         // 0x0264 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       SwitchLadderTypeWood;                          // 0x026C (0x0008) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLLadderMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLPreferredPathMarker
// 0x0008 OR 0x0254 (0x0254 - 0x024C)
// 8 OR 596 (596 - 588)
class AOLPreferredPathMarker : public AOLGameplayMarker
{
public:
	class AOLPreferredPathMarker*                      Next;                                          // 0x024C (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLPreferredPathMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLRecordingMarker
// 0x0068 OR 0x02B4 (0x02B4 - 0x024C)
// 104 OR 692 (692 - 588)
class AOLRecordingMarker : public AOLGameplayMarker
{
public:
	float                                              Radius;                                        // 0x024C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ExtraWidth;                                    // 0x0250 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       MomentName;                                    // 0x0254 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bRequiresNightVision : 1;                      // 0x025C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bRequiresNotNightVision : 1;                   // 0x025C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bRequiresMicrophone : 1;                       // 0x025C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bOnlyInExterior : 1;                           // 0x025C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bMustFaceMarker2D : 1;                         // 0x025C (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bMustFaceMarker3D : 1;                         // 0x025C (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bPerformLineTrace : 1;                         // 0x025C (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bAllowNonContinuousRecording : 1;              // 0x025C (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bNoNotification : 1;                           // 0x025C (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bInfiniteRecordingTime : 1;                    // 0x025C (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bInvisibleProgress : 1;                        // 0x025C (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bRecorded : 1;                                 // 0x025C (0x0004) [0x0000000000002000] [0x00000800] (CPF_Transient)
	uint32_t                                           bRecording : 1;                                // 0x025C (0x0004) [0x0000000000002000] [0x00001000] (CPF_Transient)
	float                                              MaxDistance;                                   // 0x0260 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxPitch;                                      // 0x0264 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinPitch;                                      // 0x0268 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxAngleFromScreenCenter;                      // 0x026C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxBrokenSightDuration;                        // 0x0270 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinRecordingDuration;                          // 0x0274 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              NotificationDelay;                             // 0x0278 (0x0004) [0x0000000000000001] (CPF_Edit)    
	TArray<class AActor*>                              BoostTextureActors;                            // 0x027C (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<struct FGameFlowRuleEnable>                 GameFlowRules;                                 // 0x028C (0x0010) [0x0000000000600001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              StartedRecordingTime;                          // 0x029C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              AccumulatedRecordingTime;                      // 0x02A0 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LastInSightTime;                               // 0x02A4 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              AccumulatedPausedRecordingTime;                // 0x02A8 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UDrawSphereComponent*                        PreviewComp;                                   // 0x02AC (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLRecordingMarker");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
};

// Class OLGame.OLRTPCDistanceModifier
// 0x003C OR 0x0288 (0x0288 - 0x024C)
// 60 OR 648 (648 - 588)
class AOLRTPCDistanceModifier : public AOLGameplayMarker
{
public:
	class AActor*                                      TargetSoundSource;                             // 0x024C (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    StartEvent;                                    // 0x0254 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    StopEvent;                                     // 0x025C (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       DistanceRTPC;                                  // 0x0264 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              Range;                                         // 0x026C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AOLSplineGameplayMarker*                     LinkedSpline;                                  // 0x0270 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              SplineOffset;                                  // 0x0278 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bPlaying : 1;                                  // 0x027C (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	class UDrawSphereComponent*                        SpherePreviewComp;                             // 0x0280 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLRTPCDistanceModifier");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
	void StopSound();
	void StartSound();
};

// Class OLGame.OLRTPCPlayerLookModifier
// 0x0040 OR 0x028C (0x028C - 0x024C)
// 64 OR 652 (652 - 588)
class AOLRTPCPlayerLookModifier : public AOLGameplayMarker
{
public:
	class AActor*                                      TargetSoundSource;                             // 0x024C (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    StartEvent;                                    // 0x0254 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    StopEvent;                                     // 0x025C (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       AngleRTPC;                                     // 0x0264 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              AngleRange;                                    // 0x026C (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bTestLineOfSight : 1;                          // 0x0270 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bPlaying : 1;                                  // 0x0270 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           LastPlayerLookRTPCTraceClear : 1;              // 0x0270 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	float                                              LineOfSightTimeslice;                          // 0x0274 (0x0004) [0x0000000000000001] (CPF_Edit)    
	TArray<class AVolume*>                             ActivationVolumes;                             // 0x0278 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              LastPlayerLookRTPCTraceTime;                   // 0x0288 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLRTPCPlayerLookModifier");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
	void StopSound();
	void StartSound();
};

// Class OLGame.OLSplineGameplayMarker
// 0x0030 OR 0x027C (0x027C - 0x024C)
// 48 OR 636 (636 - 588)
class AOLSplineGameplayMarker : public AOLGameplayMarker
{
public:
	TArray<class AOLSplineGameplayMarker*>             NextMarkers;                                   // 0x024C (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<class AOLSplineGameplayMarker*>             Prev;                                          // 0x025C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	uint32_t                                           bSoftAngles : 1;                               // 0x026C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bFlat : 1;                                     // 0x026C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bEndsFlat : 1;                                 // 0x026C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bOverrideOrientation : 1;                      // 0x026C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bHermiteInterpolation : 1;                     // 0x026C (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bHasValidCachedSegmentLength : 1;              // 0x026C (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	uint32_t                                           bHasValidCachedSegmentLength2D : 1;            // 0x026C (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	uint32_t                                           bDisableNextMarkers : 1;                       // 0x026C (0x0004) [0x0000000000002000] [0x00000080] (CPF_Transient)
	uint32_t                                           bDisablePreviousMarkers : 1;                   // 0x026C (0x0004) [0x0000000000002000] [0x00000100] (CPF_Transient)
	float                                              OverrideStrength;                              // 0x0270 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CachedSegmentLength;                           // 0x0274 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              CachedSegmentLength2D;                         // 0x0278 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSplineGameplayMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBeamMarker
// 0x003C OR 0x02B8 (0x02B8 - 0x027C)
// 60 OR 696 (696 - 636)
class AOLBeamMarker : public AOLSplineGameplayMarker
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;          // 0x027C (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	float                                              BeamWidth;                                     // 0x0284 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bNPCCanUse : 1;                                // 0x0288 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              PathfindingCostMultiplier;                     // 0x028C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FGuid                                       NavGuid;                                       // 0x0290 (0x0010) [0x0000000000220002] (CPF_Const | CPF_EditConst)
	struct FVector                                     StartNavmeshPoint;                             // 0x02A0 (0x000C) [0x0000000000000000]               
	struct FVector                                     EndNavmeshPoint;                               // 0x02AC (0x000C) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBeamMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLCrawlMarker
// 0x007C OR 0x02F8 (0x02F8 - 0x027C)
// 124 OR 760 (760 - 636)
class AOLCrawlMarker : public AOLSplineGameplayMarker
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;          // 0x027C (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	uint32_t                                           bPlayerCanUse : 1;                             // 0x0284 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bNPCCanUse : 1;                                // 0x0284 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bNPCExitOnly : 1;                              // 0x0284 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bNPCNoExit : 1;                                // 0x0284 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bNPCExitIgnoreCollisionChecks : 1;             // 0x0284 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bPlayerNoExit : 1;                             // 0x0284 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bPlayerOneWayFwd : 1;                          // 0x0284 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bPlayerOneWayBwd : 1;                          // 0x0284 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bNoLookback : 1;                               // 0x0284 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bAirvent : 1;                                  // 0x0284 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bScramble : 1;                                 // 0x0284 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bNPCCrouch : 1;                                // 0x0284 (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	uint32_t                                           bBotsCanInvestigate : 1;                       // 0x0284 (0x0004) [0x0000000000000001] [0x00001000] (CPF_Edit)
	uint32_t                                           bPlayerIntersection : 1;                       // 0x0284 (0x0004) [0x0000000000002000] [0x00002000] (CPF_Transient)
	class UOLInvestigationComponent*                   InvestigationComponent;                        // 0x0288 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              PathfindingCostMultiplier;                     // 0x0290 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              NavmeshDistOutside;                            // 0x0294 (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FGuid                                       NavGuid;                                       // 0x0298 (0x0010) [0x0000000000220002] (CPF_Const | CPF_EditConst)
	struct FVector                                     StartNavmeshPoint;                             // 0x02A8 (0x000C) [0x0000000000000000]               
	struct FVector                                     EndNavmeshPoint;                               // 0x02B4 (0x000C) [0x0000000000000000]               
	class AOLBasementWindow*                           ConnectedBasementWindow;                       // 0x02C0 (0x0008) [0x0000000000002000] (CPF_Transient)
	class AOLCrawlMarker*                              TwinCrawlSpline;                               // 0x02C8 (0x0008) [0x0000000000002000] (CPF_Transient)
	TArray<class AOLCrawlMarker*>                      IntersectionMarkers;                           // 0x02D0 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class UTexture2D*                                  NormalSpriteTexture;                           // 0x02E0 (0x0008) [0x0000000000000000]               
	class UTexture2D*                                  EnemyOnlySpriteTexture;                        // 0x02E8 (0x0008) [0x0000000000000000]               
	class USpriteComponent*                            SpriteComp;                                    // 0x02F0 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLCrawlMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLLedgeMarker
// 0x0060 OR 0x02DC (0x02DC - 0x027C)
// 96 OR 732 (732 - 636)
class AOLLedgeMarker : public AOLSplineGameplayMarker
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;          // 0x027C (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	float                                              PathOffset;                                    // 0x0284 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           AICanVault : 1;                                // 0x0288 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           AICanOnlyDropDown : 1;                         // 0x0288 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bCanLedgeWalk : 1;                             // 0x0288 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bCanLedgeHang : 1;                             // 0x0288 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bCanEnterAnywhere : 1;                         // 0x0288 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bCanClimbUp : 1;                               // 0x0288 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bCanDropDown : 1;                              // 0x0288 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bCanSlide : 1;                                 // 0x0288 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bBeamLedge : 1;                                // 0x0288 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bBeamLedgeEasyGrab : 1;                        // 0x0288 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bAutomaticClimb : 1;                           // 0x0288 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bAutomaticDrop : 1;                            // 0x0288 (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	uint32_t                                           bAllowLowJumpOver : 1;                         // 0x0288 (0x0004) [0x0000000000000001] [0x00001000] (CPF_Edit)
	uint32_t                                           bNoPushFromLedge : 1;                          // 0x0288 (0x0004) [0x0000000000000001] [0x00002000] (CPF_Edit)
	uint32_t                                           bClimbFar : 1;                                 // 0x0288 (0x0004) [0x0000000000000001] [0x00004000] (CPF_Edit)
	uint32_t                                           bForceWalkingInteraction : 1;                  // 0x0288 (0x0004) [0x0000000000000001] [0x00008000] (CPF_Edit)
	uint32_t                                           bForceRunningInteraction : 1;                  // 0x0288 (0x0004) [0x0000000000000001] [0x00010000] (CPF_Edit)
	uint32_t                                           bNoAutoLink : 1;                               // 0x0288 (0x0004) [0x0000000000000001] [0x00020000] (CPF_Edit)
	uint32_t                                           bLeftFacingLedgeWalk : 1;                      // 0x0288 (0x0004) [0x0000000000000001] [0x00040000] (CPF_Edit)
	uint32_t                                           bRightFacingLedgeWalk : 1;                     // 0x0288 (0x0004) [0x0000000000000001] [0x00080000] (CPF_Edit)
	uint32_t                                           bBoundToWindow : 1;                            // 0x0288 (0x0004) [0x0000000000002000] [0x00100000] (CPF_Transient)
	float                                              PathfindingCostNormal;                         // 0x028C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PathfindingCostChase;                          // 0x0290 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       MaterialTypeOverride;                          // 0x0294 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     TopPoint;                                      // 0x029C (0x000C) [0x0000000000000000]               
	struct FVector                                     BottomPoint;                                   // 0x02A8 (0x000C) [0x0000000000000000]               
	struct FGuid                                       NavGuid;                                       // 0x02B4 (0x0010) [0x0000000000220002] (CPF_Const | CPF_EditConst)
	class AOLBot*                                      ActiveBot;                                     // 0x02C4 (0x0008) [0x0000000000000000]               
	TArray<class AOLBot*>                              Bots;                                          // 0x02CC (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLLedgeMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLPushableSplineMarker
// 0x0000 OR 0x027C (0x027C - 0x027C)
// 0 OR 636 (636 - 636)
class AOLPushableSplineMarker : public AOLSplineGameplayMarker
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLPushableSplineMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLRaftCollisionMarker
// 0x0004 OR 0x0280 (0x0280 - 0x027C)
// 4 OR 640 (640 - 636)
class AOLRaftCollisionMarker : public AOLSplineGameplayMarker
{
public:
	uint32_t                                           bFlipSide : 1;                                 // 0x027C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLRaftCollisionMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLRaftLimitSplineMarker
// 0x0004 OR 0x0280 (0x0280 - 0x027C)
// 4 OR 640 (640 - 636)
class AOLRaftLimitSplineMarker : public AOLSplineGameplayMarker
{
public:
	uint32_t                                           bFlipSide : 1;                                 // 0x027C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bAllowsBeingOutside : 1;                       // 0x027C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLRaftLimitSplineMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLRiverMarker
// 0x0024 OR 0x02A0 (0x02A0 - 0x027C)
// 36 OR 672 (672 - 636)
class AOLRiverMarker : public AOLSplineGameplayMarker
{
public:
	float                                              Width;                                         // 0x027C (0x0004) [0x0000000020000000]  CPF_Deprecated)
	float                                              LeftWidth;                                     // 0x0280 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RightWidth;                                    // 0x0284 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Speed;                                         // 0x0288 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RotationInputRatio;                            // 0x028C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FacingRotationRatio;                           // 0x0290 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RaftValueBumpinessRatio;                       // 0x0294 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RaftTimeBumpinessRatio;                        // 0x0298 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bUsePlayerRelativeDirection : 1;               // 0x029C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bUseAsRail : 1;                                // 0x029C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLRiverMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSlideUnderMarker
// 0x0004 OR 0x0280 (0x0280 - 0x027C)
// 4 OR 640 (640 - 636)
class AOLSlideUnderMarker : public AOLSplineGameplayMarker
{
public:
	uint32_t                                           bForceCrawlStance : 1;                         // 0x027C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bIgnoreExitClearance : 1;                      // 0x027C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSlideUnderMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSlidingSlopeMarker
// 0x0024 OR 0x02A0 (0x02A0 - 0x027C)
// 36 OR 672 (672 - 636)
class AOLSlidingSlopeMarker : public AOLSplineGameplayMarker
{
public:
	uint32_t                                           bPlayOnce : 1;                                 // 0x027C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bAllowsSlideEntry : 1;                         // 0x027C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bOverrideSlideSpeed : 1;                       // 0x027C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bLandingOnly : 1;                              // 0x027C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bLowerCameraOnLanding : 1;                     // 0x027C (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bAutoRaiseCameraAfterLanding : 1;              // 0x027C (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bAlreadyUsed : 1;                              // 0x027C (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	float                                              Width;                                         // 0x0280 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SlideSpeedMultiplier;                          // 0x0284 (0x0004) [0x0000000000000001] (CPF_Edit)    
	ESlidingSlopeSlideType                             SlideType;                                     // 0x0288 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ESlopeLanding                                      LandingType;                                   // 0x0289 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ESlopeMaterial                                     GroundMaterial;                                // 0x028A (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              HobbleTime;                                    // 0x028C (0x0004) [0x0000000000000001] (CPF_Edit)    
	TArray<struct FGameFlowRuleSlidingSlope>           GameFlowRules;                                 // 0x0290 (0x0010) [0x0000000000600001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSlidingSlopeMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSqueezeMarker
// 0x0005 OR 0x0281 (0x0281 - 0x027C)
// 5 OR 641 (641 - 636)
class AOLSqueezeMarker : public AOLSplineGameplayMarker
{
public:
	uint32_t                                           bCanLookLeft : 1;                              // 0x027C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bCanLookRight : 1;                             // 0x027C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bNoHands : 1;                                  // 0x027C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bDeadEnd : 1;                                  // 0x027C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bExtraPushRightOnExit : 1;                     // 0x027C (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bExtraPushLeftOnExit : 1;                      // 0x027C (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	ESqueezeAnimType                                   AnimType;                                      // 0x0280 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSqueezeMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLStairsMarker
// 0x0010 OR 0x025C (0x025C - 0x024C)
// 16 OR 604 (604 - 588)
class AOLStairsMarker : public AOLGameplayMarker
{
public:
	float                                              StairsWidth;                                   // 0x024C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AOLStairsMarker*                             OtherMarker;                                   // 0x0250 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bInvalid : 1;                                  // 0x0258 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bConfirmedValid : 1;                           // 0x0258 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLStairsMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLGameplayStaticMeshActor
// 0x0007 OR 0x025C (0x025C - 0x0255)
// 7 OR 604 (604 - 597)
class AOLGameplayStaticMeshActor : public AStaticMeshActor
{
public:
	uint32_t                                           bEnabled : 1;                                  // 0x0258 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bInitiallyEnabled : 1;                         // 0x0258 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLGameplayStaticMeshActor");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
};

// Class OLGame.OLTripActor
// 0x0020 OR 0x027C (0x027C - 0x025C)
// 32 OR 636 (636 - 604)
class AOLTripActor : public AOLGameplayStaticMeshActor
{
public:
	float                                              Radius;                                        // 0x025C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Height;                                        // 0x0260 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    SoundEvent;                                    // 0x0264 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UDrawCylinderComponent*                      CylinderPreviewComp;                           // 0x026C (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class USpriteComponent*                            SpriteComp;                                    // 0x0274 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLTripActor");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLGameplayVolume
// 0x0004 OR 0x0288 (0x0288 - 0x0284)
// 4 OR 648 (648 - 644)
class AOLGameplayVolume : public AVolume
{
public:
	uint32_t                                           bEnabled : 1;                                  // 0x0284 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bInitiallyEnabled : 1;                         // 0x0284 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLGameplayVolume");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
};

// Class OLGame.OLAIVisionObstructionVolume
// 0x0000 OR 0x0288 (0x0288 - 0x0288)
// 0 OR 648 (648 - 648)
class AOLAIVisionObstructionVolume : public AOLGameplayVolume
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAIVisionObstructionVolume");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBushesVolume
// 0x0010 OR 0x0298 (0x0298 - 0x0288)
// 16 OR 664 (664 - 648)
class AOLBushesVolume : public AOLGameplayVolume
{
public:
	EBushHidingStance                                  HidingStance;                                  // 0x0288 (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bOnlyAffectsHero : 1;                          // 0x028C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bInactiveIfBothInside : 1;                     // 0x028C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              VisualDisturbanceMultiplier;                   // 0x0290 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AudioDisturbanceMultiplier;                    // 0x0294 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBushesVolume");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLCameraLimitsVolume
// 0x0010 OR 0x0298 (0x0298 - 0x0288)
// 16 OR 664 (664 - 648)
class AOLCameraLimitsVolume : public AOLGameplayVolume
{
public:
	float                                              MinYaw;                                        // 0x0288 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxYaw;                                        // 0x028C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinPitch;                                      // 0x0290 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxPitch;                                      // 0x0294 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLCameraLimitsVolume");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLDamageBlockingVolume
// 0x0008 OR 0x0290 (0x0290 - 0x0288)
// 8 OR 656 (656 - 648)
class AOLDamageBlockingVolume : public AOLGameplayVolume
{
public:
	int32_t                                            TouchDamage;                                   // 0x0288 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Knockback;                                     // 0x028C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLDamageBlockingVolume");
		}

		return uClassPointer;
	};

	void eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal);
};

// Class OLGame.OLDarknessVolume
// 0x0004 OR 0x028C (0x028C - 0x0288)
// 4 OR 652 (652 - 648)
class AOLDarknessVolume : public AOLGameplayVolume
{
public:
	uint32_t                                           bDark : 1;                                     // 0x0288 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bOnlyDarkWhenCrouched : 1;                     // 0x0288 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bInitiallyDark : 1;                            // 0x0288 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLDarknessVolume");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
};

// Class OLGame.OLElectrifiedVolume
// 0x0010 OR 0x0298 (0x0298 - 0x0288)
// 16 OR 664 (664 - 648)
class AOLElectrifiedVolume : public AOLGameplayVolume
{
public:
	int32_t                                            TouchDamage;                                   // 0x0288 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Knockback;                                     // 0x028C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    SoundEvent;                                    // 0x0290 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLElectrifiedVolume");
		}

		return uClassPointer;
	};

	void eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal);
};

// Class OLGame.OLMartaStreetVolume
// 0x0024 OR 0x02AC (0x02AC - 0x0288)
// 36 OR 684 (684 - 648)
class AOLMartaStreetVolume : public AOLGameplayVolume
{
public:
	TArray<struct FVolumeConnection>                   Connections;                                   // 0x0288 (0x0010) [0x0000000000600001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<class AActor*>                              SpawnPoints;                                   // 0x0298 (0x0010) [0x0000000000600001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              LastHeroVisitedTime;                           // 0x02A8 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLMartaStreetVolume");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLPhysicsVolume
// 0x004C OR 0x02D4 (0x02D4 - 0x0288)
// 76 OR 724 (724 - 648)
class AOLPhysicsVolume : public AOLGameplayVolume
{
public:
	uint32_t                                           bAllowCrawl : 1;                               // 0x0288 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bAllowCrouch : 1;                              // 0x0288 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bAllowStand : 1;                               // 0x0288 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bDisableRun : 1;                               // 0x0288 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bDisableSprint : 1;                            // 0x0288 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bDisableJump : 1;                              // 0x0288 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bNoAnimOnLand : 1;                             // 0x0288 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bNoDamageOnLand : 1;                           // 0x0288 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bNoDieOnLand : 1;                              // 0x0288 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bKill : 1;                                     // 0x0288 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bEasyJump : 1;                                 // 0x0288 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bStrongWind : 1;                               // 0x0288 (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	uint32_t                                           bIsWater : 1;                                  // 0x0288 (0x0004) [0x0000000000000001] [0x00001000] (CPF_Edit)
	uint32_t                                           bOverrideWaterWalkHeight : 1;                  // 0x0288 (0x0004) [0x0000000000000001] [0x00002000] (CPF_Edit)
	uint32_t                                           bCustomLanding : 1;                            // 0x0288 (0x0004) [0x0000000000000001] [0x00004000] (CPF_Edit)
	uint32_t                                           bDoCustomLandingOnce : 1;                      // 0x0288 (0x0004) [0x0000000000000001] [0x00008000] (CPF_Edit)
	uint32_t                                           bFixedCustomLandingPosition : 1;               // 0x0288 (0x0004) [0x0000000000000001] [0x00010000] (CPF_Edit)
	uint32_t                                           bUsedForLanding : 1;                           // 0x0288 (0x0004) [0x0000000000002000] [0x00020000] (CPF_Transient)
	float                                              WindGlobalIntensity;                           // 0x028C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AActor*                                      WindDirectionReference;                        // 0x0290 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              WindMaxPlayerVelInfluence;                     // 0x0298 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WindMinBurstDelay;                             // 0x029C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WindMaxBurstDelay;                             // 0x02A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WindMinBurstDuration;                          // 0x02A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WindMaxBurstDuration;                          // 0x02A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WindMinBurstIntensity;                         // 0x02AC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WindMaxBurstIntensity;                         // 0x02B0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OverridenWaterWalkHeight;                      // 0x02B4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     ZoneVelocity;                                  // 0x02B8 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              CustomLandingHeight;                           // 0x02C4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	ECustomLandingType                                 CustomLandingType;                             // 0x02C8 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class AActor*                                      CustomLandingRefPosition;                      // 0x02CC (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLPhysicsVolume");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
	void UpdateCollisionState();
};

// Class OLGame.OLPushableBlockingVolume
// 0x0010 OR 0x0298 (0x0298 - 0x0288)
// 16 OR 664 (664 - 648)
class AOLPushableBlockingVolume : public AOLGameplayVolume
{
public:
	TArray<class AOLPushableObject*>                   IgnoredPushable;                               // 0x0288 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLPushableBlockingVolume");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLPushableTriggerVolume
// 0x0014 OR 0x029C (0x029C - 0x0288)
// 20 OR 668 (668 - 648)
class AOLPushableTriggerVolume : public AOLGameplayVolume
{
public:
	uint32_t                                           bPushableFullyInside : 1;                      // 0x0288 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	TArray<class AOLPushableObject*>                   PushablesTouching;                             // 0x028C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLPushableTriggerVolume");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSlopedGroundVolume
// 0x000C OR 0x0294 (0x0294 - 0x0288)
// 12 OR 660 (660 - 648)
class AOLSlopedGroundVolume : public AOLGameplayVolume
{
public:
	float                                              MaxWalkingSlope;                               // 0x0288 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Delay;                                         // 0x028C (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bNoSlidingSound : 1;                           // 0x0290 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSlopedGroundVolume");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSoundObstructionVolume
// 0x0000 OR 0x0288 (0x0288 - 0x0288)
// 0 OR 648 (648 - 648)
class AOLSoundObstructionVolume : public AOLGameplayVolume
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSoundObstructionVolume");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSpeedLimitVolume
// 0x0008 OR 0x0290 (0x0290 - 0x0288)
// 8 OR 656 (656 - 648)
class AOLSpeedLimitVolume : public AOLGameplayVolume
{
public:
	uint32_t                                           bApplyToHero : 1;                              // 0x0288 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bApplyToBots : 1;                              // 0x0288 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              MaxSpeed;                                      // 0x028C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSpeedLimitVolume");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLGameStateList
// 0x0010 OR 0x0258 (0x0258 - 0x0248)
// 16 OR 600 (600 - 584)
class AOLGameStateList : public AActor
{
public:
	TArray<struct FOLGameState>                        GameStateList;                                 // 0x0248 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLGameStateList");
		}

		return uClassPointer;
	};

	static void ResetAllGameState();
	static void DumpGameState();
};

// Class OLGame.OLGameViewportClient
// 0x0000 OR 0x01C0 (0x01C0 - 0x01C0)
// 0 OR 448 (448 - 448)
class UOLGameViewportClient : public UUDKGameViewportClient
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLGameViewportClient");
		}

		return uClassPointer;
	};

	void DrawTransition(class UCanvas* Canvas);
};

// Class OLGame.OLHeroCamera
// 0x0378 OR 0x03E0 (0x03E0 - 0x0068)
// 888 OR 992 (992 - 104)
class UOLHeroCamera : public UObject
{
public:
	class AOLHero*                                     Hero;                                          // 0x0068 (0x0008) [0x0000000000000000]               
	struct FCamView                                    ViewWS;                                        // 0x0070 (0x0018) [0x0000000000000000]               
	struct FCamView                                    ViewCS;                                        // 0x0088 (0x0018) [0x0000000000000000]               
	struct FViewLimits                                 Limits;                                        // 0x00A0 (0x0010) [0x0000000000000000]               
	struct FViewLimits                                 SoftLimits;                                    // 0x00B0 (0x0010) [0x0000000000000000]               
	float                                              SoftZonePitch;                                 // 0x00C0 (0x0004) [0x0000000000000000]               
	float                                              SoftZoneYaw;                                   // 0x00C4 (0x0004) [0x0000000000000000]               
	struct FRotator                                    BaseRotation;                                  // 0x00C8 (0x000C) [0x0000000000000000]               
	struct FVector                                     BaseLocation;                                  // 0x00D4 (0x000C) [0x0000000000000000]               
	struct FSmoothingData                              BaseViewSmoothing;                             // 0x00E0 (0x0024) [0x0000000000000000]               
	float                                              InputYaw;                                      // 0x0104 (0x0004) [0x0000000000000000]               
	float                                              InputPitch;                                    // 0x0108 (0x0004) [0x0000000000000000]               
	float                                              NeckOffsetFwd;                                 // 0x010C (0x0004) [0x0000000000000000]               
	float                                              NeckOffsetSide;                                // 0x0110 (0x0004) [0x0000000000000000]               
	float                                              NeckOffsetBaseYaw;                             // 0x0114 (0x0004) [0x0000000000000000]               
	float                                              PositionOffset;                                // 0x0118 (0x0004) [0x0000000000000000]               
	struct FVector                                     PositionOffsetDir;                             // 0x011C (0x000C) [0x0000000000000000]               
	float                                              LookBackRatio;                                 // 0x0128 (0x0004) [0x0000000000000000]               
	float                                              LeanPushingRatio;                              // 0x012C (0x0004) [0x0000000000000000]               
	uint32_t                                           bActiveLookAt : 1;                             // 0x0130 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bHardLookAt : 1;                               // 0x0130 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bUserControlsPawnRotation : 1;                 // 0x0130 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bLocalSpacePlayerControl : 1;                  // 0x0130 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bFullCameraPassthrough : 1;                    // 0x0130 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bBugFixCheck : 1;                              // 0x0130 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	uint32_t                                           bHasLockedWSYaw : 1;                           // 0x0130 (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	float                                              LookAtAlpha;                                   // 0x0134 (0x0004) [0x0000000000000000]               
	struct FViewLimits                                 LookAtStartViewLimits;                         // 0x0138 (0x0010) [0x0000000000000000]               
	float                                              PendingYawCorrection;                          // 0x0148 (0x0004) [0x0000000000000000]               
	float                                              SpringLastValidInput;                          // 0x014C (0x0004) [0x0000000000000000]               
	float                                              RotationRoll;                                  // 0x0150 (0x0004) [0x0000000000000000]               
	float                                              ProceduralRollEnabledness;                     // 0x0154 (0x0004) [0x0000000000000000]               
	float                                              LastForceFeedbackIntensity;                    // 0x0158 (0x0004) [0x0000000000000000]               
	float                                              StabilizationRatio;                            // 0x015C (0x0004) [0x0000000000000000]               
	float                                              PitchStabilizationRatio;                       // 0x0160 (0x0004) [0x0000000000000000]               
	struct FTargettedSmoothingData                     TargettedYawSmoothing;                         // 0x0164 (0x0014) [0x0000000000000000]               
	struct FTargettedSmoothingData                     TargettedPitchSmoothing;                       // 0x0178 (0x0014) [0x0000000000000000]               
	struct FCameraShakeData                            DefaultShakeData;                              // 0x018C (0x0098) [0x0000000000000000]               
	struct FCameraShakeList                            ShakeDataList[0x4];                            // 0x0224 (0x0040) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FCameraShakeData                            SmallLandingShakeData;                         // 0x0264 (0x0098) [0x0000000000000002] (CPF_Const)   
	struct FCameraShakeData                            MinorStepShakeData;                            // 0x02FC (0x0098) [0x0000000000000002] (CPF_Const)   
	class UForceFeedbackWaveform*                      CamShakeFFWaveform;                            // 0x0394 (0x0008) [0x0000000000000000]               
	float                                              ProceduralAdditivePitch;                       // 0x039C (0x0004) [0x0000000000000000]               
	float                                              CameraSpringStiffness;                         // 0x03A0 (0x0004) [0x0000000000004000] (CPF_Config)  
	struct FName                                       CameraBoneName;                                // 0x03A4 (0x0008) [0x0000000000004000] (CPF_Config)  
	float                                              ViewLimitsSoftZone;                            // 0x03AC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DefaultCameraSpringStiffness;                  // 0x03B0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              GamepadLookDeadZone;                           // 0x03B4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              GamepadSpringDelay;                            // 0x03B8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MaxStabilizationRatio;                         // 0x03BC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              YawInputTimeStamp;                             // 0x03C0 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              PitchInputTimeStamp;                           // 0x03C4 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              MinWSAdditivePitch;                            // 0x03C8 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              MaxWSAdditivePitch;                            // 0x03CC (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LockedWSYaw;                                   // 0x03D0 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              SmoothAnimatedLookbackForwardOffset;           // 0x03D4 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              SmoothAnimatedLookbackSideOffset;              // 0x03D8 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              SmoothAnimatedLookbackUpwardOffset;            // 0x03DC (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLHeroCamera");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLHidingBarrel
// 0x010C OR 0x0354 (0x0354 - 0x0248)
// 268 OR 852 (852 - 584)
class AOLHidingBarrel : public AActor
{
public:
	uint32_t                                           bHasCover : 1;                                 // 0x0248 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bEnabled : 1;                                  // 0x0248 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bInitiallyEnabled : 1;                         // 0x0248 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bBotsCanInvestigate : 1;                       // 0x0248 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bHeroInteracting : 1;                          // 0x0248 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bBaseTransformSet : 1;                         // 0x0248 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	class UStaticMeshComponent*                        Mesh;                                          // 0x024C (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        MainMesh;                                      // 0x0254 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        CoverMesh;                                     // 0x025C (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UFluidSurfaceComponent*                      SurfaceComponent;                              // 0x0264 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        WaterVolumeComponent;                          // 0x026C (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	EBarrelMaterialType                                BarrelType;                                    // 0x0274 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class UOLInvestigationComponent*                   InvestigationComponent;                        // 0x0278 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              FindHiddenPlayerProbability;                   // 0x0280 (0x0004) [0x0000000000000001] (CPF_Edit)    
	TArray<float>                                      StumpEnterGrabAngles;                          // 0x0284 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	TArray<float>                                      BarrelEnterGrabAngles;                         // 0x0294 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class UDrawCylinderComponent*                      CylinderPreviewComp;                           // 0x02A4 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class USpriteComponent*                            SpriteComp;                                    // 0x02AC (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	struct FRotator                                    BaseRotation;                                  // 0x02B4 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     BaseLocation;                                  // 0x02C0 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FRotator                                    BaseCoverRotation;                             // 0x02CC (0x000C) [0x0000000000002000] (CPF_Transient)
	class AActor*                                      WaterDisturbanceActor;                         // 0x02D8 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              WaterDisturbanceTimeLeft;                      // 0x02E0 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UMaterialInstance*                           EmptyBarrelMaterialInstance;                   // 0x02E4 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UMaterialInstance*                           WaterFilledBarrelMaterialInstance;             // 0x02EC (0x0008) [0x0000000000000002] (CPF_Const)   
	class UMaterialInstance*                           WaterSurfaceMaterial;                          // 0x02F4 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UMaterialInstance*                           BloodSurfaceMaterial;                          // 0x02FC (0x0008) [0x0000000000000002] (CPF_Const)   
	class UStaticMesh*                                 NormalBarrelMesh;                              // 0x0304 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UStaticMesh*                                 TreeStumpMesh;                                 // 0x030C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UStaticMesh*                                 WaterVolumeMesh;                               // 0x0314 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UStaticMesh*                                 BloodVolumeMesh;                               // 0x031C (0x0008) [0x0000000000000002] (CPF_Const)   
	float                                              ClearanceZOffset;                              // 0x0324 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ClearanceStartDist;                            // 0x0328 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ClearanceEndDist;                              // 0x032C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ClearanceMinWidth;                             // 0x0330 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            LastClearanceCheckEntryCount;                  // 0x0334 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     LastClearanceCheckPos;                         // 0x0338 (0x000C) [0x0000000000002000] (CPF_Transient)
	TArray<int32_t>                                    ClearedAngles;                                 // 0x0344 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLHidingBarrel");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
	void TriggerEvent(EBarrelEventType EventType, class AOLPawn* Triggerer);
};

// Class OLGame.OLHints
// 0x0028 OR 0x0090 (0x0090 - 0x0068)
// 40 OR 144 (144 - 104)
class UOLHints : public UObject
{
public:
	struct FOLHintList                                 DefaultHints;                                  // 0x0068 (0x0018) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	TArray<struct FOLHintList>                         SpecificCheckpointList;                        // 0x0080 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLHints");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLHUD
// 0x0240 OR 0x0918 (0x0918 - 0x06D8)
// 576 OR 2328 (2328 - 1752)
class AOLHUD : public AUDKHUD
{
public:
	class AOLBot*                                      CurrentDebugBot;                               // 0x06D8 (0x0008) [0x0000000000000000]               
	uint32_t                                           bGammaCalibrationOpen : 1;                     // 0x06E0 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bSplashScreenOpen : 1;                         // 0x06E0 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bSplashScreenReady : 1;                        // 0x06E0 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bGameOver : 1;                                 // 0x06E0 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bShowCrosshair : 1;                            // 0x06E0 (0x0004) [0x0000000000004000] [0x00000010] (CPF_Config)
	uint32_t                                           bCrosshairDesired : 1;                         // 0x06E0 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bAlwaysShowPrompts : 1;                        // 0x06E0 (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bPromptGoBackToMainMenu : 1;                   // 0x06E0 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bShowSubtitles : 1;                            // 0x06E0 (0x0004) [0x0000000000004000] [0x00000100] (CPF_Config)
	uint32_t                                           bForcePS4UI : 1;                               // 0x06E0 (0x0004) [0x0000000000004000] [0x00000200] (CPF_Config)
	uint32_t                                           bLastUntranslatedMessageWasGamepad : 1;        // 0x06E0 (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bLostFocus : 1;                                // 0x06E0 (0x0004) [0x0000000000000000] [0x00000800] 
	EPPSMode                                           PreGammaPPSMode;                               // 0x06E4 (0x0001) [0x0000000000000000]               
	EHUDMessagePriority                                CurrentMessagePriority;                        // 0x06E5 (0x0001) [0x0000000000000000]               
	EHUDMessageType                                    CurrentMessageType;                            // 0x06E6 (0x0001) [0x0000000000000000]               
	float                                              SplashScreenActivatedTimestamp;                // 0x06E8 (0x0004) [0x0000000000000000]               
	float                                              CrosshairOpacity;                              // 0x06EC (0x0004) [0x0000000000000000]               
	float                                              LastCrosshairUpdateRealTime;                   // 0x06F0 (0x0004) [0x0000000000000000]               
	float                                              InteractionCrosshairPct;                       // 0x06F4 (0x0004) [0x0000000000000000]               
	float                                              NewObjectiveTimestamp;                         // 0x06F8 (0x0004) [0x0000000000000000]               
	struct FVector                                     NewObjectiveHeroPos;                           // 0x06FC (0x000C) [0x0000000000000000]               
	float                                              NewObjectiveZoneRadius;                        // 0x0708 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ShowInventoryTimestamp;                        // 0x070C (0x0004) [0x0000000000000000]               
	float                                              LastCamCycleTime;                              // 0x0710 (0x0004) [0x0000000000000000]               
	float                                              LatestRecordingTimer;                          // 0x0714 (0x0004) [0x0000000000000000]               
	float                                              LatestDocumentTimer;                           // 0x0718 (0x0004) [0x0000000000000000]               
	float                                              NewObjectiveTimer;                             // 0x071C (0x0004) [0x0000000000000000]               
	float                                              LatestCheckpointTimer;                         // 0x0720 (0x0004) [0x0000000000000000]               
	float                                              RecordingTimeSeconds;                          // 0x0724 (0x0004) [0x0000000000000000]               
	class FString                                      PromptMessageString;                           // 0x0728 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              SubtitleMaxDistance;                           // 0x0738 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              SubtitleMaxDistanceOccluded;                   // 0x073C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              SubtitleOcclusionThreshold;                    // 0x0740 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              SubtitleObstructionThreshold;                  // 0x0744 (0x0004) [0x0000000000000002] (CPF_Const)   
	TArray<struct FSubtitleData>                       SubtitleQueue;                                 // 0x0748 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      CurrentSubtitle;                               // 0x0758 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FColor                                      SubtitleColors[0x8];                           // 0x0768 (0x0020) [0x0000000000000000]               
	float                                              MinSubtitleShowTime;                           // 0x0788 (0x0004) [0x0000000000004000] (CPF_Config)  
	class UTexture2D*                                  InventoryBackgoundImg;                         // 0x078C (0x0008) [0x0000000000000000]               
	class UTexture2D*                                  NormalCrosshairImage;                          // 0x0794 (0x0008) [0x0000000000000000]               
	class UTexture2D*                                  InteractionCrosshairImage;                     // 0x079C (0x0008) [0x0000000000000000]               
	class UTexture2D*                                  SplashScreenImage;                             // 0x07A4 (0x0008) [0x0000000000000000]               
	class UTexture2D*                                  GameOverImage;                                 // 0x07AC (0x0008) [0x0000000000000000]               
	class UTexture2D*                                  GameOverImageDemo;                             // 0x07B4 (0x0008) [0x0000000000000000]               
	class UFont*                                       SmallFont;                                     // 0x07BC (0x0008) [0x0000000000000000]               
	class UFont*                                       MediumFont;                                    // 0x07C4 (0x0008) [0x0000000000000000]               
	class UFont*                                       LargeFont;                                     // 0x07CC (0x0008) [0x0000000000000000]               
	class UFont*                                       HugeFont;                                      // 0x07D4 (0x0008) [0x0000000000000000]               
	class UOLCamcorderHud*                             CamcorderHUDRT;                                // 0x07DC (0x0008) [0x0000000000000000]               
	class UOLCamcorderHud*                             CamcorderHUDFullscreen;                        // 0x07E4 (0x0008) [0x0000000000000000]               
	class UOLMainHud*                                  MainHUD;                                       // 0x07EC (0x0008) [0x0000000000000000]               
	class UOLCamcorderFilesHud*                        CamcorderFilesHud;                             // 0x07F4 (0x0008) [0x0000000000000000]               
	class UTextureRenderTarget2D*                      CamcorderScreenRT;                             // 0x07FC (0x0008) [0x0000000000000000]               
	class UOLPickableDocument*                         PickableDocument;                              // 0x0804 (0x0008) [0x0000000000000000]               
	class UTextureRenderTarget2D*                      PickableDocumentRT;                            // 0x080C (0x0008) [0x0000000000000000]               
	class UMaterialInstanceConstant*                   TransparentScreenMaterial;                     // 0x0814 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UMaterial*                                   OpaqueScreenMaterial;                          // 0x081C (0x0008) [0x0000000000000002] (CPF_Const)   
	int32_t                                            ScreenMaterialIndex;                           // 0x0824 (0x0004) [0x0000000000000002] (CPF_Const)   
	class UTexture2D*                                  DarknessOnImage;                               // 0x0828 (0x0008) [0x0000000000000000]               
	class UTexture2D*                                  FlashlightOnImage;                             // 0x0830 (0x0008) [0x0000000000000000]               
	class UTexture2D*                                  DarknessOffImage;                              // 0x0838 (0x0008) [0x0000000000000000]               
	class UTexture2D*                                  DisturbanceBarImage;                           // 0x0840 (0x0008) [0x0000000000000000]               
	class UTexture2D*                                  DisturbanceReactionThresholdImage;             // 0x0848 (0x0008) [0x0000000000000000]               
	class UTexture2D*                                  DisturbanceChaseThresholdImage;                // 0x0850 (0x0008) [0x0000000000000000]               
	class UAkEvent*                                    SoundEventSelect;                              // 0x0858 (0x0008) [0x0000000000000000]               
	class UAkEvent*                                    SoundEventEnter;                               // 0x0860 (0x0008) [0x0000000000000000]               
	class UOLUIFrontEnd*                               MenuManager;                                   // 0x0868 (0x0008) [0x0000000000000000]               
	class UOLUIMessage*                                ObjectiveScreen;                               // 0x0870 (0x0008) [0x0000000000000000]               
	class UOLUIMessage*                                MessageScreen;                                 // 0x0878 (0x0008) [0x0000000000000000]               
	class UOLUIMessage*                                SubtitleScreen;                                // 0x0880 (0x0008) [0x0000000000000000]               
	class FString                                      CurrentObjectiveText;                          // 0x0888 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      CurrentMessageText;                            // 0x0898 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      LastUntranslatedMessageText;                   // 0x08A8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      CachedTranslatedMessageText;                   // 0x08B8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<struct FGenericMessage>                     GenericMessages;                               // 0x08C8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              ReloadPromptDuration;                          // 0x08D8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              BandagePromptDuration;                         // 0x08DC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              CurrentReloadMessageOnScreenDuration;          // 0x08E0 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              CurrentBandageMessageOnScreenDuration;         // 0x08E4 (0x0004) [0x0000000000002000] (CPF_Transient)
	class FString                                      SubtitlesString;                               // 0x08E8 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<struct FSubtitleColorOverrideData>          SubtitleColorOverrides;                        // 0x08F8 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	struct FScriptDelegate                             __CanUnpauseInPauseMenu__Delegate;             // 0x0908 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLHUD");
		}

		return uClassPointer;
	};

	void eventSetLargeImageSize(int32_t imageWidth, int32_t imageHeight, int32_t X, int32_t Y);
	void eventTick(float DeltaSeconds);
	void eventNotifyAltEnter();
	void GamepadConfigChanged();
	void eventOnLostFocusPause(bool bEnable);
	void ShowHUDMessages();
	void HideHUDMessages();
	bool eventShowingSubtitle();
	void eventHideSubtitle();
	void eventSetSubtitleHeight(bool High);
	void eventShowSubtitle(class FString MessageText);
	void eventHideObjective();
	void eventShowObjective(class FString ObjectiveText);
	void eventHideMessage();
	void eventShowMessage(EHUDMessageType MessageType, EHUDMessagePriority MessagePriority, class FString MessageText);
	void eventResetMessageScreenForResize();
	void eventSetCleanTextData(class FString TextName, class FString Title, class FString Text);
	void eventSetPausedPromptMessage(class FString Messsage, bool bBackToMainMenu);
	void eventShowMenuType(EMenuType MenuType);
	void eventShowPausedPromptMenu();
	void PostSoundEventEnter();
	void PostSoundEventSelect();
	void MuteSelectSound(float optionalMuteTime);
	bool CanShowSubMenu(EMenuType MenuType);
	void HideMenu();
	void ShowMenu();
	void ShowMainMenu();
	void eventReturnToPressStartMenu();
	void eventClosePauseMenu();
	void eventSimulateBackInput();
	void ReloadMenu();
	void eventInputTypeChanged();
	void eventSetPCQTELabels(class FString upStr, class FString leftStr, class FString downStr, class FString rightStr);
	void eventCleanReadPreviousPage();
	void eventCleanReadNextPage();
	void eventCloseCleanTextMenu();
	bool eventIsAMenuOpen();
	bool eventIsInCleanTextMenu();
	bool eventIsInCreditsMenu();
	bool eventIsOnMainMenuScreen();
	bool eventIsMainMenuOpen();
	bool eventIsInPausedPromptMenu();
	bool eventIsInPauseMenu();
	bool CanUnpauseInPauseMenu();
	void ShowDebugInfo(float& out_YL, float& out_YPos);
	bool ShouldDisplayDebugMessages();
	void DebugNextAI();
	void DebugPrevAI();
	void NotifyGameSaved();
	void SetGammaCalibrationActive(bool bActive);
	bool ShowingFullScreenOverlay();
	void Draw();
};

// Class OLGame.OLInnerDemonDecal
// 0x0004 OR 0x025C (0x025C - 0x0258)
// 4 OR 604 (604 - 600)
class AOLInnerDemonDecal : public ADecalActorBase
{
public:
	float                                              Intensity;                                     // 0x0258 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLInnerDemonDecal");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLInnerDemonEffectActor
// 0x0048 OR 0x0290 (0x0290 - 0x0248)
// 72 OR 656 (656 - 584)
class AOLInnerDemonEffectActor : public AActor
{
public:
	class UParticleSystemComponent*                    InnerDemonParticleEmitter;                     // 0x0248 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UDrawSphereComponent*                        PreviewComp;                                   // 0x0250 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class AOLEnemyInnerDemon*                          BoundInnerDemon;                               // 0x0258 (0x0008) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bSpawnedAsProxy : 1;                           // 0x0260 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bFadingOutEffects : 1;                         // 0x0260 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	float                                              FadeOutStartTime;                              // 0x0264 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FInnerDemonEffectsData                      InnerDemonEffects;                             // 0x0268 (0x0028) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLInnerDemonEffectActor");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLInnerDemonSensitiveMesh
// 0x000F OR 0x0264 (0x0264 - 0x0255)
// 15 OR 612 (612 - 597)
class AOLInnerDemonSensitiveMesh : public AStaticMeshActor
{
public:
	class UStaticMeshComponent*                        FootStepMesh;                                  // 0x0258 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	uint32_t                                           bFixLightingAutomatically : 1;                 // 0x0260 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLInnerDemonSensitiveMesh");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLInteractiveSkeletalFoliageActor
// 0x0064 OR 0x02D8 (0x02D8 - 0x0274)
// 100 OR 728 (728 - 628)
class AOLInteractiveSkeletalFoliageActor : public AInteractiveSkeletalFoliageActor
{
public:
	int32_t                                            Priority;                                      // 0x0274 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UPhysicalMaterial*                           PhysMaterial;                                  // 0x0278 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	TArray<class UAkEvent*>                            OnPlayerEnterEvents;                           // 0x0280 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<class UAkEvent*>                            OnPlayerExitEvents;                            // 0x0290 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<class UAkEvent*>                            OnEnterEvents;                                 // 0x02A0 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<class UAkEvent*>                            OnExitEvents;                                  // 0x02B0 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bOverrideHandShielding : 1;                    // 0x02C0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bOverrideHandShieldingValue : 1;               // 0x02C0 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bEyeInteraction : 1;                           // 0x02C0 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bPushedAway : 1;                               // 0x02C0 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	float                                              PushedAwayActiveTimeLeft;                      // 0x02C4 (0x0004) [0x0000000000002000] (CPF_Transient)
	TArray<class AActor*>                              FoliageTouchingActors;                         // 0x02C8 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLInteractiveSkeletalFoliageActor");
		}

		return uClassPointer;
	};

	void eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal);
};

// Class OLGame.OLInterpTrackHeroLink
// 0x0000 OR 0x00C8 (0x00C8 - 0x00C8)
// 0 OR 200 (200 - 200)
class UOLInterpTrackHeroLink : public UInterpTrack
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLInterpTrackHeroLink");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLInterpTrackInstHeroLink
// 0x0000 OR 0x0068 (0x0068 - 0x0068)
// 0 OR 104 (104 - 104)
class UOLInterpTrackInstHeroLink : public UInterpTrackInst
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLInterpTrackInstHeroLink");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLInterpTrackInstPPSEffectParam
// 0x0008 OR 0x0070 (0x0070 - 0x0068)
// 8 OR 112 (112 - 104)
class UOLInterpTrackInstPPSEffectParam : public UInterpTrackInst
{
public:
	float                                              PreviousParamValue;                            // 0x0068 (0x0004) [0x0000000000000000]               
	uint32_t                                           PreviousEffectShown : 1;                       // 0x006C (0x0004) [0x0000000000000000] [0x00000001] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLInterpTrackInstPPSEffectParam");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLInterpTrackPPSEffectParam
// 0x0019 OR 0x00F9 (0x00F9 - 0x00E0)
// 25 OR 249 (249 - 224)
class UOLInterpTrackPPSEffectParam : public UInterpTrackFloatBase
{
public:
	class UMaterialInstanceConstant*                   EffectMaterial;                                // 0x00E0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       ParamName;                                     // 0x00E8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       EffectName;                                    // 0x00F0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	ETrackPropertyType                                 PropertyType;                                  // 0x00F8 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLInterpTrackPPSEffectParam");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLInventoryManager
// 0x0038 OR 0x00A0 (0x00A0 - 0x0068)
// 56 OR 160 (160 - 104)
class UOLInventoryManager : public UObject
{
public:
	TArray<struct FName>                               OwnedInventory;                                // 0x0068 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<struct FVector>                             CollectedBatteryLocs;                          // 0x0078 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<struct FVector>                             CollectedBandageLocs;                          // 0x0088 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class AOLCollectiblePickup*                        LastClosestPickup;                             // 0x0098 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLInventoryManager");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLInvestigationComponent
// 0x0027 OR 0x00B4 (0x00B4 - 0x008D)
// 39 OR 180 (180 - 141)
class UOLInvestigationComponent : public UActorComponent
{
public:
	float                                              WeightOverride;                                // 0x0090 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SearchDistance;                                // 0x0094 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bOnlyRelevantIfAlreadyInVolume : 1;            // 0x0098 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bAlwaysRelevantIfAlreadyInVolume : 1;          // 0x0098 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              MinDelayBetweenInvestigations;                 // 0x009C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AOLAIInvestigationVolume*                    InvVolume;                                     // 0x00A0 (0x0008) [0x0000000000002000] (CPF_Transient)
	class AOLBot*                                      InvestigatingBot;                              // 0x00A8 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              LastTimeInvestigated;                          // 0x00B0 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLInvestigationComponent");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLLeashMarker
// 0x0028 OR 0x0270 (0x0270 - 0x0248)
// 40 OR 624 (624 - 584)
class AOLLeashMarker : public AActor
{
public:
	ELeashType                                         Type;                                          // 0x0248 (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bCylindrical : 1;                              // 0x024C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              CylinderRadius;                                // 0x0250 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BoxWidth;                                      // 0x0254 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BoxLength;                                     // 0x0258 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DebugDrawHeight;                               // 0x025C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UDrawCylinderComponent*                      CylinderPreviewComp;                           // 0x0260 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UDrawBoxComponent*                           BoxPreviewComp;                                // 0x0268 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLLeashMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLLensFlareSource
// 0x0010 OR 0x0258 (0x0258 - 0x0248)
// 16 OR 600 (600 - 584)
class AOLLensFlareSource : public AActor
{
public:
	class ULensFlareComponent*                         EyeComponent;                                  // 0x0248 (0x0008) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)
	class ULensFlareComponent*                         CameraComponent;                               // 0x0250 (0x0008) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLLensFlareSource");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLMainHud
// 0x0034 OR 0x0220 (0x0220 - 0x01EC)
// 52 OR 544 (544 - 492)
class UOLMainHud : public UGFxMoviePlayer
{
public:
	class AOLHUD*                                      HUD;                                           // 0x01EC (0x0008) [0x0000000000000000]               
	class FString                                      SavingMessageText;                             // 0x01F4 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	struct FMainHudObjects                             Objects;                                       // 0x0204 (0x0018) [0x0000000000000000]               
	struct FMainHudState                               HudState;                                      // 0x021C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLMainHud");
		}

		return uClassPointer;
	};

	bool eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget);
};

// Class OLGame.OLObjectives
// 0x0010 OR 0x0078 (0x0078 - 0x0068)
// 16 OR 120 (120 - 104)
class UOLObjectives : public UObject
{
public:
	TArray<struct FObjectiveData>                      Objectives;                                    // 0x0068 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLObjectives");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLPawn
// 0x5F04 OR 0x6680 (0x6680 - 0x077C)
// 24324 OR 26240 (26240 - 1916)
class AOLPawn : public AUDKPawn
{
public:
	class AOLPawn*                                     DefaultPawn;                                   // 0x077C (0x0008) [0x0000000000000000]               
	uint32_t                                           bUsingNewPhysics : 1;                          // 0x0784 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bSimplifiedPhysics : 1;                        // 0x0784 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bPlayingSpecialMoveAnim : 1;                   // 0x0784 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bDelayedSpecialMoveAnim : 1;                   // 0x0784 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bForcePlayAnimWhenPositioned : 1;              // 0x0784 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bSpecialMoveInterruptible : 1;                 // 0x0784 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bPendingSpecialMoveAnims : 1;                  // 0x0784 (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bFilterAnimEndNotifies : 1;                    // 0x0784 (0x0004) [0x0000000000000002] [0x00000080] (CPF_Const)
	uint32_t                                           bProceduralAnimsDelayedAfterSpecialMove : 1;   // 0x0784 (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bPendingCollisionSizeChange : 1;               // 0x0784 (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bCollisionDisabled : 1;                        // 0x0784 (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bIgnorePawnCollisions : 1;                     // 0x0784 (0x0004) [0x0000000000000000] [0x00000800] 
	uint32_t                                           bWasInWater : 1;                               // 0x0784 (0x0004) [0x0000000000002000] [0x00001000] (CPF_Transient)
	class UOLCharacterProxy*                           CharProxy;                                     // 0x0788 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UPhysicsAsset*                               RagdollAsset;                                  // 0x0790 (0x0008) [0x0000000000000000]               
	float                                              FallGravityMultiplier;                         // 0x0798 (0x0004) [0x0000000000000000]               
	float                                              SimplfiedPhysicsDisableDuration;               // 0x079C (0x0004) [0x0000000000000000]               
	struct FVector                                     CharForward;                                   // 0x07A0 (0x000C) [0x0000000000000000]               
	struct FVector                                     CharRight;                                     // 0x07AC (0x000C) [0x0000000000000000]               
	float                                              CharDeltaYaw;                                  // 0x07B8 (0x0004) [0x0000000000000000]               
	class UOLAnimNodeSlot*                             FullBodyAnimSlot;                              // 0x07BC (0x0008) [0x0000000000000000]               
	class UOLAnimCustomBlend*                          CustomBlendNode;                               // 0x07C4 (0x0008) [0x0000000000000000]               
	struct FVector                                     RealVelocity;                                  // 0x07CC (0x000C) [0x0000000000000000]               
	struct FVector                                     PreviousLocation;                              // 0x07D8 (0x000C) [0x0000000000000000]               
	float                                              InstantRotationSpeed;                          // 0x07E4 (0x0004) [0x0000000000000000]               
	float                                              CurrentRotationSpeed;                          // 0x07E8 (0x0004) [0x0000000000000000]               
	float                                              FallAccelerationStartedTime;                   // 0x07EC (0x0004) [0x0000000000000000]               
	ELocomotionMode                                    LocomotionMode;                                // 0x07F0 (0x0001) [0x0000000000000000]               
	ELocomotionMode                                    PreviousLocomotionMode;                        // 0x07F1 (0x0001) [0x0000000000000000]               
	ESpecialMoveType                                   SpecialMove;                                   // 0x07F2 (0x0001) [0x0000000000000000]               
	ESpecialMoveType                                   InterruptedSpecialMove;                        // 0x07F3 (0x0001) [0x0000000000000000]               
	EFootstepDecalType                                 DirtyFeetDecalType;                            // 0x07F4 (0x0001) [0x0000000000000000]               
	struct FSpecialMoveParameters                      SpecialMoveParams[0xC5];                       // 0x07F8 (0x5C58) [0x0000000000000001] (CPF_Edit)    
	float                                              SpecialMoveStartedTime;                        // 0x6450 (0x0004) [0x0000000000000000]               
	TArray<struct FName>                               PlayingSpecialMoveAnims;                       // 0x6454 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FAdjustPositionData                         AdjustPosition;                                // 0x6464 (0x0038) [0x0000000000000000]               
	TArray<struct FProceduralAnimData>                 ProceduralAnims;                               // 0x649C (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              ProceduralAnimLinearVelocity;                  // 0x64AC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ProceduralAnimAngularVelocity;                 // 0x64B0 (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FMovementBlockedData                        WalkingMovementBlockedData;                    // 0x64B4 (0x001C) [0x0000000000000000]               
	float                                              MaxFootstepDistSq;                             // 0x64D0 (0x0004) [0x0000000000000000]               
	float                                              MaxJumpSoundDistSq;                            // 0x64D4 (0x0004) [0x0000000000000000]               
	float                                              FloorMaterialLastUpdateTime;                   // 0x64D8 (0x0004) [0x0000000000000000]               
	struct FName                                       LastSurfaceType;                               // 0x64DC (0x0008) [0x0000000000000000]               
	class UOLPhysicalMaterialProperty*                 CachedFloorMaterialProperty;                   // 0x64E4 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              SmoothPawnSpeedRTPC;                           // 0x64EC (0x0004) [0x0000000000000000]               
	float                                              PawnSpeedRTPCApproachUp;                       // 0x64F0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              PawnSpeedRTPCApproachDown;                     // 0x64F4 (0x0004) [0x0000000000004000] (CPF_Config)  
	class FString                                      RTPCNamePawnSpeed;                             // 0x64F8 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	TArray<struct FDelayedEventInfo>                   DelayedSoundEvents;                            // 0x6508 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class UPhysicalMaterial*                           FootStepSurface_WaterShallow;                  // 0x6518 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UPhysicalMaterial*                           FootStepSurface_WaterAnkleDeep;                // 0x6520 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UPhysicalMaterial*                           FootStepSurface_WaterWaistDeep;                // 0x6528 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UPhysicalMaterial*                           FootStepSurface_InnerDemonEffect;              // 0x6530 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UParticleSystemComponent*                    WaterFootstepParticlesLeft;                    // 0x6538 (0x0008) [0x000000000408000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    WaterFootstepParticlesRight;                   // 0x6540 (0x0008) [0x000000000408000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UMaterialInstanceConstant*                   FootstepDecalBloodL1;                          // 0x6548 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UMaterialInstanceConstant*                   FootstepDecalBloodL2;                          // 0x6550 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UMaterialInstanceConstant*                   FootstepDecalBloodR1;                          // 0x6558 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UMaterialInstanceConstant*                   FootstepDecalBloodR2;                          // 0x6560 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UMaterialInstanceConstant*                   FootstepDecalSnowL1;                           // 0x6568 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UMaterialInstanceConstant*                   FootstepDecalSnowL2;                           // 0x6570 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UMaterialInstanceConstant*                   FootstepDecalSnowR1;                           // 0x6578 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UMaterialInstanceConstant*                   FootstepDecalSnowR2;                           // 0x6580 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UOLSeqAct_InvisibleFootsteps*                SpecificFootstepProvider;                      // 0x6588 (0x0008) [0x0000000000000000]               
	int32_t                                            NumRemainingDirtyFeetDecals;                   // 0x6590 (0x0004) [0x0000000000000000]               
	TArray<struct FName>                               WaterMaterials;                                // 0x6594 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	struct FName                                       BloodMaterial;                                 // 0x65A4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       SnowMaterial;                                  // 0x65AC (0x0008) [0x0000000000000002] (CPF_Const)   
	int32_t                                            NumFootstepDecals;                             // 0x65B4 (0x0004) [0x0000000000004000] (CPF_Config)  
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                              // 0x65B8 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	struct FName                                       HeadBoneName;                                  // 0x65C0 (0x0008) [0x0000000000000000]               
	struct FName                                       LeftFootBoneName;                              // 0x65C8 (0x0008) [0x0000000000000000]               
	struct FName                                       RightFootBoneName;                             // 0x65D0 (0x0008) [0x0000000000000000]               
	float                                              DefaultAirControl;                             // 0x65D8 (0x0004) [0x0000000000000000]               
	float                                              DestinationPredictionFactor;                   // 0x65DC (0x0004) [0x0000000000000000]               
	float                                              DestinationPredictionMax;                      // 0x65E0 (0x0004) [0x0000000000000000]               
	float                                              MeshZOffset;                                   // 0x65E4 (0x0004) [0x0000000000000000]               
	float                                              LastFootstepTime;                              // 0x65E8 (0x0004) [0x0000000000000000]               
	struct FName                                       FloorMaterialGroup;                            // 0x65EC (0x0008) [0x0000000000000000]               
	class UAkEvent*                                    FootStepSound_Walk;                            // 0x65F4 (0x0008) [0x0000000000000000]               
	class UAkEvent*                                    FootStepSound_Run;                             // 0x65FC (0x0008) [0x0000000000000000]               
	float                                              TimeSinceLastFoliageTouching;                  // 0x6604 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              PendingAnimSetUpdateTime;                      // 0x6608 (0x0004) [0x0000000000000000]               
	float                                              WindowInteractionInitialZ;                     // 0x660C (0x0004) [0x0000000000000000]               
	struct FName                                       WindowInteractionAuxBoneName;                  // 0x6610 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       InteractionBoneName;                           // 0x6618 (0x0008) [0x0000000000000002] (CPF_Const)   
	TArray<class UOLSeqAct_WaitForSpecialMove*>        SpecialMoveListeners;                          // 0x6620 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<class UAnimSet*>                            AnimSetOverrides;                              // 0x6630 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<class AOLInteractiveSkeletalFoliageActor*>  TouchingFoliage;                               // 0x6640 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLBranchShieldingMarker*>            TouchingBranchMarker;                          // 0x6650 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class ALandscapeProxy*                             ActiveWaterLandscape;                          // 0x6660 (0x0008) [0x0000000000000000]               
	class ULandscapeHeightfieldCollisionComponent*     LastWaterLandscapeCollidingComponent;          // 0x6668 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	struct FVector                                     LastWaterCheckPosition;                        // 0x6670 (0x000C) [0x0000000000000000]               
	float                                              WaterCrouchHeight;                             // 0x667C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLPawn");
		}

		return uClassPointer;
	};

	void DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos);
	bool IsFirstPerson();
	void PlayLanded(struct FVector landingLocation, float ImpactVel);
	void eventLanded(struct FVector HitLocation, struct FVector HitNormal, class AActor* FloorActor);
	void eventDestroyed();
	void eventMAT_BeginAIGroup(struct FVector StartLoc, struct FRotator StartRot, float BlendTime, bool bDiscardSideAdjustments);
	void AdjustToMatineeStageMark(struct FVector StartLoc, struct FRotator StartRot, float BlendTime, bool bDiscardSideAdjustments);
	void eventPostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void PlayVOLine(class UAkEvent* LineToPlay, struct FName optionalBoneName);
	struct FName GetMaterialBelowFeet(int32_t footIndex, bool optionalBForceUpdate);
	void ClientRestart();
	void eventPlayFootStepSound(int32_t FootDown, class UAnimNotify_Footstep* footstepNotify);
	void OnFootstep(int32_t FootDown, class UAnimNotify_Footstep* footstepNotify);
	void eventSpawnFootstepDecal(EFootstepDecalType DecalType, bool bLeftFoot, float Alpha);
	void ProcessNewFootstepDecal(class UDecalComponent* NewDecalComp, EFootstepDecalType DecalType, float DecalThickness, bool bLeftFoot, struct FVector& DecalLocation);
	void GetFootstepDecalTransform(bool bLeftFoot, struct FVector& DecalLocation, struct FRotator& DecalRotation);
	void FaceRotation(struct FRotator NewRotation, float DeltaTime);
	float GetEyeHeight();
	class USoundCue* GetPawnAmbientSound();
	void SetPawnAmbientSound(class USoundCue* NewAmbientSound);
	bool Died(class AController* Killer, class UClass* DamageType, struct FVector HitLocation);
	void eventEncroachedBy(class AActor* Other);
	void SetPawnRBChannels(bool bRagdollMode);
	void eventOnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void ReattachMesh();
	void UpdateShadowSettings(bool bWantShadow);
	void PostBeginPlay();
	void ProceduralAdjustNotify(float Duration);
	void EnableCollisionNotify();
	void RestoreCollisionSizeNotify();
	void ChangeCollisionSizeNotify();
	void MoveInterruptibleNotify();
	void NativePostBeginPlay();
	void NativeOnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void StartSpecialMove(ESpecialMoveType moveType, struct FVector optionalTargetPosition, struct FVector optionalTargetDirection, EAdjustPositionTargetType optionalTargetType);
	bool IsSpecialMoveCompleted();
	void NativeDestroyed();
};

// Class OLGame.OLHero
// 0x5180 OR 0xB800 (0xB800 - 0x6680)
// 20864 OR 47104 (47104 - 26240)
class AOLHero : public AOLPawn
{
public:
	class AOLPlayerController*                         OLPC;                                          // 0x6680 (0x0008) [0x0000000000000000]               
	class AOLHero*                                     DefaultHero;                                   // 0x6688 (0x0008) [0x0000000000000000]               
	struct FVector                                     EyeForward;                                    // 0x6690 (0x000C) [0x0000000000000000]               
	class USkeletalMeshComponent*                      ShadowProxy;                                   // 0x669C (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        HeadMesh;                                      // 0x66A4 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class USkeletalMeshComponent*                      CameraMesh;                                    // 0x66AC (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class USkeletalMeshComponent*                      CameraMeshShadowProxy;                         // 0x66B4 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class USkeletalMeshComponent*                      WatchMesh;                                     // 0x66BC (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	TArray<class UStaticMeshComponent*>                PocketBatteriesMeshes;                         // 0x66C4 (0x0010) [0x0000000004480008] (CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	TArray<class UStaticMeshComponent*>                PocketBandagesMeshes;                          // 0x66D4 (0x0010) [0x0000000004480008] (CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	TArray<int32_t>                                    LeftArmBandageMaterials;                       // 0x66E4 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<int32_t>                                    LeftHandBandageMaterials;                      // 0x66F4 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<class UMaterialInterface*>                  BandageMaterialsToStream;                      // 0x6704 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class UStaticMeshComponent*                        GlassesMesh;                                   // 0x6714 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        BandageMeshRightHand;                          // 0x671C (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        BandageMeshLeftHand;                           // 0x6724 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	TArray<class UStaticMeshComponent*>                GameplayItemMeshes;                            // 0x672C (0x0010) [0x0000000004480008] (CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	class UParticleSystemComponent*                    BloodEffect;                                   // 0x673C (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    DecapitatedBloodEffect;                        // 0x6744 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    RainEffect;                                    // 0x674C (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    UnderwaterWetEffect;                           // 0x6754 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    UnderwaterBloodWetEffect;                      // 0x675C (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    WaterSplashParticles;                          // 0x6764 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    SnowStepParticlesLightL;                       // 0x676C (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    SnowStepParticlesLightR;                       // 0x6774 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    SnowStepParticlesBigL;                         // 0x677C (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    SnowStepParticlesBigR;                         // 0x6784 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    GenericCameraEffect;                           // 0x678C (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    AirBubbleStreamParticles;                      // 0x6794 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    SwimmingLHandParticles01;                      // 0x679C (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    SwimmingLHandParticles02;                      // 0x67A4 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    SwimmingLElbowParticles01;                     // 0x67AC (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    SwimmingLElbowParticles02;                     // 0x67B4 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    SwimmingRHandParticles01;                      // 0x67BC (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    SwimmingRHandParticles02;                      // 0x67C4 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    SwimmingRElbowParticles01;                     // 0x67CC (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    SwimmingRElbowParticles02;                     // 0x67D4 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    WaterEnterLFeetParticles;                      // 0x67DC (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    WaterEnterRFeetParticles;                      // 0x67E4 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    WaterEnterLKneeParticles;                      // 0x67EC (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    WaterEnterRKneeParticles;                      // 0x67F4 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    WaterEnterLHandParticles;                      // 0x67FC (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    WaterEnterRHandParticles;                      // 0x6804 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    WaterEnterHeadParticles;                       // 0x680C (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    WaterBarrelParticles;                          // 0x6814 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    BloodBarrelParticles;                          // 0x681C (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class USpotLightComponent*                         NVLightPowered;                                // 0x6824 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class USpotLightComponent*                         NVLightDefault;                                // 0x682C (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class USpotLightComponent*                         DarkLight;                                     // 0x6834 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class USpotLightComponent*                         CamcorderScreenLight;                          // 0x683C (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UMaterialInstanceConstant*                   CameraScreenMat;                               // 0x6844 (0x0008) [0x0000000000000000]               
	struct FName                                       CameraScreenParamName;                         // 0x684C (0x0008) [0x0000000000000000]               
	class USkeletalMesh*                               YoungBlakeMesh;                                // 0x6854 (0x0008) [0x0000000000000000]               
	class UStaticMesh*                                 Blake12Head;                                   // 0x685C (0x0008) [0x0000000000000000]               
	class UAnimSet*                                    YoungBlakeAnimSet;                             // 0x6864 (0x0008) [0x0000000000000000]               
	class USkeletalMesh*                               CleanBlakeMesh;                                // 0x686C (0x0008) [0x0000000000000000]               
	class USkeletalMesh*                               DirtyBlakeMesh;                                // 0x6874 (0x0008) [0x0000000000000000]               
	class USkeletalMesh*                               GroinInjuryMesh;                               // 0x687C (0x0008) [0x0000000000000000]               
	class USkeletalMesh*                               CleanShadowProxyBlakeMesh;                     // 0x6884 (0x0008) [0x0000000000000000]               
	class USkeletalMesh*                               DirtyShadowProxyBlakeMesh;                     // 0x688C (0x0008) [0x0000000000000000]               
	class UMaterial*                                   HideMaterial;                                  // 0x6894 (0x0008) [0x0000000000000000]               
	struct FName                                       BandageBloodAmountParamName;                   // 0x689C (0x0008) [0x0000000000000000]               
	float                                              BaseUnderwaterWetEffectLifetime;               // 0x68A4 (0x0004) [0x0000000000000000]               
	float                                              OverrideUnderwaterWetEffectLifetime;           // 0x68A8 (0x0004) [0x0000000000000000]               
	struct FName                                       UnderwaterWetEffectLifetimeParamName;          // 0x68AC (0x0008) [0x0000000000000000]               
	int32_t                                            PocketFlapsMaterialOveriddeIndex;              // 0x68B4 (0x0004) [0x0000000000000000]               
	ESkinType                                          SkinType;                                      // 0x68B8 (0x0001) [0x0000000000000000]               
	ESubSkinType                                       SubSkinType;                                   // 0x68B9 (0x0001) [0x0000000000000000]               
	ECornerPeekPosition                                LastValidCornerPeekPosition;                   // 0x68BA (0x0001) [0x0000000000000000]               
	EObjectivePrompt                                   ActiveObjectivePrompt;                         // 0x68BB (0x0001) [0x0000000000000000]               
	ECamcorderMode                                     CamcorderMode;                                 // 0x68BC (0x0001) [0x0000000000000000]               
	ECamcorderState                                    CamcorderState;                                // 0x68BD (0x0001) [0x0000000000000000]               
	ELocomotionMode                                    OverriddenLMForNeckOffsetInCinematicMode;      // 0x68BE (0x0001) [0x0000000000000000]               
	EHeroWalkingStyle                                  ForcedWalkingStyle;                            // 0x68BF (0x0001) [0x0000000000000000]               
	ESpecialMoveType                                   FinishingSpecialMove;                          // 0x68C0 (0x0001) [0x0000000000000000]               
	ELedgeTransitionType                               ActiveLedgeTransitionType;                     // 0x68C1 (0x0001) [0x0000000000000000]               
	ELedgeClimbType                                    LedgeClimbType;                                // 0x68C2 (0x0001) [0x0000000000000000]               
	EDoorOpeningType                                   DoorOpeningType;                               // 0x68C3 (0x0001) [0x0000000000000000]               
	EDoorPartialOpenType                               DoorPartialOpenType;                           // 0x68C4 (0x0001) [0x0000000000000000]               
	EDoorClosingType                                   DoorClosingType;                               // 0x68C5 (0x0001) [0x0000000000000000]               
	EHeroBodySetup                                     BodySetup;                                     // 0x68C6 (0x0001) [0x0000000000000000]               
	EHeroBodySetup                                     BodySetupToSetAfterSpecialMove;                // 0x68C7 (0x0001) [0x0000000000000000]               
	EOutOfItemType                                     OutOfItemType;                                 // 0x68C8 (0x0001) [0x0000000000000000]               
	uint32_t                                           bHandCrucifixionBandaging : 1;                 // 0x68CC (0x0004) [0x0000000000000000] [0xFFFFFFFF80000000] 
	uint32_t                                           bBloody : 1;                                   // 0x68CC (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bLeftHandIKActive : 1;                         // 0x68CC (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bRightHandIKActive : 1;                        // 0x68CC (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bRightTwistBoneActive : 1;                     // 0x68CC (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bShouldHideLeftHandDuringSM : 1;               // 0x68CC (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bShouldHideRightHandDuringSM : 1;              // 0x68CC (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bValidRecordingInSight : 1;                    // 0x68CC (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bHandPlanted : 1;                              // 0x68CC (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bContextualPeekWaitingForNoVelocity : 1;       // 0x68CC (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bScrambleLoopSnd : 1;                          // 0x68CC (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bPairedWalkLocationLocked : 1;                 // 0x68CC (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bMustCrouchAfterSpecialMove : 1;               // 0x68CC (0x0004) [0x0000000000000000] [0x00000800] 
	uint32_t                                           bMustCrawlAfterSpecialMove : 1;                // 0x68CC (0x0004) [0x0000000000000000] [0x00001000] 
	uint32_t                                           bMustGoToInventoryAfterSpecialMove : 1;        // 0x68CC (0x0004) [0x0000000000000000] [0x00002000] 
	uint32_t                                           bShouldPlayCrawlVariationSpecialMove : 1;      // 0x68CC (0x0004) [0x0000000000000000] [0x00004000] 
	uint32_t                                           bForcedCrouch : 1;                             // 0x68CC (0x0004) [0x0000000000000000] [0x00008000] 
	uint32_t                                           bLeaningLeftPushing : 1;                       // 0x68CC (0x0004) [0x0000000000000000] [0x00010000] 
	uint32_t                                           bLeaningRightPushing : 1;                      // 0x68CC (0x0004) [0x0000000000000000] [0x00020000] 
	uint32_t                                           bWantToRun : 1;                                // 0x68CC (0x0004) [0x0000000000000000] [0x00040000] 
	uint32_t                                           bWantToKeepRunning : 1;                        // 0x68CC (0x0004) [0x0000000000000000] [0x00080000] 
	uint32_t                                           bIsGhost : 1;                                  // 0x68CC (0x0004) [0x0000000000000000] [0x00100000] 
	uint32_t                                           bPlayingRunSnd : 1;                            // 0x68CC (0x0004) [0x0000000000000000] [0x00200000] 
	uint32_t                                           bExitCrawlToCrouch : 1;                        // 0x68CC (0x0004) [0x0000000000000000] [0x00400000] 
	uint32_t                                           bCrawlTemporaryDisabled : 1;                   // 0x68CC (0x0004) [0x0000000000000000] [0x00800000] 
	uint32_t                                           bIsStaminaDepleted : 1;                        // 0x68CC (0x0004) [0x0000000000000000] [0x01000000] 
	uint32_t                                           bMustFindPIEGround : 1;                        // 0x68CC (0x0004) [0x0000000000000000] [0x02000000] 
	uint32_t                                           bSlopedGroundActive : 1;                       // 0x68CC (0x0004) [0x0000000000000000] [0x04000000] 
	uint32_t                                           bSlopedGroundSoundActive : 1;                  // 0x68CC (0x0004) [0x0000000000000000] [0x08000000] 
	uint32_t                                           bContextualPeekingMoveCameraYaw : 1;           // 0x68CC (0x0004) [0x0000000000000000] [0x10000000] 
	uint32_t                                           bNoBleeding : 1;                               // 0x68CC (0x0004) [0x0000000000000000] [0x20000000] 
	uint32_t                                           bHandsJustCrucified : 1;                       // 0x68CC (0x0004) [0x0000000000000000] [0x40000000] 
	uint32_t                                           bLastCinematicModeDisabledCamcorder : 1;       // 0x68D0 (0x0004) [0x0000000000000000] [0xFFFFFFFF80000000] 
	uint32_t                                           bHandsCrucifiedBandaged : 1;                   // 0x68D0 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bBandageWithCamUp : 1;                         // 0x68D0 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bHideBandagesAfterAnim : 1;                    // 0x68D0 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bGlassesOff : 1;                               // 0x68D0 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bLostGlasses : 1;                              // 0x68D0 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bHighSubtitles : 1;                            // 0x68D0 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bElectrified : 1;                              // 0x68D0 (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bHeatShielding : 1;                            // 0x68D0 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bAffectedByHeat : 1;                           // 0x68D0 (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bFlySwatting : 1;                              // 0x68D0 (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bFoliageShielding : 1;                         // 0x68D0 (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bBrightLightShielding : 1;                     // 0x68D0 (0x0004) [0x0000000000000000] [0x00000800] 
	uint32_t                                           bBranchShielding : 1;                          // 0x68D0 (0x0004) [0x0000000000000000] [0x00001000] 
	uint32_t                                           bParrying : 1;                                 // 0x68D0 (0x0004) [0x0000000000000000] [0x00002000] 
	uint32_t                                           bLimping : 1;                                  // 0x68D0 (0x0004) [0x0000000000000000] [0x00004000] 
	uint32_t                                           bHobbling : 1;                                 // 0x68D0 (0x0004) [0x0000000000000000] [0x00008000] 
	uint32_t                                           bInDarkness : 1;                               // 0x68D0 (0x0004) [0x0000000000000000] [0x00010000] 
	uint32_t                                           bLitByFlashlight : 1;                          // 0x68D0 (0x0004) [0x0000000000000000] [0x00020000] 
	uint32_t                                           bCamcorderModeChanged : 1;                     // 0x68D0 (0x0004) [0x0000000000000000] [0x00040000] 
	uint32_t                                           bMicrophoneActive : 1;                         // 0x68D0 (0x0004) [0x0000000000000000] [0x00080000] 
	uint32_t                                           bMicrophoneShouldBeReactivated : 1;            // 0x68D0 (0x0004) [0x0000000000000000] [0x00100000] 
	uint32_t                                           bCamcorderDesired : 1;                         // 0x68D0 (0x0004) [0x0000000000000000] [0x00200000] 
	uint32_t                                           bBothHandsNeeded : 1;                          // 0x68D0 (0x0004) [0x0000000000000000] [0x00400000] 
	uint32_t                                           bPlayingNVGlitchSound : 1;                     // 0x68D0 (0x0004) [0x0000000000000000] [0x00800000] 
	uint32_t                                           bPlayingCameraHaarpSound : 1;                  // 0x68D0 (0x0004) [0x0000000000000000] [0x01000000] 
	uint32_t                                           bRainEffectDesired : 1;                        // 0x68D0 (0x0004) [0x0000000000000000] [0x02000000] 
	uint32_t                                           bCameraCracked : 1;                            // 0x68D0 (0x0004) [0x0000000000000000] [0x04000000] 
	uint32_t                                           bOverrideDarkLight : 1;                        // 0x68D0 (0x0004) [0x0000000000000000] [0x08000000] 
	uint32_t                                           bNoInventory : 1;                              // 0x68D0 (0x0004) [0x0000000000000000] [0x10000000] 
	uint32_t                                           bPlayScriptedAnimWasNoInventory : 1;           // 0x68D0 (0x0004) [0x0000000000000000] [0x20000000] 
	uint32_t                                           bPlayScriptAnimActive : 1;                     // 0x68D0 (0x0004) [0x0000000000000000] [0x40000000] 
	uint32_t                                           bIsYoungBlake : 1;                             // 0x68D4 (0x0004) [0x0000000000000000] [0xFFFFFFFF80000000] 
	uint32_t                                           bCanZoomInCinematicMode : 1;                   // 0x68D4 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bUseProxyLightInCinematicMode : 1;             // 0x68D4 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bFullCamcorderControlInCinematicMode : 1;      // 0x68D4 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bPartialCamcorderControlInCinematicMode : 1;   // 0x68D4 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bMicrophoneDisabledInCinematicMode : 1;        // 0x68D4 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bBlockConstrainedMovement : 1;                 // 0x68D4 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bKillConstrainedMovement : 1;                  // 0x68D4 (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bWantLookBack : 1;                             // 0x68D4 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bLeftAnim : 1;                                 // 0x68D4 (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bBackAnim : 1;                                 // 0x68D4 (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bShortAnim : 1;                                // 0x68D4 (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bExitLadderLeftHand : 1;                       // 0x68D4 (0x0004) [0x0000000000000000] [0x00000800] 
	uint32_t                                           bLookingBackLeftSide : 1;                      // 0x68D4 (0x0004) [0x0000000000000000] [0x00001000] 
	uint32_t                                           bRunningTraversalMove : 1;                     // 0x68D4 (0x0004) [0x0000000000000000] [0x00002000] 
	uint32_t                                           bApplyLandingPenalty : 1;                      // 0x68D4 (0x0004) [0x0000000000000000] [0x00004000] 
	uint32_t                                           bJumping : 1;                                  // 0x68D4 (0x0004) [0x0000000000000000] [0x00008000] 
	uint32_t                                           bStartingSpecialMove : 1;                      // 0x68D4 (0x0004) [0x0000000000000000] [0x00010000] 
	uint32_t                                           bPickupCrouched : 1;                           // 0x68D4 (0x0004) [0x0000000000000000] [0x00020000] 
	uint32_t                                           bPickupWhenCrouched : 1;                       // 0x68D4 (0x0004) [0x0000000000000000] [0x00040000] 
	uint32_t                                           bPickupWhenCrawled : 1;                        // 0x68D4 (0x0004) [0x0000000000000000] [0x00080000] 
	uint32_t                                           bForceBigLanding : 1;                          // 0x68D4 (0x0004) [0x0000000000000000] [0x00100000] 
	uint32_t                                           bBigLandingNoHand : 1;                         // 0x68D4 (0x0004) [0x0000000000000000] [0x00200000] 
	uint32_t                                           bClimbOverWallVeryHigh : 1;                    // 0x68D4 (0x0004) [0x0000000000000000] [0x00400000] 
	uint32_t                                           ActiveWardrobeIsLeftDoor : 1;                  // 0x68D4 (0x0004) [0x0000000000000000] [0x00800000] 
	uint32_t                                           bIsOnWardrobeRail : 1;                         // 0x68D4 (0x0004) [0x0000000000000000] [0x01000000] 
	uint32_t                                           bBeamLookingBack : 1;                          // 0x68D4 (0x0004) [0x0000000000000000] [0x02000000] 
	uint32_t                                           bCrouchShouldHandBeDown : 1;                   // 0x68D4 (0x0004) [0x0000000000000000] [0x04000000] 
	uint32_t                                           bSlipperySlide : 1;                            // 0x68D4 (0x0004) [0x0000000000000000] [0x08000000] 
	uint32_t                                           bCanOrientWithBed : 1;                         // 0x68D4 (0x0004) [0x0000000000000000] [0x10000000] 
	uint32_t                                           bQuietDoorInteraction : 1;                     // 0x68D4 (0x0004) [0x0000000000000000] [0x20000000] 
	uint32_t                                           SetBodySetupAfterSpecialMove : 1;              // 0x68D4 (0x0004) [0x0000000000000000] [0x40000000] 
	uint32_t                                           bWasUnder : 1;                                 // 0x68D8 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bIsBeingChased : 1;                            // 0x68D8 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bIsBeingInvestigated : 1;                      // 0x68D8 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bFellInWater : 1;                              // 0x68D8 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bInventorySoundStateOn : 1;                    // 0x68D8 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bWaitingToLookAtHands : 1;                     // 0x68D8 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bDoRaftEntryCheck : 1;                         // 0x68D8 (0x0004) [0x0000000800002000] [0x00000040] (CPF_Transient)
	int32_t                                            PendingSubSkinType;                            // 0x68DC (0x0004) [0x0000000000000000]               
	struct FSkinMaterials                              Skins[0x6];                                    // 0x68E0 (0x0BE8) [0x0000000000000000]               
	struct FHeroAnimNodes                              AnimNodes;                                     // 0x74C8 (0x01D8) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FHeroAnimNodes                              ShadowProxyNodes;                              // 0x76A0 (0x01D8) [0x0000000000400000] (CPF_NeedCtorLink)
	class UOLAnimNodeSlot*                             ShadowProxyFullBodyAnimSlot;                   // 0x7878 (0x0008) [0x0000000000000000]               
	class UOLAnimCustomBlend*                          ShadowProxyCustomBlendNode;                    // 0x7880 (0x0008) [0x0000000000000000]               
	class USkelControlBase*                            ShadowProxyRightClavicleFixup;                 // 0x7888 (0x0008) [0x0000000000000000]               
	class USkelControlBase*                            ShadowProxyForeTwist1Control;                  // 0x7890 (0x0008) [0x0000000000000000]               
	TArray<class UAnimSet*>                            ExtraSpecialMoveAnimSets;                      // 0x7898 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class UAnimSet*                                    ExtraPlayAnimAnimSet;                          // 0x78A8 (0x0008) [0x0000000000000000]               
	struct FVector                                     MeshOffset2D;                                  // 0x78B0 (0x000C) [0x0000000000000000]               
	float                                              LastFrameMeshZOffset;                          // 0x78BC (0x0004) [0x0000000000000000]               
	float                                              MeshPitchOffset;                               // 0x78C0 (0x0004) [0x0000000000000000]               
	float                                              MeshRollOffset;                                // 0x78C4 (0x0004) [0x0000000000000000]               
	struct FVector2D                                   PickupMeshOffset;                              // 0x78C8 (0x0008) [0x0000000000000000]               
	float                                              DrowningMeshOffset;                            // 0x78D0 (0x0004) [0x0000000000000000]               
	struct FEnvironmentReactionData                    EnvironmentReaction;                           // 0x78D4 (0x0020) [0x0000000000000000]               
	struct FHandIKData                                 LeftHandIKData;                                // 0x78F4 (0x0030) [0x0000000000000000]               
	struct FHandPlantedIKData                          LeftHandPlantedIKData;                         // 0x7924 (0x0024) [0x0000000000000000]               
	float                                              LastHandPlantedHeading;                        // 0x7948 (0x0004) [0x0000000000000000]               
	struct FCornerPeekData                             CornerPeek;                                    // 0x7950 (0x00B0) [0x0000000000000000]               
	float                                              LastValidCornerPeekTime;                       // 0x7A00 (0x0004) [0x0000000000000000]               
	struct FCornerData                                 LastValidCornerMarker;                         // 0x7A04 (0x0038) [0x0000000000000000]               
	float                                              TimeLeftForTutorialDoorPeekCollisionCheck;     // 0x7A3C (0x0004) [0x0000000000000000]               
	struct FAttachmentData                             ActiveAttachment;                              // 0x7A40 (0x0060) [0x0000000000080000] (CPF_Component)
	struct FCrawlData                                  Crawl;                                         // 0x7AA0 (0x0088) [0x0000000000000000]               
	struct FSlidingSlopeData                           SlidingSlope;                                  // 0x7B28 (0x0010) [0x0000000000000000]               
	struct FLedgeHangData                              LedgeHang;                                     // 0x7B38 (0x0018) [0x0000000000000000]               
	struct FHidingBarrelData                           HidingBarrel;                                  // 0x7B50 (0x0040) [0x0000000000000000]               
	struct FPushableData                               Pushable;                                      // 0x7B90 (0x0064) [0x0000000000000000]               
	struct FPairedWalkData                             PairedWalk;                                    // 0x7BF4 (0x0044) [0x0000000000000000]               
	struct FVector                                     PairedWalkLockedLocation;                      // 0x7C38 (0x000C) [0x0000000000000000]               
	struct FPuntData                                   Punt;                                          // 0x7C44 (0x0014) [0x0000000000000000]               
	float                                              CurrentLean;                                   // 0x7C58 (0x0004) [0x0000000000000000]               
	float                                              LastLeanSndTime;                               // 0x7C5C (0x0004) [0x0000000000000000]               
	float                                              LargeSlopeStartedTime;                         // 0x7C60 (0x0004) [0x0000000000000000]               
	float                                              RunBreathStartTime;                            // 0x7C64 (0x0004) [0x0000000000000000]               
	float                                              StoppedRunningStartTime;                       // 0x7C68 (0x0004) [0x0000000000000000]               
	float                                              RunStamina;                                    // 0x7C6C (0x0004) [0x0000000000000000]               
	float                                              JumpStamina;                                   // 0x7C70 (0x0004) [0x0000000000000000]               
	float                                              Air;                                           // 0x7C74 (0x0004) [0x0000000000000000]               
	float                                              TimeSinceLastOutOfAirBubble;                   // 0x7C78 (0x0004) [0x0000000000000000]               
	float                                              OutOfAirBubbleDuration;                        // 0x7C7C (0x0004) [0x0000000000000000]               
	float                                              AirBubbleFinalStepDuration;                    // 0x7C80 (0x0004) [0x0000000000000000]               
	float                                              LastTeleportTime;                              // 0x7C84 (0x0004) [0x0000000000000000]               
	float                                              EnteredLockerZ;                                // 0x7C88 (0x0004) [0x0000000000000000]               
	float                                              SlopedGroundActiveTime;                        // 0x7C8C (0x0004) [0x0000000000000000]               
	float                                              IdleTime;                                      // 0x7C90 (0x0004) [0x0000000000000000]               
	float                                              WalkOrIdleTime;                                // 0x7C94 (0x0004) [0x0000000000000000]               
	float                                              FallingTimeLeftBeforeDeath;                    // 0x7C98 (0x0004) [0x0000000000000000]               
	float                                              ContextualPeekingRatio;                        // 0x7C9C (0x0004) [0x0000000000000000]               
	float                                              BleedingBandageValidTime;                      // 0x7CA0 (0x0004) [0x0000000000000000]               
	float                                              BleedingBandageInvalidTime;                    // 0x7CA4 (0x0004) [0x0000000000000000]               
	float                                              HandsCrucifiedEffortTimestamp;                 // 0x7CA8 (0x0004) [0x0000000000000000]               
	float                                              BandagePushBack;                               // 0x7CAC (0x0004) [0x0000000000000000]               
	float                                              BandageZOffset;                                // 0x7CB0 (0x0004) [0x0000000000000000]               
	float                                              TimeLeftForBandage;                            // 0x7CB4 (0x0004) [0x0000000000000000]               
	float                                              TimeBeforeDrowning;                            // 0x7CB8 (0x0004) [0x0000000000000000]               
	struct FVector                                     HighestFallingPosition;                        // 0x7CBC (0x000C) [0x0000000000000000]               
	float                                              LastPhysicsJumpTime;                           // 0x7CC8 (0x0004) [0x0000000000000000]               
	float                                              JumpGravityMultiplier;                         // 0x7CCC (0x0004) [0x0000000000000000]               
	struct FCornerPeekConfigData                       CornerPeekConfigParams[0x2];                   // 0x7CD0 (0x0118) [0x0000000000000000]               
	float                                              LastTimeObjectivesVOPlayed;                    // 0x7DE8 (0x0004) [0x0000000000000000]               
	struct FName                                       LastObjectiveVOPath;                           // 0x7DEC (0x0008) [0x0000000000000000]               
	struct FName                                       LastObjectiveTextId;                           // 0x7DF4 (0x0008) [0x0000000000000000]               
	class UOLHeroCamera*                               Camera;                                        // 0x7DFC (0x0008) [0x0000000000000000]               
	struct FName                                       LeftHandBoneName;                              // 0x7E04 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       LeftHandAuxBoneName;                           // 0x7E0C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       RightHandAuxBoneName;                          // 0x7E14 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       LeftHandCenterBoneName;                        // 0x7E1C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       RightHandCenterBoneName;                       // 0x7E24 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       LeftClavicleBoneName;                          // 0x7E2C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       RightClavicleBoneName;                         // 0x7E34 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       CameraBoneName;                                // 0x7E3C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       CamcorderSocketBoneName;                       // 0x7E44 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       LeftPocketSocketBoneName;                      // 0x7E4C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       RightPocketSocketBoneName;                     // 0x7E54 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       BandageLeftForearmSocketBoneName;              // 0x7E5C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       BabyHoldingSocketName;                         // 0x7E64 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       PregLynnHandSocketName;                        // 0x7E6C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     EyeLocation;                                   // 0x7E74 (0x000C) [0x0000000000000000]               
	struct FRotator                                    EyeRotation;                                   // 0x7E80 (0x000C) [0x0000000000000000]               
	float                                              CurrentFOV;                                    // 0x7E8C (0x0004) [0x0000000000000000]               
	float                                              FinalFOV;                                      // 0x7E90 (0x0004) [0x0000000000000000]               
	float                                              OverriddenFOV;                                 // 0x7E94 (0x0004) [0x0000000000000000]               
	float                                              OverriddenFOVApproachCoeff;                    // 0x7E98 (0x0004) [0x0000000000000000]               
	struct FMatrix                                     CameraCompSpace;                               // 0x7EA0 (0x0040) [0x0000000000000000]               
	struct FCameraParameters                           CamParams;                                     // 0x7EE0 (0x0018) [0x0000000000000000]               
	struct FRotationRateLimitParams                    RotationRateLimits;                            // 0x7EF8 (0x0014) [0x0000000000000000]               
	struct FScriptedDOFData                            ScriptedDOF;                                   // 0x7F0C (0x0020) [0x0000000000000000]               
	float                                              LastDamageTime;                                // 0x7F2C (0x0004) [0x0000000000000000]               
	float                                              LastDamageAmount;                              // 0x7F30 (0x0004) [0x0000000000000000]               
	struct FDamageTypeParams                           LastDamageParams;                              // 0x7F34 (0x0020) [0x0000000000000000]               
	float                                              LastScriptedDamageEffectTime;                  // 0x7F54 (0x0004) [0x0000000000000000]               
	float                                              PreciseHealth;                                 // 0x7F58 (0x0004) [0x0000000000000000]               
	float                                              LastBandageUsedTime;                           // 0x7F5C (0x0004) [0x0000000000000000]               
	float                                              ElectricEffectStartTime;                       // 0x7F60 (0x0004) [0x0000000000000000]               
	float                                              NextElectricHurtSoundTime;                     // 0x7F64 (0x0004) [0x0000000000000000]               
	float                                              TimeOfDeath;                                   // 0x7F68 (0x0004) [0x0000000000000000]               
	struct FVector                                     FoliageCameraOffset;                           // 0x7F6C (0x000C) [0x0000000000000000]               
	float                                              BrightLightLookingAtTime;                      // 0x7F78 (0x0004) [0x0000000000000000]               
	float                                              HeatDistance;                                  // 0x7F7C (0x0004) [0x0000000000000000]               
	float                                              LastHeatDamageTime;                            // 0x7F80 (0x0004) [0x0000000000000000]               
	float                                              LastElectricDamageTime;                        // 0x7F84 (0x0004) [0x0000000000000000]               
	float                                              LastDamageVolumeTime;                          // 0x7F88 (0x0004) [0x0000000000000000]               
	struct FVector                                     DamageVolumeHitNormal;                         // 0x7F8C (0x000C) [0x0000000000000000]               
	float                                              CurrentHeatBlur;                               // 0x7F98 (0x0004) [0x0000000000000000]               
	float                                              HobblingIntensity;                             // 0x7F9C (0x0004) [0x0000000000000000]               
	float                                              HobblingDuration;                              // 0x7FA0 (0x0004) [0x0000000000000000]               
	float                                              HobblingTimeLeft;                              // 0x7FA4 (0x0004) [0x0000000000000000]               
	float                                              InitialHobblingIntensity;                      // 0x7FA8 (0x0004) [0x0000000000000000]               
	float                                              TargetHobblingIntensity;                       // 0x7FAC (0x0004) [0x0000000000000000]               
	class AOLBushesVolume*                             BushesVolume;                                  // 0x7FB0 (0x0008) [0x0000000000000000]               
	float                                              AnalogDarkness;                                // 0x7FB8 (0x0004) [0x0000000000000000]               
	float                                              LastAnalogDarknessUpdateTime;                  // 0x7FBC (0x0004) [0x0000000000000000]               
	float                                              FixedLookRatio;                                // 0x7FC0 (0x0004) [0x0000000000000000]               
	float                                              RTPCRotationSpeed;                             // 0x7FC4 (0x0004) [0x0000000000000000]               
	float                                              RTPCIdleRotationSpeed;                         // 0x7FC8 (0x0004) [0x0000000000000000]               
	float                                              RTPCHealth;                                    // 0x7FCC (0x0004) [0x0000000000000000]               
	float                                              LastTripHurtTime;                              // 0x7FD0 (0x0004) [0x0000000000000000]               
	float                                              RTPCNPCDistance;                               // 0x7FD4 (0x0004) [0x0000000000000000]               
	TArray<class AOLPhysicsVolume*>                    TouchingAutoStancePhysicsVolume;               // 0x7FD8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class AOLPhysicsVolume*                            AnticipatedAutoStancePhysicsVolume;            // 0x7FE8 (0x0008) [0x0000000000000000]               
	struct FVector                                     AnticipatedAutoStancePhysicsVolumePosition;    // 0x7FF0 (0x000C) [0x0000000000000000]               
	class AOLPawn*                                     ClosestNPC;                                    // 0x7FFC (0x0008) [0x0000000000000000]               
	struct FDizzinessData                              Dizzy;                                         // 0x8004 (0x0140) [0x0000000000000000]               
	float                                              CurrentContextualDizzinessRatio;               // 0x8144 (0x0004) [0x0000000000000000]               
	struct FWindData                                   Wind;                                          // 0x8148 (0x0038) [0x0000000000000000]               
	struct FNVLightSettings                            CurrentPoweredNVLightSettings;                 // 0x8180 (0x0030) [0x0000000000000000]               
	struct FNVLightSettings                            NormalNVLightSettings;                         // 0x81B0 (0x0030) [0x0000000000004000] (CPF_Config)  
	struct FNVLightSettings                            InteriorNVLightSettings;                       // 0x81E0 (0x0030) [0x0000000000004000] (CPF_Config)  
	struct FNVLightSettings                            PassiveNVLightSettings;                        // 0x8210 (0x0030) [0x0000000000004000] (CPF_Config)  
	float                                              CamcorderDisabledEndTime;                      // 0x8240 (0x0004) [0x0000000000000000]               
	float                                              LastCamcorderSwitchTime;                       // 0x8244 (0x0004) [0x0000000000000000]               
	float                                              CurrentBatterySetEnergy;                       // 0x8248 (0x0004) [0x0000000000000000]               
	float                                              CurrentCamcorderZoomFactor;                    // 0x824C (0x0004) [0x0000000000000000]               
	float                                              TargetCamcorderZoomFactor;                     // 0x8250 (0x0004) [0x0000000000000000]               
	float                                              NVLightInterpFactor;                           // 0x8254 (0x0004) [0x0000000000000000]               
	float                                              LastRainEffectActiveTime;                      // 0x8258 (0x0004) [0x0000000000000000]               
	float                                              CurrentDarkLightRadius;                        // 0x825C (0x0004) [0x0000000000000000]               
	float                                              CurrentDarkLightBrightnessEV;                  // 0x8260 (0x0004) [0x0000000000000000]               
	float                                              DarkLightOverrideBrightnessEV;                 // 0x8264 (0x0004) [0x0000000000000000]               
	float                                              DarkLightOverrideRadius;                       // 0x8268 (0x0004) [0x0000000000000000]               
	float                                              OverriddenMinCamcorderFOV;                     // 0x826C (0x0004) [0x0000000000000000]               
	float                                              BatteryDurationNV;                             // 0x8270 (0x0004) [0x0000000000000000]               
	float                                              BatteryDurationMicrophone;                     // 0x8274 (0x0004) [0x0000000000000000]               
	float                                              OverriddenHealthRegenRate;                     // 0x8278 (0x0004) [0x0000000000000000]               
	struct FCameraEffectData                           CameraEffect;                                  // 0x827C (0x001C) [0x0000000000000000]               
	struct FNVGlitchData                               NVGlitch;                                      // 0x8298 (0x001C) [0x0000000000000000]               
	float                                              TutorialLookBackReminderTimeLeft;              // 0x82B4 (0x0004) [0x0000000000000000]               
	float                                              ValidMicrophoneTutorialReminderDuration;       // 0x82B8 (0x0004) [0x0000000000000000]               
	float                                              HidingUnderBedReminderDuration;                // 0x82BC (0x0004) [0x0000000000000000]               
	float                                              DoorInteractionTutorialDuration;               // 0x82C0 (0x0004) [0x0000000000000000]               
	struct FVector                                     DesiredMoveDirection;                          // 0x82C4 (0x000C) [0x0000000000000000]               
	struct FVector                                     ExternalImpulse;                               // 0x82D0 (0x000C) [0x0000000000000000]               
	float                                              WalkSpeed;                                     // 0x82DC (0x0004) [0x0000000000000000]               
	float                                              RunSpeed;                                      // 0x82E0 (0x0004) [0x0000000000000000]               
	float                                              CurrentRunSpeed;                               // 0x82E4 (0x0004) [0x0000000000000000]               
	float                                              InputMovementScaling;                          // 0x82E8 (0x0004) [0x0000000000000000]               
	struct FLocomotionModeParameters                   LocomotionModeParams[0x21];                    // 0x82EC (0x09CC) [0x0000000000000001] (CPF_Edit)    
	class UOLSeqAct_HeroControl*                       HeroControl;                                   // 0x8CB8 (0x0008) [0x0000000000000000]               
	class UOLSeqAct_CamcorderEnabledAnim*              CamcorderEnabledAnim;                          // 0x8CC0 (0x0008) [0x0000000000000000]               
	class UOLSeqAct_AIPlayerContact*                   PlayerContactSeq;                              // 0x8CC8 (0x0008) [0x0000000000000000]               
	class UOLSeqAct_WaitForPlayerInput*                WaitForPlayerInputSeq;                         // 0x8CD0 (0x0008) [0x0000000000000000]               
	class AOLSqueezeMarker*                            ActiveSqueeze;                                 // 0x8CD8 (0x0008) [0x0000000000000000]               
	class AOLLedgeMarker*                              ActiveLedge;                                   // 0x8CE0 (0x0008) [0x0000000000000000]               
	class AOLDoor*                                     ActiveDoor;                                    // 0x8CE8 (0x0008) [0x0000000000000000]               
	class AOLWindow*                                   ActiveWindow;                                  // 0x8CF0 (0x0008) [0x0000000000000000]               
	class AOLBasementWindow*                           ActiveBasementWindow;                          // 0x8CF8 (0x0008) [0x0000000000000000]               
	class AOLLadderMarker*                             ActiveLadder;                                  // 0x8D00 (0x0008) [0x0000000000000000]               
	class AOLPickableObject*                           ActivePickup;                                  // 0x8D08 (0x0008) [0x0000000000000000]               
	class AOLHidingSpot*                               ActiveLocker;                                  // 0x8D10 (0x0008) [0x0000000000000000]               
	class AOLBed*                                      ActiveBed;                                     // 0x8D18 (0x0008) [0x0000000000000000]               
	class AOLCSA*                                      ActiveCSA;                                     // 0x8D20 (0x0008) [0x0000000000000000]               
	class AOLCrawlMarker*                              ActiveCrawl;                                   // 0x8D28 (0x0008) [0x0000000000000000]               
	class AOLSlidingSlopeMarker*                       ActiveSlidingSlope;                            // 0x8D30 (0x0008) [0x0000000000000000]               
	class AOLTripActor*                                ActiveTripActor;                               // 0x8D38 (0x0008) [0x0000000000000000]               
	class AOLWardrobe*                                 ActiveWardrobe;                                // 0x8D40 (0x0008) [0x0000000000000000]               
	class AOLStairsMarker*                             ActiveStairsMarker;                            // 0x8D48 (0x0008) [0x0000000000000000]               
	class AOLBeamMarker*                               ActiveBeam;                                    // 0x8D50 (0x0008) [0x0000000000000000]               
	float                                              WalkSpeedOverride;                             // 0x8D58 (0x0004) [0x0000000000000000]               
	float                                              RunSpeedOverride;                              // 0x8D5C (0x0004) [0x0000000000000000]               
	float                                              AccelApproachFactor;                           // 0x8D60 (0x0004) [0x0000000000000000]               
	float                                              DecelApproachFactor;                           // 0x8D64 (0x0004) [0x0000000000000000]               
	struct FSpeedLimitParams                           TemporarySpeedLimit;                           // 0x8D68 (0x0014) [0x0000000000000000]               
	struct FSqueezeLimitsParams                        SqueezeLimits;                                 // 0x8D7C (0x0004) [0x0000000000000000]               
	float                                              SpecialMoveBlendAlpha;                         // 0x8D80 (0x0004) [0x0000000000000000]               
	struct FVector                                     LadderDesiredMoveDirection;                    // 0x8D84 (0x000C) [0x0000000000000000]               
	float                                              LandingPenaltyDuration;                        // 0x8D90 (0x0004) [0x0000000000000000]               
	float                                              SpecialMoveTargetYaw;                          // 0x8D94 (0x0004) [0x0000000000000000]               
	float                                              SpecialMoveTargetPitch;                        // 0x8D98 (0x0004) [0x0000000000000000]               
	float                                              EnterBedZ;                                     // 0x8D9C (0x0004) [0x0000000000000000]               
	float                                              LastCompletedDoorInteractionTime;              // 0x8DA0 (0x0004) [0x0000000000000000]               
	float                                              SlideUnderDuration;                            // 0x8DA4 (0x0004) [0x0000000000000000]               
	struct FVector                                     DodgeDirection;                                // 0x8DA8 (0x000C) [0x0000000000000000]               
	struct FVector                                     SlipperySlideStartPos;                         // 0x8DB4 (0x000C) [0x0000000000000000]               
	float                                              LastActiveLedgeTimestamp;                      // 0x8DC0 (0x0004) [0x0000000000000000]               
	float                                              LastActiveLedgeZ;                              // 0x8DC4 (0x0004) [0x0000000000000000]               
	float                                              LastActiveLadderTimestamp;                     // 0x8DC8 (0x0004) [0x0000000000000000]               
	float                                              LastSpecialMoveFinishedTime;                   // 0x8DCC (0x0004) [0x0000000000000000]               
	float                                              LastClimbUpObstacleFinishedTime;               // 0x8DD0 (0x0004) [0x0000000000000000]               
	float                                              RunStartedTime;                                // 0x8DD4 (0x0004) [0x0000000000000000]               
	float                                              SprintEnabledTime;                             // 0x8DD8 (0x0004) [0x0000000000000000]               
	float                                              LastLandingTimestamp;                          // 0x8DDC (0x0004) [0x0000000000000000]               
	float                                              SpecialMoveStalledTimestamp;                   // 0x8DE0 (0x0004) [0x0000000000000000]               
	float                                              FallingStartedTime;                            // 0x8DE4 (0x0004) [0x0000000000000000]               
	float                                              LastEnterLookBackTime;                         // 0x8DE8 (0x0004) [0x0000000000000000]               
	float                                              EnteredHidingSpotTime;                         // 0x8DEC (0x0004) [0x0000000000000000]               
	float                                              EasyGrabBeamTime;                              // 0x8DF0 (0x0004) [0x0000000000000000]               
	float                                              SpecialMovesDisabledUntilTime;                 // 0x8DF4 (0x0004) [0x0000000000000000]               
	float                                              StaminaExhaustedRatio;                         // 0x8DF8 (0x0004) [0x0000000000000000]               
	float                                              OutOfAirRatio;                                 // 0x8DFC (0x0004) [0x0000000000000000]               
	float                                              AdrenalineRatio;                               // 0x8E00 (0x0004) [0x0000000000000000]               
	float                                              AdrenalineBoostActivationTime;                 // 0x8E04 (0x0004) [0x0000000000000000]               
	float                                              AdrenalineBoostDuration;                       // 0x8E08 (0x0004) [0x0000000000000000]               
	float                                              DoorSlowClosingAnimStartTime;                  // 0x8E0C (0x0004) [0x0000000000000000]               
	class AOLEnemyPawn*                                AttackingEnemy;                                // 0x8E10 (0x0008) [0x0000000000000000]               
	TArray<struct FCamcorderLostPromptRangeData>       CamcorderLostPromptRange;                      // 0x8E18 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FVector                                     LastPositionOnNavmesh;                         // 0x8E28 (0x000C) [0x0000000000000000]               
	struct FVector                                     AvgVelocity;                                   // 0x8E34 (0x000C) [0x0000000000000000]               
	float                                              RotationChangeAccumulation;                    // 0x8E40 (0x0004) [0x0000000000000000]               
	float                                              LastBeingChasedTime;                           // 0x8E44 (0x0004) [0x0000000000000000]               
	float                                              LastBeingInvestigatedTime;                     // 0x8E48 (0x0004) [0x0000000000000000]               
	struct FHeroDeathGripData                          DeathGrip;                                     // 0x8E4C (0x006C) [0x0000000000000000]               
	float                                              DeathGripLastActivatedTime;                    // 0x8EB8 (0x0004) [0x0000000000000000]               
	struct FWaveAnimatedDataConfig                     RaftAnimatedDataParams[0x2];                   // 0x8EBC (0x0090) [0x0000000000000000]               
	struct FWaveAnimatedDataConfig                     SwimmingAnimatedDataParam;                     // 0x8F4C (0x0048) [0x0000000000000000]               
	struct FRaftData                                   Raft;                                          // 0x8F94 (0x0160) [0x0000000000000000]               
	struct FWaveAnimatedData                           SwimmingAnimatedZOffset;                       // 0x90F4 (0x0018) [0x0000000000000000]               
	struct FWaveAnimatedData                           SwimmingAnimatedRoll;                          // 0x910C (0x0018) [0x0000000000000000]               
	struct FWaveAnimatedData                           SwimmingAnimatedPitch;                         // 0x9124 (0x0018) [0x0000000000000000]               
	struct FUnderwaterData                             Underwater;                                    // 0x913C (0x0014) [0x0000000000000000]               
	struct FSwimmingParticlesData                      SwimmingParticles;                             // 0x9150 (0x0018) [0x0000000000000000]               
	struct FInventoryData                              Inventory;                                     // 0x9168 (0x001C) [0x0000000000000000]               
	struct FLookatObjectData                           LookatObject;                                  // 0x9184 (0x001C) [0x0000000000000000]               
	struct FVector                                     FallPushLastTestLocation;                      // 0x91A0 (0x000C) [0x0000000000000000]               
	struct FVector                                     FallPushVector;                                // 0x91AC (0x000C) [0x0000000000000000]               
	float                                              LastRecordingStartTime;                        // 0x91B8 (0x0004) [0x0000000000000000]               
	TArray<struct FGameplayItemDefinition>             GameplayItems;                                 // 0x91BC (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              OutOfItemTypeTimestamp;                        // 0x91CC (0x0004) [0x0000000000000000]               
	TArray<struct FName>                               CleanSlideSurfaceNames;                        // 0x91D0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FName                                       CrouchNoise;                                   // 0x91E0 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       WalkingNoise;                                  // 0x91E8 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       RunningNoise;                                  // 0x91F0 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       DoorMajorNoise;                                // 0x91F8 (0x0008) [0x0000000000000002] (CPF_Const)   
	float                                              MovingNoiseRate;                               // 0x9200 (0x0004) [0x0000000000000002] (CPF_Const)   
	class UForceFeedbackWaveform*                      BigLandingFFWaveform;                          // 0x9204 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UForceFeedbackWaveform*                      SmallLandingFFWaveform;                        // 0x920C (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UForceFeedbackWaveform*                      StumbleLandingFFWaveform;                      // 0x9214 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UForceFeedbackWaveform*                      PickupFFWaveform;                              // 0x921C (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UForceFeedbackWaveform*                      DroppedDownFFWaveform;                         // 0x9224 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UForceFeedbackWaveform*                      DoorInteractionFFWaveform;                     // 0x922C (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UForceFeedbackWaveform*                      RunThroughDoorFFWaveform;                      // 0x9234 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UForceFeedbackWaveform*                      StartRecordingFFWaveform;                      // 0x923C (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FCameraShakeData                            SlidingSlopeShakes[0x3];                       // 0x9244 (0x01C8) [0x0000000000000002] (CPF_Const)   
	struct FCameraShakeData                            ExhaustedShake;                                // 0x940C (0x0098) [0x0000000000000002] (CPF_Const)   
	struct FCameraShakeData                            HurtShake;                                     // 0x94A4 (0x0098) [0x0000000000000002] (CPF_Const)   
	struct FCameraShakeData                            RaftSmallCollisionShake;                       // 0x953C (0x0098) [0x0000000000000002] (CPF_Const)   
	struct FCameraShakeData                            PushableCameraShake[0x7];                      // 0x95D4 (0x0428) [0x0000000000000002] (CPF_Const)   
	struct FCameraShakeData                            WindShake;                                     // 0x99FC (0x0098) [0x0000000000000002] (CPF_Const)   
	struct FDizzinessConfig                            PuntDizziness;                                 // 0x9A94 (0x00D0) [0x0000000000000002] (CPF_Const)   
	struct FQTEMatineeData                             QTEMatinee;                                    // 0x9B64 (0x0018) [0x0000000000000000]               
	float                                              KeepCrouchedTimeLeft;                          // 0x9B7C (0x0004) [0x0000000000000000]               
	float                                              AutoUncrouchTime;                              // 0x9B80 (0x0004) [0x0000000000000000]               
	class UAkEvent*                                    SndCamStart;                                   // 0x9B84 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndCamStop;                                    // 0x9B8C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndCamOnNVOn;                                  // 0x9B94 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndCamOnNVOff;                                 // 0x9B9C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndCamOffNVOn;                                 // 0x9BA4 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndCamOffNVOff;                                // 0x9BAC (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndMicrophoneOn;                               // 0x9BB4 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndMicrophoneOff;                              // 0x9BBC (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndReloadBatteries;                            // 0x9BC4 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndPickupDocument;                             // 0x9BCC (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndPickupBatteries;                            // 0x9BD4 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndPickupBandages;                             // 0x9BDC (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndZoomIn;                                     // 0x9BE4 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndZoomOut;                                    // 0x9BEC (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndSoldierHit;                                 // 0x9BF4 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndBladeHit;                                   // 0x9BFC (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndDie;                                        // 0x9C04 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndSetDeathState;                              // 0x9C0C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndDeathBuildUpStart;                          // 0x9C14 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndDeathBuildUpStop;                           // 0x9C1C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndHit;                                        // 0x9C24 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndHitElectrified;                             // 0x9C2C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndStartPeek;                                  // 0x9C34 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndStopPeek;                                   // 0x9C3C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndStartDamage;                                // 0x9C44 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndStopDamage;                                 // 0x9C4C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndElectricHitStart;                           // 0x9C54 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndElectricHitStop;                            // 0x9C5C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndStartRun;                                   // 0x9C64 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndStopRun;                                    // 0x9C6C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndStopRunShort;                               // 0x9C74 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndStartLookBack;                              // 0x9C7C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndStopLookBack;                               // 0x9C84 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndDieMusicEvent;                              // 0x9C8C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndDieInfiniteFallingMusicEvent;               // 0x9C94 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndNewObjective;                               // 0x9C9C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndRecordingCompleted;                         // 0x9CA4 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndLowBatteryStart;                            // 0x9CAC (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndLowBatteryStop;                             // 0x9CB4 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndSlidingSlopeStart;                          // 0x9CBC (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndSlidingSlopeStop;                           // 0x9CC4 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndStaminaExhaustedStart;                      // 0x9CCC (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndStaminaExhaustedStop;                       // 0x9CD4 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndUnderwaterStart;                            // 0x9CDC (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndUnderwaterStop;                             // 0x9CE4 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndUnderwaterBubbles;                          // 0x9CEC (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndRaftCollisionHit;                           // 0x9CF4 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndRaftScrapingStart;                          // 0x9CFC (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndRaftScrapingStop;                           // 0x9D04 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndLedgeHangStartPeeking;                      // 0x9D0C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndLedgeHangStopPeeking;                       // 0x9D14 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndLedgeHangPeekingExhausted;                  // 0x9D1C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndLadderGrabFromAir;                          // 0x9D24 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndBarrelCoverClosed;                          // 0x9D2C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndWaterEnter;                                 // 0x9D34 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndRiverRushingStart;                          // 0x9D3C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndRiverRushingStop;                           // 0x9D44 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndInventoryIn;                                // 0x9D4C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndInventoryOut;                               // 0x9D54 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndPostReadDocument;                           // 0x9D5C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndRecordingVideoStartLoop;                    // 0x9D64 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndRecordingVideoStopLoop;                     // 0x9D6C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndRecordingVideoStart;                        // 0x9D74 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndRecordingVideoCompleted;                    // 0x9D7C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndRecordingSnapshotCompleted;                 // 0x9D84 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndInnerDemonPrecenceStart;                    // 0x9D8C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndInnerDemonPrecenceStop;                     // 0x9D94 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndBandageInterrupted;                         // 0x9D9C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndDeathGripStruggleStart;                     // 0x9DA4 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndDeathGripStruggleStop;                      // 0x9DAC (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndLandInWater;                                // 0x9DB4 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndFoleyFall;                                  // 0x9DBC (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndEnterWaterBarrel;                           // 0x9DC4 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndCrawlScrambleStart;                         // 0x9DCC (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndCrawlScrambleStop;                          // 0x9DD4 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndPlayerSlideStart;                           // 0x9DDC (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndPlayerCleanSlideStart;                      // 0x9DE4 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndPlayerCleanSlideStop;                       // 0x9DEC (0x0008) [0x0000000000000002] (CPF_Const)   
	class FString                                      StateHitIntensityGroup;                        // 0x9DF4 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      StateHitIntensityLow;                          // 0x9E04 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      StateHitIntensityMed;                          // 0x9E14 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      StateHitIntensityHigh;                         // 0x9E24 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      StateMicrophoneGroup;                          // 0x9E34 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      StateMicrophoneOff;                            // 0x9E44 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      StateMicrophoneOn;                             // 0x9E54 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      StateCatchOutOfAirIntensityGroup;              // 0x9E64 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      StateCatchOutOfAirLow;                         // 0x9E74 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      StateCatchOutOfAirMed;                         // 0x9E84 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      StateCatchOutOfAirHigh;                        // 0x9E94 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	struct FName                                       SwitchRaftCollisionType;                       // 0x9EA4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       SwitchRaftCollisionTypeLight;                  // 0x9EAC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       SwitchRaftCollisionTypeMedium;                 // 0x9EB4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       SwitchRaftCollisionTypeHard;                   // 0x9EBC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       SwitchSlidingSlopeMaterial;                    // 0x9EC4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       SwitchSlidingSlopeMaterialDirt;                // 0x9ECC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       SwitchSlidingSlopeMaterialLeaves;              // 0x9ED4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       SwitchSlidingSlopeMaterialWood;                // 0x9EDC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       SwitchEnterWater;                              // 0x9EE4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       SwitchEnterWaterTypeSoft;                      // 0x9EEC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       SwitchEnterWaterTypeHard;                      // 0x9EF4 (0x0008) [0x0000000000000002] (CPF_Const)   
	class FString                                      RTPCNameHealth;                                // 0x9EFC (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      RTPCNameZoom;                                  // 0x9F0C (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      RTPCNameBatteryIntensity;                      // 0x9F1C (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      RTPCNamePlayerSpeed;                           // 0x9F2C (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      RTPCNamePlayerRotationSpeed;                   // 0x9F3C (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      RTPCNamePlayerIdleRotationSpeed;               // 0x9F4C (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      RTPCNamePlayerExhausted;                       // 0x9F5C (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      RTPCNamePlayerOutOfAir;                        // 0x9F6C (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      RTPCNameRaftScrapeStrength;                    // 0x9F7C (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      RTPCNameBarrelCoverMoveSpeed;                  // 0x9F8C (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      RTPCNameRiverCurrent;                          // 0x9F9C (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      RTPCNameInnerDemonPresence;                    // 0x9FAC (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	struct FName                                       AnimNameJumpFromWalk;                          // 0x9FBC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameJumpFromRun;                           // 0x9FC4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameJumpOverFromWalk;                      // 0x9FCC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameJumpOverFromRun;                       // 0x9FD4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameJumpOverToGrabLedge;                   // 0x9FDC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameClimbUpFromWalk;                       // 0x9FE4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameClimbUpFromRun;                        // 0x9FEC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameClimbUpToCrouch;                       // 0x9FF4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameClimbUpWall150;                        // 0x9FFC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameClimbUpWall200;                        // 0xA004 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameClimbOverWall200;                      // 0xA00C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameClimbOverWall325;                      // 0xA014 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameClimbUpToCrawl;                        // 0xA01C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCrouch;                                // 0xA024 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameUncrouch;                              // 0xA02C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLedgeHangLeftInside;                   // 0xA034 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLedgeHangRightInside;                  // 0xA03C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLedgeHangLeftOutside;                  // 0xA044 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLedgeHangRightOutside;                 // 0xA04C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameClimbUpLedgeToCrouch;                  // 0xA054 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameClimbUpLedgeToCrawl;                   // 0xA05C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameClimbUpLedgeToStand;                   // 0xA064 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameClimbOverLedgeToFalling;               // 0xA06C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameClimbOverLedgeToStand;                 // 0xA074 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSlideOverFromRun;                      // 0xA07C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabAndClimb;                          // 0xA084 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabLedgeFromAir;                      // 0xA08C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabLedgeFromWalkHigh;                 // 0xA094 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabLedgeFromWalkLow;                  // 0xA09C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLandingSmallStanding;                  // 0xA0A4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLandingSmallCrouched;                  // 0xA0AC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLandingSmallCrawled;                   // 0xA0B4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLandingBeam;                           // 0xA0BC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameBigLandingStanding;                    // 0xA0C4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameBigLandingStandingNoHand;              // 0xA0CC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameBigLandingCrouched;                    // 0xA0D4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameBigLandingCrawled;                     // 0xA0DC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterLedgeWalkInsideLeftPerp;          // 0xA0E4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterLedgeWalkInsideLeftPrl;           // 0xA0EC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterLedgeWalkInsideRightPerp;         // 0xA0F4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterLedgeWalkInsideRightPrl;          // 0xA0FC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterLedgeWalkOutsideLeftPerp;         // 0xA104 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterLedgeWalkOutsideLeftPrl;          // 0xA10C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterLedgeWalkOutsideRightPerp;        // 0xA114 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterLedgeWalkOutsideRightPrl;         // 0xA11C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterLedgeWalkBackPerp;                // 0xA124 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterLedgeWalkLeftBeam;                // 0xA12C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterLedgeWalkRightBeam;               // 0xA134 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLedgeWalkTransitionLeftInside;         // 0xA13C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLedgeWalkTransitionLeftOutside;        // 0xA144 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLedgeWalkTransitionRightInside;        // 0xA14C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLedgeWalkTransitionRightOutside;       // 0xA154 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitLedgeWalkRightInside;              // 0xA15C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitLedgeWalkLeftInside;               // 0xA164 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitLedgeWalkRightOutside;             // 0xA16C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitLedgeWalkLeftOutside;              // 0xA174 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitLedgeWalkForward;                  // 0xA17C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitLedgeWalkLeftBeam;                 // 0xA184 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitLedgeWalkRightBeam;                // 0xA18C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameJumpFromLedgeWalk;                     // 0xA194 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameStepOffFromLedgeWalk;                  // 0xA19C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterSqueezeLeft;                      // 0xA1A4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterSqueezeRight;                     // 0xA1AC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterSqueezeHandsDownLeft;             // 0xA1B4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterSqueezeHandsDownRight;            // 0xA1BC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitSqueezeLeft;                       // 0xA1C4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitSqueezeRight;                      // 0xA1CC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitSqueezeHandsDownLeft;              // 0xA1D4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitSqueezeHandsDownRight;             // 0xA1DC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAutomaticSqueeze;                      // 0xA1E4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSqueezeNormalIdle;                     // 0xA1EC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSqueezeNormalLeft;                     // 0xA1F4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSqueezeNormalRight;                    // 0xA1FC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSqueezeBackIdle;                       // 0xA204 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSqueezeBackLeft;                       // 0xA20C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSqueezeBackRight;                      // 0xA214 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterLadderGroundStraight;             // 0xA21C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterLadderGround45Left;               // 0xA224 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterLadderGround45Right;              // 0xA22C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterLadderAboveForward;               // 0xA234 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterLadderAboveBackward;              // 0xA23C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterLadderAboveFloorForward;          // 0xA244 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterLadderAboveFloorBackward;         // 0xA24C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitLadderOnTopLH;                     // 0xA254 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitLadderOnTopRH;                     // 0xA25C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitLadderOnTopFloorLH;                // 0xA264 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitLadderOnTopFloorRH;                // 0xA26C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupObject_h40v70;                   // 0xA274 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupObject_h40v140;                  // 0xA27C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupObject_h85v70;                   // 0xA284 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupObject_h85v140;                  // 0xA28C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupObject_h62v105;                  // 0xA294 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupObjectCrouched_h30vm10;          // 0xA29C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupObjectCrouched_h60vm10;          // 0xA2A4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupObjectCrouched_h45v35;           // 0xA2AC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupObjectCrouched_h30v60;           // 0xA2B4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupObjectCrouched_h60v60;           // 0xA2BC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupObjectCrawling_h40vm10;          // 0xA2C4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupObjectCrawling_h40v30;           // 0xA2CC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupObjectCrawling_h60v30;           // 0xA2D4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupObjectCrawling_h60vm10;          // 0xA2DC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupObjectCrawling_h50v10;           // 0xA2E4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupDoc_h40v70;                      // 0xA2EC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupDoc_h40v140;                     // 0xA2F4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupDoc_h85v70;                      // 0xA2FC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupDoc_h85v140;                     // 0xA304 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupDoc_h62v105;                     // 0xA30C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupDocCrouched_h30vm10;             // 0xA314 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupDocCrouched_h60vm10;             // 0xA31C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupDocCrouched_h45v35;              // 0xA324 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupDocCrouched_h30v60;              // 0xA32C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupDocCrouched_h60v60;              // 0xA334 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupDocCrawling_h40vm10;             // 0xA33C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupDocCrawling_h40v30;              // 0xA344 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupDocCrawling_h60v30;              // 0xA34C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupDocCrawling_h60vm10;             // 0xA354 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupDocCrawling_h50v10;              // 0xA35C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupBandage_h40v70;                  // 0xA364 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupBandage_h40v140;                 // 0xA36C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupBandage_h85v70;                  // 0xA374 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupBandage_h85v140;                 // 0xA37C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupBandage_h62v105;                 // 0xA384 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupBandageCrouched_h30vm10;         // 0xA38C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupBandageCrouched_h60vm10;         // 0xA394 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupBandageCrouched_h45v35;          // 0xA39C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupBandageCrouched_h30v60;          // 0xA3A4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupBandageCrouched_h60v60;          // 0xA3AC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupBandageCrawling_h40vm10;         // 0xA3B4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupBandageCrawling_h40v30;          // 0xA3BC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupBandageCrawling_h60v30;          // 0xA3C4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupBandageCrawling_h60vm10;         // 0xA3CC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupBandageCrawling_h50v10;          // 0xA3D4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePickupPaperForSnapShot;                // 0xA3DC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDropDownPaperFromSnapShot;             // 0xA3E4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCloseDoorLeftFront;                    // 0xA3EC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCloseDoorLeftSide;                     // 0xA3F4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCloseDoorLeftBack;                     // 0xA3FC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCloseDoorLeftInside;                   // 0xA404 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCloseDoorRightFront;                   // 0xA40C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCloseDoorRightSide;                    // 0xA414 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCloseDoorRightBack;                    // 0xA41C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCloseDoorRightInside;                  // 0xA424 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCloseDoorLeftFrontSlow;                // 0xA42C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCloseDoorLeftSideSlow;                 // 0xA434 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCloseDoorLeftBackSlow;                 // 0xA43C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCloseDoorLeftInsideSlow;               // 0xA444 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCloseDoorRightFrontSlow;               // 0xA44C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCloseDoorRightSideSlow;                // 0xA454 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCloseDoorRightBackSlow;                // 0xA45C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCloseDoorRightInsideSlow;              // 0xA464 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorOpenPullLeft;                      // 0xA46C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorOpenPullRight;                     // 0xA474 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorOpenPushLeft;                      // 0xA47C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorOpenPushRight;                     // 0xA484 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorOpenCrouchedPullLeft;              // 0xA48C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorOpenCrouchedPullRight;             // 0xA494 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorOpenCrouchedPushLeft;              // 0xA49C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorOpenCrouchedPushRight;             // 0xA4A4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorOpenCrawledPullLeft;               // 0xA4AC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorOpenCrawledPullRight;              // 0xA4B4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorOpenCrawledPushLeft;               // 0xA4BC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorOpenCrawledPushRight;              // 0xA4C4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorRunThroughLeft;                    // 0xA4CC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorRunThroughRight;                   // 0xA4D4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorOpenInsidePushLeft;                // 0xA4DC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorOpenInsidePushRight;               // 0xA4E4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorOpenOneWayLeft;                    // 0xA4EC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorOpenOneWayRight;                   // 0xA4F4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorOpenAutoClosePullLeft;             // 0xA4FC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorOpenAutoClosePullRight;            // 0xA504 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorOpenAutoClosePushLeft;             // 0xA50C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorOpenAutoClosePushRight;            // 0xA514 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorAccessLeft;                        // 0xA51C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorAccessRight;                       // 0xA524 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorAccessLeftPull15;                  // 0xA52C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorAccessRightPull15;                 // 0xA534 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorAccessLeftPush15;                  // 0xA53C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorAccessRightPush15;                 // 0xA544 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorLockedLeft;                        // 0xA54C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDoorLockedRight;                       // 0xA554 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameUnlockDoorLeft;                        // 0xA55C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameUnlockDoorRight;                       // 0xA564 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameUnlockAndOpenDoorLeft;                 // 0xA56C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameUnlockAndOpenDoorRight;                // 0xA574 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLockDoorLeft;                          // 0xA57C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLockDoorRight;                         // 0xA584 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLockerOpenStraight;                    // 0xA58C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLockerOpen45Left;                      // 0xA594 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLockerOpen45Right;                     // 0xA59C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameHideInLocker;                          // 0xA5A4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabFromSqueezeLeft;                   // 0xA5AC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabFromSqueezeRight;                  // 0xA5B4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterBedLeft;                          // 0xA5BC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterBedRight;                         // 0xA5C4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterBedLeftFromStand;                 // 0xA5CC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterBedRightFromStand;                // 0xA5D4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSlideUnderBedLeft;                     // 0xA5DC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSlideUnderBedRight;                    // 0xA5E4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitBedLeft;                           // 0xA5EC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitBedRight;                          // 0xA5F4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitBedLeftToCrouch;                   // 0xA5FC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitBedRightToCrouch;                  // 0xA604 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterPushObjectLeft;                   // 0xA60C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterPushObjectRight;                  // 0xA614 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterPushObjectLow;                    // 0xA61C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterPushBarnDoor;                     // 0xA624 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterPushProjector;                    // 0xA62C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitPushObjectLeft;                    // 0xA634 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitPushObjectRight;                   // 0xA63C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitPushObjectLow;                     // 0xA644 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitPushBarnDoor;                      // 0xA64C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitPushProjector;                     // 0xA654 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameRaiseCamcorder;                        // 0xA65C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLowerCamcorder;                        // 0xA664 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameRaiseCamcorderBed;                     // 0xA66C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLowerCamcorderBed;                     // 0xA674 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameRaiseCamcorderCrouched;                // 0xA67C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLowerCamcorderCrouched;                // 0xA684 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameRaiseCamcorderCrawled;                 // 0xA68C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLowerCamcorderCrawled;                 // 0xA694 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameReloadBatteries;                       // 0xA69C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameReloadBatteriesInactive;               // 0xA6A4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameReloadBatteriesCrouched;               // 0xA6AC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameReloadBatteriesCrouchedInactive;       // 0xA6B4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameReloadBatteriesCrawled;                // 0xA6BC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameReloadBatteriesCrawledInactive;        // 0xA6C4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameReloadBatteriesBed;                    // 0xA6CC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameReloadBatteriesBedInactive;            // 0xA6D4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameReloadBatteriesSqueeze;                // 0xA6DC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameReloadBatteriesSqueezeInactive;        // 0xA6E4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameReloadBatteriesSmallSpace;             // 0xA6EC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameReloadBatteriesSmallSpaceInactive;     // 0xA6F4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameHitReactionFwd;                        // 0xA6FC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameHitReactionBwd;                        // 0xA704 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameHitReactionLeft;                       // 0xA70C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameHitReactionRight;                      // 0xA714 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameHitReactionCrouchedFwd;                // 0xA71C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameHitReactionCrouchedBwd;                // 0xA724 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameHitReactionCrouchedLeft;               // 0xA72C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameHitReactionCrouchedRight;              // 0xA734 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameWallContactLeftHard;                   // 0xA73C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameWallContactLeftSoft;                   // 0xA744 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameWallContactRightHard;                  // 0xA74C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameWallContactRightSoft;                  // 0xA754 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameWallContactCrouchedLeftHard;           // 0xA75C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameWallContactCrouchedLeftSoft;           // 0xA764 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameWallContactCrouchedRightHard;          // 0xA76C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameWallContactCrouchedRightSoft;          // 0xA774 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameContextualLeanCrouchLeftHard;          // 0xA77C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameContextualLeanCrouchLeftSoft;          // 0xA784 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameContextualLeanCrouchRightHard;         // 0xA78C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameContextualLeanCrouchRightSoft;         // 0xA794 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameContextualLeanUncrouchLeftHard;        // 0xA79C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameContextualLeanUncrouchLeftSoft;        // 0xA7A4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameContextualLeanUncrouchRightHard;       // 0xA7AC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameContextualLeanUncrouchRightSoft;       // 0xA7B4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterCornerPeekLeftHard;               // 0xA7BC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterCornerPeekLeftSoft;               // 0xA7C4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterCornerPeekRightHard;              // 0xA7CC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterCornerPeekRightSoft;              // 0xA7D4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitCornerPeekLeftHard;                // 0xA7DC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitCornerPeekLeftSoft;                // 0xA7E4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitCornerPeekRightHard;               // 0xA7EC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitCornerPeekRightSoft;               // 0xA7F4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitCornerPeekForwardLeftHard;         // 0xA7FC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitCornerPeekForwardLeftSoft;         // 0xA804 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitCornerPeekForwardRightHard;        // 0xA80C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitCornerPeekForwardRightSoft;        // 0xA814 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitCornerPeekCrouchedForwardLeftHard; // 0xA81C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitCornerPeekCrouchedForwardLeftSoft; // 0xA824 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitCornerPeekCrouchedForwardRightHard;// 0xA82C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitCornerPeekCrouchedForwardRightSoft;// 0xA834 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCornerTransitionFromLeft;              // 0xA83C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCornerTransitionFromRight;             // 0xA844 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabFromBedLeft;                       // 0xA84C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabFromBedRight;                      // 0xA854 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabFromLocker;                        // 0xA85C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabUnder;                             // 0xA864 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabUnderLeft90;                       // 0xA86C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabUnderLeft180;                      // 0xA874 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabUnderRight90;                      // 0xA87C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabUnderRight180;                     // 0xA884 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabUnderMartha;                       // 0xA88C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabUnderMarthaL90;                    // 0xA894 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabUnderMarthaL180;                   // 0xA89C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabUnderMarthaR90;                    // 0xA8A4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabUnderMarthaR180;                   // 0xA8AC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabUnderNic;                          // 0xA8B4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePushawayLeft;                          // 0xA8BC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePushawayRight;                         // 0xA8C4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameFall2HighDeath;                        // 0xA8CC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameFallDeath;                             // 0xA8D4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGenericDeath;                          // 0xA8DC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameHiddenInWaterBarrelDeath;              // 0xA8E4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameHiddenUnderwaterDeath;                 // 0xA8EC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameHiddenUnderShallowWaterDeath;          // 0xA8F4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSwimmingDeath;                         // 0xA8FC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCrawlingDeath;                         // 0xA904 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameFatalityNormalFront;                   // 0xA90C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameFatalityNormalBack;                    // 0xA914 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameFatalityChokeFront;                    // 0xA91C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameFatalityChokeLeft;                     // 0xA924 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameFatalityChokeRight;                    // 0xA92C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameFatalityHereticFront;                  // 0xA934 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameFatalityHereticBack;                   // 0xA93C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameFatalityInnerDemonFront;               // 0xA944 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDodgeStandLeft;                        // 0xA94C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDodgeStandRight;                       // 0xA954 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDodgeStandBack;                        // 0xA95C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDodgeRunLeft;                          // 0xA964 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDodgeRunRight;                         // 0xA96C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDodgeRunBack;                          // 0xA974 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSlideToCrouch;                         // 0xA97C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSlideToLedge;                          // 0xA984 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSlideToCrawl;                          // 0xA98C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterCrawlFromStand;                   // 0xA994 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterCrawlFromCrouch;                  // 0xA99C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitCrawlToStand;                      // 0xA9A4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitCrawlToCrouch;                     // 0xA9AC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDeathGripEnterBack;                    // 0xA9B4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDeathGripEnterFront;                   // 0xA9BC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDeathGripDeath;                        // 0xA9C4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDeathGripEscape;                       // 0xA9CC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDeathGripStruggle;                     // 0xA9D4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDeathGripShake;                        // 0xA9DC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDeathGripCrawlerEnterR90;              // 0xA9E4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDeathGripCrawlerEnterL45;              // 0xA9EC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDeathGripCrawlerEnterL135;             // 0xA9F4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDeathGripCrawlerDeath;                 // 0xA9FC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDeathGripCrawlerEscape;                // 0xAA04 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDeathGripCrawlerEscapeBack;            // 0xAA0C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDeathGripCrawlerStruggle;              // 0xAA14 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDeathGripCrawlerShake;                 // 0xAA1C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDeathGripCrawler2Enter;                // 0xAA24 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDeathGripCrawler2EnterBack;            // 0xAA2C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDeathGripCrawler2Death;                // 0xAA34 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDeathGripCrawler2EscapeFront;          // 0xAA3C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDeathGripCrawler2EscapeBack;           // 0xAA44 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDeathGripCrawler2Struggle;             // 0xAA4C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDeathGripCrawler2Shake;                // 0xAA54 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameMultiKilled;                           // 0xAA5C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameMarthaKillFront;                       // 0xAA64 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameMarthaKillBack;                        // 0xAA6C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCrawlerKillFront;                      // 0xAA74 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCrawlerKillBack;                       // 0xAA7C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameNicAndLairdKillFront;                  // 0xAA84 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameNicAndLairdKillBack;                   // 0xAA8C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameOpenWindowFull;                        // 0xAA94 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameOpenWindowPartial;                     // 0xAA9C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCloseWindow;                           // 0xAAA4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterBasementToStand;                  // 0xAAAC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterBasementToCrouch;                 // 0xAAB4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSlopeSoftFeetLanding;                  // 0xAABC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSlopeHardFeetLanding;                  // 0xAAC4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSlopeShortLanding;                     // 0xAACC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSlopeLoseGlasses;                      // 0xAAD4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTripFallForward;                       // 0xAADC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTripFallBack;                          // 0xAAE4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTripFallRight;                         // 0xAAEC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTripFallLeft;                          // 0xAAF4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTripDodgeForward;                      // 0xAAFC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTripDodgeBack;                         // 0xAB04 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTripDodgeRight;                        // 0xAB0C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTripDodgeLeft;                         // 0xAB14 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTripWalkHurtForward;                   // 0xAB1C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTripWalkHurtBack;                      // 0xAB24 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTripWalkHurtRight;                     // 0xAB2C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTripWalkHurtLeft;                      // 0xAB34 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTripCrouchHurtForward;                 // 0xAB3C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTripCrouchHurtBack;                    // 0xAB44 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTripCrouchHurtRight;                   // 0xAB4C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTripCrouchHurtLeft;                    // 0xAB54 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTripCrawlHurtForward;                  // 0xAB5C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTripCrawlHurtBack;                     // 0xAB64 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTripCrawlHurtRight;                    // 0xAB6C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTripCrawlHurtLeft;                     // 0xAB74 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterHidingBarrel;                     // 0xAB7C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterHidingBarrelWithCover;            // 0xAB84 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitHidingBarrel;                      // 0xAB8C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitHidingBarrelWithCover;             // 0xAB94 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterWardrobeInsideLeft;               // 0xAB9C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterWardrobeInsideRight;              // 0xABA4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitWardrobeInsideLeft;                // 0xABAC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitWardrobeInsideRight;               // 0xABB4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabbedFromBarrelGeneric;              // 0xABBC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabbedFromBarrelMartha;               // 0xABC4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabbedFromWardrobeLeftGeneric;        // 0xABCC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabbedFromWardrobeRightGeneric;       // 0xABD4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabbedFromWardrobeLeftGenericShort;   // 0xABDC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabbedFromWardrobeRightGenericShort;  // 0xABE4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAttackedCrawlingFront;                 // 0xABEC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAttackedCrawlingLeft;                  // 0xABF4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAttackedCrawlingRight;                 // 0xABFC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabbedUnderwaterShallowFront;         // 0xAC04 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabbedUnderwaterShallowBack;          // 0xAC0C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabbedUnderwaterDeepFront;            // 0xAC14 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabbedUnderwaterDeepBack;             // 0xAC1C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSlideUnder;                            // 0xAC24 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameBellySlideUnder;                       // 0xAC2C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCrouchUnderwater;                      // 0xAC34 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameUncrouchUnderwater;                    // 0xAC3C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameUncrouchUnderwaterToCrouch;            // 0xAC44 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCrouchUnderShallowWater;               // 0xAC4C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCrouchUnderShallowWaterFromCrouch;     // 0xAC54 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameUncrouchUnderShallowWater;             // 0xAC5C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameUncrouchUnderShallowWaterToCrouch;     // 0xAC64 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSlidingSlopeEntryWalkForward;          // 0xAC6C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSlidingSlopeEntryWalkBackward;         // 0xAC74 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSlidingSlopeEntryRunForward;           // 0xAC7C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSlidingSlopeEntryRunBackward;          // 0xAC84 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSlidingSlopeEntryAirForward;           // 0xAC8C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSlidingSlopeEntryAirBackward;          // 0xAC94 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSlidingSlopeEntryCrouchForward;        // 0xAC9C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSlidingSlopeEntryCrouchBackward;       // 0xACA4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSlidingSlopeEntryCrawlForward;         // 0xACAC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSlidingSlopeEntryCrawlBackward;        // 0xACB4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameRaftCollisionFront;                    // 0xACBC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameRaftCollisionSideRight;                // 0xACC4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameRaftCollisionSideLeft;                 // 0xACCC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameRaftNormalIdle;                        // 0xACD4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameRaftBrokenIdle;                        // 0xACDC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameRaftRockCrash;                         // 0xACE4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePutGlassesOn;                          // 0xACEC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnIdle;                      // 0xACF4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnWalk;                      // 0xACFC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnRun;                       // 0xAD04 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnBackwards;                 // 0xAD0C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnTurning;                   // 0xAD14 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnHurting;                   // 0xAD1C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnWalkStrafeL;               // 0xAD24 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnWalkStrafeR;               // 0xAD2C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnRunStrafeL;                // 0xAD34 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnRunStrafeR;                // 0xAD3C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnIdleCAM;                   // 0xAD44 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnWalkCAM;                   // 0xAD4C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnRunCAM;                    // 0xAD54 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnBackwardsCAM;              // 0xAD5C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnTurningCAM;                // 0xAD64 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnHurtingCAM;                // 0xAD6C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnWalkStrafeLCAM;            // 0xAD74 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnWalkStrafeRCAM;            // 0xAD7C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnRunStrafeLCAM;             // 0xAD84 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnRunStrafeRCAM;             // 0xAD8C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLeadByJessicaIdle;                     // 0xAD94 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLeadByJessicaWalk;                     // 0xAD9C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLeadByJessicaRun;                      // 0xADA4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLeadByLynnIdle;                        // 0xADAC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLeadByLynnWalk;                        // 0xADB4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLeadByLynnRun;                         // 0xADBC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePushingLeftIdle;                       // 0xADC4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePushingLeftPush;                       // 0xADCC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePushingRightIdle;                      // 0xADD4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePushingRightPush;                      // 0xADDC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePushingLowIdle;                        // 0xADE4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePushingLowPush;                        // 0xADEC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePushingLowPull;                        // 0xADF4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePushingBarnIdle;                       // 0xADFC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePushingBarnPush;                       // 0xAE04 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePushingBarnPull;                       // 0xAE0C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePushingLightIdle;                      // 0xAE14 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePushingLightPush;                      // 0xAE1C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePushingLightPull;                      // 0xAE24 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePushingProjectorIdle;                  // 0xAE2C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePushingProjectorPush;                  // 0xAE34 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePushingProjectorPull;                  // 0xAE3C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameRunStumbleSoft;                        // 0xAE44 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameRunStumbleHard;                        // 0xAE4C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameUseBandage;                            // 0xAE54 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameUseBandageForCrucifixion;              // 0xAE5C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameRaiseCamcorderHud;                     // 0xAE64 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLowerCamcorderHud;                     // 0xAE6C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameInventoryNoCamRightArm;                // 0xAE74 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCrawlScrambleFwd;                      // 0xAE7C (0x0008) [0x0000000000000002] (CPF_Const)   
	float                                              ObstacleMinZWalking;                           // 0xAE84 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ObstacleMaxZWalking;                           // 0xAE88 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ObstacleMinZFalling;                           // 0xAE8C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ObstacleMaxZFalling;                           // 0xAE90 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LowJumpOverZ;                                  // 0xAE94 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              MinCosAngleToObstacle;                         // 0xAE98 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              MaxLedgeCosAngle;                              // 0xAE9C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              MinWidthForClimbWalking;                       // 0xAEA0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              MinWidthForClimbRunning;                       // 0xAEA4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              MinWidthForClimbUpWall;                        // 0xAEA8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              MinClearanceForClimb;                          // 0xAEAC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              MinWidthForSlide;                              // 0xAEB0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              MaxWidthForSlide;                              // 0xAEB4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              MinHeightForSlide;                             // 0xAEB8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              MaxHeightForSlide;                             // 0xAEBC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              StepUpAndLandInteractDist;                     // 0xAEC0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              JumpOverInteractDistWalking;                   // 0xAEC4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              JumpOverInteractDistRunning;                   // 0xAEC8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              JumpOverInteractDistFalling;                   // 0xAECC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              JumpOverMinObstacleZ;                          // 0xAED0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              JumpOverExpectedDistWalking;                   // 0xAED4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              JumpOverExpectedHeightWalking;                 // 0xAED8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              JumpOverExpectedDistRunning;                   // 0xAEDC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              JumpOverExpectedHeightRunning;                 // 0xAEE0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              JumpOverAndGrabMaxLedgeWidth;                  // 0xAEE4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              JumpOverAndGrabLedgeInteractDistWalking;       // 0xAEE8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              JumpOverAndGrabLedgeInteractDistRunning;       // 0xAEEC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              JumpOverAndGrabLedgeInteractDistFalling;       // 0xAEF0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              JumpOverAndGrabLedgeExpectedDist;              // 0xAEF4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              JumpOverAndGrabLedgeExpectedHeightFromLedge;   // 0xAEF8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              SlideOverInteractDistMin;                      // 0xAEFC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              SlideOverInteractDistMax;                      // 0xAF00 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              SlideOverExpectedDist;                         // 0xAF04 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              SlideOverExpectedHeight;                       // 0xAF08 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ClimbUpInteractDistWalking;                    // 0xAF0C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ClimbUpInteractDistRunning;                    // 0xAF10 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ClimbUpInteractDistFalling;                    // 0xAF14 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ClimbUpWallInteractHeightMin;                  // 0xAF18 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ClimbUpExpectedDistWalking;                    // 0xAF1C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ClimbUpExpectedHeightWalking;                  // 0xAF20 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ClimbUpExpectedDistRunning;                    // 0xAF24 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ClimbUpExpectedHeightRunning;                  // 0xAF28 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ClimbUpWallExpectedDist;                       // 0xAF2C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ClimbUpWallExpectedHeightMin;                  // 0xAF30 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ClimbUpWallExpectedHeightMax;                  // 0xAF34 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ClimbOverWallExpectedDist;                     // 0xAF38 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ClimbOverWallExpectedHeight;                   // 0xAF3C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ClimbOverWallVeryHighThresholdHeight;          // 0xAF40 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ClimbOverWallVeryHighExpectedDist;             // 0xAF44 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ClimbOverWallVeryHighExpectedHeight;           // 0xAF48 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ClimbUpToCrouchExpectedDist;                   // 0xAF4C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ClimbUpToCrouchExpectedHeight;                 // 0xAF50 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ClimbUpToCrouchMinHeight;                      // 0xAF54 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ClimbUpToCrawlExpectedDist;                    // 0xAF58 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ClimbUpToCrawlExpectedHeight;                  // 0xAF5C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabLedgeInteractDistWalking;                  // 0xAF60 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabLedgeInteractDistRunning;                  // 0xAF64 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabLedgeMinHeightOnGround;                    // 0xAF68 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabLedgeMaxHeightOnGround;                    // 0xAF6C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabLedgeMinFloorClearance;                    // 0xAF70 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabLedgeFromJumpOverMinFloorClearance;        // 0xAF74 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabLedgeMinHeightInAir;                       // 0xAF78 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabLedgeMaxHeightInAir;                       // 0xAF7C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabLedgeInteractDistGoingDownFwd;             // 0xAF80 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabLedgeInteractDistGoingDownBwd;             // 0xAF84 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabLedgeInteractDistBeam;                     // 0xAF88 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabLedgeInteractDistBeamEasy;                 // 0xAF8C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabLedgeMinHeightInAirGoingDown;              // 0xAF90 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabLedgeMaxHeightInAirGoingDown;              // 0xAF94 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabLedgeFromGroundExpectedHeight;             // 0xAF98 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabLedgeFromAirExpectedHeight;                // 0xAF9C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabAndClimbInteractDistFwd;                   // 0xAFA0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabAndClimbInteractDistBwd;                   // 0xAFA4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabAndClimbExpectedDistFwd;                   // 0xAFA8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabAndClimbExpectedDistHeight;                // 0xAFAC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabAndClimbMinHeightFwd;                      // 0xAFB0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabAndClimbMinHeightBwd;                      // 0xAFB4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabAndClimbMaxHeight;                         // 0xAFB8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeHangDistToWall;                           // 0xAFBC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeHangHeightToLedge;                        // 0xAFC0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeHangTransitionInteractDist;               // 0xAFC4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeHangTransitionInsideExpectedDist;         // 0xAFC8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeHangTransitionOutsideExpectedDist;        // 0xAFCC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeHangClimbOverMaxLedgeWidth;               // 0xAFD0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeHangClimbOverMinHeightClearance;          // 0xAFD4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeHangClimbOverFullHeightClearance;         // 0xAFD8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeHangClimbUpMinFwdClearance;               // 0xAFDC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeWalkTransitionInteractDistInside;         // 0xAFE0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeWalkTransitionInteractDistOutside;        // 0xAFE4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeWalkTransitionInteractDistExit;           // 0xAFE8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeWalkEnterExpectedInsidePerpSideDist;      // 0xAFEC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeWalkEnterExpectedOutsidePerpSideDist;     // 0xAFF0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeWalkEnterExpectedInsidePrlSideDist;       // 0xAFF4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeWalkEnterExpectedOutsidePrlSideDist;      // 0xAFF8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeWalkEnterExpectedInsidePerpFwdDist;       // 0xAFFC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeWalkEnterExpectedOutsidePerpFwdDist;      // 0xB000 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeWalkEnterExpectedInsidePrlFwdDist;        // 0xB004 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeWalkEnterExpectedOutsidePrlFwdDist;       // 0xB008 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeWalkEnterExpectedFromBeamFwdDist;         // 0xB00C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeWalkEnterExpectedFromBeamSideDist;        // 0xB010 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeWalkTransitionExpectedDistInside;         // 0xB014 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeWalkTransitionExpectedDistOutside;        // 0xB018 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeWalkDistFromEdge;                         // 0xB01C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeWalkMaxWallDist;                          // 0xB020 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeWalkMinDrop;                              // 0xB024 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              SqueezeInteractDist;                           // 0xB028 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              SqueezeEnterExpectedDistFwd;                   // 0xB02C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              SqueezeExitExpectedDistFwd;                    // 0xB030 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              SqueezeDistFromCenter;                         // 0xB034 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              EnterLockerInteractDistance;                   // 0xB038 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LadderEnterFromGroundInteractDist;             // 0xB03C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LadderEnterFromAboveInteractDist;              // 0xB040 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LadderGrabDist;                                // 0xB044 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LadderEnterFromGroundDeltaZ;                   // 0xB048 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LadderBarSpacing;                              // 0xB04C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LadderRootHeightOffsetFromBar;                 // 0xB050 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LadderEnterFromAboveExpectedDist;              // 0xB054 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LadderDistFwd;                                 // 0xB058 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LadderExitOnTopInteractDist;                   // 0xB05C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LadderExitOnGroundInteractDist;                // 0xB060 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LadderMaxHeightForDrop;                        // 0xB064 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              HeroFatalityExpectedDistNormalFront;           // 0xB068 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              HeroFatalityExpectedDistNormalBack;            // 0xB06C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              HeroFatalityExpectedDistCrawler;               // 0xB070 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              HeroFatalityExpectedDistMarta;                 // 0xB074 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              HeroFatalityExpectedDistInnerDemon;            // 0xB078 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              HeroFatalityExpectedDistNicAndLaird;           // 0xB07C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              HeroFatalityExpectedDistHereticFront;          // 0xB080 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              HeroFatalityExpectedDistHereticBack;           // 0xB084 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PickupObjectExpectedDist;                      // 0xB088 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PickupObjectInteractDistMinHorz;               // 0xB08C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PickupObjectInteractDistMaxHorz;               // 0xB090 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PickupObjectInteractDistMaxHorzCrawling;       // 0xB094 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PickupObjectInteractDistMinVertStanding;       // 0xB098 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PickupObjectInteractDistMaxVertStanding;       // 0xB09C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PickupObjectInteractDistMinVertCrouched;       // 0xB0A0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PickupObjectInteractDistMaxVertCrouched;       // 0xB0A4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PickupObjectInteractDistMinVertCrawling;       // 0xB0A8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PickupObjectInteractDistMaxVertCrawling;       // 0xB0AC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorOpenInteractionDist;                       // 0xB0B0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorOpenCrouchedInteractionDist;               // 0xB0B4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorOpenCrawledInteractionDist;                // 0xB0B8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorOpenExpectedFwdDist;                       // 0xB0BC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorOpenExpectedSideDist;                      // 0xB0C0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorOpenInsideExpectedDistFwd;                 // 0xB0C4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorKnockExpectedFwdDist;                      // 0xB0C8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorRunThroughInteractDist;                    // 0xB0CC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorRunThroughExpectedDist;                    // 0xB0D0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorInteractiveOpenMaxAngle;                   // 0xB0D4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorMaxAngleForInteractiveOpen;                // 0xB0D8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorCloseInteractionDist;                      // 0xB0DC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorCloseCrouchedInteractionDist;              // 0xB0E0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorCloseCrawledInteractionDist;               // 0xB0E4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorCloseExpectedDistFwd;                      // 0xB0E8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WindowOpenInteractionDist;                     // 0xB0EC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WindowCloseInteractionDist;                    // 0xB0F0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LockerOpenStraightExpectedDistSide;            // 0xB0F4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LockerOpenLeftExpectedDistSide;                // 0xB0F8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LockerOpenRightExpectedDistSide;               // 0xB0FC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LockerOpenExpectedDistFwd;                     // 0xB100 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LockerEnterExpectedDistSide;                   // 0xB104 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LockerEnterExpectedDistFwd;                    // 0xB108 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabFromSqueezeExpectedDistanceLeft;           // 0xB10C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabFromSqueezeExpectedDistanceRight;          // 0xB110 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              BedFromCrouchInteractDistance;                 // 0xB114 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              BedSlideInteractDistance;                      // 0xB118 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              BedSlideExpectedSideDist;                      // 0xB11C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              BedSlideExpectedFwdDist;                       // 0xB120 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PushableInteractMinLookCosAngle;               // 0xB124 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PushableExpectedDistFromEdge;                  // 0xB128 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PushableExpectedSideOffset;                    // 0xB12C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PushableExpectedDistFromEdgeLow;               // 0xB130 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PushableExpectedSideOffsetLow;                 // 0xB134 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PushFromLedgeAnimatedExpectedDist;             // 0xB138 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PushFromLedgeAnimatedInteractDist;             // 0xB13C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PushFromLedgeAnimatedMinHeightCrouched;        // 0xB140 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PushFromLedgeAnimatedMinHeightWalking;         // 0xB144 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PushFromLedgeAnimatedMinHeightRunning;         // 0xB148 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PushFromLedgeAnimatedMinHeightCrawled;         // 0xB14C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PushFromLedgeProceduralInteractDist;           // 0xB150 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PeekingEnterInteractDistFromWall;              // 0xB154 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PeekingEnterInteractDistFromEdgeMin;           // 0xB158 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PeekingEnterInteractDistFromEdgeMax;           // 0xB15C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PeekingEnterExpectedDistFromWall;              // 0xB160 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PeekingEnterExpectedDistFromEdgeLeft;          // 0xB164 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PeekingEnterExpectedDistFromEdgeRight;         // 0xB168 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PeekingCrouchedEnterExpectedDistFromWallLeft;  // 0xB16C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PeekingCrouchedEnterExpectedDistFromWallRight; // 0xB170 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PeekingCrouchedEnterExpectedDistFromEdgeLeft;  // 0xB174 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PeekingCrouchedEnterExpectedDistFromEdgeRight; // 0xB178 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              SlideToLedgeExpectedDist;                      // 0xB17C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              SlideToLedgeInteractDist;                      // 0xB180 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WindowOpenExpectedFwdDist;                     // 0xB184 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WindowCloseExpectedFwdDist;                    // 0xB188 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WindowInteractionExpectedDownDist;             // 0xB18C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorLockExpectedFwdDist;                       // 0xB190 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorUnlockExpectedFwdDist;                     // 0xB194 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorLockTargetRadius;                          // 0xB198 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorLockInteractDist;                          // 0xB19C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              EnterBasementInteractDistLow;                  // 0xB1A0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              EnterBasementInteractDistStanding;             // 0xB1A4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              EnterBasementExpectedAnimDist;                 // 0xB1A8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ExitBasementInteractDist;                      // 0xB1AC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ExitBasementExpectedAnimDistZ;                 // 0xB1B0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ExitBasementExpectedAnimDistFwd;               // 0xB1B4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              SlidingSlopeMinZ;                              // 0xB1B8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              SlidingSlopeMaxZ;                              // 0xB1BC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              SlidingSlopeExpectedDistFwd;                   // 0xB1C0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              HidingBarrelRadius;                            // 0xB1C4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              HidingBarrelHeight;                            // 0xB1C8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              HidingBarrelWaterHeight;                       // 0xB1CC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              HidingBarrelAnimSyncDistance;                  // 0xB1D0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              HidingBarrelMaxWalkDistanceForInteraction;     // 0xB1D4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              HidingBarrelMaxRunDistanceForInteraction;      // 0xB1D8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WardrobeInteractionDist;                       // 0xB1DC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WardrobeInsideLeftSideDist;                    // 0xB1E0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WardrobeInsideLeftFwdDist;                     // 0xB1E4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WardrobeInsideRightSideDist;                   // 0xB1E8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WardrobeInsideRightFwdDist;                    // 0xB1EC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              HidingInWaterShallowLimit;                     // 0xB1F0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorPullPeekCameraOffset;                      // 0xB1F4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorPullPeekSoftMinOpenRatio;                  // 0xB1F8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorPullPeekHardMinOpenRatio;                  // 0xB1FC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorPushLeftPeekCameraOffset;                  // 0xB200 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorPushRightPeekCameraOffset;                 // 0xB204 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorPushPeekSoftMinOpenRatio;                  // 0xB208 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorPushPeekHardMinOpenRatio;                  // 0xB20C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorPushPeekCameraBonusYaw;                    // 0xB210 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WardrobeDoorInsideLeftCameraOffset;            // 0xB214 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WardrobeDoorInsideRightCameraOffset;           // 0xB218 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WardrobeDoorPushLeftPeekCameraBonusYaw;        // 0xB21C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WardrobeDoorPushRightPeekCameraBonusYaw;       // 0xB220 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WardrobeDoorPushPeekLeftSoftMinOpenRatio;      // 0xB224 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WardrobeDoorPushPeekLeftHardMinOpenRatio;      // 0xB228 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WardrobeDoorPushPeekRightSoftMinOpenRatio;     // 0xB22C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WardrobeDoorPushPeekRightHardMinOpenRatio;     // 0xB230 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PregnantLynnAnimatedWalkSpeed;                 // 0xB234 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PregnantLynnAnimatedRunSpeed;                  // 0xB238 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PregnantLynnAnimatedStrafeSpeed;               // 0xB23C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LeadingJessicaAnimatedWalkSpeed;               // 0xB240 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LeadingJessicaAnimatedRunSpeed;                // 0xB244 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LeadingLynnAnimatedWalkSpeed;                  // 0xB248 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LeadingLynnAnimatedRunSpeed;                   // 0xB24C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ClimbOnBeamInteractDist;                       // 0xB250 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PregLynnSideOffset;                            // 0xB254 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              MinEyeDistToWall;                              // 0xB258 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ForwardJumpSpeedThreshold;                     // 0xB25C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              MaxGrabLedgeAdjustment;                        // 0xB260 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              MaxSpeedPenaltyPctForInjuries;                 // 0xB264 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              NoLedgeTransitionMinCosAngle;                  // 0xB268 (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     DefaultLeftHandJointTargetRotation;            // 0xB26C (0x000C) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     CornerPeekJointTargetPosLeft;                  // 0xB278 (0x000C) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     CornerPeekJointTargetPosRight;                 // 0xB284 (0x000C) [0x0000000000000002] (CPF_Const)   
	float                                              CrawlFeetDist;                                 // 0xB290 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              MinHidingBarrelPeek;                           // 0xB294 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              UnderwaterPeekDistance;                        // 0xB298 (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FName                                       FirstDirtyCheckpoint;                          // 0xB29C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       HandsCrucifiedCheckpoint;                      // 0xB2A4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       FirstHandsBandagedCheckpoint;                  // 0xB2AC (0x0008) [0x0000000000000002] (CPF_Const)   
	float                                              InteractiveDoorDurationToBeConsideredRead;     // 0xB2B4 (0x0004) [0x0000000000000002] (CPF_Const)   
	class UParticleSystem*                             RemappingBarrelParticle;                       // 0xB2B8 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UParticleSystem*                             RemappedBarrelParticle;                        // 0xB2C0 (0x0008) [0x0000000000000002] (CPF_Const)   
	float                                              FoliageMinimumFrontalDisplacement;             // 0xB2C8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              FoliageForwardSpeedDisplacementModifier;       // 0xB2CC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              FoliageForwardSpeedDisplacementTippingPoint;   // 0xB2D0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              MinSpeedForTrip;                               // 0xB2D4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              TripFallLimpDuration;                          // 0xB2D8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              TripHurtLimpDuration;                          // 0xB2DC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              TripHurtSlowDownDuration;                      // 0xB2E0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              TripHurtSlowDownWalkSpeed;                     // 0xB2E4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              TripHurtSlowDownRunSpeed;                      // 0xB2E8 (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FName                                       RaftSkeletalMeshDefinitionName;                // 0xB2EC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       RaftPaddleStaticMeshDefinitionName;            // 0xB2F4 (0x0008) [0x0000000000000002] (CPF_Const)   
	float                                              DoorPeekingCollisionCheckAdditionalBuffer;     // 0xB2FC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              NormalWalkSpeed;                               // 0xB300 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              NormalRunSpeed;                                // 0xB304 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              StaminaDepletedRunSpeed;                       // 0xB308 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              SprintSpeed;                                   // 0xB30C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              CrouchedSpeed;                                 // 0xB310 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ElectrifiedSpeed;                              // 0xB314 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ShallowWaterWalkSpeed;                         // 0xB318 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ShallowWaterRunSpeed;                          // 0xB31C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              WaterWalkSpeed;                                // 0xB320 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              WaterRunSpeed;                                 // 0xB324 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FoliageWalkSpeed;                              // 0xB328 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FoliageRunSpeed;                               // 0xB32C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              LimpingWalkSpeed;                              // 0xB330 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              HobblingWalkSpeed;                             // 0xB334 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              HobblingRunSpeed;                              // 0xB338 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              BeamWalkSpeed;                                 // 0xB33C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              BeamRunSpeed;                                  // 0xB340 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FreeCrawlSpeed;                                // 0xB344 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ConstrainedCrawlSpeed;                         // 0xB348 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              CrawlChasedSpeed;                              // 0xB34C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              HiddenUnderwaterSpeed;                         // 0xB350 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              YoungBlakeWalkSpeed;                           // 0xB354 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              YoungBlakeRunSpeed;                            // 0xB358 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              CrawlCamcorderSpeedPenalty;                    // 0xB35C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              CrawlCamcorderReloadSpeedPenalty;              // 0xB360 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FreeCrawlBackwardsSlowDown;                    // 0xB364 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ConstrainedCrawlBackwardsSlowDown;             // 0xB368 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              CrawlStrafeSlowDown;                           // 0xB36C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              StairsUpNormalSpeed;                           // 0xB370 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              StairsDownNormalSpeed;                         // 0xB374 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              StairsUpRunSpeed;                              // 0xB378 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              StairsDownRunSpeed;                            // 0xB37C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              SwimmingWalkWithCamcorderSpeed;                // 0xB380 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              SwimmingWalkSpeed;                             // 0xB384 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              SwimmingRunSpeed;                              // 0xB388 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              SwimmingPulseSpeed;                            // 0xB38C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              BleedingRunSpeedMultiplier;                    // 0xB390 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              StartHealtForSlowDown;                         // 0xB394 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              EndHealtForSlowDown;                           // 0xB398 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DrowningSpeed;                                 // 0xB39C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              PairedWalkMovingRotationRate;                  // 0xB3A0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              PairedWalkTurnOnSpotRotationRate;              // 0xB3A4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              PairedWalkBackwardsSlowDown;                   // 0xB3A8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              PairedWalkStrafeSlowDown;                      // 0xB3AC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              CrawlRotationCorrectionRate;                   // 0xB3B0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              LedgeRotationCorrectionRate;                   // 0xB3B4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              SlidingSlopeRotationCorrectionRate;            // 0xB3B8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              SpeedPenaltyBackwards;                         // 0xB3BC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              SpeedPenaltyStrafe;                            // 0xB3C0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ForwardSpeedForJumpWalking;                    // 0xB3C4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ForwardSpeedForJumpRunning;                    // 0xB3C8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ForwardSpeedForJumpOnBeam;                     // 0xB3CC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MaxSpeedPenaltyForUpSlopeRunning;              // 0xB3D0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MaxSpeedGainForDownSlopeRunning;               // 0xB3D4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MaxSpeedPenaltyForUpSlopeWalking;              // 0xB3D8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MaxSpeedGainForDownSlopeWalking;               // 0xB3DC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              JumpClearanceWalking;                          // 0xB3E0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              JumpClearanceRunning;                          // 0xB3E4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              JumpClearanceOnBeam;                           // 0xB3E8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              SmallLandingPenaltyDuration;                   // 0xB3EC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              HardLandingPenaltyDuration;                    // 0xB3F0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              LandingSpeedModifier;                          // 0xB3F4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ElectrifiedJumpDelay;                          // 0xB3F8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ExternalImpulseDecelCoeff;                     // 0xB3FC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ExternalImpulseMinVel;                         // 0xB400 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ExternalImpulseMaxVel;                         // 0xB404 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ExternalImpulseMaxVelCrouched;                 // 0xB408 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ExternalImpulseMaxVelCrawling;                 // 0xB40C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FallSpeedForDamage;                            // 0xB410 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FallSpeedForDeath;                             // 0xB414 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FallDamageExponent;                            // 0xB418 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FallingRotationSlowThreshold;                  // 0xB41C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FallingRotationFastThreshold;                  // 0xB420 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FallingRotationSlowRate;                       // 0xB424 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FallingRotationFastRate;                       // 0xB428 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DarknessThreshold;                             // 0xB42C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MaxStaticLuminance;                            // 0xB430 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MaxDynamicLuminance;                           // 0xB434 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MinSpeedForSlide;                              // 0xB438 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              SlideToCrawlDuration;                          // 0xB43C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              SlideToCrouchDuration;                         // 0xB440 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MinSpeedForSprint;                             // 0xB444 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MaxRotSpeedForSprint;                          // 0xB448 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              UnpenalizedRotSpeedForSprint;                  // 0xB44C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              SprintDelay;                                   // 0xB450 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              LongBreathStopMinRunDuration;                  // 0xB454 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              BaseFOV;                                       // 0xB458 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DefaultFOV;                                    // 0xB45C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              RunningFOV;                                    // 0xB460 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FOVApproachCoeffOpening;                       // 0xB464 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FOVApproachCoeffClosing;                       // 0xB468 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FOVApproachCoeffRun;                           // 0xB46C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FOVApproachCoeffWalk;                          // 0xB470 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              EasyBatteryDurationNV;                         // 0xB474 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              NrmBatteryDurationNV;                          // 0xB478 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              HardBatteryDurationNV;                         // 0xB47C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              EasyBatteryDurationMicrophone;                 // 0xB480 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              NrmBatteryDurationMicrophone;                  // 0xB484 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              HardBatteryDurationMicrophone;                 // 0xB488 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MaxBatteryEnergyForReload;                     // 0xB48C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              InitialBatteryEnergy;                          // 0xB490 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              CamcorderMinFOV;                               // 0xB494 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              CamcorderMaxFOV;                               // 0xB498 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              CamcorderNVMaxFOV;                             // 0xB49C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DarkLightBrightnessEVDefault;                  // 0xB4A0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DarkLightRadiusDefault;                        // 0xB4A4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DarkLightBrightnessEVNoCamcorder;              // 0xB4A8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DarkLightRadiusNoCamcorder;                    // 0xB4AC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DarkLightBrightnessEVBothHandsNeeded;          // 0xB4B0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DarkLightRadiusBothHandsNeeded;                // 0xB4B4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DarkLightBrightnessEVAttacked;                 // 0xB4B8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DarkLightRadiusAttacked;                       // 0xB4BC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DarkLightBrightnessEVFatalitized;              // 0xB4C0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DarkLightRadiusFatalitized;                    // 0xB4C4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DarkLightBrightnessEVParrying;                 // 0xB4C8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DarkLightRadiusParrying;                       // 0xB4CC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DarkLightBrightnessEVCamcorderHud;             // 0xB4D0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DarkLightRadiusCamcorderHud;                   // 0xB4D4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DarkLightBrightnessEVLookAtObject;             // 0xB4D8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DarkLightRadiusLookAtObject;                   // 0xB4DC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DarkLightBrightnessEVUnderwater;               // 0xB4E0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DarkLightRadiusUnderwater;                     // 0xB4E4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DarkLightBrightnessEVBandage;                  // 0xB4E8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DarkLightRadiusBandage;                        // 0xB4EC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DarkLightBrightnessEVInventory;                // 0xB4F0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DarkLightRadiusInventory;                      // 0xB4F4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              NVGlitchTimeThreshold;                         // 0xB4F8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              NVGlitchMaxDelayStart;                         // 0xB4FC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              NVGlitchMaxDelayEnd;                           // 0xB500 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              NVGlitchMinDuration;                           // 0xB504 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              NVGlitchMaxDuration;                           // 0xB508 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              NVGlitchMaxLevel;                              // 0xB50C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              NVGlitchingBaseBrightnessEV;                   // 0xB510 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MicrophoneLowBatteryThreshold;                 // 0xB514 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              HealthRegenRate;                               // 0xB518 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              BandageUsedHealthRegenRate;                    // 0xB51C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              HealthRegenDelay;                              // 0xB520 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              HobbleApproachRate;                            // 0xB524 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ElectricEffectPeriod;                          // 0xB528 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ElectricEffectBase;                            // 0xB52C (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            ElectricEffectMode;                            // 0xB530 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ElectricHurtSoundInterval;                     // 0xB534 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DeathScreenDuration;                           // 0xB538 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              HeatDamageDist;                                // 0xB53C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              HeatDamageInterval;                            // 0xB540 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              HeatDamagePerSec;                              // 0xB544 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              HeatMaxBlurDist;                               // 0xB548 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              HeatMinBlurDist;                               // 0xB54C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              HeatMinBlurAmount;                             // 0xB550 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              HeatBlurApproachCoeffIn;                       // 0xB554 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              HeatBlurApproachCoeffOut;                      // 0xB558 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MinCosAngleForPickup;                          // 0xB55C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              PickupInteractRadius;                          // 0xB560 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              JumpForwardFromLedgeWalkXYSpeed;               // 0xB564 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              JumpForwardFromLedgeWalkZSpeed;                // 0xB568 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DropFromLedgeWalkXYSpeed;                      // 0xB56C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DropFromLedgeWalkZSpeed;                       // 0xB570 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              LookBackCamRotOffset;                          // 0xB574 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              LookBackCamBackOffset;                         // 0xB578 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              LookBackCamSideOffset;                         // 0xB57C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              LeanSpeedThreshold;                            // 0xB580 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              StaminaMaxStamina;                             // 0xB584 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              StaminaMinStaminaForReplenished;               // 0xB588 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              StaminaMaxSpeedForReplenish;                   // 0xB58C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              StaminaReplenishRate;                          // 0xB590 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              StaminaIdleReplenishRate;                      // 0xB594 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              StaminaSwimmingIdleReplenishRate;              // 0xB598 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              StaminaNormalDepleteRate;                      // 0xB59C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              StaminaFoliageDepleteRate;                     // 0xB5A0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              StaminaSwimmingIdleDepleteRate;                // 0xB5A4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              StaminaSwimmingFastDepleteRate;                // 0xB5A8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              StaminaDepletionEffectStart;                   // 0xB5AC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              StaminaEyeFocusDistance;                       // 0xB5B0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              AdrenalineFadeTime;                            // 0xB5B4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              AdrenalineBoostDurationOnHit;                  // 0xB5B8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              JumpStaminaReplenishRate;                      // 0xB5BC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              JumpStaminaUsePerJump;                         // 0xB5C0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              AirMaxAir;                                     // 0xB5C4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              AirReplenishRate;                              // 0xB5C8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              AirDepletionRate;                              // 0xB5CC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              AirSprintDepletionRate;                        // 0xB5D0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              AirSprintMinimumThreshold;                     // 0xB5D4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              AirOutOfAirDamageAmount;                       // 0xB5D8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              AirOutOfAirBubblesDuration;                    // 0xB5DC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              AirOutOfAirDamageThreshold;                    // 0xB5E0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              AirOutOfAirFinalWarningTime;                   // 0xB5E4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              AirOutOfAirBubbleStartTime;                    // 0xB5E8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              AirOutOfAirBubbleDamageStartTime;              // 0xB5EC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              AirOutOfAirBubbleStepTime;                     // 0xB5F0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              AirOutOfAirBubbleStepTimeFinalMin;             // 0xB5F4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              AirOutOfAirBubbleStepTimeFinalMax;             // 0xB5F8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              WaterWaistDeepRotationSpeed;                   // 0xB5FC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              WaterCrawlHeight;                              // 0xB600 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              WaterNormalWalkHeight;                         // 0xB604 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              WaterWaistWalkHeight;                          // 0xB608 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              WaterStartSlowdownWalkingDepth;                // 0xB60C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              WaterMaxWalkingDepth;                          // 0xB610 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              NumFootstepsForFullLoudness;                   // 0xB614 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              RunDurationForFullLoudness;                    // 0xB618 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              WalkingLoudness;                               // 0xB61C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              CrouchLoudness;                                // 0xB620 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              RunningLoudness;                               // 0xB624 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              CrawlingLoudness;                              // 0xB628 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              WalkingWaterLoudness;                          // 0xB62C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              CrouchWaterLoudness;                           // 0xB630 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              HobblingWalkLoudness;                          // 0xB634 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              HobblingRunLoudness;                           // 0xB638 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              LandingBigLoudness;                            // 0xB63C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              LandingSmallLoudness;                          // 0xB640 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              LandingBigWaterLoudness;                       // 0xB644 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              LandingSmallWaterLoudness;                     // 0xB648 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DoorOpenInstantLoudness;                       // 0xB64C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DoorOpenPartialLoudness;                       // 0xB650 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DoorCloseFastLoudness;                         // 0xB654 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DoorEnterLockerLoudness;                       // 0xB658 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DoorExitLockerLoudness;                        // 0xB65C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DoorRunThroughLoudness;                        // 0xB660 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DoorUnlockLoudness;                            // 0xB664 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DoorLockLoudness;                              // 0xB668 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              WindowOpenLoudness;                            // 0xB66C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              WindowCloseLoudness;                           // 0xB670 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              TripDamageLoudness;                            // 0xB674 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              TrippingLoudness;                              // 0xB678 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              EnterBarrelLoudness;                           // 0xB67C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ExitBarrelLoudness;                            // 0xB680 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              EnterWardrobeLoudness;                         // 0xB684 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ExitWardrobeLoudness;                          // 0xB688 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ExitSlidingSlopeLoudness;                      // 0xB68C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DoorChimesLoudness;                            // 0xB690 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              NumCamcorderBeepsForFullLoudness;              // 0xB694 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              LowBatteryLoudness;                            // 0xB698 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              PlayerSpeedRTPCApproachUp;                     // 0xB69C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              PlayerSpeedRTPCApproachDown;                   // 0xB6A0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              StairsUpPitchChange;                           // 0xB6A4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              StairsDownPitchChange;                         // 0xB6A8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              BeamPitchChange;                               // 0xB6AC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MaxProceduralCrawlRoll;                        // 0xB6B0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MinAngleForPitchChange;                        // 0xB6B4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MaxAngleForPitchChange;                        // 0xB6B8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MinPitchAdjustment;                            // 0xB6BC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MaxPitchAdjustment;                            // 0xB6C0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              SlidingSlopeDefaultSpeed;                      // 0xB6C4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MinimumRowingForceRatio;                       // 0xB6C8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              BaseRowingSpeed;                               // 0xB6CC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FastRowingSpeed;                               // 0xB6D0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              BaseRowingTurningSpeed;                        // 0xB6D4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              RowingTurnInputNoRealignDelay;                 // 0xB6D8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              BaseRiverRowingTurningSpeed;                   // 0xB6DC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FastRiverRowingTurningSpeed;                   // 0xB6E0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              BaseRowingBackSpeed;                           // 0xB6E4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FastRowingBackSpeed;                           // 0xB6E8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              RowingInducedRotationRatio;                    // 0xB6EC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MaxRaftActualVelocityToDesiredVelocityRotationSpeed;// 0xB6F0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MinRaftOrientationToVelocityRotationSpeed;     // 0xB6F4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MaxRaftOrientationToVelocityRotationSpeed;     // 0xB6F8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MaxRiverDirectionFreeRange;                    // 0xB6FC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              RiverDrowningDelay;                            // 0xB700 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              RiverDrowningRecenterSpeed;                    // 0xB704 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              RaftSpeedForFastAnim;                          // 0xB708 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              AnimatedRaftRatioToBaseRaftAngle;              // 0xB70C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              AnimatedRaftRatioToBaseRaftOffset;             // 0xB710 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              AnimatedRaftSpeedToAnimationValueFactor;       // 0xB714 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              AnimatedRaftSpeedToAnimationTimeFactor;        // 0xB718 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              RaftVelocityForLightImpact;                    // 0xB71C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              RaftVelocityForMediumImpact;                   // 0xB720 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              RaftVelocityForHardImpact;                     // 0xB724 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              RaftCollisionScrapingDistance;                 // 0xB728 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              GlassesOffBlurAmount;                          // 0xB72C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              LedgeHangPeekMaxDuration;                      // 0xB730 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              LedgeHangPeekRestDuration;                     // 0xB734 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              LedgeHandPeekOutEffortTrigger;                 // 0xB738 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              LedgeHandPeekOutEffortTriggerReset;            // 0xB73C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              LedgeHandPeekInEffortTrigger;                  // 0xB740 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              LedgeHandPeekInEffortTriggerReset;             // 0xB744 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              WaterDepthToSwimming;                          // 0xB748 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              WaterDepthToWalking;                           // 0xB74C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              SwimmingSurfaceDepth;                          // 0xB750 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              SwimmingDrowningDepth;                         // 0xB754 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              SwimmingDrowningStaminaStart;                  // 0xB758 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              SwimmingDrowningStaminaEnd;                    // 0xB75C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              PairedWalkPregLynnRunningMeterRate;            // 0xB760 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              PairedWalkPregLynnWalkingMeterRate;            // 0xB764 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              PairedWalkPregLynnIdleMeterRate;               // 0xB768 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              PairedWalkPregLynnHurtDurationMin;             // 0xB76C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              PairedWalkPregLynnHurtDurationMax;             // 0xB770 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              PairedWalkPregLynnLimitedWalkRampDuration;     // 0xB774 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MinFallHeightForDamage;                        // 0xB778 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MaxFallHeightForDamage;                        // 0xB77C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MaxFallHeightForWaterDeath;                    // 0xB780 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FallHeightForBigLandingCrawled;                // 0xB784 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FallHeightForBigLanding;                       // 0xB788 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FallHeightForSmallLanding;                     // 0xB78C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FallHeightForSpeedPenalty;                     // 0xB790 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FallHeightForStumble;                          // 0xB794 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FallHeightForHardStumble;                      // 0xB798 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FallHorDistanceForHardStumble;                 // 0xB79C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              SpeedMinForStumble;                            // 0xB7A0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              UnderwaterMovementMaxHeadBobbing;              // 0xB7A4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              UnderwaterZOffset;                             // 0xB7A8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DeathGripMouseInputCooldownRateFast;           // 0xB7AC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DeathGripMouseInputCooldownRateSlow;           // 0xB7B0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DeathGripMouseInputCooldownThresh;             // 0xB7B4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DeathGripGamepadFastDurationThresh;            // 0xB7B8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DeathGripGamepadSlowDurationThresh;            // 0xB7BC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DeathGripMouseFastDurationThresh;              // 0xB7C0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DeathGripMouseSlowDurationThresh;              // 0xB7C4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              CamcorderHudFOV;                               // 0xB7C8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              BleedingHealthLossPerSeconds;                  // 0xB7CC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MaxHealthForBleeding;                          // 0xB7D0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MaxHealthForBleedingWithBlade;                 // 0xB7D4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ChancesOfBleeding;                             // 0xB7D8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MinBleedEffectRatio;                           // 0xB7DC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FullBleedEffectRatio;                          // 0xB7E0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              BandageVisibleDuration;                        // 0xB7E4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              BandageMinVisibleDurationOnceSeen;             // 0xB7E8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ValidLookBackStateTimerForTutorial;            // 0xB7EC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DistanceToInnerDemonForAmbiance;               // 0xB7F0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DurationOfAutoOpenRecording;                   // 0xB7F4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              BandageUsedBleedingInvincibilityDuration;      // 0xB7F8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              LadderCamSpringStiffness;                      // 0xB7FC (0x0004) [0x0000000000004000] (CPF_Config)  

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLHero");
		}

		return uClassPointer;
	};

	void eventUnTouch(class AActor* Other);
	void eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal);
	void NativeUnTouch(class AActor* Other);
	void NativeTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal);
	bool IsInMainMenu();
	void UpdateDifficultyBasedValues();
	bool HandleTeleport(TArray<class UObject*> DestList, bool bUpdateRotation, bool bCheckOverlap, float optionalTeleportDistance, TArray<class AVolume*> optionalTeleportVolumes, int32_t optionalPreferredDestIndex);
	void eventOutsideWorldBounds();
	void eventFellOutOfWorld(class UClass* dmgType);
	void MakeFootstepNoise(int32_t footIndex);
	void SetMeshVisibility(bool bVisible);
	void eventEndViewTarget(class APlayerController* PC);
	void eventBecomeViewTarget(class APlayerController* PC);
	void PlayLanded(struct FVector landingLocation, float ImpactVel);
	void NativePlayLanded(struct FVector landingLocation, float ImpactVel);
	void TakeFallingDamage(struct FVector fallLocation);
	bool eventHealDamage(int32_t Amount, class AController* Healer, class UClass* DamageType);
	void eventTakeDamage(int32_t Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo optionalHitInfo, class AActor* optionalDamageCauser);
	void DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos);
	void eventPostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void NativeInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void PossessedBy(class AController* C, bool bVehicleTransition);
	void RefreshInventory();
	void SetHeroWalkableFloor(float Angle);
	void TryForceEnterRaft(bool optionalIgnoreAssertIfUnsucessful);
	void OverrideRaftAttachmentMode(bool bManuallyControlled);
	void AllowRiverMovement();
	void DisallowRiverMovement(bool bClearVelocity);
	void QuickHeroTest();
	bool CanBeGrabbedUnder();
	bool CanBeFatalitized();
	bool CanBeAttacked();
	void BarrelEntryNotify();
	void LandingMaybeStayCrouched();
	void EndOfHandWatchingNotify();
	void HandContactNotify();
	void InventoryToggleNotify();
	void BodyBandageHideAllIfNotVisibleNotify();
	void BodyBandageHideAllNotify();
	void BodyBandageStepNotify();
	void ShowPickupNotify();
	void HidePickupNotify();
	void BandageDetachNotify();
	void BandageAttachNotify();
	void CSAActivationNotify();
	void BarrelCoverDetachNotify();
	void BarrelCoverAttachNotify();
	void GlassesPickedUpNotify();
	void PutBackGlassesNotify();
	void LoseGlassesNotify();
	void PostRaftBrokenNotify();
	void RaftDetachNotify();
	void RaftAttachNotify();
	void ExitingWaterNotify();
	void EnteringWaterNotify();
	void SlideUnderCommitStanceNotify();
	void HideCamcorderNotify();
	void SetCamcorderVisibleNotify();
	void ResetNeckOffsetNotify();
	void DecapitatedNotify();
	void GroinInjuryNotify();
	void DieNotify();
	void OverrideCameraSettingsNotify(class UOLAnimNotify_OverrideCameraParams* camParamsNotify);
	void BandageUsedNotify();
	void BatteriesReloadedNotify();
	void CamcorderLoweredNotify();
	void CamcorderRaisedNotify();
	void CamcorderAvailableNotify();
	void WardrobeDoorEndNotify();
	void WardrobeDoorNotify();
	void BarrelInteractionEndNotify();
	void BarrelInteractionNotify();
	void BasementWindowEndNotify();
	void BasementWindowNotify();
	void WindowAnimEndNotify();
	void WindowAnimStartNotify();
	void TryInteractDoorOpen();
	void DoorAnimNotify();
	void DropNotify();
	void PickupNotify();
	bool TryGrabFromUnder(class AOLEnemyPawn* Attacker, struct FVector StartLocation, struct FVector AttackStartLocation);
	bool TryGrabFromBed(class AOLEnemyPawn* Attacker);
	bool TryGrabFromLocker(class AOLEnemyPawn* Attacker);
	void ExitCinematicMode(class USeqAct_ToggleCinematicMode* seqAction);
	void EnterCinematicMode(class USeqAct_ToggleCinematicMode* seqAction);
	void StartSpecialMove(ESpecialMoveType moveType, struct FVector optionalTargetPosition, struct FVector optionalTargetDirection, EAdjustPositionTargetType optionalTargetType);
	void RespawnHero();
	void OnPossess();
	void ConditionalMakeDoorChimesNoise(class AOLDoorChimes* DoorChimes);
	void TakeKnockbackDamage(int32_t Damage, class AActor* InstigatedBy, float Knockback, struct FVector HitNormal);
	void TakeElectricDamage(int32_t Damage, float Knockback, struct FVector HitNormal, class UAkEvent* ElectricSoundEvent);
	void NativeTakeFallingDamage(struct FVector fallLocation);
	void NativeTakeDamage(int32_t Damage, class AActor* InstigatedBy, EDamageType DamageType, struct FVector optionalOverrideDamageDirection, bool optionalBNonFatal);
	void NativeDisplayDebug(class UCanvas* Canvas, float& out_YL, float& out_YPos);
	void GetCamera(struct FVector& out_CamLoc, struct FRotator& out_CamRot, float& out_FOV);
	void NativeOnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void NativePostBeginPlay();
	void NativeDestroyed();
	void HandleSeamlessTeleport();
	void ResetAfterTeleport();
	bool IsSprinting();
	bool IsRunning();
	bool TryRun();
	void Walk();
	struct FRotator eventGetViewRotation();
	struct FVector GetPawnViewLocation();
};

// Class OLGame.OLPickableDocument
// 0x0018 OR 0x0204 (0x0204 - 0x01EC)
// 24 OR 516 (516 - 492)
class UOLPickableDocument : public UGFxMoviePlayer
{
public:
	class UGFxObject*                                  Title;                                         // 0x01EC (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxObject*                                  Text;                                          // 0x01F4 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxObject*                                  PageNumber;                                    // 0x01FC (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLPickableDocument");
		}

		return uClassPointer;
	};

	bool eventRefreshUI();
	bool eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget);
};

// Class OLGame.OLPickableObject
// 0x0058 OR 0x02A0 (0x02A0 - 0x0248)
// 88 OR 672 (672 - 584)
class AOLPickableObject : public AActor
{
public:
	class UStaticMeshComponent*                        PickupMesh;                                    // 0x0248 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UDynamicLightEnvironmentComponent*           PickupLightEnvironment;                        // 0x0250 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	uint32_t                                           bUsed : 1;                                     // 0x0258 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bTakeSnapshot : 1;                             // 0x0258 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bPickupOnNotify : 1;                           // 0x0258 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bDropDownNotify : 1;                           // 0x0258 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bDisabled : 1;                                 // 0x0258 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bSeen : 1;                                     // 0x0258 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	struct FVector                                     AttachPositionOffset;                          // 0x025C (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FRotator                                    AttachRotationOffset;                          // 0x0268 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxHorzPickupDist;                             // 0x0274 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     PickedUpLocation;                              // 0x0278 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FRotator                                    PickedUpRotation;                              // 0x0284 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FLinearColor                                InitialDynamicMaterialData;                    // 0x0290 (0x0010) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLPickableObject");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
};

// Class OLGame.OLBandagesPickupFactory
// 0x0000 OR 0x02A0 (0x02A0 - 0x02A0)
// 0 OR 672 (672 - 672)
class AOLBandagesPickupFactory : public AOLPickableObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBandagesPickupFactory");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBatteriesPickupFactory
// 0x0024 OR 0x02C4 (0x02C4 - 0x02A0)
// 36 OR 708 (708 - 672)
class AOLBatteriesPickupFactory : public AOLPickableObject
{
public:
	int32_t                                            NumBatteries;                                  // 0x02A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UStaticMesh*                                 Mesh1;                                         // 0x02A4 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UStaticMesh*                                 Mesh2;                                         // 0x02AC (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UStaticMesh*                                 Mesh3;                                         // 0x02B4 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UStaticMesh*                                 Mesh4;                                         // 0x02BC (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBatteriesPickupFactory");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLCollectiblePickup
// 0x0040 OR 0x02E0 (0x02E0 - 0x02A0)
// 64 OR 736 (736 - 672)
class AOLCollectiblePickup : public AOLPickableObject
{
public:
	struct FName                                       CollectibleName;                               // 0x02A0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	ECollectibleType                                   CollectibleType;                               // 0x02A8 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EPickupNightVisionState                            PickupNightVisionState;                        // 0x02A9 (0x0001) [0x0000000000000001] (CPF_Edit)    
	TArray<class UMaterialInstance*>                   MaterialOverrides;                             // 0x02AC (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bIsGameplayItem : 1;                           // 0x02BC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bNoRecording : 1;                              // 0x02BC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bOnlyPickupOnce : 1;                           // 0x02BC (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bReactionOnPutDown : 1;                        // 0x02BC (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bOverrideDarkLigthValue : 1;                   // 0x02BC (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	class UAkEvent*                                    GameplayPickupSound;                           // 0x02C0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    OverrideSndReactionOnPutDown;                  // 0x02C8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              OverriddenDarkLigthBrightnessEV;               // 0x02D0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OverriddenDarkLigthRadius;                     // 0x02D4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class USwfMovie*                                   MovieInfo;                                     // 0x02D8 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLCollectiblePickup");
		}

		return uClassPointer;
	};

	void PostBeginPlay();
	bool ShouldShowCollectible();
};

// Class OLGame.OLGameplayItemPickup
// 0x0020 OR 0x02C0 (0x02C0 - 0x02A0)
// 32 OR 704 (704 - 672)
class AOLGameplayItemPickup : public AOLPickableObject
{
public:
	struct FName                                       ItemName;                                      // 0x02A0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	TArray<struct FGameFlowRulePickup>                 GameFlowRules;                                 // 0x02A8 (0x0010) [0x0000000000600001] (CPF_Edit | CPF_NeedCtorLink)
	class UAkEvent*                                    PickupSound;                                   // 0x02B8 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLGameplayItemPickup");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLPlayerInput
// 0x00B1 OR 0x0629 (0x0629 - 0x0578)
// 177 OR 1577 (1577 - 1400)
class UOLPlayerInput : public UUDKPlayerInput
{
public:
	TArray<struct FKeyBind>                            GPBindingsA;                                   // 0x0578 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	TArray<struct FKeyBind>                            GPBindingsB;                                   // 0x0588 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	TArray<struct FKeyBind>                            GPBindingsC;                                   // 0x0598 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	TArray<struct FKeyBind>                            GPBindingsD;                                   // 0x05A8 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	TArray<struct FKeyBind>                            GPBindingsE;                                   // 0x05B8 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class FString                                      StrafeCommand;                                 // 0x05C8 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class FString                                      MoveCommand;                                   // 0x05D8 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class FString                                      LookXCommand;                                  // 0x05E8 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class FString                                      LookYCommand;                                  // 0x05F8 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class FString                                      SouthpawMoveCommand;                           // 0x0608 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class FString                                      SouthpawLookYCommand;                          // 0x0618 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	EGamepadBindingsType                               GamepadConfig;                                 // 0x0628 (0x0001) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLPlayerInput");
		}

		return uClassPointer;
	};

	bool IsKeyPressed(struct FName Key);
	void eventUnBindNoSave(class FString Command);
	void PreProcessInput(float DeltaTime);
	void StopLeanRight();
	void StopLeanLeft();
	void StartLeanRight();
	void StartLeanLeft();
	void StopRun();
	void ChangeCamCorderHudDisplay();
	void NativeChangeCamCorderHudDisplay();
	void StartRun();
	void StartRunNative();
	void ToggleDuck();
	void UnDuck();
	void Duck();
	void ResetInput();
};

// Class OLGame.OLProfileSettings
// 0x0000 OR 0x00CC (0x00CC - 0x00CC)
// 0 OR 204 (204 - 204)
class UOLProfileSettings : public UUDKProfileSettings
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLProfileSettings");
		}

		return uClassPointer;
	};

	void AutoDetectPerformanceSettings();
	void MatchMonitorResolution(bool bLimitForPerformance);
	void SetLanguageFromSteam();
	void eventSetToDefaults();
	bool GetProfileSettingResolutions(int32_t ProfileSettingId, TArray<struct FName>& ResolutionNames, TArray<struct FIntPoint>& Resolutions);
	bool GetProfileSettingValues(int32_t ProfileSettingId, TArray<struct FName>& Values);
	float GetGammaSetting();
};

// Class OLGame.OLPushableObject
// 0x0284 OR 0x04CC (0x04CC - 0x0248)
// 644 OR 1228 (1228 - 584)
class AOLPushableObject : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObstacle;        // 0x0248 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	uint32_t                                           bLastForceRBUpdate : 1;                        // 0x0250 (0x0004) [0x0000000000002000] [0xFFFFFFFF80000000] (CPF_Transient)
	uint32_t                                           bEnabled : 1;                                  // 0x0250 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bAutoBuildCenter : 1;                          // 0x0250 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bCanPushBack : 1;                              // 0x0250 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bCanPullBack : 1;                              // 0x0250 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bCanPushFwd : 1;                               // 0x0250 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bCanPullFwd : 1;                               // 0x0250 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bCanPushRight : 1;                             // 0x0250 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bCanPullRight : 1;                             // 0x0250 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bCanPushLeft : 1;                              // 0x0250 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bCanPullLeft : 1;                              // 0x0250 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bConstantMovementSpeed : 1;                    // 0x0250 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bAutoReset : 1;                                // 0x0250 (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	uint32_t                                           bNoResetWhenMaxReached : 1;                    // 0x0250 (0x0004) [0x0000000000000001] [0x00001000] (CPF_Edit)
	uint32_t                                           bDamageStopsPushing : 1;                       // 0x0250 (0x0004) [0x0000000000000001] [0x00002000] (CPF_Edit)
	uint32_t                                           bOverrideDefaultCameraOrientation : 1;         // 0x0250 (0x0004) [0x0000000000000001] [0x00004000] (CPF_Edit)
	uint32_t                                           bCustomInteraction : 1;                        // 0x0250 (0x0004) [0x0000000000000001] [0x00008000] (CPF_Edit)
	uint32_t                                           bOverrideSoundMaterial : 1;                    // 0x0250 (0x0004) [0x0000000000000000] [0x00010000] 
	uint32_t                                           bApplyRulesLive : 1;                           // 0x0250 (0x0004) [0x0000000000200001] [0x00020000] (CPF_Edit)
	uint32_t                                           bNoSavedState : 1;                             // 0x0250 (0x0004) [0x0000000000200001] [0x00040000] (CPF_Edit)
	uint32_t                                           bInitiallyEnabled : 1;                         // 0x0250 (0x0004) [0x0000000000002000] [0x00080000] (CPF_Transient)
	uint32_t                                           bPhysicsActive : 1;                            // 0x0250 (0x0004) [0x0000000000002000] [0x00100000] (CPF_Transient)
	uint32_t                                           bPlayerLocked : 1;                             // 0x0250 (0x0004) [0x0000000000002000] [0x00200000] (CPF_Transient)
	uint32_t                                           bPushActive : 1;                               // 0x0250 (0x0004) [0x0000000000002000] [0x00400000] (CPF_Transient)
	uint32_t                                           bPushSoundActive : 1;                          // 0x0250 (0x0004) [0x0000000000002000] [0x00800000] (CPF_Transient)
	uint32_t                                           bPushing : 1;                                  // 0x0250 (0x0004) [0x0000000000002000] [0x01000000] (CPF_Transient)
	uint32_t                                           bNoDecel : 1;                                  // 0x0250 (0x0004) [0x0000000000002000] [0x02000000] (CPF_Transient)
	uint32_t                                           bNoActivatePhysics : 1;                        // 0x0250 (0x0004) [0x0000000000002000] [0x04000000] (CPF_Transient)
	uint32_t                                           bProgressiveReset : 1;                         // 0x0250 (0x0004) [0x0000000000002000] [0x08000000] (CPF_Transient)
	uint32_t                                           bAlignmentInitialized : 1;                     // 0x0250 (0x0004) [0x0000000000002000] [0x10000000] (CPF_Transient)
	uint32_t                                           bOnSpline : 1;                                 // 0x0250 (0x0004) [0x0000000000002000] [0x20000000] (CPF_Transient)
	uint32_t                                           bSplineDescInitialized : 1;                    // 0x0250 (0x0004) [0x0000000000202000] [0x40000000] (CPF_Transient)
	float                                              InteractDist;                                  // 0x0254 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ContactHeight;                                 // 0x0258 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     CenterOffset;                                  // 0x025C (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              Width;                                         // 0x0268 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Depth;                                         // 0x026C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxBackDist;                                   // 0x0270 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxFwdDist;                                    // 0x0274 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxRightDist;                                  // 0x0278 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxLeftDist;                                   // 0x027C (0x0004) [0x0000000000000001] (CPF_Edit)    
	EPushObjectType                                    ForwardPushType;                               // 0x0280 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EPushObjectType                                    BackwardPushType;                              // 0x0281 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EPushObjectType                                    RightwardPushType;                             // 0x0282 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EPushObjectType                                    LeftwardPushType;                              // 0x0283 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EPushableMaterial                                  PushableType;                                  // 0x0284 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EPushSideType                                      CustomInteractionPushSide;                     // 0x0285 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EPushableMaterial                                  OverrideSoundMaterial;                         // 0x0286 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EPushSideType                                      ActionSide;                                    // 0x0287 (0x0001) [0x0000000000002000] (CPF_Transient)
	class AOLDoor*                                     LinkedDoor;                                    // 0x0288 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class AOLPushableSplineMarker*                     LinkedSpline;                                  // 0x0290 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              SplineInitialDisplacement;                     // 0x0298 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DesiredSpeed;                                  // 0x029C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              MaxSpeed;                                      // 0x02A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxSideSpeed;                                  // 0x02A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ResetSpeed;                                    // 0x02A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DefaultCameraOrientation;                      // 0x02AC (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     LastUncollidedPosition;                        // 0x02B0 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     LastUncollidedDisplacement;                    // 0x02BC (0x000C) [0x0000000000002000] (CPF_Transient)
	TArray<struct FAlignmentData>                      Alignments;                                    // 0x02C8 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	struct FName                                       PushablePromptNameId;                          // 0x02D8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       PushablePromptNameGamepadId;                   // 0x02E0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     CustomInteractionLocation;                     // 0x02E8 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     CustomInteractionDirection;                    // 0x02F4 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     AnimationOffset;                               // 0x0300 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              AnimationYawRotationOffset;                    // 0x030C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FPushablePhysicsConfig                      SplinePhysics;                                 // 0x0310 (0x000C) [0x0000000000000001] (CPF_Edit)    
	class UStaticMeshComponent*                        Mesh;                                          // 0x031C (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class USkeletalMeshComponent*                      SkelMesh;                                      // 0x0324 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class USkeletalMeshComponent*                      MineCartWheels;                                // 0x032C (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                              // 0x0334 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class AOLPushableObject*                           LinkedPushable;                                // 0x033C (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              ExtraNavmeshSpacing;                           // 0x0344 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FGuid                                       StateGUID;                                     // 0x0348 (0x0010) [0x0000000000220002] (CPF_Const | CPF_EditConst)
	TArray<struct FGameFlowPushableRule>               GameFlowRules;                                 // 0x0358 (0x0010) [0x0000000000600001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              PushActiveStartTimestamp;                      // 0x0368 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     CurrentDisplacement;                           // 0x036C (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     CurrentVelocity;                               // 0x0378 (0x000C) [0x0000000000002000] (CPF_Transient)
	float                                              CurrentPhase;                                  // 0x0384 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LastPlayerDamageTime;                          // 0x0388 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     BaseLocation;                                  // 0x038C (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     LastNavmeshLocation;                           // 0x0398 (0x000C) [0x0000000000002000] (CPF_Transient)
	float                                              PushModulatorValue;                            // 0x03A4 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TempMaxBackDist;                               // 0x03A8 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TempMaxFwdDist;                                // 0x03AC (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              ProgressiveResetSpeed;                         // 0x03B0 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              ProgressiveResetOriginalX;                     // 0x03B4 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              ProgressiveResetStartTime;                     // 0x03B8 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              DesiredZ;                                      // 0x03BC (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FRotator                                    DesiredRotation;                               // 0x03C0 (0x000C) [0x0000000000002000] (CPF_Transient)
	float                                              BlockableHitSoundTimestamp;                    // 0x03CC (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FSplinePositionDescriptor                   BaseSplinePosDesc;                             // 0x03D0 (0x0010) [0x0000000000202000] (CPF_Transient)
	class AOLPushableSplineMarker*                     InitialLinkedSpline;                           // 0x03E0 (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              InitialLinkedSplineDisplacement;               // 0x03E8 (0x0004) [0x0000000000002000] (CPF_Transient)
	class AOLPushableObject*                           OldLinkedPushable;                             // 0x03EC (0x0008) [0x0000000000002000] (CPF_Transient)
	TArray<struct FPushableAttachmentData>             PushableAttachments;                           // 0x03F4 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              AccelApproachCoeff;                            // 0x0404 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DecelApproachCoeff;                            // 0x0408 (0x0004) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndStartPushing;                               // 0x040C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndStopPushing;                                // 0x0414 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndMineCartStart;                              // 0x041C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndMineCartStop;                               // 0x0424 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndPushableHitBlocking;                        // 0x042C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UAkEvent*                                    SndPlayerHitBlocking;                          // 0x0434 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       RTPCPushingSpeed;                              // 0x043C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       RTPCMineCartSpeed;                             // 0x0444 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       SwitchPushableType;                            // 0x044C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       SwitchPushableTypeMetal;                       // 0x0454 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       SwitchPushableTypeWood;                        // 0x045C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       SwitchPushableTypeWoodenCart;                  // 0x0464 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       SwitchPushableTypeBarnDoor;                    // 0x046C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       SwitchPushableTypeRollingCart;                 // 0x0474 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       SwitchPushableTypeBigBucket;                   // 0x047C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UStaticMesh*                                 MineCartMesh;                                  // 0x0484 (0x0008) [0x0000000000000002] (CPF_Const)   
	class USkeletalMesh*                               WoodenCartMesh;                                // 0x048C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UStaticMesh*                                 BarnDoorMesh;                                  // 0x0494 (0x0008) [0x0000000000000002] (CPF_Const)   
	TArray<struct FAlignmentData>                      WoodenCartAlignment;                           // 0x049C (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class UStaticMesh*                                 RollingCartMesh;                               // 0x04AC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       BonePivot1Name;                                // 0x04B4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       BonePivot2Name;                                // 0x04BC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       LinkedPushablePropertyName;                    // 0x04C4 (0x0008) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLPushableObject");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
	void OnTeleport(class USeqAct_Teleport* Action);
	void PostOnTeleport();
	void PreOnTeleport();
};

// Class OLGame.OLRecordingUtils
// 0x0000 OR 0x0068 (0x0068 - 0x0068)
// 0 OR 104 (104 - 104)
class UOLRecordingUtils : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLRecordingUtils");
		}

		return uClassPointer;
	};

	static void ShowCleanText(uint8_t Type, int32_t Index, int32_t SortingType);
	static void CleanMemory();
	static void ConditionalResetMovieOverrideDuration(uint8_t Type, int32_t Index, int32_t SortingType, TArray<class UTexture*>& Textures);
	static bool HasMovieEnded();
	static void StopMovieTexture(bool bPause, class UAkEvent* loopStop, TArray<class UTexture*>& Textures);
	static void PlayMovieTexture(class UAkEvent* LoopStart, TArray<class UTexture*>& Textures);
	static void ResizeFullSizeImage(class UGFxMoviePlayer* menu, uint8_t Type, int32_t Index, int32_t SortingType, TArray<class UTexture*>& Textures);
	static void PlayMovieVO(class UAkEvent* VO);
	static void StopMovieVO(class UAkEvent* VO);
	static class UAkEvent* LoadMovieLoopStop(uint8_t Type, int32_t Index, int32_t SortingType);
	static class UAkEvent* LoadMovieLoopStart(uint8_t Type, int32_t Index, int32_t SortingType);
	static class UAkEvent* LoadMovieVO(uint8_t Type, int32_t Index, int32_t SortingType);
	static class UTexture* GetFullSizeRecordingTexture(uint8_t Type, int32_t Index, int32_t SortingType, TArray<class UTexture*>& Textures);
	static class UTexture* GetRecordingTexture(uint8_t Type, int32_t Index, int32_t SortingType);
	static class UTexture* GetCategoryTexture(uint8_t Type, int32_t SortingType);
	static TArray<class FString> GetRecordings(uint8_t Type, int32_t Section);
	static TArray<class FString> GetRecordingSections(uint8_t Type);
	static class FString GetPathName(class UObject* Obj);
	static bool HasRecordings();
	static bool IsVideoRecording(uint8_t Type, int32_t Index, int32_t SortingType);
};

// Class OLGame.OLSeqAct_ActivateGameState
// 0x000C OR 0x0164 (0x0164 - 0x0158)
// 12 OR 356 (356 - 344)
class UOLSeqAct_ActivateGameState : public USequenceAction
{
public:
	struct FName                                       GameStateName;                                 // 0x0158 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bStatusIsOk : 1;                               // 0x0160 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_ActivateGameState");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AIDestroy
// 0x0014 OR 0x016C (0x016C - 0x0158)
// 20 OR 364 (364 - 344)
class UOLSeqAct_AIDestroy : public USequenceAction
{
public:
	uint32_t                                           bKillEveryone : 1;                             // 0x0158 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	TArray<class UOLBotCondition*>                     Conditions;                                    // 0x015C (0x0010) [0x0000000004400009] (CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIDestroy");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AISpawn
// 0x0020 OR 0x01EC (0x01EC - 0x01CC)
// 32 OR 492 (492 - 460)
class UOLSeqAct_AISpawn : public USeqAct_ActorFactory
{
public:
	class AActor*                                      SpawnPoint;                                    // 0x01CC (0x0008) [0x0000000000000000]               
	float                                              SuccessReadyTime;                              // 0x01D4 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bSpawnSuccess : 1;                             // 0x01D8 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bSpawnFailure : 1;                             // 0x01D8 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bCommentsUpToDate : 1;                         // 0x01D8 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	TArray<class FString>                              MultiLineComments;                             // 0x01DC (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AISpawn");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_ChangeDynamicDifficulty
// 0x0008 OR 0x0160 (0x0160 - 0x0158)
// 8 OR 352 (352 - 344)
class UOLSeqAct_ChangeDynamicDifficulty : public USequenceAction
{
public:
	EDynamicDifficultyIncreaseType                     DifficultyChange;                              // 0x0158 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EDifficultyModeModifier                            ForcedDifficultyModifier;                      // 0x0159 (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bForceToDifficultyModifier : 1;                // 0x015C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_ChangeDynamicDifficulty");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_Checkpoint
// 0x000C OR 0x0164 (0x0164 - 0x0158)
// 12 OR 356 (356 - 344)
class UOLSeqAct_Checkpoint : public USequenceAction
{
public:
	struct FName                                       CheckpointName;                                // 0x0158 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bStatusIsOk : 1;                               // 0x0160 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_Checkpoint");
		}

		return uClassPointer;
	};

	void eventActivated();
};

// Class OLGame.OLSeqAct_SelectByDeathCount
// 0x0005 OR 0x015D (0x015D - 0x0158)
// 5 OR 349 (349 - 344)
class UOLSeqAct_SelectByDeathCount : public USequenceAction
{
public:
	int32_t                                            NumberOfScenarios;                             // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	EDeathCountLoopMode                                LoopMode;                                      // 0x015C (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_SelectByDeathCount");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_UpdateDifficulty
// 0x0010 OR 0x0168 (0x0168 - 0x0158)
// 16 OR 360 (360 - 344)
class UOLSeqAct_UpdateDifficulty : public USequenceAction
{
public:
	struct FDynamicDifficulty                          DifficultyData;                                // 0x0158 (0x0010) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_UpdateDifficulty");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSoundConnector
// 0x0024 OR 0x026C (0x026C - 0x0248)
// 36 OR 620 (620 - 584)
class AOLSoundConnector : public AActor
{
public:
	class UDrawSphereComponent*                        SpherePreviewComp;                             // 0x0248 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UDrawBoxComponent*                           BoxPreviewComp;                                // 0x0250 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UDrawBoxComponent*                           VolumeConnectorBoxPreviewComp;                 // 0x0258 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UOLSoundConnectorComponent*                  SoundConnectorComp;                            // 0x0260 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              OcclusionFactor;                               // 0x0268 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSoundConnector");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
};

// Class OLGame.OLSoundConnectorComponent
// 0x0037 OR 0x00C4 (0x00C4 - 0x008D)
// 55 OR 196 (196 - 141)
class UOLSoundConnectorComponent : public UActorComponent
{
public:
	uint32_t                                           bEnabled : 1;                                  // 0x0090 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bSpherical : 1;                                // 0x0090 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bShowVolumeConnectorBox : 1;                   // 0x0090 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bAllowSourceVirtualization : 1;                // 0x0090 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bInitializedDualSidedConnections : 1;          // 0x0090 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	float                                              SphereRadius;                                  // 0x0094 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BoxWidth;                                      // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BoxHeight;                                     // 0x009C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     VolumeConnectorExtent;                         // 0x00A0 (0x000C) [0x0000000000000000]               
	TArray<class AOLSoundEnvironmentVolume*>           ConnectedVolumes;                              // 0x00AC (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class AOLSoundEnvironmentVolume*                   SurroundingVolume;                             // 0x00BC (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSoundConnectorComponent");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSoundEmitter
// 0x0100 OR 0x0168 (0x0168 - 0x0068)
// 256 OR 360 (360 - 104)
class UOLSoundEmitter : public UObject
{
public:
	class AActor*                                      Actor;                                         // 0x0068 (0x0008) [0x0000000000000000]               
	uint32_t                                           bActive : 1;                                   // 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bDirty : 1;                                    // 0x0070 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bDynamic : 1;                                  // 0x0070 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bSourceIsHeroControlled : 1;                   // 0x0070 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bAllowVirtualization : 1;                      // 0x0070 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bForceHighFidelityDynamicUpdate : 1;           // 0x0070 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bModifyPerceivedSoundLevels : 1;               // 0x0070 (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bConnectedToListener : 1;                      // 0x0070 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bValidCachedVirtNode : 1;                      // 0x0070 (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bValidCachedBackupVirtMode : 1;                // 0x0070 (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bVirtualized : 1;                              // 0x0070 (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bInMultiPositionGroup : 1;                     // 0x0070 (0x0004) [0x0000000000000000] [0x00000800] 
	uint32_t                                           bGroupMaster : 1;                              // 0x0070 (0x0004) [0x0000000000000000] [0x00001000] 
	float                                              MaxPathingDistance;                            // 0x0074 (0x0004) [0x0000000000000000]               
	float                                              MaxAudibleRange;                               // 0x0078 (0x0004) [0x0000000000000000]               
	TArray<struct FSoundEnvVolumeData>                 SoundEnvironments;                             // 0x007C (0x0010) [0x0000000000500000] (CPF_NeedCtorLink)
	float                                              CurrentOcclusion;                              // 0x008C (0x0004) [0x0000000000000000]               
	float                                              TargetOcclusion;                               // 0x0090 (0x0004) [0x0000000000000000]               
	float                                              CurrentObstruction;                            // 0x0094 (0x0004) [0x0000000000000000]               
	float                                              TargetObstruction;                             // 0x0098 (0x0004) [0x0000000000000000]               
	float                                              NextObstructionCheckTime;                      // 0x009C (0x0004) [0x0000000000000000]               
	float                                              NextOcclusionCheckTime;                        // 0x00A0 (0x0004) [0x0000000000000000]               
	float                                              LastObstructionCheckTime;                      // 0x00A4 (0x0004) [0x0000000000000000]               
	float                                              LastOcclusionCheckTime;                        // 0x00A8 (0x0004) [0x0000000000000000]               
	float                                              AngleFromListener;                             // 0x00AC (0x0004) [0x0000000000000000]               
	float                                              LastActivatedTime;                             // 0x00B0 (0x0004) [0x0000000000000000]               
	struct FVector                                     BaseLocation;                                  // 0x00B4 (0x000C) [0x0000000000000000]               
	struct FVirtualizationNode                         CachedVirtualizationNode;                      // 0x00C0 (0x0014) [0x0000000000080000] (CPF_Component)
	struct FVirtualizationNode                         CachedBackupVirtNode;                          // 0x00D4 (0x0014) [0x0000000000080000] (CPF_Component)
	float                                              CachedBaseWeight0;                             // 0x00E8 (0x0004) [0x0000000000000000]               
	float                                              CachedBaseWeight1;                             // 0x00EC (0x0004) [0x0000000000000000]               
	struct FVector                                     VirtualizedLocation;                           // 0x00F0 (0x000C) [0x0000000000000000]               
	EmitterUpdateDetail                                UpdateDetail;                                  // 0x00FC (0x0001) [0x0000000000000000]               
	class FString                                      GroupEventName;                                // 0x0100 (0x0010) [0x0000000000500000] (CPF_NeedCtorLink)
	TArray<struct FAuxBusInfo>                         ReverbBusInfos;                                // 0x0110 (0x0010) [0x0000000000500000] (CPF_NeedCtorLink)
	struct FEmitterDebugInfo                           DebugInfo;                                     // 0x0120 (0x0048) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSoundEmitter");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSoundEmittingMeshActor
// 0x0017 OR 0x026C (0x026C - 0x0255)
// 23 OR 620 (620 - 597)
class AOLSoundEmittingMeshActor : public AStaticMeshActor
{
public:
	class UAkEvent*                                    PlayEvent;                                     // 0x0258 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bAllowVirtualization : 1;                      // 0x0260 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bEnableMultiPosition : 1;                      // 0x0260 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bPlaying : 1;                                  // 0x0260 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	float                                              MaxPathingDistance;                            // 0x0264 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaximumAudibleRange;                           // 0x0268 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSoundEmittingMeshActor");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSoundEnvironment
// 0x0020 OR 0x0088 (0x0088 - 0x0068)
// 32 OR 136 (136 - 104)
class UOLSoundEnvironment : public UObject
{
public:
	class FString                                      ReverbEnvironmentType;                         // 0x0068 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              OcclusionFactor;                               // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ObstructionFactor;                             // 0x007C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UAkBank*                                     RequiredBank;                                  // 0x0080 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSoundEnvironment");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSoundEnvironmentManager
// 0x0158 OR 0x01C0 (0x01C0 - 0x0068)
// 344 OR 448 (448 - 104)
class UOLSoundEnvironmentManager : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                       // 0x0068 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	TArray<class AOLSoundEnvironmentVolume*>           ListenerVolumes;                               // 0x0070 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLSoundEnvironmentVolume*>           AllVolumes;                                    // 0x0080 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	uint32_t                                           bUpdateAllVolumesNeeded : 1;                   // 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bLevelsHaveBeenRemoved : 1;                    // 0x0090 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bForceUpdateVolumesDuringTransition : 1;       // 0x0090 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bPendingDestroy : 1;                           // 0x0090 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bEnableSoundVirtualization : 1;                // 0x0090 (0x0004) [0x0000000000004000] [0x00000010] (CPF_Config)
	TArray<class UOLSoundEmitter*>                     ActiveSources;                                 // 0x0094 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<struct FMultiPositionGroup>                 ActiveGroups;                                  // 0x00A4 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              CurrentSoundPowerLeft;                         // 0x00B4 (0x0004) [0x0000000000000000]               
	float                                              CurrentSoundPowerRight;                        // 0x00B8 (0x0004) [0x0000000000000000]               
	float                                              CurrentMicrophoneMinFocusPower;                // 0x00BC (0x0004) [0x0000000000000000]               
	float                                              NextMicrophoneMinPowerRandomizeTime;           // 0x00C0 (0x0004) [0x0000000000000000]               
	class UOLSoundEnvironment*                         DefaultSoundEnvironment;                       // 0x00C4 (0x0008) [0x0000000000000000]               
	class UAkEvent*                                    EvtResetAllBuses;                              // 0x00CC (0x0008) [0x0000000000000000]               
	struct FName                                       FadeRTPC;                                      // 0x00D4 (0x0008) [0x0000000000000002] (CPF_Const)   
	class FString                                      ExteriorRTPC;                                  // 0x00DC (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	float                                              OcclusionApproachCoeff;                        // 0x00EC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ObstructionApproachCoeff;                      // 0x00F0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FreePathingDist;                               // 0x00F4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              LockerOcclusion;                               // 0x00F8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              BarrelOcclusion;                               // 0x00FC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              WardrobeOcclusion;                             // 0x0100 (0x0004) [0x0000000000004000] (CPF_Config)  
	class FString                                      LockerReverbEnvironment;                       // 0x0104 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class FString                                      BarrelReverbEnvironment;                       // 0x0114 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class FString                                      WardrobeReverbEnvironment;                     // 0x0124 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	struct FHQOcclusionSettingsData                    HighQualityOcclusionSettings;                  // 0x0134 (0x0028) [0x0000000000004000] (CPF_Config)  
	float                                              SoundMeterMaxPower;                            // 0x015C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              SoundMeterUpdateInterval;                      // 0x0160 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MicrophoneFocusAngleInner;                     // 0x0164 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MicrophoneFocusAngleInnerZoomedIn;             // 0x0168 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MicrophoneFocusAngleOuter;                     // 0x016C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MicrophoneFocusAngleOuterZoomedIn;             // 0x0170 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MicrophoneFactorCenter;                        // 0x0174 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MicrophoneFactorCenterZoomedIn;                // 0x0178 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MicrophoneFactorInner;                         // 0x017C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MicrophoneFactorInnerZoomedIn;                 // 0x0180 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MicrophoneFactorOuter;                         // 0x0184 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MicrophoneFactorOuterZoomedIn;                 // 0x0188 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MicrophoneInnerCurveExp;                       // 0x018C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MicrophoneOcclusionMultiplier;                 // 0x0190 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MicrophoneObstructionMultiplier;               // 0x0194 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MicrophonePerceivedFocusAngle;                 // 0x0198 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MicrophonePerceivedFocusAngleZoomedIn;         // 0x019C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MicrophonePerceivedDeadZone;                   // 0x01A0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MicrophonePerceivedDeadZoneZoomedIn;           // 0x01A4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MicrophonePerceivedMinPower;                   // 0x01A8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MicrophonePerceivedMaxPower;                   // 0x01AC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MicrophonePerceivedFocusPowerMult;             // 0x01B0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MicrophonePerceivedFocusMaxDist;               // 0x01B4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MicrophonePerceivedFocusMaxDistZoomedIn;       // 0x01B8 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MicrophonePerceivedMinPowerRandomizeInterval;  // 0x01BC (0x0004) [0x0000000000004000] (CPF_Config)  

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSoundEnvironmentManager");
		}

		return uClassPointer;
	};

	static class UOLSoundEnvironmentManager* GetSoundEnvManager();
	void Cleanup();
};

// Class OLGame.OLSoundEnvironmentVolume
// 0x006C OR 0x02F0 (0x02F0 - 0x0284)
// 108 OR 752 (752 - 644)
class AOLSoundEnvironmentVolume : public AVolume
{
public:
	class UOLSoundEnvironment*                         SoundEnvironment;                              // 0x0284 (0x0008) [0x0000000000000001] (CPF_Edit)    
	TArray<class UAkEvent*>                            OnEnterEvents;                                 // 0x028C (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<class UAkEvent*>                            OnExitEvents;                                  // 0x029C (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<class UAkEvent*>                            AlwaysCallOnExitEvents;                        // 0x02AC (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class UAkEvent*                                    AmbianceCrossFadeStartEvent;                   // 0x02BC (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    AmbianceCrossFadeStopEvent;                    // 0x02C4 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              FadeDistance;                                  // 0x02CC (0x0004) [0x0000000000000001] (CPF_Edit)    
	EVolumePriority                                    Priority;                                      // 0x02D0 (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bExteriorEnvironment : 1;                      // 0x02D4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bInitialized : 1;                              // 0x02D4 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	float                                              ObstructionRatioInSameVolume;                  // 0x02D8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxHighQualityObstructionFactor;               // 0x02DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	TArray<class UOLSoundConnectorComponent*>          Connections;                                   // 0x02E0 (0x0010) [0x0000000004482008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSoundEnvironmentVolume");
		}

		return uClassPointer;
	};

	void eventPostBeginPlay();
};

// Class OLGame.OLThrowable
// 0x00BC OR 0x0428 (0x0428 - 0x036C)
// 188 OR 1064 (1064 - 876)
class AOLThrowable : public AKActorSpawnable
{
public:
	EThrowableState                                    ThrowableState;                                // 0x036C (0x0001) [0x0000000000000000]               
	float                                              LaunchTime;                                    // 0x0370 (0x0004) [0x0000000000000000]               
	float                                              StoppedTime;                                   // 0x0374 (0x0004) [0x0000000000000000]               
	uint32_t                                           bHasHitHero : 1;                               // 0x0378 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FRotator                                    RotationVel;                                   // 0x037C (0x000C) [0x0000000000000000]               
	struct FThrowableSettings                          Settings;                                      // 0x0388 (0x004C) [0x0000000000000000]               
	struct FThrowablePreciseTravelData                 PreciseTravel;                                 // 0x03D4 (0x0034) [0x0000000000000000]               
	struct FVector                                     LastWaterCheckPosition;                        // 0x0408 (0x000C) [0x0000000000002000] (CPF_Transient)
	class ALandscapeProxy*                             ActiveWaterLandscape;                          // 0x0414 (0x0008) [0x0000000000002000] (CPF_Transient)
	class ULandscapeHeightfieldCollisionComponent*     LastWaterLandscapeCollidingComponent;          // 0x041C (0x0008) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	float                                              SurfaceHeight;                                 // 0x0424 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLThrowable");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLTutorialManager
// 0x0234 OR 0x029C (0x029C - 0x0068)
// 564 OR 668 (668 - 104)
class UOLTutorialManager : public UObject
{
public:
	uint32_t                                           bTutorialsEnabled : 1;                         // 0x0068 (0x0004) [0x0000000000004000] [0x00000001] (CPF_Config)
	uint32_t                                           bActiveTutorial : 1;                           // 0x0068 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bActiveTutorialCanBePaused : 1;                // 0x0068 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bLongerTutorial : 1;                           // 0x0068 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bQuickTutorialIfInteraction : 1;               // 0x0068 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bPaused : 1;                                   // 0x0068 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	int32_t                                            CurrentID;                                     // 0x006C (0x0004) [0x0000000000000000]               
	class FString                                      TutorialText;                                  // 0x0070 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	EHUDMessagePriority                                TutorialPriority;                              // 0x0080 (0x0001) [0x0000000000000000]               
	TArray<class FString>                              CompletedTutorials;                            // 0x0084 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              ActiveTutorialDelay;                           // 0x0094 (0x0004) [0x0000000000000000]               
	float                                              TutorialItemTimestamp;                         // 0x0098 (0x0004) [0x0000000000000000]               
	float                                              LookBackTutorialReminderTimeLeft;              // 0x009C (0x0004) [0x0000000000000000]               
	float                                              LastLookBackTutorialReminderPushedTimestamp;   // 0x00A0 (0x0004) [0x0000000000000000]               
	float                                              LookBackTutorialIntervalTime;                  // 0x00A4 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              PeekTutorialReminderTimeLeft;                  // 0x00A8 (0x0004) [0x0000000000000000]               
	float                                              LastPeekTutorialReminderPeekPushedTimestamp;   // 0x00AC (0x0004) [0x0000000000000000]               
	float                                              PeekTutorialIntervalTime;                      // 0x00B0 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MicrophoneTutorialReminderTimeLeft;            // 0x00B4 (0x0004) [0x0000000000000000]               
	float                                              LastMicrophoneTutorialReminderPeekPushedTimestamp;// 0x00B8 (0x0004) [0x0000000000000000]               
	float                                              MicrophoneTutorialIntervalTime;                // 0x00BC (0x0004) [0x0000000000004000] (CPF_Config)  
	struct FContextualTutorialsData                    CompletedContextualTutorials;                  // 0x00C0 (0x0004) [0x0000000000000000]               
	int32_t                                            ClimbUpTutorialItemIdx;                        // 0x00C4 (0x0004) [0x0000000000000000]               
	float                                              DefaultTutorialDuration;                       // 0x00C8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LongTutorialDuration;                          // 0x00CC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              PausedTimeStamp;                               // 0x00D0 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FName                                       BatteriesTutorialTextId;                       // 0x00D4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       ClimbUpTutorialTextId_Keyboard;                // 0x00DC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       ClimbUpTutorialTextId_Gamepad;                 // 0x00E4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       DocumentTutorialTextId;                        // 0x00EC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       SpikyPlantTutorialTextId;                      // 0x00F4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       StaminaDepletionTutorialTextId;                // 0x00FC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       StaminaDepletedTutorialTextId;                 // 0x0104 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       StaminaSwimmingDepletionTutorialTextId;        // 0x010C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       HidingInFoliageStandTutorialTextId;            // 0x0114 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       HidingInFoliageCrouchTutorialTextId;           // 0x011C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       HidingInFoliageCrouchToggleTutorialTextId;     // 0x0124 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       HidingInFoliageCrawlTutorialTextId;            // 0x012C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       HidingInFoliageCrawlGamepadTutorialTextId;     // 0x0134 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       PeekingFromBarrelKeyboardTutorialTextId;       // 0x013C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       PeekingFromBarrelGamepadTutorialTextId;        // 0x0144 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       PeekingFromDoorKeyboardTutorialTextId;         // 0x014C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       PeekingFromDoorGamepadTutorialTextId;          // 0x0154 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       PeekingFromWardrobeKeyboardTutorialTextId;     // 0x015C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       PeekingFromWardrobeGamepadTutorialTextId;      // 0x0164 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       PeekingFromLedgeHangKeyboardTutorialTextId;    // 0x016C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       PeekingFromLedgeHangGamepadTutorialTextId;     // 0x0174 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       PeekingFromUnderwaterKeyboardTutorialTextId;   // 0x017C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       PeekingFromUnderwaterGamepadTutorialTextId;    // 0x0184 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       BandagePickedUpTutorialTextId;                 // 0x018C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       BatteryPickedUpTutorialTextId;                 // 0x0194 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       RecordingGatheredTutorialTextId;               // 0x019C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       DocumentGatheredTutorialTextId;                // 0x01A4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       BandagePocketTutorialTextId;                   // 0x01AC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       BatteryPocketTutorialTextId;                   // 0x01B4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       RecordingShownTutorialTextId;                  // 0x01BC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       ReminderMicrophoneTutorialTextId;              // 0x01C4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       Microphone1TutorialTextId;                     // 0x01CC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       Microphone2TutorialTextId;                     // 0x01D4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       Microphone3TutorialTextId;                     // 0x01DC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       CameraTutorialTextId;                          // 0x01E4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       NightVisionTutorialTextId;                     // 0x01EC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       JumpOverTutorialTextId;                        // 0x01F4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       OpenWindowTutorialTextId;                      // 0x01FC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       CrouchGamepadTutorialTextId;                   // 0x0204 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       CrouchKeyboardTutorialTextId;                  // 0x020C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       CrouchKeyboardToggleTutorialTextId;            // 0x0214 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       CrouchGamepadTutorialReminderTextId;           // 0x021C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       CrouchKeyboardTutorialReminderTextId;          // 0x0224 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       CrouchKeyboardToggleTutorialReminderTextId;    // 0x022C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       LookBehindTutorialTextId;                      // 0x0234 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       PeekGamepadTutorialTextId;                     // 0x023C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       PeekKeyboardTutorialTextId;                    // 0x0244 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       RunTutorialTextId;                             // 0x024C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       RunTutorialGamepadTextId;                      // 0x0254 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       RunReminderTutorialTextId;                     // 0x025C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       RunReminderTutorialGamepadTextId;              // 0x0264 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       WatchRecordingsReminderTextId;                 // 0x026C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       EasyDeathQTETextId;                            // 0x0274 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       HidingUnderBedTextId;                          // 0x027C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       DocumentReadingKeyboardTextId;                 // 0x0284 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       DocumentReadingGamepadTextId;                  // 0x028C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       GameplayItemTextId;                            // 0x0294 (0x0008) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLTutorialManager");
		}

		return uClassPointer;
	};

	void SetTutorialsEnabled(bool bEnabled);
	void Clear();
};

// Class OLGame.OLTypes
// 0x0000 OR 0x0068 (0x0068 - 0x0068)
// 0 OR 104 (104 - 104)
class UOLTypes : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLTypes");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLUberPostProcessEffect
// 0x0144 OR 0x0384 (0x0384 - 0x0240)
// 324 OR 900 (900 - 576)
class UOLUberPostProcessEffect : public UUberPostProcessEffect
{
public:
	uint32_t                                           bInnerDemonEffectEnabled : 1;                  // 0x0240 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bEnableWaveEffect : 1;                         // 0x0240 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bCameraGlassShattered : 1;                     // 0x0240 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	struct FVector                                     InnerDemonPosition;                            // 0x0244 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              InnerDemonDeformationIntensity;                // 0x0250 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              UnderwaterBlur;                                // 0x0254 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              VignetteIntensity;                             // 0x0258 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              GrainBrightness;                               // 0x025C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              GrainOpacity;                                  // 0x0260 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              GrainScale;                                    // 0x0264 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UTexture2D*                                  GrainTexture;                                  // 0x0268 (0x0008) [0x0000000000000000]               
	struct FLinearColor                                HurtColor;                                     // 0x0270 (0x0010) [0x0000000000000001] (CPF_Edit)    
	float                                              HurtRadius;                                    // 0x0280 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HurtAmount;                                    // 0x0284 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HurtExp;                                       // 0x0288 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HurtTimeScale;                                 // 0x028C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HurtScale;                                     // 0x0290 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     ChromaScale;                                   // 0x0294 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              OutOfBreathIntensity;                          // 0x02A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UTexture2D*                                  HearthBeatTexture;                             // 0x02A4 (0x0008) [0x0000000000000000]               
	float                                              BloodHit1Amount;                               // 0x02AC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BloodHit2Amount;                               // 0x02B0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BloodHit3Amount;                               // 0x02B4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BloodHit1Angle;                                // 0x02B8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BloodHit2Angle;                                // 0x02BC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BloodHit3Angle;                                // 0x02C0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BloodAmount;                                   // 0x02C4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FLinearColor                                BloodColor;                                    // 0x02C8 (0x0010) [0x0000000000000001] (CPF_Edit)    
	class UTexture2D*                                  BloodHit1Texture;                              // 0x02D8 (0x0008) [0x0000000000000000]               
	class UTexture2D*                                  BloodHit2Texture;                              // 0x02E0 (0x0008) [0x0000000000000000]               
	float                                              WaveIntensity;                                 // 0x02E8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UTexture2D*                                  WaveFrequencyTexture;                          // 0x02EC (0x0008) [0x0000000000000000]               
	class UTexture2D*                                  CoordWaveTexture;                              // 0x02F4 (0x0008) [0x0000000000000000]               
	float                                              DoubleVisionIntensity;                         // 0x02FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	ECameraMode                                        CameraMode;                                    // 0x0300 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              CameraColorEffect;                             // 0x0304 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CameraScale;                                   // 0x0308 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FLinearColor                                CameraColor;                                   // 0x030C (0x0010) [0x0000000000000001] (CPF_Edit)    
	float                                              CameraGlassLightIntensity;                     // 0x031C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FLinearColor                                CameraGlassLightColor;                         // 0x0320 (0x0010) [0x0000000000000001] (CPF_Edit)    
	class UTexture2D*                                  CameraGlassDiffuse;                            // 0x0330 (0x0008) [0x0000000000000000]               
	class UTexture2D*                                  CameraGlassNormal;                             // 0x0338 (0x0008) [0x0000000000000000]               
	class UTextureCube*                                CameraGlassCubeMap;                            // 0x0340 (0x0008) [0x0000000000000000]               
	struct FEyeAdaptationSettings                      EyeSettings;                                   // 0x0348 (0x0014) [0x0000000000000000]               
	struct FEyeAdaptationSettings                      CameraSettings;                                // 0x035C (0x0014) [0x0000000000000000]               
	struct FEyeAdaptationSettings                      NightVisionSettings;                           // 0x0370 (0x0014) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLUberPostProcessEffect");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLUtils
// 0x0000 OR 0x0068 (0x0068 - 0x0068)
// 0 OR 104 (104 - 104)
class UOLUtils : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLUtils");
		}

		return uClassPointer;
	};

	static void TriggerSoundEvent(class UAkEvent* SoundEvent);
	static bool ShouldSubtitlesBeHigh();
	static bool IsKeyBoundToCommand(struct FName Key, class FString Command);
	static bool HasValidMovie(class UGFxObject* GFxObject);
	static float ElapsedRealTime(float Time);
	static float ElapsedTime(float Time);
	static float GetRealTimeSeconds();
	static float GetWorldTimeSeconds();
	static class UTexture2D* LoadTexture(class FString Path, class UObject* Owner);
	static int32_t GetChapterIndex(struct FName CheckpointName);
	static class FString GetChapterName(struct FName CheckpointName);
	static class FString GetCheckpointName(int32_t Index);
	static int32_t GetCheckpointIndexFromString(class FString CheckpointName);
	static int32_t GetCheckpointIndex(struct FName CheckpointName);
	static class UOLOrbisEngine* GetOrbisEngine();
	static class UOLDingoEngine* GetDingoEngine();
	static class UOLWinEngine* GetWinEngine();
	static class UOLEngine* GetOLEngine();
	static class AOLGame* GetOLGame();
	static class UOLWorld* GetOLWorld();
	static class UOLDifficultyConfig* GetDifficultyConfig();
	static class UOLAICoordinator* GetAICoordinator();
	static class AOLHero* GetHero();
	static class AOLPlayerController* GetOLPC();
	static bool IsBindableKey(struct FName ButtonName);
	static bool IsInMainMenu();
	static bool IsPlayingDLC();
	static bool IsDLCInstalled();
	static bool IsDingoController();
	static bool IsPS4Controller();
	static bool IsUsingGamepad();
	static bool IsConsole();
	static bool IsDingo();
	static bool IsPS4();
};

// Class OLGame.OLVoiceManager
// 0x0148 OR 0x01B0 (0x01B0 - 0x0068)
// 328 OR 432 (432 - 104)
class UOLVoiceManager : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                       // 0x0068 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IInterface_AkEventHandler;             // 0x0070 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	TArray<class FString>                              VOPackagePathFilters;                          // 0x0078 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	TArray<struct FLineQueue>                          LineQueues;                                    // 0x0088 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<struct FQueueTimer>                         Timers;                                        // 0x0098 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<struct FEndOfEventInfo>                     EndOfEventCallbacksToProcess;                  // 0x00A8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<struct FMarkerInfo>                         MarkerCallbacksToProcess;                      // 0x00B8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<struct FPlayedVOInfo>                       PlayedVOs;                                     // 0x00C8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              LastVOContextTriggeredTime[0x21];              // 0x00D8 (0x0084) [0x0000000000000000]               
	float                                              LastVOTriggeredTime;                           // 0x015C (0x0004) [0x0000000000000000]               
	struct FPointer                                    CriticalSection;                               // 0x0160 (0x0008) [0x0000000000001000] (CPF_Native)  
	TArray<struct FVOEventData>                        VOEventLog;                                    // 0x0168 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<struct FDialogueData>                       Dialogues;                                     // 0x0178 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FPointer                                    EndOfDialogEventQueueSection;                  // 0x0188 (0x0008) [0x0000000000001000] (CPF_Native)  
	TArray<int32_t>                                    EndOfDialogPlayingID;                          // 0x0190 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      TransientVOPrefix;                             // 0x01A0 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLVoiceManager");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLVolumetricFog
// 0x0000 OR 0x0250 (0x0250 - 0x0250)
// 0 OR 592 (592 - 592)
class AOLVolumetricFog : public AVolumetricFog
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLVolumetricFog");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLVolumetricFogComponent
// 0x0014 OR 0x01AC (0x01AC - 0x0198)
// 20 OR 428 (428 - 408)
class UOLVolumetricFogComponent : public UVolumetricFogComponent
{
public:
	float                                              FlashLightsVolumetricsIntensity;               // 0x0198 (0x0004) [0x0000000200000001] (CPF_Edit)    
	float                                              LanternVolumetricsIntensity;                   // 0x019C (0x0004) [0x0000000200000001] (CPF_Edit)    
	float                                              TorchVolumetricsIntensity;                     // 0x01A0 (0x0004) [0x0000000200000001] (CPF_Edit)    
	float                                              ArrowVolumetricsIntensity;                     // 0x01A4 (0x0004) [0x0000000200000001] (CPF_Edit)    
	float                                              HeroLightVolumetricsIntensity;                 // 0x01A8 (0x0004) [0x0000000200000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLVolumetricFogComponent");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLWardrobe
// 0x00D0 OR 0x0318 (0x0318 - 0x0248)
// 208 OR 792 (792 - 584)
class AOLWardrobe : public AActor
{
public:
	TArray<class UMaterialInstance*>                   MaterialOverrides;                             // 0x0248 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              DoorHeight;                                    // 0x0258 (0x0004) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	float                                              DoorWidth;                                     // 0x025C (0x0004) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	float                                              HeightOffset;                                  // 0x0260 (0x0004) [0x0000000000020000] (CPF_EditConst)
	float                                              DoorClosededAngle;                             // 0x0264 (0x0004) [0x0000000000020000] (CPF_EditConst)
	float                                              DoorOpenedAngle;                               // 0x0268 (0x0004) [0x0000000000020000] (CPF_EditConst)
	float                                              InsideLeftDoorDesiredAngle;                    // 0x026C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              InsideRightDoorDesiredAngle;                   // 0x0270 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DoorRotationSpeed;                             // 0x0274 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LockedAnimAmplitude;                           // 0x0278 (0x0004) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	float                                              LockedAnimTotalTime;                           // 0x027C (0x0004) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	uint32_t                                           bInsideLeftDoorEnabled : 1;                    // 0x0280 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bInsideRightDoorEnabled : 1;                   // 0x0280 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bBotsCanInvestigate : 1;                       // 0x0280 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bWasInitiallyInsideLeftDoorEnabled : 1;        // 0x0280 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bWasInitiallyInsideRightDoorEnabled : 1;       // 0x0280 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bPlayingLockedAnim : 1;                        // 0x0280 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	TArray<struct FCornerData>                         Corners;                                       // 0x0284 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              InitialInsideLeftDoorDesiredAngle;             // 0x0294 (0x0004) [0x0000000000000000]               
	float                                              InitialInsideRightDoorDesiredAngle;            // 0x0298 (0x0004) [0x0000000000000000]               
	float                                              OpeningIntensity;                              // 0x029C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LastYaw;                                       // 0x02A0 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UAkEvent*                                    SndOpening;                                    // 0x02A4 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    SndClosing;                                    // 0x02AC (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    SndLocked;                                     // 0x02B4 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    SndStartOpening;                               // 0x02BC (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    SndStopOpening;                                // 0x02C4 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FString                                      RTPCNameOpeningDoorIntensity;                  // 0x02CC (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class UStaticMeshComponent*                        FrameMesh;                                     // 0x02DC (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        InsideLeftDoorMesh;                            // 0x02E4 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        InsideRightDoorMesh;                           // 0x02EC (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UDynamicLightEnvironmentComponent*           WardrobeLightEnvironment;                      // 0x02F4 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UOLInvestigationComponent*                   InvestigationComponent;                        // 0x02FC (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              FindHiddenPlayerProbability;                   // 0x0304 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AOLPawn*                                     DoorUser;                                      // 0x0308 (0x0008) [0x0000000000002000] (CPF_Transient)
	int32_t                                            InteractingDoorIndex;                          // 0x0310 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              ProceduralAnimElapsedTime;                     // 0x0314 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLWardrobe");
		}

		return uClassPointer;
	};

	void TriggerEvent(EWardrobeDoorEventType EventType, class AOLPawn* Triggerer);
};

// Class OLGame.OLWindow
// 0x01B8 OR 0x0400 (0x0400 - 0x0248)
// 440 OR 1024 (1024 - 584)
class AOLWindow : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;          // 0x0248 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	uint32_t                                           bDisabled : 1;                                 // 0x0250 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bNoInteraction : 1;                            // 0x0250 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bBotsCanInvestigate : 1;                       // 0x0250 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bApplyRulesLive : 1;                           // 0x0250 (0x0004) [0x0000000000200001] [0x00000008] (CPF_Edit)
	uint32_t                                           bNoSavedState : 1;                             // 0x0250 (0x0004) [0x0000000000200001] [0x00000010] (CPF_Edit)
	uint32_t                                           bAICanUseWindow : 1;                           // 0x0250 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bAITraversing : 1;                             // 0x0250 (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	uint32_t                                           bWasOpenedByPlayer : 1;                        // 0x0250 (0x0004) [0x0000000000002000] [0x00000080] (CPF_Transient)
	uint32_t                                           bWasOpenedByPlayerFromInside : 1;              // 0x0250 (0x0004) [0x0000000000002000] [0x00000100] (CPF_Transient)
	uint32_t                                           bInteractiveControl : 1;                       // 0x0250 (0x0004) [0x0000000000002000] [0x00000200] (CPF_Transient)
	uint32_t                                           bPlayingACS : 1;                               // 0x0250 (0x0004) [0x0000000000002000] [0x00000400] (CPF_Transient)
	EWindowInitialState                                InitialWindowState;                            // 0x0254 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EOLWindowType                                      WindowType;                                    // 0x0255 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EWindowState                                       WindowState;                                   // 0x0256 (0x0001) [0x0000000000002000] (CPF_Transient)
	float                                              ExplicitOcclusionFactor;                       // 0x0258 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DefaultOcclusionFactor;                        // 0x025C (0x0004) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	float                                              ProceduralMoveSpeed;                           // 0x0260 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxOpenClearance;                              // 0x0264 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HeightFromFloor;                               // 0x0268 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HeightToHandle;                                // 0x026C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LedgeWidth;                                    // 0x0270 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TotalGlassHeight;                              // 0x0274 (0x0004) [0x0000000000000001] (CPF_Edit)    
	TArray<class UMaterialInstance*>                   MaterialOverrides;                             // 0x0278 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class UAkEvent*                                    SndOpening;                                    // 0x0288 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    SndPartialOpening;                             // 0x0290 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    SndClosing;                                    // 0x0298 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    SndBreaking;                                   // 0x02A0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	TArray<struct FGameFlowWindowRule>                 GameFlowRules;                                 // 0x02A8 (0x0010) [0x0000000000600001] (CPF_Edit | CPF_NeedCtorLink)
	class AOLLedgeMarker*                              Ledge1;                                        // 0x02B8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class AOLLedgeMarker*                              Ledge2;                                        // 0x02C0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UStaticMeshComponent*                        MovingWindowMesh;                              // 0x02C8 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    BreakingTileParticles;                         // 0x02D0 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    BreakingWindowParticles;                       // 0x02D8 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        ArrowBrkFrame;                                 // 0x02E0 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        DynTileTL;                                     // 0x02E8 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        DynTileTR;                                     // 0x02F0 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        DynTileBL;                                     // 0x02F8 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        DynTileBR;                                     // 0x0300 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        StatTileTL;                                    // 0x0308 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        StatTileTR;                                    // 0x0310 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        StatTileBL;                                    // 0x0318 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        StatTileBR;                                    // 0x0320 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMesh*                                 MovingBreakableMesh;                           // 0x0328 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UStaticMesh*                                 StaticBrokenTileTL;                            // 0x0330 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UStaticMesh*                                 StaticBrokenTileTR;                            // 0x0338 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UStaticMesh*                                 StaticBrokenTileBL;                            // 0x0340 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UStaticMesh*                                 StaticBrokenTileBR;                            // 0x0348 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UStaticMesh*                                 MovingBrokenTileTL;                            // 0x0350 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UStaticMesh*                                 MovingBrokenTileTR;                            // 0x0358 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UStaticMesh*                                 MovingBrokenTileBL;                            // 0x0360 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UStaticMesh*                                 MovingBrokenTileBR;                            // 0x0368 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UStaticMesh*                                 BrokenMesh;                                    // 0x0370 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UStaticMesh*                                 OriginalMesh;                                  // 0x0378 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UDynamicLightEnvironmentComponent*           WindowLightEnvironment;                        // 0x0380 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UOLSoundConnectorComponent*                  SoundConnectorComp;                            // 0x0388 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              PathPointOffset;                               // 0x0390 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AIBashThroughKnockbackForce;                   // 0x0394 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PathfindingCostOpen;                           // 0x0398 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PathfindingCostClosedOpenable;                 // 0x039C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PathfindingCostClosedMustBreak;                // 0x03A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PathfindingCostExtraBots;                      // 0x03A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UOLInvestigationComponent*                   InvestigationComponent;                        // 0x03A8 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              OpenRatio;                                     // 0x03B0 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TargetOpenRatio;                               // 0x03B4 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LastFinishedClosingTime;                       // 0x03B8 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              SingleUseProceduralMoveSpeed;                  // 0x03BC (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              InteractionInitialRatio;                       // 0x03C0 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              InteractiveLastDeltaZ;                         // 0x03C4 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LastBrokenTileParticlesTime;                   // 0x03C8 (0x0004) [0x0000000000002000] (CPF_Transient)
	class AOLPawn*                                     WindowUser;                                    // 0x03CC (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              PartiallyOpenRatio;                            // 0x03D4 (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     EdgeDestInside;                                // 0x03D8 (0x000C) [0x0000000000000000]               
	struct FVector                                     EdgeDestOutside;                               // 0x03E4 (0x000C) [0x0000000000000000]               
	struct FGuid                                       WindowGuid;                                    // 0x03F0 (0x0010) [0x0000000000220002] (CPF_Const | CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLWindow");
		}

		return uClassPointer;
	};

	void OnDestroy(class USeqAct_Destroy* Action);
	void SoftDestroy();
	void ScriptOpenWindow(class AOLPawn* Triggerer);
	void ScriptBreakWindow(class AOLPawn* Triggerer);
};

// Class OLGame.OLWorld
// 0x0384 OR 0x03EC (0x03EC - 0x0068)
// 900 OR 1004 (1004 - 104)
class UOLWorld : public UObject
{
public:
	struct FWorldStateData                             CurrentWorldState;                             // 0x0068 (0x0030) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              CacheRadius;                                   // 0x0098 (0x0004) [0x0000000000000002] (CPF_Const)   
	TArray<class AOLVolumetricFog*>                    CachedVolumetricFogs;                          // 0x009C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class ALandscapeWaterActor*>                CachedWaterLandscapeActors;                    // 0x00AC (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLHidingSpot*>                       CachedHidingSpots;                             // 0x00BC (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLDoor*>                             CachedDoors;                                   // 0x00CC (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLWindow*>                           CachedWindows;                                 // 0x00DC (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLBasementWindow*>                   CachedBasementWindows;                         // 0x00EC (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLBed*>                              CachedBeds;                                    // 0x00FC (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLPickableObject*>                   CachedPickables;                               // 0x010C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLLadderMarker*>                     CachedLadders;                                 // 0x011C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLStairsMarker*>                     CachedStairs;                                  // 0x012C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLCrawlMarker*>                      CachedCrawls;                                  // 0x013C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLSqueezeMarker*>                    CachedSqueezes;                                // 0x014C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLCSA*>                              CachedCSAs;                                    // 0x015C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLRTPCDistanceModifier*>             CachedRTPCDistanceModifiers;                   // 0x016C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLRTPCPlayerLookModifier*>           CachedRTPCPlayerLookModifiers;                 // 0x017C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLCornerMarker*>                     CachedCorners;                                 // 0x018C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<struct FCornerData>                         CachedCornersData;                             // 0x019C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLRecordingMarker*>                  CachedRecordingMarkers;                        // 0x01AC (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLPreferredPathMarker*>              CachedPreferredPathMarkers;                    // 0x01BC (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLAIInvestigationVolume*>            CachedInvestigationVolumes;                    // 0x01CC (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLAIInvestigationPoint*>             CachedInvestigationPoints;                     // 0x01DC (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLTripActor*>                        CachedTripActors;                              // 0x01EC (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLHidingBarrel*>                     CachedHidingBarrels;                           // 0x01FC (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLWardrobe*>                         CachedWardrobes;                               // 0x020C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLPhysicsVolume*>                    CachedPhysicsVolume;                           // 0x021C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLSoundConnector*>                   CachedSoundConnectors;                         // 0x022C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLSoundEnvironmentVolume*>           CachedSoundEnvVolumes;                         // 0x023C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class ALandscapeProxy*>                     CachedWaterLandscapeProxies;                   // 0x024C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLRiverMarker*>                      CachedRiverMarkers;                            // 0x025C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLPushableSplineMarker*>             CachedPushableSplineMarkers;                   // 0x026C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLRaftLimitSplineMarker*>            CachedRaftLimitMarkers;                        // 0x027C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLRaftCollisionMarker*>              CachedRaftCollisionMarkers;                    // 0x028C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLPushableObject*>                   CachedPushables;                               // 0x029C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLPushableBlockingVolume*>           CachedPushableBlockingVolumes;                 // 0x02AC (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLPushableTriggerVolume*>            CachedPushableTriggerVolumes;                  // 0x02BC (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLDamageBlockingVolume*>             CachedDamageBlockingVolumes;                   // 0x02CC (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLFloatingObjectBase*>               CachedFloatingObjects;                         // 0x02DC (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLDoorChimes*>                       CachedDoorChimes;                              // 0x02EC (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FPointer                                    CachedRaftCollisionMarkersTree;                // 0x02FC (0x0008) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	int32_t                                            CachedRaftCollisionMarkersTreeCRC;             // 0x0304 (0x0004) [0x0000000000002000] (CPF_Transient)
	TArray<class AOLLedgeMarker*>                      GlobalLedgeMarkers;                            // 0x0308 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLSlidingSlopeMarker*>               GlobalSlidingSlopes;                           // 0x0318 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLSlideUnderMarker*>                 GlobalSlideUnderMarkers;                       // 0x0328 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLBeamMarker*>                       GlobalBeams;                                   // 0x0338 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLHandReactionMarker*>               GlobalHandReactionMarkers;                     // 0x0348 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLLedgeMarker*>                      LocalLedgeMarkers;                             // 0x0358 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLSlidingSlopeMarker*>               LocalSlidingSlopes;                            // 0x0368 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLSlideUnderMarker*>                 LocalSlideUnderMarkers;                        // 0x0378 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLBeamMarker*>                       LocalBeams;                                    // 0x0388 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<class AOLHandReactionMarker*>               LocalHandReactionMarkers;                      // 0x0398 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FVector                                     CachedObjectsPos;                              // 0x03A8 (0x000C) [0x0000000000002000] (CPF_Transient)
	TArray<struct FPointer>                            CachedLevelList;                               // 0x03B4 (0x0010) [0x0000000000003000] (CPF_Native | CPF_Transient)
	TArray<class ULevelStreaming*>                     LevelsPendingReattach;                         // 0x03C4 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            CurrentActorIdxToReattach;                     // 0x03D4 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bForceUpdateLocalCache : 1;                    // 0x03D8 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	TArray<struct FName>                               ResettedLevelList;                             // 0x03DC (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLWorld");
		}

		return uClassPointer;
	};

};

// Class OLGame.ActorFactoryOLAI
// 0x1394 OR 0x1470 (0x1470 - 0x00DC)
// 5012 OR 5232 (5232 - 220)
class UActorFactoryOLAI : public UActorFactoryAI
{
public:
	class UClass*                                      EnemyPawnClass;                                // 0x00DC (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FRenderingOverrideFlags                     RenderingOverrides;                            // 0x00E4 (0x0068) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<class UAnimSet*>                            AdditionalAnimSets;                            // 0x014C (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class UOLAIAnimMapping*                            AnimMapping;                                   // 0x015C (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FAIAnimMapping                              AnimMappingOverrides;                          // 0x0164 (0x0040) [0x0000000000000001] (CPF_Edit)    
	class UOLAIContextualVOAsset*                      VOAsset;                                       // 0x01A4 (0x0008) [0x0000000000000001] (CPF_Edit)    
	EVOMappingsMergeType                               VOMappingMergeType;                            // 0x01AC (0x0001) [0x0000000000000001] (CPF_Edit)    
	EMultiplicityConfig                                Multiplicity;                                  // 0x01AD (0x0001) [0x0000000000000001] (CPF_Edit)    
	TArray<struct FVOMapping>                          VOMappingOverrides;                            // 0x01B0 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bSpawnHidden : 1;                              // 0x01C0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	class UOLAIConfig*                                 Config;                                        // 0x01C4 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FAIConfigData                               ConfigOverrides;                               // 0x01CC (0x12A4) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.ActorFactoryOLAI");
		}

		return uClassPointer;
	};

};

// Class OLGame.ActorFactoryOLWaypoint
// 0x0000 OR 0x00A4 (0x00A4 - 0x00A4)
// 0 OR 164 (164 - 164)
class UActorFactoryOLWaypoint : public UActorFactory
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.ActorFactoryOLWaypoint");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAIAnimConfig
// 0x0128 OR 0x0190 (0x0190 - 0x0068)
// 296 OR 400 (400 - 104)
class UOLAIAnimConfig : public UObject
{
public:
	struct FLocomotionAnimConfig                       LocoAnimConfig;                                // 0x0068 (0x0128) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAIAnimConfig");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAIAnimMapping
// 0x0040 OR 0x00A8 (0x00A8 - 0x0068)
// 64 OR 168 (168 - 104)
class UOLAIAnimMapping : public UObject
{
public:
	struct FAIAnimMapping                              Mappings;                                      // 0x0068 (0x0040) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAIAnimMapping");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLBot
// 0x08DC OR 0x0D80 (0x0D80 - 0x04A4)
// 2268 OR 3456 (3456 - 1188)
class AOLBot : public AGameAIController
{
public:
	class AOLEnemyPawn*                                EnemyPawn;                                     // 0x04A4 (0x0008) [0x0000000000000000]               
	class UOLAIGroup*                                  Group;                                         // 0x04AC (0x0008) [0x0000000000000000]               
	class UOLAISightComponent*                         SightComponent;                                // 0x04B4 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class AOLHero*                                     TargetPlayer;                                  // 0x04BC (0x0008) [0x0000000000000000]               
	class UOLNavigationHandle*                         OLNavHandle;                                   // 0x04C4 (0x0008) [0x0000000000000000]               
	EAIActivity                                        CurrentActivity;                               // 0x04CC (0x0001) [0x0000000000000000]               
	EMoveStatus                                        CurrentMoveStatus;                             // 0x04CD (0x0001) [0x0000000000000000]               
	EMoveFailedReason                                  LastMoveFailedReason;                          // 0x04CE (0x0001) [0x0000000000000000]               
	EAIMusicState                                      OverriddenMusicState;                          // 0x04CF (0x0001) [0x0000000000000000]               
	struct FAIEnvironment                              Environment;                                   // 0x04D0 (0x001C) [0x0000000000000000]               
	struct FFaceOffData                                FaceOff;                                       // 0x04EC (0x000C) [0x0000000000000000]               
	struct FChaseData                                  Chase;                                         // 0x04F8 (0x0040) [0x0000000000000000]               
	struct FPatrolData                                 Patrol;                                        // 0x0538 (0x0038) [0x0000000000000000]               
	struct FInvestigationData                          Investigation;                                 // 0x0570 (0x0130) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FDeathGripData                              DeathGrip;                                     // 0x06A0 (0x0030) [0x0000000000000000]               
	struct FScriptedBehaviorData                       Scripted;                                      // 0x06D0 (0x0058) [0x0000000000000000]               
	struct FCrawlerData                                Crawler;                                       // 0x0728 (0x0048) [0x0000000000000000]               
	struct FInnerDemonData                             InnerDemon;                                    // 0x0770 (0x000C) [0x0000000000000000]               
	struct FScriptedConfigData                         ScriptedConfig;                                // 0x077C (0x0058) [0x0000000000000000]               
	struct FPatrolConfigData                           PatrolConfig;                                  // 0x07D4 (0x0084) [0x0000000000000000]               
	struct FPatrolConfigData                           PatrolPendingAfterChase;                       // 0x0858 (0x0084) [0x0000000000000000]               
	struct FInvestigationConfigData                    InvestigationConfig;                           // 0x08DC (0x000C) [0x0000000000000000]               
	struct FAttackStrategyData                         DesiredAttackStrategy;                         // 0x08E8 (0x0020) [0x0000000000000000]               
	struct FBotPairedWalkData                          PairedWalk;                                    // 0x0908 (0x0014) [0x0000000000000000]               
	class UOLSeqAct_AIAmbush*                          AmbushSeqAct;                                  // 0x091C (0x0008) [0x0000000000000000]               
	class UOLSeqAct_AIInvestigatePoint*                InvestigationSeqAct;                           // 0x0924 (0x0008) [0x0000000000000000]               
	struct FMemoryData                                 Memory;                                        // 0x092C (0x00B8) [0x0000000000000000]               
	class UOLSeqAct_AISpawn*                           SpawnerAct;                                    // 0x09E4 (0x0008) [0x0000000000000000]               
	struct FAnimationData                              CurrentAnimation;                              // 0x09EC (0x003C) [0x0000000000000000]               
	TArray<struct FDelayedNoise>                       DelayedNoises;                                 // 0x0A28 (0x0010) [0x0000000000500000] (CPF_NeedCtorLink)
	float                                              NoiseChannelLoudness[0x3];                     // 0x0A38 (0x000C) [0x0000000000000000]               
	struct FDisturbanceSource                          VisualDisturbance;                             // 0x0A44 (0x0020) [0x0000000000000000]               
	struct FDisturbanceSource                          AudioDisturbance;                              // 0x0A64 (0x0020) [0x0000000000000000]               
	struct FDisturbanceData                            Disturbance;                                   // 0x0A84 (0x0048) [0x0000000000000000]               
	struct FScriptedDisturbanceData                    ScriptedDisturbance;                           // 0x0ACC (0x001C) [0x0000000000000000]               
	class UAkEvent*                                    SndReactToDisturbance;                         // 0x0AE8 (0x0008) [0x0000000000000002] (CPF_Const)   
	TArray<struct FAIEventCondition>                   EventConditions;                               // 0x0AF0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FAIPerceptionRules                          PerceptionRules;                               // 0x0B00 (0x0070) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<class UOLSeqAct_AIWaitForEvent*>            WaitForEventSeqActs;                           // 0x0B70 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<class UOLSeqAct_AIWaitForTrigger*>          WaitForTriggerSeqActs;                         // 0x0B80 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FMovementData                               CurrentMove;                                   // 0x0B90 (0x0038) [0x0000000000000000]               
	struct FMovementData                               NextMove;                                      // 0x0BC8 (0x0038) [0x0000000000000000]               
	TArray<struct FVector>                             CurrentMoveManualPath;                         // 0x0C00 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              DynamicPathCheckTime;                          // 0x0C10 (0x0004) [0x0000000000000002] (CPF_Const)   
	uint32_t                                           bRegeneratePath : 1;                           // 0x0C14 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bRegenerateWhilePerforming : 1;                // 0x0C14 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bUseFormationPathing : 1;                      // 0x0C14 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bCloseAlreadyOpenDoors : 1;                    // 0x0C14 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bCloseDoorsBehind : 1;                         // 0x0C14 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bOnRightSideOfBed : 1;                         // 0x0C14 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bOpeningDoor : 1;                              // 0x0C14 (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bBreachingDoor : 1;                            // 0x0C14 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bFinishedDoor : 1;                             // 0x0C14 (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bCancelBash : 1;                               // 0x0C14 (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bNoAccelToTarget : 1;                          // 0x0C14 (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bAvoiding : 1;                                 // 0x0C14 (0x0004) [0x0000000000000000] [0x00000800] 
	uint32_t                                           bOverriddenMusic : 1;                          // 0x0C14 (0x0004) [0x0000000000000000] [0x00001000] 
	uint32_t                                           bOverrideMusicStateAsMinimum : 1;              // 0x0C14 (0x0004) [0x0000000000000000] [0x00002000] 
	uint32_t                                           bKnockedBack : 1;                              // 0x0C14 (0x0004) [0x0000000000000000] [0x00004000] 
	uint32_t                                           bBrainDead : 1;                                // 0x0C14 (0x0004) [0x0000000000000000] [0x00008000] 
	uint32_t                                           bDebugBehaviorTransitions : 1;                 // 0x0C14 (0x0004) [0x0000000000000001] [0x00010000] (CPF_Edit)
	uint32_t                                           bDebugThrowCalculations : 1;                   // 0x0C14 (0x0004) [0x0000000000000001] [0x00020000] (CPF_Edit)
	float                                              LastRegeneratePathTime;                        // 0x0C18 (0x0004) [0x0000000000000000]               
	struct FVector                                     NavigationExtent;                              // 0x0C1C (0x000C) [0x0000000000000000]               
	struct FVector                                     FormationNavigationExtent;                     // 0x0C28 (0x000C) [0x0000000000000000]               
	class UGameAICommand*                              QueuedCommand;                                 // 0x0C34 (0x0008) [0x0000000000000000]               
	class UOLSeqAct_AISetLeash*                        LeashSeqAct;                                   // 0x0C3C (0x0008) [0x0000000000000000]               
	class AOLDoor*                                     ActiveDoor;                                    // 0x0C44 (0x0008) [0x0000000000000000]               
	class AOLLedgeMarker*                              ActiveLedge;                                   // 0x0C4C (0x0008) [0x0000000000000000]               
	class AOLBashableObject*                           ActiveBashable;                                // 0x0C54 (0x0008) [0x0000000000000000]               
	class AOLHidingSpot*                               ActiveLocker;                                  // 0x0C5C (0x0008) [0x0000000000000000]               
	class AOLAIVaultMarker*                            ActiveVault;                                   // 0x0C64 (0x0008) [0x0000000000000000]               
	class AOLJumpMarker*                               ActiveJump;                                    // 0x0C6C (0x0008) [0x0000000000000000]               
	class AOLWindow*                                   ActiveWindow;                                  // 0x0C74 (0x0008) [0x0000000000000000]               
	class AOLCrawlMarker*                              ActiveCrawl;                                   // 0x0C7C (0x0008) [0x0000000000000000]               
	class AOLBeamMarker*                               ActiveBeam;                                    // 0x0C84 (0x0008) [0x0000000000000000]               
	class AOLWardrobe*                                 ActiveWardrobe;                                // 0x0C8C (0x0008) [0x0000000000000000]               
	class AOLAmbushMarker*                             ActiveAmbush;                                  // 0x0C94 (0x0008) [0x0000000000000000]               
	struct FMovingStateVars                            MovingState;                                   // 0x0C9C (0x0020) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FVector                                     MoveLastLocation;                              // 0x0CBC (0x000C) [0x0000000000000000]               
	struct FVector                                     MoveLastTargetActorVelocity;                   // 0x0CC8 (0x000C) [0x0000000000000000]               
	float                                              CheckStuckTimer;                               // 0x0CD4 (0x0004) [0x0000000000000000]               
	float                                              CheckStuckSpeedThreshold;                      // 0x0CD8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LookAheadTimer;                                // 0x0CDC (0x0004) [0x0000000000000000]               
	float                                              StuckRepathDelayTimer;                         // 0x0CE0 (0x0004) [0x0000000000000000]               
	float                                              IgnoreTimer;                                   // 0x0CE4 (0x0004) [0x0000000000000000]               
	float                                              WaitForMoveTime;                               // 0x0CE8 (0x0004) [0x0000000000000000]               
	float                                              OverriddenMusicDistance;                       // 0x0CEC (0x0004) [0x0000000000000000]               
	struct FAttackData                                 Attack;                                        // 0x0CF0 (0x0038) [0x0000000000000000]               
	TArray<class UOLSeqAct_AICondition*>               ActiveConditionSeqs;                           // 0x0D28 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<struct FDebugConditionResult>               ConditionResults;                              // 0x0D38 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<struct FErrorInfo>                          ErrorLog;                                      // 0x0D48 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<struct FEventInfo>                          EventLog;                                      // 0x0D58 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<struct FAILogInfo>                          FullLog;                                       // 0x0D68 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            DebugMovingStateId;                            // 0x0D78 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            DebugMovingBeginId;                            // 0x0D7C (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLBot");
		}

		return uClassPointer;
	};

	void DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos);
	void NativeDisplayDebug(class UCanvas* aCanvas, float& out_YL, float& out_YPos);
	bool ShouldLogToConsole();
	void eventAILog_Internal(class FString LogText, struct FName optionalLogCategory, bool optionalBForce);
	void eventDebugMessagePlayer(class FString msg);
	void ToggleAIAlwaysSeePlayer(bool bEnable);
	void OnToggleAIAlwaysSeePlayer(class UOLSeqAct_ToggleAIAlwaysSeePlayer* Action);
	void eventIgnoreTarget(float Time);
	void eventToggleAIIgnorePlayer(bool bEnable);
	void OnToggleAIIgnorePlayer(class UOLSeqAct_ToggleAIIgnorePlayer* Action);
	void eventStartWaitForDoor();
	bool TargetReachable();
	void eventStartDynamicMove(struct FMovementData aData);
	bool eventStartMove(struct FMovementData aData);
	bool eventNotifyBump(class AActor* Other, struct FVector HitNormal);
	void eventNotifyPathChanged();
	bool eventGeneratePathWithMaxDist(struct FVector Goal, float WithinDistance, float MaxPathDistance);
	bool eventGeneratePathToLocation(struct FVector Goal, float optionalWithinDistance, bool optionalBAllowPartialPath);
	bool eventGeneratePathToActor(class AActor* Goal, float optionalWithinDistance, bool optionalBAllowPartialPath);
	void AddBasePathContraints();
	void eventKnockbackTickNotify();
	void eventKnockbackStartNotify();
	void eventBreakDoorNotify();
	void eventBashDoorNotify();
	void AttackCycleEnd();
	void ClearAnimation();
	void PlayFullBodyAnim(struct FName AnimName, float Rate, float optionalBlendInTime, float optionalBlendOutTime, bool optionalBLooping, float optionalStartTime, float optionalEndTime);
	void PushQueuedCommand();
	bool eventQueueAICommand(class UGameAICommand* Cmd);
	void UnPossess();
	void Possess(class APawn* aPawn, bool bVehicleTransition);
	void eventDestroyed();
	void InitNavigationHandle();
	void PostBeginPlay();
	void LogErrorNotOnNavmesh();
	void LogErrorFailedMove();
	void TestLogAIToConsole(int32_t Verbosity);
	void UpdateClosingDoorsState();
	bool CanUnlockDoor(class AOLDoor* aDoor);
	bool ShouldCloseDoor(class AOLDoor* aDoor);
	bool GetDoorApproachPoint(class AOLDoor* aDoor, struct FVector& ApproachPoint);
	bool GetClosestPointToActor(class AActor* ActorToCheck, bool optionalBForceNudging, struct FVector& NewPoint, float& NewBuffer);
	bool GetClosestPointOnNavMesh(struct FVector PointToCheck, bool optionalBForceNudging, struct FVector& out_NewPoint);
	class AOLWaypoint* GetCurrentWaypoint();
	class UOLAICmd_MoveAbility* GetMoveCommand();
	bool IsPerformingMoveAbility();
	bool IsPlayerOnVaultingPath();
	bool IsPlayerOnBrokenSideOfDoor(class AOLDoor* door);
	bool IsInDamageRange();
	bool IsInFinalAttackRange();
	bool IsInApproachAttackRange();
	bool IsInCrouchingAttackRange(float optionalForwardRangeFactor);
	bool IsInCrawlingAttackRange(float optionalForwardRangeFactor);
	bool IsInGrabUnderAttackRange();
	bool IsInAttackRange();
	bool TargetInSpecialLocation();
	bool CanSeePlayer();
	bool TryTurnAtDestination();
	bool HasReachedDestination();
	void OnMoveSucceeded();
	void MoveDynamic();
	void MoveToPoint(class AActor* ViewFocus, float DesiredOffset, struct FVector& Dest);
	void MoveAlongPath(TArray<struct FVector> PathPoints, class AActor* optionalFocusTarget);
	void WaitForCrawlEngaged();
	void WaitForSpecialMove(bool optionalBNoDelay);
	void WaitForFullBodyAnim();
	void TargetUnreacheable();
	void PushPlayer();
	bool TryKnockbackTarget();
	bool TryDamageTarget(bool bNonFatal);
	void FinishMatinee();
	void BeginMatinee();
	bool PerformAttackCheck(bool optionalBForSynchedAnim);
	bool PerformGrabCheck();
	void EndDoorTraversal();
	void StartDoorTraversal(bool bReversed);
	void StopMoving(bool optionalBAborted);
	void RegeneratePath();
	bool SetNavmeshValidatedMovePoint(bool optionalBForceNudging, bool optionalBQuiet);
	bool GeneratePath(bool optionalBQuiet);
	void ClearAllActivities();
	void ClearDestination();
	void ClearInvestigation();
	void ClearNextMove();
	void ClearCurrentMove();
};

// Class OLGame.OLAICmd_MoveAbility
// 0x0048 OR 0x00D4 (0x00D4 - 0x008C)
// 72 OR 212 (212 - 140)
class UOLAICmd_MoveAbility : public UGameAICommand
{
public:
	struct FVector                                     CurrentDestination;                            // 0x008C (0x000C) [0x0000000000000000]               
	struct FVector                                     AnimStartPos;                                  // 0x0098 (0x000C) [0x0000000000000000]               
	struct FVector                                     AnimStartDir;                                  // 0x00A4 (0x000C) [0x0000000000000000]               
	uint32_t                                           bReversed : 1;                                 // 0x00B0 (0x0004) [0x0000000000000000] [0x00000001] 
	class AOLBot*                                      ClosestBot;                                    // 0x00B4 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UOLAICmd_MoveAbility*                        TempMoveAbility;                               // 0x00BC (0x0008) [0x0000000000002000] (CPF_Transient)
	TArray<struct FVector>                             TempPath;                                      // 0x00C4 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAICmd_MoveAbility");
		}

		return uClassPointer;
	};

	bool TurnBeforePerform();
	bool MustTurnBeforePerform();
	bool ShouldWaitBeforeUsing();
	bool IsObjectInUse();
	void ModifyPath(struct FVector NewDestination, TArray<struct FVector>& NewPath);
	bool ModifyApproach(struct FVector& NewDestination);
	void Completed();
	void Popped();
	void Pushed();
};

// Class OLGame.OLAICmd_MoveAbility_Bash
// 0x0014 OR 0x00E8 (0x00E8 - 0x00D4)
// 20 OR 232 (232 - 212)
class UOLAICmd_MoveAbility_Bash : public UOLAICmd_MoveAbility
{
public:
	class AOLBashableObject*                           Bashable;                                      // 0x00D4 (0x0008) [0x0000000000000000]               
	struct FVector                                     LastDestination;                               // 0x00DC (0x000C) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAICmd_MoveAbility_Bash");
		}

		return uClassPointer;
	};

	static class UOLAICmd_MoveAbility_Bash* eventMoveThruBashable(class AOLBot* Bot, class AOLBashableObject* InBashable, struct FVector InitialDestination, bool bInReversed);
};

// Class OLGame.OLAICmd_MoveAbility_Door
// 0x001C OR 0x00F0 (0x00F0 - 0x00D4)
// 28 OR 240 (240 - 212)
class UOLAICmd_MoveAbility_Door : public UOLAICmd_MoveAbility
{
public:
	class AOLDoor*                                     door;                                          // 0x00D4 (0x0008) [0x0000000000000000]               
	struct FVector                                     LastDestination;                               // 0x00DC (0x000C) [0x0000000000000000]               
	int32_t                                            BashIter;                                      // 0x00E8 (0x0004) [0x0000000000000000]               
	uint32_t                                           bUnlockingDoor : 1;                            // 0x00EC (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAICmd_MoveAbility_Door");
		}

		return uClassPointer;
	};

	void AutomaticDoorOpen();
	void CancelPlayerInteraction();
	void Cleanup();
	int32_t GetDoorBashCount();
	bool ShouldWaitBeforeUsing();
	bool IsObjectInUse();
	void Cancel();
	void Popped();
	bool ModifyApproach(struct FVector& NewDestination);
	bool IsDoorOpen(class AOLDoor* TestDoor);
	static class UOLAICmd_MoveAbility_Door* eventMoveThruDoor(class AOLBot* Bot, class AOLDoor* InDoor, struct FVector InitialDestination, bool bInReversed);
};

// Class OLGame.OLAICmd_MoveAbility_EnterBeam
// 0x0008 OR 0x00DC (0x00DC - 0x00D4)
// 8 OR 220 (220 - 212)
class UOLAICmd_MoveAbility_EnterBeam : public UOLAICmd_MoveAbility
{
public:
	class AOLBeamMarker*                               BeamMarker;                                    // 0x00D4 (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAICmd_MoveAbility_EnterBeam");
		}

		return uClassPointer;
	};

	static class UOLAICmd_MoveAbility_EnterBeam* eventMoveToBeam(class AOLBot* Bot, class AOLBeamMarker* InMarker, struct FVector InitialDestination);
};

// Class OLGame.OLAICmd_MoveAbility_EnterCrawl
// 0x0008 OR 0x00DC (0x00DC - 0x00D4)
// 8 OR 220 (220 - 212)
class UOLAICmd_MoveAbility_EnterCrawl : public UOLAICmd_MoveAbility
{
public:
	class AOLCrawlMarker*                              CrawlMarker;                                   // 0x00D4 (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAICmd_MoveAbility_EnterCrawl");
		}

		return uClassPointer;
	};

	static class UOLAICmd_MoveAbility_EnterCrawl* eventMoveToCrawl(class AOLBot* Bot, class AOLCrawlMarker* InMarker, struct FVector InitialDestination);
	bool ShouldWaitBeforeUsing();
};

// Class OLGame.OLAICmd_MoveAbility_Jump
// 0x0008 OR 0x00DC (0x00DC - 0x00D4)
// 8 OR 220 (220 - 212)
class UOLAICmd_MoveAbility_Jump : public UOLAICmd_MoveAbility
{
public:
	class AOLJumpMarker*                               JumpMarker;                                    // 0x00D4 (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAICmd_MoveAbility_Jump");
		}

		return uClassPointer;
	};

	static class UOLAICmd_MoveAbility_Jump* eventMoveThruJump(class AOLBot* Bot, class AOLJumpMarker* InMarker, struct FVector InitialDestination);
};

// Class OLGame.OLAICmd_MoveAbility_Ledge
// 0x0008 OR 0x00DC (0x00DC - 0x00D4)
// 8 OR 220 (220 - 212)
class UOLAICmd_MoveAbility_Ledge : public UOLAICmd_MoveAbility
{
public:
	class AOLLedgeMarker*                              Ledge;                                         // 0x00D4 (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAICmd_MoveAbility_Ledge");
		}

		return uClassPointer;
	};

	static class UOLAICmd_MoveAbility_Ledge* eventMoveThruLedge(class AOLBot* Bot, class AOLLedgeMarker* InLedge, struct FVector InitialDestination, bool bInReversed);
};

// Class OLGame.OLAICmd_MoveAbility_Vault
// 0x0014 OR 0x00E8 (0x00E8 - 0x00D4)
// 20 OR 232 (232 - 212)
class UOLAICmd_MoveAbility_Vault : public UOLAICmd_MoveAbility
{
public:
	class AOLAIVaultMarker*                            VaultMarker;                                   // 0x00D4 (0x0008) [0x0000000000000000]               
	struct FVector                                     NextPoint;                                     // 0x00DC (0x000C) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAICmd_MoveAbility_Vault");
		}

		return uClassPointer;
	};

	static class UOLAICmd_MoveAbility_Vault* eventMoveThruLedge(class AOLBot* Bot, class AOLAIVaultMarker* InMarker, struct FVector InitialDestination, bool bInReversed);
};

// Class OLGame.OLAICmd_MoveAbility_Window
// 0x0014 OR 0x00E8 (0x00E8 - 0x00D4)
// 20 OR 232 (232 - 212)
class UOLAICmd_MoveAbility_Window : public UOLAICmd_MoveAbility
{
public:
	class AOLWindow*                                   Window;                                        // 0x00D4 (0x0008) [0x0000000000000000]               
	struct FVector                                     NextPoint;                                     // 0x00DC (0x000C) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAICmd_MoveAbility_Window");
		}

		return uClassPointer;
	};

	bool ShouldWaitBeforeUsing();
	bool IsObjectInUse();
	void Cancel();
	void Popped();
	static class UOLAICmd_MoveAbility_Window* eventMoveThruWindow(class AOLBot* Bot, class AOLWindow* InWindow, struct FVector InitialDestination, bool bInReversed);
};

// Class OLGame.OLAIConfig
// 0x12BC OR 0x1324 (0x1324 - 0x0068)
// 4796 OR 4900 (4900 - 104)
class UOLAIConfig : public UObject
{
public:
	class FString                                      Description;                                   // 0x0068 (0x0010) [0x0000000800400001] (CPF_Edit | CPF_NeedCtorLink)
	class UOLAIConfig*                                 Parent;                                        // 0x0078 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FAIConfigData                               Config;                                        // 0x0080 (0x12A4) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAIConfig");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAIContextualVOAsset
// 0x0030 OR 0x0098 (0x0098 - 0x0068)
// 48 OR 152 (152 - 104)
class UOLAIContextualVOAsset : public UObject
{
public:
	TArray<struct FVOMapping>                          Mappings;                                      // 0x0068 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<class UAkEvent*>                            ContinuousSoundStart;                          // 0x0078 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<class UAkEvent*>                            ContinuousSoundStop;                           // 0x0088 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAIContextualVOAsset");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAICoordinator
// 0x0014 OR 0x007C (0x007C - 0x0068)
// 20 OR 124 (124 - 104)
class UOLAICoordinator : public UObject
{
public:
	TArray<struct FBotCollisionInfo>                   CollisionData;                                 // 0x0068 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              LastReactToDisturbanceSndTime;                 // 0x0078 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAICoordinator");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAIGroup
// 0x0080 OR 0x00E8 (0x00E8 - 0x0068)
// 128 OR 232 (232 - 104)
class UOLAIGroup : public UObject
{
public:
	TArray<class AOLBot*>                              Bots;                                          // 0x0068 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class AOLBot*                                      Leader;                                        // 0x0078 (0x0008) [0x0000000000000000]               
	uint32_t                                           bExplicitLeader : 1;                           // 0x0080 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bPerformingGroupMove : 1;                      // 0x0080 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bSxSLeaderOnLeft : 1;                          // 0x0080 (0x0004) [0x0000000000000000] [0x00000004] 
	EGroupFormation                                    DesiredFormationStyle;                         // 0x0084 (0x0001) [0x0000000000000000]               
	EGroupFormation                                    FormationStyle;                                // 0x0085 (0x0001) [0x0000000000000000]               
	float                                              FormationSpacing;                              // 0x0088 (0x0004) [0x0000000000000000]               
	float                                              FormationPathingDist;                          // 0x008C (0x0004) [0x0000000000000000]               
	TArray<class AOLBot*>                              FormationPlacement;                            // 0x0090 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<struct FVector2D>                           LeaderRelativeFormationOffsets;                // 0x00A0 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<int32_t>                                    ChainParentIdx;                                // 0x00B0 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<float>                                      NodeSmoothedYaw;                               // 0x00C0 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<struct FVector>                             FormationSpots;                                // 0x00D0 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              SmoothedLeaderYaw;                             // 0x00E0 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LastFormationUpdatedTime;                      // 0x00E4 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAIGroup");
		}

		return uClassPointer;
	};

	void UseFallbackFormation();
	void UseDesiredFormation();
};

// Class OLGame.OLAIInvestigationPoint
// 0x0030 OR 0x0278 (0x0278 - 0x0248)
// 48 OR 632 (632 - 584)
class AOLAIInvestigationPoint : public AActor
{
public:
	uint32_t                                           bAnimNarrow : 1;                               // 0x0248 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bAnimBroad : 1;                                // 0x0248 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bAnim360 : 1;                                  // 0x0248 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bLoopAnimation : 1;                            // 0x0248 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bAlignAnimation : 1;                           // 0x0248 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bAlignRotationOnly : 1;                        // 0x0248 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bEnabledWhenAware : 1;                         // 0x0248 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bEnabledWhenUnaware : 1;                       // 0x0248 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	struct FName                                       SpecificAnimToPlay;                            // 0x024C (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              WaitTime;                                      // 0x0254 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ActivationRadius;                              // 0x0258 (0x0004) [0x0000000000000001] (CPF_Edit)    
	EIRotationAlignBehavior                            RotationAlignBehavior;                         // 0x025C (0x0001) [0x0000000000000001] (CPF_Edit)    
	class AActor*                                      LookAtTarget;                                  // 0x0260 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UOLInvestigationComponent*                   InvestigationComponent;                        // 0x0268 (0x0008) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UCylinderComponent*                          ActivationCylinder;                            // 0x0270 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAIInvestigationPoint");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAIInvestigationVolume
// 0x0014 OR 0x0298 (0x0298 - 0x0284)
// 20 OR 664 (664 - 644)
class AOLAIInvestigationVolume : public AVolume
{
public:
	int32_t                                            MaxConcurrentBots;                             // 0x0284 (0x0004) [0x0000000000000001] (CPF_Edit)    
	TArray<class AOLBot*>                              InvestigatingBots;                             // 0x0288 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAIInvestigationVolume");
		}

		return uClassPointer;
	};

	void eventProcessActorSetVolume(class AActor* Other);
};

// Class OLGame.OLAISightComponent
// 0x002F OR 0x00BC (0x00BC - 0x008D)
// 47 OR 188 (188 - 141)
class UOLAISightComponent : public UActorComponent
{
public:
	class AOLBot*                                      Bot;                                           // 0x0090 (0x0008) [0x0000000000000000]               
	uint32_t                                           CanSeeTarget : 1;                              // 0x0098 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           CouldSeeTarget : 1;                            // 0x0098 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bHasDirectLineOfSightToPlayer : 1;             // 0x0098 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bPlayerClearlyVisible : 1;                     // 0x0098 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bPlayerBarelyVisibleInDarkness : 1;            // 0x0098 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bPlayerCloseFacing : 1;                        // 0x0098 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           IsInClose : 1;                                 // 0x0098 (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           IsInNarrowCone : 1;                            // 0x0098 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           IsInWideCone : 1;                              // 0x0098 (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           IsPlayerSeenThroughWindow : 1;                 // 0x0098 (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bPeeking : 1;                                  // 0x0098 (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bAwareOfPlayerSpecialLocation : 1;             // 0x0098 (0x0004) [0x0000000000000000] [0x00000800] 
	uint32_t                                           bDebugSight : 1;                               // 0x0098 (0x0004) [0x0000000000004000] [0x00001000] (CPF_Config)
	uint32_t                                           bDebugVisibilityChecks : 1;                    // 0x0098 (0x0004) [0x0000000000004000] [0x00002000] (CPF_Config)
	struct FVector                                     SawPlayerGoUnderLastPosition;                  // 0x009C (0x000C) [0x0000000000000000]               
	float                                              SawPlayerGoUnderMaxDistance;                   // 0x00A8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LoseTimer;                                     // 0x00AC (0x0004) [0x0000000000000000]               
	float                                              DistanceToPlayer;                              // 0x00B0 (0x0004) [0x0000000000000000]               
	float                                              HorizontalAngleToPlayer;                       // 0x00B4 (0x0004) [0x0000000000000000]               
	float                                              VerticalAngleToPlayer;                         // 0x00B8 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAISightComponent");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLNavigationHandle
// 0x0018 OR 0x01C0 (0x01C0 - 0x01A8)
// 24 OR 448 (448 - 424)
class UOLNavigationHandle : public UNavigationHandle
{
public:
	TArray<struct FMovePoint>                          MovePoints;                                    // 0x01A8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            LastMovePointIdxForPath;                       // 0x01B8 (0x0004) [0x0000000000000000]               
	uint32_t                                           bDebugMovePoints : 1;                          // 0x01BC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLNavigationHandle");
		}

		return uClassPointer;
	};

	bool PointReachable(struct FVector Point, struct FVector optionalOverrideStartPoint, bool optionalBAllowHitsInEndCollisionBox);
	bool TrimPathByDistance(float DistanceToTrim, bool optionalBStopAtMeshObject, struct FVector& out_NewDestination);
	bool TrimPathToLastClosedDoor(struct FVector& out_NewDestination);
	void ClearPath();
	void PopMoveLocation();
	bool GetNextMovePath(float ArrivalDistance, TArray<struct FVector>& out_MovePath);
	bool GetNextMoveLocation(float ArrivalDistance, struct FVector& out_MoveDest);
	bool FindPath(class AActor*& out_DestActor, int32_t& out_DestItem);
};

// Class OLGame.OLNavMeshPath_SimilarToLastPath
// 0x0004 OR 0x0084 (0x0084 - 0x0080)
// 4 OR 132 (132 - 128)
class UOLNavMeshPath_SimilarToLastPath : public UNavMeshPathConstraint
{
public:
	float                                              DifferentDirectionPenalty;                     // 0x0080 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLNavMeshPath_SimilarToLastPath");
		}

		return uClassPointer;
	};

	void eventRecycle();
	static bool SimilarToLastPath(class UNavigationHandle* NavHandle);
};

// Class OLGame.OLEnemyPawn
// 0x4F30 OR 0xB5B0 (0xB5B0 - 0x6680)
// 20272 OR 46512 (46512 - 26240)
class AOLEnemyPawn : public AOLPawn
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObstacle;        // 0x6680 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;          // 0x6688 (0x0008) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class UClass*                                      NPCController;                                 // 0x6690 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class AOLBot*                                      Bot;                                           // 0x6698 (0x0008) [0x0000000000000000]               
	class USkeletalMeshComponent*                      HeadMesh;                                      // 0x66A0 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        WeaponMesh;                                    // 0x66A8 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class USkeletalMeshComponent*                      AnimatedWeaponMesh;                            // 0x66B0 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	struct FWeaponData                                 Weapon;                                        // 0x66B8 (0x0018) [0x0000000000000000]               
	struct FWeaponTypeData                             Weapons[0x7];                                  // 0x66D0 (0x008C) [0x0000000000000000]               
	class AOLFlashLight*                               FlashlightActor;                               // 0x675C (0x0008) [0x0000000000000000]               
	struct FFlashlightData                             Flashlight;                                    // 0x6764 (0x005C) [0x0000000000000000]               
	class UClass*                                      FlashlightClass;                               // 0x67C0 (0x0008) [0x0000000000000002] (CPF_Const)   
	uint32_t                                           bNavMeshRegistered : 1;                        // 0x67C8 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bMovingToIntermediateLocation : 1;             // 0x67C8 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bHasPreferredPath : 1;                         // 0x67C8 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bCastShadowInNV : 1;                           // 0x67C8 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bEnableZAnchor : 1;                            // 0x67C8 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bLeftAnim : 1;                                 // 0x67C8 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bBackAnim : 1;                                 // 0x67C8 (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bInPlaceAnim : 1;                              // 0x67C8 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bFreezePoseActive : 1;                         // 0x67C8 (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bAnticipatingAttack : 1;                       // 0x67C8 (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bContinuousSoundPlaying : 1;                   // 0x67C8 (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bContinuousSoundPlayingChase : 1;              // 0x67C8 (0x0004) [0x0000000000000000] [0x00000800] 
	uint32_t                                           bDrawSteeringDebug : 1;                        // 0x67C8 (0x0004) [0x0000000000004000] [0x00001000] (CPF_Config)
	uint32_t                                           bUseAvoidSystem : 1;                           // 0x67C8 (0x0004) [0x0000000000000002] [0x00002000] (CPF_Const)
	uint32_t                                           bAttachWeaponToBone : 1;                       // 0x67C8 (0x0004) [0x0000000000000002] [0x00004000] (CPF_Const)
	uint32_t                                           bAutomaticDoorBash : 1;                        // 0x67C8 (0x0004) [0x0000000000000002] [0x00008000] (CPF_Const)
	uint32_t                                           bInvertVisionBone : 1;                         // 0x67C8 (0x0004) [0x0000000000000002] [0x00010000] (CPF_Const)
	struct FVector                                     LastNavMeshCheckLocation;                      // 0x67CC (0x000C) [0x0000000000002000] (CPF_Transient)
	float                                              LastNavMeshObstacleRegisterTime;               // 0x67D8 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              NavMeshObstacleRegistrationTime;               // 0x67DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     CurrentMovePathStart;                          // 0x67E0 (0x000C) [0x0000000000000000]               
	TArray<struct FVector>                             CurrentMovePath;                               // 0x67EC (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            CurrentMovePathIdx;                            // 0x67FC (0x0004) [0x0000000000000000]               
	struct FVector                                     LastMovePathPoint;                             // 0x6800 (0x000C) [0x0000000000000000]               
	TArray<class AOLStairsMarker*>                     StairsOnPath;                                  // 0x680C (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class AActor*                                      FocusTarget;                                   // 0x681C (0x0008) [0x0000000000000000]               
	struct FCatmullRomPathData                         CRPath;                                        // 0x6824 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<struct FVector>                             MovingTestPoints;                              // 0x6850 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              MovingTestTimer;                               // 0x6860 (0x0004) [0x0000000000000000]               
	int32_t                                            NumMovingTestPoints;                           // 0x6864 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              MovingTestLength;                              // 0x6868 (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FLocoModeParameters                         LocoModeParams[0xF];                           // 0x686C (0x03C0) [0x0000000000000000]               
	EAILocoMode                                        LocoMode;                                      // 0x6C2C (0x0001) [0x0000000000000000]               
	ERotationMode                                      RotationMode;                                  // 0x6C2D (0x0001) [0x0000000000000000]               
	EEnemyAnimStyle                                    AnimStyle;                                     // 0x6C2E (0x0001) [0x0000000000000000]               
	EAttackSide                                        AttackSide;                                    // 0x6C2F (0x0001) [0x0000000000000000]               
	EFacialAnimSource                                  FacialAnimSource;                              // 0x6C30 (0x0001) [0x0000000000000000]               
	EFacialSystemState                                 FacialSystemState;                             // 0x6C31 (0x0001) [0x0000000000000000]               
	EMultiplicityConfig                                DefaultMultiplicity;                           // 0x6C32 (0x0001) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     TargetVelocity;                                // 0x6C34 (0x000C) [0x0000000000000000]               
	float                                              TargetYaw;                                     // 0x6C40 (0x0004) [0x0000000000000000]               
	float                                              ForcedTransitionVelocity;                      // 0x6C44 (0x0004) [0x0000000000000000]               
	struct FVector                                     CurrentRepulsion;                              // 0x6C48 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     BaseVelocity;                                  // 0x6C54 (0x000C) [0x0000000000000000]               
	struct FVector                                     BaseTargetVelocity;                            // 0x6C60 (0x000C) [0x0000000000000000]               
	float                                              InstantTargetSpeed;                            // 0x6C6C (0x0004) [0x0000000000000000]               
	struct FVector                                     PreferredPathAnchor;                           // 0x6C70 (0x000C) [0x0000000000000000]               
	struct FVector                                     PreferredPathDirection;                        // 0x6C7C (0x000C) [0x0000000000000000]               
	class AOLPreferredPathMarker*                      PreferredPath;                                 // 0x6C88 (0x0008) [0x0000000000000000]               
	float                                              GroundSpeedTarget;                             // 0x6C90 (0x0004) [0x0000000000000000]               
	float                                              LastAnticipatedTurnTime;                       // 0x6C94 (0x0004) [0x0000000000000000]               
	struct FTurningMoveData                            TurningMove;                                   // 0x6C98 (0x002C) [0x0000000000000000]               
	struct FStartTransitionData                        AnimatedStart;                                 // 0x6CC4 (0x0010) [0x0000000000000000]               
	struct FStopTransitionData                         AnimatedStop;                                  // 0x6CD4 (0x0018) [0x0000000000000000]               
	struct FStairsData                                 Stairs;                                        // 0x6CEC (0x0024) [0x0000000000000000]               
	struct FEnemySplineData                            Spline;                                        // 0x6D10 (0x0010) [0x0000000000000000]               
	struct FEnemyCrawlData                             Crawl;                                         // 0x6D20 (0x008C) [0x0000000000000000]               
	struct FEnemyBeamData                              Beam;                                          // 0x6DAC (0x0008) [0x0000000000000000]               
	struct FEnemyJumpData                              Jump;                                          // 0x6DB4 (0x0028) [0x0000000000000000]               
	struct FEnemyPairedWalkData                        PairedWalk;                                    // 0x6DDC (0x006C) [0x0000000000000000]               
	struct FEnemyRandomSpeedData                       RandomSpeed;                                   // 0x6E48 (0x000C) [0x0000000000000000]               
	TArray<class UAnimSet*>                            AnimSetsArmed;                                 // 0x6E54 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<class UAnimSet*>                            AnimSetsFlashlight;                            // 0x6E64 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<class UAnimSet*>                            AnimSetsArmedFlashlight;                       // 0x6E74 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<class UAnimSet*>                            AnimSetsAlert;                                 // 0x6E84 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<class UAnimSet*>                            AnimSetsAlertArmed;                            // 0x6E94 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<class UAnimSet*>                            AnimSetsAlertFlashlight;                       // 0x6EA4 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<class UAnimSet*>                            AnimSetsAlertArmedFlashlight;                  // 0x6EB4 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<class UAnimSet*>                            AnimSetsArmedPartial;                          // 0x6EC4 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<class UAnimSet*>                            ClassSpecificAnimSets;                         // 0x6ED4 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<class UAnimSet*>                            SpawnerAnimSets;                               // 0x6EE4 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FEnemyAnimNodes                             AnimNodes;                                     // 0x6EF4 (0x0130) [0x0000000000000000]               
	int32_t                                            AnimLODLevel;                                  // 0x7024 (0x0004) [0x0000000000000000]               
	float                                              FallingDeathZ;                                 // 0x7028 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              MeshZAnchor;                                   // 0x702C (0x0004) [0x0000000000000000]               
	struct FVector                                     MeshOffset2D;                                  // 0x7030 (0x000C) [0x0000000000000000]               
	float                                              MeshPitchOffset;                               // 0x703C (0x0004) [0x0000000000000000]               
	float                                              MeshYawOffset;                                 // 0x7040 (0x0004) [0x0000000000000000]               
	float                                              MeshRollOffset;                                // 0x7044 (0x0004) [0x0000000000000000]               
	float                                              LastTryAdjustSizeTime;                         // 0x7048 (0x0004) [0x0000000000000000]               
	float                                              LastTryAdjustSizeHeight;                       // 0x704C (0x0004) [0x0000000000000000]               
	float                                              LastTryAdjustSizeRadius;                       // 0x7050 (0x0004) [0x0000000000000000]               
	struct FVector                                     LastTryAdjustSizeLocation;                     // 0x7054 (0x000C) [0x0000000000000000]               
	struct FFollowGroundData                           FollowGround;                                  // 0x7060 (0x001C) [0x0000000000000000]               
	struct FTurnOnSpotData                             TurnOnSpot;                                    // 0x707C (0x0010) [0x0000000000000000]               
	float                                              SpecialMoveBlendAlpha;                         // 0x708C (0x0004) [0x0000000000000000]               
	float                                              SpecialMoveRate;                               // 0x7090 (0x0004) [0x0000000000000000]               
	float                                              SpecialMoveStalledTimestamp;                   // 0x7094 (0x0004) [0x0000000000000000]               
	float                                              DoorAnimPlayRate;                              // 0x7098 (0x0004) [0x0000000000000000]               
	float                                              SmoothedDemonicYaw;                            // 0x709C (0x0004) [0x0000000000000000]               
	int32_t                                            NbFreezePoseGlitches;                          // 0x70A0 (0x0004) [0x0000000000000000]               
	float                                              FreezePoseGlitchNextStartTime;                 // 0x70A4 (0x0004) [0x0000000000000000]               
	float                                              FreezePoseGlitchDurationMin;                   // 0x70A8 (0x0004) [0x0000000000000000]               
	float                                              FreezePoseGlitchDurationMax;                   // 0x70AC (0x0004) [0x0000000000000000]               
	float                                              FreezePoseGlitchIntervalMin;                   // 0x70B0 (0x0004) [0x0000000000000000]               
	float                                              FreezePoseGlitchIntervalMax;                   // 0x70B4 (0x0004) [0x0000000000000000]               
	float                                              BreathingIntensity;                            // 0x70B8 (0x0004) [0x0000000000000000]               
	class UStaticMeshComponent*                        NVEyes;                                        // 0x70BC (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	TArray<struct FVOMapping>                          VOMappings;                                    // 0x70C4 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<struct FDelayedVO>                          DelayedVOContexts;                             // 0x70D4 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FConversationData                           CurrentConversation;                           // 0x70E4 (0x0024) [0x0000000000000000]               
	class UAkEvent*                                    DeathGripStartSound;                           // 0x7108 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FLookAtData                                 LookAt;                                        // 0x7110 (0x00B0) [0x0000000000000000]               
	struct FLookAtNoiseConfig                          LookAtNoisePresets[0x8];                       // 0x71C0 (0x00A0) [0x0000000000000000]               
	struct FIKParamsData                               IKParamsUnawareIdle;                           // 0x7260 (0x0054) [0x0000000000000000]               
	struct FIKParamsData                               IKParamsAlertIdle;                             // 0x72B4 (0x0054) [0x0000000000000000]               
	struct FIKParamsData                               IKParamsUnawareMoving;                         // 0x7308 (0x0054) [0x0000000000000000]               
	struct FIKParamsData                               IKParamsAlertMoving;                           // 0x735C (0x0054) [0x0000000000000000]               
	struct FEnemyHandIKData                            LeftHandIKData;                                // 0x73B0 (0x0008) [0x0000000000000000]               
	struct FEnemyHandIKData                            RightHandIKData;                               // 0x73B8 (0x0008) [0x0000000000000000]               
	struct FShoulderIKData                             ShoulderIK;                                    // 0x73C0 (0x0018) [0x0000000000000000]               
	float                                              AttackNormalDamage;                            // 0x73D8 (0x0004) [0x0000000000000000]               
	float                                              AttackCrawlDamage;                             // 0x73DC (0x0004) [0x0000000000000000]               
	float                                              AttackSpecialDamage;                           // 0x73E0 (0x0004) [0x0000000000000000]               
	float                                              UnstuckCheckTime;                              // 0x73E4 (0x0004) [0x0000000000004000] (CPF_Config)  
	struct FAIConfigData                               Config;                                        // 0x73E8 (0x12A4) [0x0000000000000000]               
	struct FAIConfigData                               DefaultConfig;                                 // 0x868C (0x12A4) [0x0000000000000000]               
	class UOLAIAnimConfig*                             AnimConfig;                                    // 0x9930 (0x0008) [0x0000000000000000]               
	class UOLAIConfig*                                 DebugConfigAsset;                              // 0x9938 (0x0008) [0x0000000000000000]               
	class UOLAIConfig*                                 DebugDefaultConfigAsset;                       // 0x9940 (0x0008) [0x0000000000000000]               
	struct FAIConfigData                               DebugBaseConfig;                               // 0x9948 (0x12A4) [0x0000000000000000]               
	class UOLAIConfig*                                 ExpectedBaseConfigAsset;                       // 0xABEC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FAIAnimMapping                              AnimMapping;                                   // 0xABF4 (0x0040) [0x0000000000000000]               
	struct FEnemyCapabilities                          Capabilities;                                  // 0xAC34 (0x0008) [0x0000000000000002] (CPF_Const)   
	TArray<struct FInvestigationAnimData>              InvestigationAnimParams;                       // 0xAC3C (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FDeathGripAnimSet                           DeathGripAnims[0x3];                           // 0xAC4C (0x0090) [0x0000000000000000]               
	struct FMiscTuningData                             MiscTuning;                                    // 0xACDC (0x0020) [0x0000000000000002] (CPF_Const)   
	class FString                                      SoundSwitchDoorMaterial;                       // 0xACFC (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      SoundSwitchParamDMWood;                        // 0xAD0C (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      SoundSwitchParamDMMetal;                       // 0xAD1C (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	struct FName                                       SoundSwitchWeaponType;                         // 0xAD2C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       SoundSwitchWeaponTypeParams[0x7];              // 0xAD34 (0x0038) [0x0000000000000002] (CPF_Const)   
	TArray<class UAkEvent*>                            SoundEventsContinuousStart;                    // 0xAD6C (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<class UAkEvent*>                            SoundEventsContinuousStop;                     // 0xAD7C (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<class UAkEvent*>                            SoundEventsContinuousChaseStart;               // 0xAD8C (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<class UAkEvent*>                            SoundEventsContinuousChaseStop;                // 0xAD9C (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<class UAkEvent*>                            SoundEventsDGStruggleStart;                    // 0xADAC (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<class UAkEvent*>                            SoundEventsDGStruggleStop;                     // 0xADBC (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            ContinuousSoundIndex;                          // 0xADCC (0x0004) [0x0000000000000000]               
	int32_t                                            DeathGripSoundIndex;                           // 0xADD0 (0x0004) [0x0000000000000000]               
	struct FName                                       VisionBone;                                    // 0xADD4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       WeaponAttachBone;                              // 0xADDC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       WeaponAttachSocket;                            // 0xADE4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       FlashlightAttachSocket;                        // 0xADEC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       LeftHandBone;                                  // 0xADF4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       LeftHandAuxBone;                               // 0xADFC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       HipBone;                                       // 0xAE04 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       PairedWalkHandAttackSocket;                    // 0xAE0C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameClimbUp50;                             // 0xAE14 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameClimbUp100;                            // 0xAE1C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameClimbDown50;                           // 0xAE24 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameClimbDown100;                          // 0xAE2C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameClimbUp50Chase;                        // 0xAE34 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameClimbUp100Chase;                       // 0xAE3C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameClimbDown50Chase;                      // 0xAE44 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameClimbDown100Chase;                     // 0xAE4C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameClimbDown200;                          // 0xAE54 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameClimbDown450;                          // 0xAE5C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameVault;                                 // 0xAE64 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameOpenDoorLeftPull;                      // 0xAE6C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameOpenDoorLeftPush;                      // 0xAE74 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameOpenDoorRightPull;                     // 0xAE7C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameOpenDoorRightPush;                     // 0xAE84 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameOpenDoorLeftPullWithClose;             // 0xAE8C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameOpenDoorLeftPushWithClose;             // 0xAE94 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameOpenDoorRightPullWithClose;            // 0xAE9C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameOpenDoorRightPushWithClose;            // 0xAEA4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCloseDoorLeftPull;                     // 0xAEAC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCloseDoorRightPull;                    // 0xAEB4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCloseDoorLeftPush;                     // 0xAEBC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCloseDoorRightPush;                    // 0xAEC4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameUnlockAndOpenDoorLeft;                 // 0xAECC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameUnlockAndOpenDoorRight;                // 0xAED4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameUnlockOpenAndCloseDoorLeft;            // 0xAEDC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameUnlockOpenAndCloseDoorRight;           // 0xAEE4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameBashDoor;                              // 0xAEEC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameBashDoorStart;                         // 0xAEF4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameBashDoorLoop;                          // 0xAEFC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameBashDoorEnd;                           // 0xAF04 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameBashDoorEndEquip;                      // 0xAF0C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameBashDoorFailed;                        // 0xAF14 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameOpenWindowPartialLow;                  // 0xAF1C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameOpenWindowPartialHigh;                 // 0xAF24 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameOpenWindowFullLow;                     // 0xAF2C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameOpenWindowFullHigh;                    // 0xAF34 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameBashThroughWindowLow;                  // 0xAF3C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameBashThroughWindowHigh;                 // 0xAF44 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAttack;                                // 0xAF4C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAttackLeft;                            // 0xAF54 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAttackRight;                           // 0xAF5C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAttackMiddle;                          // 0xAF64 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAttackQuick;                           // 0xAF6C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAttackBack;                            // 0xAF74 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAttackPlayerCrouched;                  // 0xAF7C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabSqueezeRight;                      // 0xAF84 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabSqueezeLeft;                       // 0xAF8C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabSqueezeFail;                       // 0xAF94 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameBashWallChase;                         // 0xAF9C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameBashTableChase;                        // 0xAFA4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameIdle;                                  // 0xAFAC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameIdlePose;                              // 0xAFB4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTurnOnSpotLeft90;                      // 0xAFBC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTurnOnSpotLeft180;                     // 0xAFC4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTurnOnSpotRight90;                     // 0xAFCC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTurnOnSpotRight180;                    // 0xAFD4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabBedLeft;                           // 0xAFDC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabBedRight;                          // 0xAFE4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabUnder;                             // 0xAFEC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabLocker;                            // 0xAFF4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSearchLocker;                          // 0xAFFC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSearchWindow;                          // 0xB004 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSearchUnder;                           // 0xB00C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSearchBarrel;                          // 0xB014 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSearchWardrobe;                        // 0xB01C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameGrabFatality;                          // 0xB024 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameRunChaseToIdleChase;                   // 0xB02C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameWalkToIdle;                            // 0xB034 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePushForward;                           // 0xB03C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePushLeft;                              // 0xB044 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePushRight;                             // 0xB04C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAvoidLeft;                             // 0xB054 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAvoidRight;                            // 0xB05C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameKnockbackLeft;                         // 0xB064 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameKnockbackRight;                        // 0xB06C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEquipWeapon;                           // 0xB074 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameUnequipWeapon;                         // 0xB07C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameChokeFatality;                         // 0xB084 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameNormalFatalityFront;                   // 0xB08C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameNormalFatalityBack;                    // 0xB094 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameNormalFatalityHatchetFront;            // 0xB09C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameFatalityLocker;                        // 0xB0A4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedFrontLeft;                    // 0xB0AC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedFrontRight;                   // 0xB0B4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedLeft90;                       // 0xB0BC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedLeft180;                      // 0xB0C4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedRight90;                      // 0xB0CC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedRight180;                     // 0xB0D4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedWaitFrontLeft;                // 0xB0DC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedWaitFrontRight;               // 0xB0E4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedWaitLeft90;                   // 0xB0EC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedWaitLeft180;                  // 0xB0F4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedWaitRight90;                  // 0xB0FC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedWaitRight180;                 // 0xB104 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedInvestigateFrontLeft;         // 0xB10C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedInvestigateFrontRight;        // 0xB114 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedInvestigateLeft90;            // 0xB11C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedInvestigateLeft180;           // 0xB124 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedInvestigateRight90;           // 0xB12C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedInvestigateRight180;          // 0xB134 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedIgnoreFrontLeft;              // 0xB13C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedIgnoreFrontRight;             // 0xB144 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedIgnoreLeft90;                 // 0xB14C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedIgnoreLeft180;                // 0xB154 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedIgnoreRight90;                // 0xB15C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedIgnoreRight180;               // 0xB164 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedChaseFrontLeft;               // 0xB16C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedChaseFrontRight;              // 0xB174 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedChaseLeft90;                  // 0xB17C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedChaseLeft180;                 // 0xB184 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedChaseRight90;                 // 0xB18C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedChaseRight180;                // 0xB194 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedAlarmFrontLeft;               // 0xB19C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedAlarmFrontRight;              // 0xB1A4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedAlarmLeft90;                  // 0xB1AC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedAlarmLeft180;                 // 0xB1B4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedAlarmRight90;                 // 0xB1BC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameDisturbedAlarmRight180;                // 0xB1C4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameReactToPlayerFront;                    // 0xB1CC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameReactToPlayerLeft90;                   // 0xB1D4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameReactToPlayerLeft180;                  // 0xB1DC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameReactToPlayerRight90;                  // 0xB1E4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameReactToPlayerRight180;                 // 0xB1EC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameMultiKillOwner;                        // 0xB1F4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameMultiKillAssitant;                     // 0xB1FC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterCrawl;                            // 0xB204 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitCrawl;                             // 0xB20C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterCrouch;                           // 0xB214 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitCrouch;                            // 0xB21C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAttackBarrel;                          // 0xB224 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAttackWardrobeLeftGeneric;             // 0xB22C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAttackWardrobeRightGeneric;            // 0xB234 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAttackWardrobeLeftGenericShort;        // 0xB23C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAttackWardrobeRightGenericShort;       // 0xB244 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAttackUnderwater;                      // 0xB24C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSlamDoorLeft;                          // 0xB254 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameSlamDoorRight;                         // 0xB25C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAttackCrawlingPlayerLeft;              // 0xB264 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAttackCrawlingPlayerFront;             // 0xB26C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAttackCrawlingPlayerRight;             // 0xB274 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitStairsBottomSmallSlowLeft;         // 0xB27C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitStairsBottomSmallSlowRight;        // 0xB284 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitStairsBottomSmallFastLeft;         // 0xB28C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitStairsBottomSmallFastRight;        // 0xB294 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitStairsBottomSmallRunLeft;          // 0xB29C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitStairsBottomSmallRunRight;         // 0xB2A4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitStairsBottomMedSlowLeft;           // 0xB2AC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitStairsBottomMedSlowRight;          // 0xB2B4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitStairsBottomMedFastLeft;           // 0xB2BC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitStairsBottomMedFastRight;          // 0xB2C4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitStairsBottomMedRunLeft;            // 0xB2CC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitStairsBottomMedRunRight;           // 0xB2D4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitStairsTopSmallSlowLeft;            // 0xB2DC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitStairsTopSmallSlowRight;           // 0xB2E4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitStairsTopSmallFastLeft;            // 0xB2EC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitStairsTopSmallFastRight;           // 0xB2F4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitStairsTopSmallRunLeft;             // 0xB2FC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitStairsTopSmallRunRight;            // 0xB304 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitStairsTopMedSlowLeft;              // 0xB30C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitStairsTopMedSlowRight;             // 0xB314 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitStairsTopMedFastLeft;              // 0xB31C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitStairsTopMedFastRight;             // 0xB324 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitStairsTopMedRunLeft;               // 0xB32C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitStairsTopMedRunRight;              // 0xB334 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEntryStairsBottomMedFastLeft;          // 0xB33C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEntryStairsBottomMedFastRight;         // 0xB344 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEntryStairsBottomMedRun2Left;          // 0xB34C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEntryStairsBottomMedRun2Right;         // 0xB354 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEntryStairsBottomMedRun3Left;          // 0xB35C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEntryStairsBottomMedRun3Right;         // 0xB364 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEntryStairsTopMedFastLeft;             // 0xB36C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEntryStairsTopMedFastRight;            // 0xB374 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEntryStairsTopMedRun2Left;             // 0xB37C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEntryStairsTopMedRun2Right;            // 0xB384 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEntryStairsTopMedRun3Left;             // 0xB38C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEntryStairsTopMedRun3Right;            // 0xB394 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterBeamPerchLeftFootL;               // 0xB39C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterBeamPerchLeftFootR;               // 0xB3A4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterBeamPerchRightFootL;              // 0xB3AC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterBeamPerchRightFootR;              // 0xB3B4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterBeamPerchLeftQuick;               // 0xB3BC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameEnterBeamPerchRightQuick;              // 0xB3C4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitPerchToBeamLeft;                   // 0xB3CC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameExitPerchToBeamRight;                  // 0xB3D4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameJumpBeamToBeamFwd;                     // 0xB3DC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameJumpBeamToBeamDown;                    // 0xB3E4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameJumpBeamToGroundFwd;                   // 0xB3EC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameJumpBeamToGroundDown;                  // 0xB3F4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameJumpGroundToGroundFwd;                 // 0xB3FC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameJumpGroundToGroundDown;                // 0xB404 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameJumpGroundToBeamFwd;                   // 0xB40C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameJumpGroundToBeamDown;                  // 0xB414 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameJumpFastFwd;                           // 0xB41C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameJumpFastDown;                          // 0xB424 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAttackCrawl;                           // 0xB42C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAttackCrouch;                          // 0xB434 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAttackBeam;                            // 0xB43C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCrouchFwd;                             // 0xB444 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameScrambleFwd;                           // 0xB44C (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     DoorOpenEndOffsetPushLeft;                     // 0xB454 (0x000C) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     DoorOpenEndOffsetPushRight;                    // 0xB460 (0x000C) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     DoorOpenEndOffsetPullLeft;                     // 0xB46C (0x000C) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     DoorOpenEndOffsetPullRight;                    // 0xB478 (0x000C) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     DoorOpenEndOffsetPushLeftWithClose;            // 0xB484 (0x000C) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     DoorOpenEndOffsetPushRightWithClose;           // 0xB490 (0x000C) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     DoorOpenEndOffsetPullLeftWithClose;            // 0xB49C (0x000C) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     DoorOpenEndOffsetPullRightWithClose;           // 0xB4A8 (0x000C) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     DoorBashEndOffset;                             // 0xB4B4 (0x000C) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     LockerInvestigateOffset;                       // 0xB4C0 (0x000C) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     LockerAttackOffset;                            // 0xB4CC (0x000C) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     BarrelAttackOffset;                            // 0xB4D8 (0x000C) [0x0000000000000002] (CPF_Const)   
	float                                              SqueezeAttackOffsetRight;                      // 0xB4E4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              SqueezeAttackOffsetLeft;                       // 0xB4E8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              SqueezeAttackOffsetFail;                       // 0xB4EC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabDistance;                                  // 0xB4F0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorOpenDistancePush;                          // 0xB4F4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorOpenDistancePull;                          // 0xB4F8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorBreakDistance;                             // 0xB4FC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DoorBreakFinishDistance;                       // 0xB500 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WindowInteractExpectedFwdDist;                 // 0xB504 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WindowInteractLowHeight;                       // 0xB508 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WindowInteractHighHeight;                      // 0xB50C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              NormalDropDownDistance;                        // 0xB510 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              NormalClimbUpDistance;                         // 0xB514 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ChasingDropDownDistance;                       // 0xB518 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ChasingClimbUpDistance;                        // 0xB51C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WallBashDistance;                              // 0xB520 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WallBashTime;                                  // 0xB524 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              TableBashDistance;                             // 0xB528 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WindowInvestigateOffsetInside;                 // 0xB52C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WindowInvestigateOffsetOutside;                // 0xB530 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabTargetVelocity;                            // 0xB534 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ThrowStartPlayerDistance;                      // 0xB538 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              ThrowStartPlayerZOffset;                       // 0xB53C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              CrawlEntryOffset;                              // 0xB540 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              BedInvestigateOffsetFwd;                       // 0xB544 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              BedInvestigateOffsetSide;                      // 0xB548 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              BedAttackOffsetLeftSide;                       // 0xB54C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              BedAttackOffsetLeftFwd;                        // 0xB550 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              BedAttackOffsetRightSide;                      // 0xB554 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              BedAttackOffsetRightFwd;                       // 0xB558 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              BarrelInvestigateOffsetFwd;                    // 0xB55C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WardrobeInvestigateOffsetFwd;                  // 0xB560 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabFromBarrelWaitDist;                        // 0xB564 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabFromBarrelExpectedDist;                    // 0xB568 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabFromWardrobeWaitDist;                      // 0xB56C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabFromWardrobeLeftExpectedDist;              // 0xB570 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              GrabFromWardrobeRightExpectedDist;             // 0xB574 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              SlamDoorLeftExpectedDistFwd;                   // 0xB578 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              SlamDoorLeftExpectedDistSide;                  // 0xB57C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              SlamDoorRightExpectedDistFwd;                  // 0xB580 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              SlamDoorRightExpectedDistSide;                 // 0xB584 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              AttackCrawlingPlayerLeftDistFwd;               // 0xB588 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              AttackCrawlingPlayerLeftDistSide;              // 0xB58C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              AttackCrawlingPlayerFrontDistFwd;              // 0xB590 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              AttackCrawlingPlayerFrontDistSide;             // 0xB594 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              AttackCrawlingPlayerRightDistFwd;              // 0xB598 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              AttackCrawlingPlayerRightDistSide;             // 0xB59C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              UnderwaterAttackDist;                          // 0xB5A0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              UnderwaterAttackExpectedOffset;                // 0xB5A4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              StairsStepHeight;                              // 0xB5A8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              MinPhaseMatchDestinationBuffer;                // 0xB5AC (0x0004) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLEnemyPawn");
		}

		return uClassPointer;
	};

	void FinishAIGroup();
	void BeginAIGroup();
	void eventOnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void NativeOnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void StartNormalAttack();
	void StartDoorKnockback(struct FVector Direction, bool bLocker);
	void StartKnockback(class AOLHero* Hero, struct FVector HitNormal);
	void StartAvoid(class AOLEnemyPawn* OtherPawn);
	void StopMoving();
	void StartMoving();
	void PlayFullBodyAnim(struct FName AnimName, float Rate, float optionalBlendInTime, float optionalBlendOutTime, bool optionalBLooping, float optionalStartTime, float optionalEndTime);
	bool eventPlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData);
	bool NativePlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData);
	void eventHideWeaponMatinee();
	void eventShowWeaponMatinee();
	void eventPushNotify();
	void eventKnockbackTickNotify();
	void eventKnockbackStartNotify();
	void eventBreakDoorNotify();
	void eventBashDoorNotify();
	void eventDamageTargetRangeTickNotify();
	void eventHeadButtRangeStartNotify();
	void eventPunchLHRangeStartNotify();
	void eventPunchRHRangeStartNotify();
	void eventDamageTargetRangeStartNotify();
	void eventDamageTargetNonFatal();
	void eventKickPlayerRightFoot();
	void eventDamageTarget();
	void eventWindowBreakNotify();
	void RestoreHiddenWeapon();
	void TemporaryHideWeapon();
	void HideWeapon();
	void ShowWeapon();
	void ExitStairsStartBlendOutNotify();
	void EnterStairsStartBlendInNotify();
	void DoorUnlockNotify();
	void WardrobeDoorEndNotify();
	void WardrobeDoorNotify();
	void WindowAnimEndNotify();
	void WindowAnimStartNotify();
	void NativeDestroyed();
	void eventPostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void PossessedBy(class AController* C, bool bVehicleTransition);
	void ZeroMovementVariables();
	void eventPostBeginPlay();
	bool HasRegisteredNavMeshRecently();
	void UpdateNavMeshObstacle();
	void UnregisterNavmeshObstacle();
	void RegisterNavMeshObstacle();
	void UpdateDifficultyBasedValues();
	void OnMoveAbilityCompleted();
	void EnterCrawl(class AOLCrawlMarker* CrawlMarker, bool bThroughPathfinding);
	void ExitBeam();
	void EnterBeam(class AOLBeamMarker* BeamMarker, class UOLSeqAct_AIBeam* BeamSeqAct);
	void StartJump(class AOLJumpMarker* JumpMarker, class UOLSeqAct_AIJump* JumpSeqAct);
	void StartDoorSpecialMove(ESpecialMoveType moveType);
	void BashThroughWindow();
	void OpenActiveWindow();
	void CancelSpecialMove();
	void StartSpecialMove(ESpecialMoveType moveType, struct FVector optionalTargetPosition, struct FVector optionalTargetDirection, EAdjustPositionTargetType optionalTargetType);
};

// Class OLGame.OLEnemyCrawler
// 0x0044 OR 0xB5F4 (0xB5F4 - 0xB5B0)
// 68 OR 46580 (46580 - 46512)
class AOLEnemyCrawler : public AOLEnemyPawn
{
public:
	uint32_t                                           bInAlertStance : 1;                            // 0xB5B0 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FName                                       AnimNameIdlePoseAlert;                         // 0xB5B4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTurnOnSpotLeft90Alert;                 // 0xB5BC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTurnOnSpotLeft180Alert;                // 0xB5C4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTurnOnSpotRight90Alert;                // 0xB5CC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameTurnOnSpotRight180Alert;               // 0xB5D4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCrawlerFatalityFront;                  // 0xB5DC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCrawlerFatalityBack;                   // 0xB5E4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameCrawlerAttackCrawlingPlayer;           // 0xB5EC (0x0008) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLEnemyCrawler");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLEnemyGeneric
// 0x0000 OR 0xB5B0 (0xB5B0 - 0xB5B0)
// 0 OR 46512 (46512 - 46512)
class AOLEnemyGeneric : public AOLEnemyPawn
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLEnemyGeneric");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLEnemySyphilitic
// 0x0000 OR 0xB5B0 (0xB5B0 - 0xB5B0)
// 0 OR 46512 (46512 - 46512)
class AOLEnemySyphilitic : public AOLEnemyGeneric
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLEnemySyphilitic");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLEnemyHeretic
// 0x0010 OR 0xB5C0 (0xB5C0 - 0xB5B0)
// 16 OR 46528 (46528 - 46512)
class AOLEnemyHeretic : public AOLEnemyPawn
{
public:
	struct FName                                       AnimNameFatalityHereticFront;                  // 0xB5B0 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameFatalityHereticBack;                   // 0xB5B8 (0x0008) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLEnemyHeretic");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLEnemyInnerDemon
// 0x0024 OR 0xB5D4 (0xB5D4 - 0xB5B0)
// 36 OR 46548 (46548 - 46512)
class AOLEnemyInnerDemon : public AOLEnemyPawn
{
public:
	class UNxForceFieldRadialComponent*                ForceField;                                    // 0xB5B0 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class AOLInnerDemonEffectActor*                    IDEffectActor;                                 // 0xB5B8 (0x0008) [0x0000000000000000]               
	float                                              InnerSphereRadius;                             // 0xB5C0 (0x0004) [0x0000000000000000]               
	float                                              OuterSphereRadius;                             // 0xB5C4 (0x0004) [0x0000000000000000]               
	float                                              LastScareTime;                                 // 0xB5C8 (0x0004) [0x0000000000000000]               
	struct FName                                       AnimNameInnerDemonFatalityFront;               // 0xB5CC (0x0008) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLEnemyInnerDemon");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLEnemyMartha
// 0x003C OR 0xB5EC (0xB5EC - 0xB5B0)
// 60 OR 46572 (46572 - 46512)
class AOLEnemyMartha : public AOLEnemyPawn
{
public:
	class UParticleSystemComponent*                    MaceParticles;                                 // 0xB5B0 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              DefaultParticlesRestartTime;                   // 0xB5B8 (0x0004) [0x0000000000000000]               
	class UPointLightComponent*                        MaceLight;                                     // 0xB5BC (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	struct FName                                       MaceSocketName;                                // 0xB5C4 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameMarthaFatalityFront;                   // 0xB5CC (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameMarthaFatalityBack;                    // 0xB5D4 (0x0008) [0x0000000000000002] (CPF_Const)   
	float                                              CurrentMaceGlow;                               // 0xB5DC (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bLightActivated : 1;                           // 0xB5E0 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	class UOLSeqAct_MartaStreet*                       MartaStreet;                                   // 0xB5E4 (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLEnemyMartha");
		}

		return uClassPointer;
	};

	bool eventPlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData);
};

// Class OLGame.OLEnemyNickAndLaird
// 0x0070 OR 0xB620 (0xB620 - 0xB5B0)
// 112 OR 46624 (46624 - 46512)
class AOLEnemyNickAndLaird : public AOLEnemyPawn
{
public:
	struct FName                                       AnimNameShootArrowFront;                       // 0xB5B0 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameShootArrowLeft;                        // 0xB5B8 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameShootArrowRight;                       // 0xB5C0 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAimingShootArrowFront;                 // 0xB5C8 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAimingShootArrowLeft;                  // 0xB5D0 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameAimingShootArrowRight;                 // 0xB5D8 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameNicAndLairdFatality;                   // 0xB5E0 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimatedArrowSocketName;                       // 0xB5E8 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       RestingArrowSocketName;                        // 0xB5F0 (0x0008) [0x0000000000000002] (CPF_Const)   
	class AOLArrow*                                    ActiveArrow;                                   // 0xB5F8 (0x0008) [0x0000000000000000]               
	uint32_t                                           bArrowIsAnimated : 1;                          // 0xB600 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bIsAiming : 1;                                 // 0xB600 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bAimingHasFullWeight : 1;                      // 0xB600 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              AimingYawLS;                                   // 0xB604 (0x0004) [0x0000000000000000]               
	float                                              AimingStateChangedTime;                        // 0xB608 (0x0004) [0x0000000000000000]               
	float                                              MaxAimingAngle;                                // 0xB60C (0x0004) [0x0000000000000002] (CPF_Const)   
	class UFaceFXAsset*                                LairdFFXAsset;                                 // 0xB610 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UFaceFXAsset*                                NicFFXAsset;                                   // 0xB618 (0x0008) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLEnemyNickAndLaird");
		}

		return uClassPointer;
	};

	void StopAnimatingArrow();
	void SpawnAndAnimateNewArrow();
	void SpawnNewArrow();
	void ArrowLaunch();
};

// Class OLGame.OLPawnJessica
// 0x0040 OR 0xB5F0 (0xB5F0 - 0xB5B0)
// 64 OR 46576 (46576 - 46512)
class AOLPawnJessica : public AOLEnemyPawn
{
public:
	class USkeletalMeshComponent*                      PonyTail;                                      // 0xB5B0 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	struct FName                                       AnimNameLeadingJessicaIdle;                    // 0xB5B8 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLeadingJessicaWalk;                    // 0xB5C0 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLeadingJessicaRun;                     // 0xB5C8 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLeadingJessicaIdleLookAt;              // 0xB5D0 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLeadingJessicaWalkLookAt;              // 0xB5D8 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLeadingJessicaRunLookAt;               // 0xB5E0 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UApexClothingAsset*                          JessicaVer2ApexAsset;                          // 0xB5E8 (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLPawnJessica");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLPawnLynn
// 0x00CC OR 0xB67C (0xB67C - 0xB5B0)
// 204 OR 46716 (46716 - 46512)
class AOLPawnLynn : public AOLEnemyPawn
{
public:
	class USkeletalMeshComponent*                      PonyTail;                                      // 0xB5B0 (0x0008) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	struct FName                                       AnimNamePregnantLynnIdle;                      // 0xB5B8 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnWalk;                      // 0xB5C0 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnRun;                       // 0xB5C8 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnBackwards;                 // 0xB5D0 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnTurning;                   // 0xB5D8 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnHurting;                   // 0xB5E0 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnWalkStrafeL;               // 0xB5E8 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnWalkStrafeR;               // 0xB5F0 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnRunStrafeL;                // 0xB5F8 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnRunStrafeR;                // 0xB600 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnIdleCAM;                   // 0xB608 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnWalkCAM;                   // 0xB610 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnRunCAM;                    // 0xB618 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnBackwardsCAM;              // 0xB620 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnTurningCAM;                // 0xB628 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnHurtingCAM;                // 0xB630 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnWalkStrafeLCAM;            // 0xB638 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnWalkStrafeRCAM;            // 0xB640 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnRunStrafeLCAM;             // 0xB648 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNamePregnantLynnRunStrafeRCAM;             // 0xB650 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLeadingLynnIdle;                       // 0xB658 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLeadingLynnWalk;                       // 0xB660 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLeadingLynnRun;                        // 0xB668 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FName                                       AnimNameLeadingLynnHurting;                    // 0xB670 (0x0008) [0x0000000000000002] (CPF_Const)   
	float                                              HurtingLynnSpeed;                              // 0xB678 (0x0004) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLPawnLynn");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLScout
// 0x0000 OR 0x0630 (0x0630 - 0x0630)
// 0 OR 1584 (1584 - 1584)
class AOLScout : public AScout
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLScout");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLWaypoint
// 0x0018 OR 0x0378 (0x0378 - 0x0360)
// 24 OR 888 (888 - 864)
class AOLWaypoint : public ANavigationPoint
{
public:
	EActionSelectionMethod                             SelectionMethod;                               // 0x0360 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EDeathCountLoopMode                                DeathCountLoopMode;                            // 0x0361 (0x0001) [0x0000000000000001] (CPF_Edit)    
	TArray<struct FWaypointAction>                     Actions;                                       // 0x0364 (0x0010) [0x0000000004400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditInline)
	float                                              Radius;                                        // 0x0374 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLWaypoint");
		}

		return uClassPointer;
	};

	void AnimStartedEvent(class AActor* InInstigator);
	void WaypointReachedEvent(class AActor* InInstigator);
};

// Class OLGame.OLAnimAIStairs
// 0x0004 OR 0x0168 (0x0168 - 0x0164)
// 4 OR 360 (360 - 356)
class UOLAnimAIStairs : public UAnimNodeBlendList
{
public:
	int32_t                                            ActiveIdx;                                     // 0x0164 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimAIStairs");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimBarrelIdle
// 0x0003 OR 0x0140 (0x0140 - 0x013D)
// 3 OR 320 (320 - 317)
class UOLAnimBarrelIdle : public UAnimNodeBlendBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimBarrelIdle");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimBlendByCrouchedHandsDown
// 0x0007 OR 0x0144 (0x0144 - 0x013D)
// 7 OR 324 (324 - 317)
class UOLAnimBlendByCrouchedHandsDown : public UAnimNodeBlendBase
{
public:
	float                                              HandsDownRatio;                                // 0x0140 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimBlendByCrouchedHandsDown");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimBlendByEnemyEnvironment
// 0x0000 OR 0x0164 (0x0164 - 0x0164)
// 0 OR 356 (356 - 356)
class UOLAnimBlendByEnemyEnvironment : public UAnimNodeBlendList
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimBlendByEnemyEnvironment");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimBlendByEnemyMode
// 0x0000 OR 0x0164 (0x0164 - 0x0164)
// 0 OR 356 (356 - 356)
class UOLAnimBlendByEnemyMode : public UAnimNodeBlendList
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimBlendByEnemyMode");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimBlendByHobblingIntensity
// 0x0000 OR 0x0150 (0x0150 - 0x0150)
// 0 OR 336 (336 - 336)
class UOLAnimBlendByHobblingIntensity : public UAnimNodeBlend
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimBlendByHobblingIntensity");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimBlendByIdle
// 0x0008 OR 0x0184 (0x0184 - 0x017C)
// 8 OR 388 (388 - 380)
class UOLAnimBlendByIdle : public UUDKAnimBlendBase
{
public:
	struct FName                                       ChildSynchGroup;                               // 0x017C (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimBlendByIdle");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimBlendByLeaning
// 0x0007 OR 0x0144 (0x0144 - 0x013D)
// 7 OR 324 (324 - 317)
class UOLAnimBlendByLeaning : public UAnimNodeBlendBase
{
public:
	float                                              CurrentRatio;                                  // 0x0140 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimBlendByLeaning");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimBlendByLocomotionMode
// 0x0010 OR 0x0174 (0x0174 - 0x0164)
// 16 OR 372 (372 - 356)
class UOLAnimBlendByLocomotionMode : public UAnimNodeBlendList
{
public:
	TArray<float>                                      ChildBlendTimes;                               // 0x0164 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimBlendByLocomotionMode");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimBlendByPosture
// 0x0008 OR 0x016C (0x016C - 0x0164)
// 8 OR 364 (364 - 356)
class UOLAnimBlendByPosture : public UAnimNodeBlendList
{
public:
	uint32_t                                           UpdateInTick : 1;                              // 0x0164 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bSupportUnderwaterHiding : 1;                  // 0x0164 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bValidateBaseLoco : 1;                         // 0x0164 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	float                                              TickUpdateBlendTime;                           // 0x0168 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimBlendByPosture");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimBlendBySpeed
// 0x0010 OR 0x0160 (0x0160 - 0x0150)
// 16 OR 352 (352 - 336)
class UOLAnimBlendBySpeed : public UAnimNodeBlend
{
public:
	float                                              MinSpeed;                                      // 0x0150 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxSpeed;                                      // 0x0154 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxWeightRate;                                 // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CurrentWeight;                                 // 0x015C (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimBlendBySpeed");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimBlendByEnemySpeedSimple
// 0x0002 OR 0x0162 (0x0162 - 0x0160)
// 2 OR 354 (354 - 352)
class UOLAnimBlendByEnemySpeedSimple : public UOLAnimBlendBySpeed
{
public:
	ESpeedType                                         LowSpeed;                                      // 0x0160 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ESpeedType                                         HighSpeed;                                     // 0x0161 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimBlendByEnemySpeedSimple");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimBlendBySpeedExpandable
// 0x0023 OR 0x0160 (0x0160 - 0x013D)
// 35 OR 352 (352 - 317)
class UOLAnimBlendBySpeedExpandable : public UAnimNodeBlendBase
{
public:
	TArray<float>                                      AnimSpeeds;                                    // 0x0140 (0x0010) [0x0000000000400041] (CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink)
	uint32_t                                           bTimeScaleDown : 1;                            // 0x0150 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bTimeScaleUp : 1;                              // 0x0150 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              SmoothingCoefficient;                          // 0x0154 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CurrentSpeed;                                  // 0x0158 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              SliderPosition;                                // 0x015C (0x0004) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimBlendBySpeedExpandable");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimBlendByEnemySpeed
// 0x0004 OR 0x0164 (0x0164 - 0x0160)
// 4 OR 356 (356 - 352)
class UOLAnimBlendByEnemySpeed : public UOLAnimBlendBySpeedExpandable
{
public:
	uint32_t                                           bBackward : 1;                                 // 0x0160 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimBlendByEnemySpeed");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimBlendByStairs
// 0x0007 OR 0x0144 (0x0144 - 0x013D)
// 7 OR 324 (324 - 317)
class UOLAnimBlendByStairs : public UAnimNodeBlendBase
{
public:
	float                                              StairRatio;                                    // 0x0140 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimBlendByStairs");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimBlendByTurning
// 0x0007 OR 0x0144 (0x0144 - 0x013D)
// 7 OR 324 (324 - 317)
class UOLAnimBlendByTurning : public UAnimNodeBlendBase
{
public:
	float                                              CurrentRatio;                                  // 0x0140 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimBlendByTurning");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimBlendCrawler
// 0x0007 OR 0x0144 (0x0144 - 0x013D)
// 7 OR 324 (324 - 317)
class UOLAnimBlendCrawler : public UAnimNodeBlendBase
{
public:
	float                                              BlendInIdleMaxSpeed;                           // 0x0140 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimBlendCrawler");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimBlendDirectional
// 0x0013 OR 0x0150 (0x0150 - 0x013D)
// 19 OR 336 (336 - 317)
class UOLAnimBlendDirectional : public UAnimNodeBlendBase
{
public:
	uint32_t                                           bTimescaleDiagonals : 1;                       // 0x0140 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bTimescaleBelowExpectedSpeed : 1;              // 0x0140 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bTimescaleAboveExpectedSpeed : 1;              // 0x0140 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bUseReversedSideForBackwards : 1;              // 0x0140 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bUseAcceleration : 1;                          // 0x0140 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bReversingBackward : 1;                        // 0x0140 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	float                                              ExpectedPawnSpeed;                             // 0x0144 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendInIdleMaxSpeedPct;                        // 0x0148 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SliderDirAngle;                                // 0x014C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimBlendDirectional");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimBlendDirectionalRM
// 0x0033 OR 0x0170 (0x0170 - 0x013D)
// 51 OR 368 (368 - 317)
class UOLAnimBlendDirectionalRM : public UAnimNodeBlendBase
{
public:
	float                                              NominalSpeed;                                  // 0x0140 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              IdleBlendDelay;                                // 0x0144 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              IdleBlendTime;                                 // 0x0148 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bUseReversedSideForBackwards : 1;              // 0x014C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bReversingBackward : 1;                        // 0x014C (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bNoDirections : 1;                             // 0x014C (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bUsingSpecialAnims : 1;                        // 0x014C (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	float                                              WeightApproachCoeff;                           // 0x0150 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SliderDirAngle;                                // 0x0154 (0x0004) [0x0000000000000000]               
	float                                              NoInputStartTime;                              // 0x0158 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LastDirAngle;                                  // 0x015C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              CurrentPhase;                                  // 0x0160 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              SmoothedDelta;                                 // 0x0164 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FName                                       DefaultFwdAnim;                                // 0x0168 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimBlendDirectionalRM");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimCameraSpace
// 0x0088 OR 0x020C (0x020C - 0x0184)
// 136 OR 524 (524 - 388)
class UOLAnimCameraSpace : public UAnimNodeBlendPerBone
{
public:
	class UAnimNodeSlot*                               ChildSlot;                                     // 0x0184 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UOLAnimCustomBlend*                          ChildBlend;                                    // 0x018C (0x0008) [0x0000000000002000] (CPF_Transient)
	class UAnimNodeSequence*                           ChildSeq;                                      // 0x0194 (0x0008) [0x0000000000002000] (CPF_Transient)
	int32_t                                            CameraBoneIdx;                                 // 0x019C (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            InteractionBoneIdx;                            // 0x01A0 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            LeftHandCenterBoneIdx;                         // 0x01A4 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            RightHandCenterBoneIdx;                        // 0x01A8 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            LeftHandAuxBoneIdx;                            // 0x01AC (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            RightHandAuxBoneIdx;                           // 0x01B0 (0x0004) [0x0000000000002000] (CPF_Transient)
	TArray<int32_t>                                    StartBoneIndices;                              // 0x01B4 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<int32_t>                                    ParentChain;                                   // 0x01C4 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	uint8_t                                           UnknownData00[0xC];                            // 0x01D4 (0x000C) MISSED OFFSET
	struct FBoneAtom                                   CachedCamBoneAtom;                             // 0x01E0 (0x0020) [0x0000000000002000] (CPF_Transient)
	struct FName                                       CachedActiveAnimName;                          // 0x0200 (0x0008) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bApplyCameraSpace : 1;                         // 0x0208 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bAutoPlay : 1;                                 // 0x0208 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bIncludeCameraBone : 1;                        // 0x0208 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bLinkAuxBoneToHandOnShadow : 1;                // 0x0208 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimCameraSpace");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimCinematicPoseReplicator
// 0x001F OR 0x015C (0x015C - 0x013D)
// 31 OR 348 (348 - 317)
class UOLAnimCinematicPoseReplicator : public UAnimNodeBlendBase
{
public:
	uint32_t                                           bSlave : 1;                                    // 0x0140 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	class UOLAnimCinematicPoseReplicator*              MasterNode;                                    // 0x0144 (0x0008) [0x0000000000002000] (CPF_Transient)
	TArray<struct FBoneAtom>                           SavedBones;                                    // 0x014C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimCinematicPoseReplicator");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimConstrainedMovement
// 0x0010 OR 0x0174 (0x0174 - 0x0164)
// 16 OR 372 (372 - 356)
class UOLAnimConstrainedMovement : public UAnimNodeBlendList
{
public:
	uint32_t                                           bUpDown : 1;                                   // 0x0164 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bCompleteCyclesOnly : 1;                       // 0x0164 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bNoAutomaticRootMotion : 1;                    // 0x0164 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bAutomaticMotion : 1;                          // 0x0164 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	float                                              CurrentRatio;                                  // 0x0168 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              SmoothedDelta;                                 // 0x016C (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            LastTargetIdx;                                 // 0x0170 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimConstrainedMovement");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimCrouchedTurnOnSpot
// 0x0060 OR 0x01B0 (0x01B0 - 0x0150)
// 96 OR 432 (432 - 336)
class UOLAnimCrouchedTurnOnSpot : public UAnimNodeBlend
{
public:
	float                                              BaseHeading;                                   // 0x0150 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LastHeading;                                   // 0x0154 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TurningVelocity;                               // 0x0158 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              HandUpWeight;                                  // 0x015C (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bHandUp : 1;                                   // 0x0160 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	float                                              IKStrength;                                    // 0x0164 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     IKPosition;                                    // 0x0168 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FRotator                                    IKRotationWS;                                  // 0x0174 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     ActorSpaceIKOffset;                            // 0x0180 (0x000C) [0x0000000000000000]               
	struct FQuat                                       ActorSpaceIKRotation;                          // 0x0190 (0x0010) [0x0000000000000000]               
	class UAkEvent*                                    HandUpSound;                                   // 0x01A0 (0x0008) [0x0000000000000000]               
	class UAkEvent*                                    HandDownSound;                                 // 0x01A8 (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimCrouchedTurnOnSpot");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimCustomBlend
// 0x0038 OR 0x019C (0x019C - 0x0164)
// 56 OR 412 (412 - 356)
class UOLAnimCustomBlend : public UAnimNodeBlendList
{
public:
	uint32_t                                           bActive : 1;                                   // 0x0164 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bBlendingOut : 1;                              // 0x0164 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bKeepLastPose : 1;                             // 0x0164 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bInhibitEndNotifies : 1;                       // 0x0164 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	uint32_t                                           bEarlyAnimEndFired : 1;                        // 0x0164 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bPlayLooping : 1;                              // 0x0164 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	float                                              BlendOutTime;                                  // 0x0168 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              PlaybackTime;                                  // 0x016C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              BlendWeights[0x6];                             // 0x0170 (0x0018) [0x0000000000002000] (CPF_Transient)
	float                                              TimeRemaining;                                 // 0x0188 (0x0004) [0x0000000000002000] (CPF_Transient)
	TArray<struct FAngleBlendAnimDesc>                 AngleBlendAnims;                               // 0x018C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimCustomBlend");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimCycleBreaker
// 0x00A7 OR 0x01E4 (0x01E4 - 0x013D)
// 167 OR 484 (484 - 317)
class UOLAnimCycleBreaker : public UAnimNodeBlendBase
{
public:
	float                                              MinDelayToActivation;                          // 0x0140 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DefaultCycleBias;                              // 0x0144 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DefaultStretchDuration;                        // 0x0148 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bIdleBreakers : 1;                             // 0x014C (0x0004) [0x0000000000000002] [0x00000001] (CPF_Const)
	uint32_t                                           bIsMaster : 1;                                 // 0x014C (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	class UOLAnimCycleBreaker*                         ShadowNode;                                    // 0x0150 (0x0008) [0x0000000000002000] (CPF_Transient)
	TArray<struct FCycleBreaker>                       Breakers;                                      // 0x0158 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	int32_t                                            DontRepeatCount;                               // 0x0168 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FCycleBreaker                               BreakerTemplate;                               // 0x016C (0x004C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	float                                              LastBecameRelevantTime;                        // 0x01B8 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              NextBreakerWeightTransition;                   // 0x01BC (0x0004) [0x0000000000002000] (CPF_Transient)
	TArray<int32_t>                                    ValidBreakers;                                 // 0x01C0 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              GlobalRate;                                    // 0x01D0 (0x0004) [0x0000000000002000] (CPF_Transient)
	TArray<int32_t>                                    InvalidBreakerIndexes;                         // 0x01D4 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimCycleBreaker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimSmarterIdle
// 0x0024 OR 0x0208 (0x0208 - 0x01E4)
// 36 OR 520 (520 - 484)
class UOLAnimSmarterIdle : public UOLAnimCycleBreaker
{
public:
	uint32_t                                           bModifyPlayrateIdle : 1;                       // 0x01E4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              IdleMinRate;                                   // 0x01E8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              IdleMaxRate;                                   // 0x01EC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              IdleRateMinDuration;                           // 0x01F0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              IdleRateMaxDuration;                           // 0x01F4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              IdleRateTransitionSpeed;                       // 0x01F8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CurrentIdleRate;                               // 0x01FC (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TargetIdleRate;                                // 0x0200 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              NextIdleRateTransition;                        // 0x0204 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimSmarterIdle");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimDirectionalAttack
// 0x0027 OR 0x0164 (0x0164 - 0x013D)
// 39 OR 356 (356 - 317)
class UOLAnimDirectionalAttack : public UAnimNodeBlendBase
{
public:
	float                                              MaxAngleOffset;                                // 0x0140 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       SyncGroupName;                                 // 0x0144 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              CurrentAngle;                                  // 0x014C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              CurrentDistance;                               // 0x0150 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TargetAngle;                                   // 0x0154 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TargetDistance;                                // 0x0158 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              ShortDistance;                                 // 0x015C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              FarDistance;                                   // 0x0160 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimDirectionalAttack");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimDisturbed
// 0x003F OR 0x017C (0x017C - 0x013D)
// 63 OR 380 (380 - 317)
class UOLAnimDisturbed : public UAnimNodeBlendBase
{
public:
	float                                              CurrentRatio;                                  // 0x0140 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TargetRatio;                                   // 0x0144 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              NextBlendOutDuration;                          // 0x0148 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              ActiveBlendOutDuration;                        // 0x014C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              BlendOutTimeToGo;                              // 0x0150 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bPlaying : 1;                                  // 0x0154 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bReadyToBlendOut : 1;                          // 0x0154 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bAnimsAtEnd : 1;                               // 0x0154 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	float                                              BlendOutWeightA;                               // 0x0158 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            AnimMap[0x8];                                  // 0x015C (0x0020) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimDisturbed");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimDoorInteraction
// 0x0014 OR 0x0178 (0x0178 - 0x0164)
// 20 OR 376 (376 - 356)
class UOLAnimDoorInteraction : public UAnimNodeBlendList
{
public:
	float                                              InitialRatio;                                  // 0x0164 (0x0004) [0x0000000000000000]               
	float                                              CurrentRatio;                                  // 0x0168 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              SmoothedDelta;                                 // 0x016C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              PlayRate;                                      // 0x0170 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxRatio;                                      // 0x0174 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimDoorInteraction");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimEnemyStruggle
// 0x0000 OR 0x0164 (0x0164 - 0x0164)
// 0 OR 356 (356 - 356)
class UOLAnimEnemyStruggle : public UAnimNodeBlendList
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimEnemyStruggle");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimEnvironmentReaction
// 0x0000 OR 0x0164 (0x0164 - 0x0164)
// 0 OR 356 (356 - 356)
class UOLAnimEnvironmentReaction : public UAnimNodeBlendList
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimEnvironmentReaction");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimEyeLookAt
// 0x001F OR 0x015C (0x015C - 0x013D)
// 31 OR 348 (348 - 317)
class UOLAnimEyeLookAt : public UAnimNodeBlendBase
{
public:
	uint32_t                                           bActive : 1;                                   // 0x0140 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	float                                              LookAtWeight;                                  // 0x0144 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     TargetLocationWS;                              // 0x0148 (0x000C) [0x0000000000002000] (CPF_Transient)
	float                                              CurrentRatioLR;                                // 0x0154 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              CurrentRatioUD;                                // 0x0158 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimEyeLookAt");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimFaceOff
// 0x0013 OR 0x0150 (0x0150 - 0x013D)
// 19 OR 336 (336 - 317)
class UOLAnimFaceOff : public UAnimNodeBlendBase
{
public:
	int32_t                                            ActiveIdx;                                     // 0x0140 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TransitionBlendTime;                           // 0x0144 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              IdleLeanTargetRatio;                           // 0x0148 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              IdleLeanCurrentRatio;                          // 0x014C (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimFaceOff");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimFaceOptimizer
// 0x0043 OR 0x0180 (0x0180 - 0x013D)
// 67 OR 384 (384 - 317)
class UOLAnimFaceOptimizer : public UAnimNodeBlendBase
{
public:
	struct FName                                       IgnoredBranchStartName;                        // 0x0140 (0x0008) [0x0000000000000002] (CPF_Const)   
	uint32_t                                           bCanUseOptim : 1;                              // 0x0148 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	TArray<uint8_t>                                    OptimizedDesiredBones;                         // 0x014C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<uint8_t>                                    IgnoredBonesFull;                              // 0x015C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<uint8_t>                                    IgnoredBonesDesired;                           // 0x016C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            NumBaseDesiredBones;                           // 0x017C (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimFaceOptimizer");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimFacialBlend
// 0x0008 OR 0x018C (0x018C - 0x0184)
// 8 OR 396 (396 - 388)
class UOLAnimFacialBlend : public UAnimNodeBlendPerBone
{
public:
	class UAnimNodeSlot*                               FacialSlot;                                    // 0x0184 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimFacialBlend");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimFeatheredBlend
// 0x0010 OR 0x0194 (0x0194 - 0x0184)
// 16 OR 404 (404 - 388)
class UOLAnimFeatheredBlend : public UAnimNodeBlendPerBone
{
public:
	TArray<struct FFeatheredBlendBone>                 FeatheredBones;                                // 0x0184 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimFeatheredBlend");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimGenericPoseBlend
// 0x0047 OR 0x0184 (0x0184 - 0x013D)
// 71 OR 388 (388 - 317)
class UOLAnimGenericPoseBlend : public UAnimNodeBlendBase
{
public:
	uint32_t                                           bActive : 1;                                   // 0x0140 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bWorldSpace : 1;                               // 0x0140 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	float                                              StartTime;                                     // 0x0144 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              BlendDuration;                                 // 0x0148 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              BlendWeight;                                   // 0x014C (0x0004) [0x0000000000002000] (CPF_Transient)
	TArray<struct FBoneAtom>                           FrozenBones;                                   // 0x0150 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FBoneAtom                                   FrozenHipsWS;                                  // 0x0160 (0x0020) [0x0000000000002000] (CPF_Transient)
	int32_t                                            HipsBoneIdx;                                   // 0x0180 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimGenericPoseBlend");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimHandShielding
// 0x0033 OR 0x0170 (0x0170 - 0x013D)
// 51 OR 368 (368 - 317)
class UOLAnimHandShielding : public UAnimNodeBlendBase
{
public:
	float                                              HeatMinimumDistance;                           // 0x0140 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HeatLowDistance;                               // 0x0144 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HeatHighDistance;                              // 0x0148 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bActive : 1;                                   // 0x014C (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	float                                              HeatStrength;                                  // 0x0150 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              HandShieldTypeStrength[0x7];                   // 0x0154 (0x001C) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimHandShielding");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimHeatShielding
// 0x001B OR 0x0158 (0x0158 - 0x013D)
// 27 OR 344 (344 - 317)
class UOLAnimHeatShielding : public UAnimNodeBlendBase
{
public:
	float                                              MinimumDistance;                               // 0x0140 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LowDistance;                                   // 0x0144 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HighDistance;                                  // 0x0148 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bActive : 1;                                   // 0x014C (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	float                                              HeatShieldingWeight;                           // 0x0150 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              HeatStrength;                                  // 0x0154 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimHeatShielding");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimInventorySelection
// 0x0000 OR 0x0164 (0x0164 - 0x0164)
// 0 OR 356 (356 - 356)
class UOLAnimInventorySelection : public UAnimNodeBlendList
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimInventorySelection");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimLedgeHang
// 0x0003 OR 0x0140 (0x0140 - 0x013D)
// 3 OR 320 (320 - 317)
class UOLAnimLedgeHang : public UAnimNodeBlendBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimLedgeHang");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimLocomotion
// 0x00F7 OR 0x0234 (0x0234 - 0x013D)
// 247 OR 564 (564 - 317)
class UOLAnimLocomotion : public UAnimNodeBlendBase
{
public:
	struct FName                                       SyncGroupName;                                 // 0x0140 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              SliderPosition;                                // 0x0148 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            ActiveChildIdx;                                // 0x014C (0x0004) [0x0000000000002000] (CPF_Transient)
	ELocomotionAnimState                               AnimState;                                     // 0x0150 (0x0001) [0x0000000000002000] (CPF_Transient)
	float                                              TransitionBlendTime;                           // 0x0154 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TargetWeights[0x1C];                           // 0x0158 (0x0070) [0x0000000000002000] (CPF_Transient)
	struct FAnimTurningData                            Turn;                                          // 0x01C8 (0x001C) [0x0000000000002000] (CPF_Transient)
	struct FAnimStartingData                           Start;                                         // 0x01E4 (0x0028) [0x0000000000002000] (CPF_Transient)
	float                                              LastStartActivatedTime;                        // 0x020C (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FAnimStoppingData                           Stop;                                          // 0x0210 (0x0024) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimLocomotion");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimLOD
// 0x007F OR 0x01BC (0x01BC - 0x013D)
// 127 OR 444 (444 - 317)
class UOLAnimLOD : public UAnimNodeBlendBase
{
public:
	TArray<struct FBoneAtom>                           CachedBones;                                   // 0x0140 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<uint8_t>                                    PartialDesiredBones;                           // 0x0150 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<uint8_t>                                    PartialIgnoredBones;                           // 0x0160 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<uint8_t>                                    FullDesiredBones;                              // 0x0170 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	TArray<uint8_t>                                    FullIgnoredBones;                              // 0x0180 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	uint32_t                                           bCanUseLOD : 1;                                // 0x0190 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	float                                              LastCacheUpdateTime;                           // 0x0194 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            NumValidUpdates;                               // 0x0198 (0x0004) [0x0000000000002000] (CPF_Transient)
	TArray<struct FName>                               PartialIgnoredBranches;                        // 0x019C (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	TArray<struct FName>                               FullIgnoredBranches;                           // 0x01AC (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimLOD");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimMappedSequence
// 0x0001 OR 0x01A5 (0x01A5 - 0x01A4)
// 1 OR 421 (421 - 420)
class UOLAnimMappedSequence : public UAnimNodeSequence
{
public:
	EAIAnimId                                          AnimId;                                        // 0x01A4 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimMappedSequence");
		}

		return uClassPointer;
	};

	void SetAnim(struct FName Sequence);
};

// Class OLGame.OLAnimMultiCycleConstrainedMovement
// 0x0010 OR 0x0174 (0x0174 - 0x0164)
// 16 OR 372 (372 - 356)
class UOLAnimMultiCycleConstrainedMovement : public UAnimNodeBlendList
{
public:
	uint32_t                                           bUpDown : 1;                                   // 0x0164 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bCompleteCyclesOnly : 1;                       // 0x0164 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bCommitMoves : 1;                              // 0x0164 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	float                                              SmoothedDelta;                                 // 0x0168 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              CurrentRatio;                                  // 0x016C (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            CurrentIdx;                                    // 0x0170 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimMultiCycleConstrainedMovement");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNicAndLaird
// 0x0003 OR 0x0140 (0x0140 - 0x013D)
// 3 OR 320 (320 - 317)
class UOLAnimNicAndLaird : public UAnimNodeBlendBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNicAndLaird");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNodeDelayed
// 0x0010 OR 0x0174 (0x0174 - 0x0164)
// 16 OR 372 (372 - 356)
class UOLAnimNodeDelayed : public UAnimNodeBlendList
{
public:
	float                                              TimeDelay;                                     // 0x0164 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendTime;                                     // 0x0168 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TraceTimeBeforeUsingDelayed;                   // 0x016C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ElapsedTime;                                   // 0x0170 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNodeDelayed");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNodeSlot
// 0x0000 OR 0x0164 (0x0164 - 0x0164)
// 0 OR 356 (356 - 356)
class UOLAnimNodeSlot : public UAnimNodeSlot
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNodeSlot");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_AkEventAutoStop
// 0x001C OR 0x0088 (0x0088 - 0x006C)
// 28 OR 136 (136 - 108)
class UOLAnimNotify_AkEventAutoStop : public UAnimNotify
{
public:
	class UAkEvent*                                    StartEvent;                                    // 0x006C (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    StopEvent;                                     // 0x0074 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       BoneName;                                      // 0x007C (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              StopDelay;                                     // 0x0084 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_AkEventAutoStop");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_AttachWeapon
// 0x001C OR 0x0088 (0x0088 - 0x006C)
// 28 OR 136 (136 - 108)
class UOLAnimNotify_AttachWeapon : public UAnimNotify
{
public:
	class USkeletalMesh*                               WeaponSkelMesh;                                // 0x006C (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FString                                      AttachBoneName;                                // 0x0074 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              Duration;                                      // 0x0084 (0x0004) [0x0000000000020000] (CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_AttachWeapon");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_Blur
// 0x0014 OR 0x0080 (0x0080 - 0x006C)
// 20 OR 128 (128 - 108)
class UOLAnimNotify_Blur : public UAnimNotify
{
public:
	float                                              Amount;                                        // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Duration;                                      // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendInTime;                                   // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendOutTime;                                  // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Desaturation;                                  // 0x007C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_Blur");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_Die
// 0x0008 OR 0x0074 (0x0074 - 0x006C)
// 8 OR 116 (116 - 108)
class UOLAnimNotify_Die : public UAnimNotify
{
public:
	uint32_t                                           bBloodOnScreen : 1;                            // 0x006C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bBlur : 1;                                     // 0x006C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bKillAllSounds : 1;                            // 0x006C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bPlayMusic : 1;                                // 0x006C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bPlayVO : 1;                                   // 0x006C (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bNoFadeToBlack : 1;                            // 0x006C (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	float                                              FadeDuration;                                  // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_Die");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_DisableLookAt
// 0x0004 OR 0x0070 (0x0070 - 0x006C)
// 4 OR 112 (112 - 108)
class UOLAnimNotify_DisableLookAt : public UAnimNotify
{
public:
	float                                              Duration;                                      // 0x006C (0x0004) [0x0000000000020000] (CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_DisableLookAt");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_DOF
// 0x0018 OR 0x0084 (0x0084 - 0x006C)
// 24 OR 132 (132 - 108)
class UOLAnimNotify_DOF : public UAnimNotify
{
public:
	float                                              Intensity;                                     // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Duration;                                      // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendInTime;                                   // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendOutTime;                                  // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FocusDist;                                     // 0x007C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TransitionDist;                                // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_DOF");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_Door
// 0x0010 OR 0x007C (0x007C - 0x006C)
// 16 OR 124 (124 - 108)
class UOLAnimNotify_Door : public UAnimNotify
{
public:
	EDoorInteraction                                   Interaction;                                   // 0x006C (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              AngleWhenOpen;                                 // 0x0070 (0x0004) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	uint32_t                                           bUsingInteractBone : 1;                        // 0x0074 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              Duration;                                      // 0x0078 (0x0004) [0x0000000000020000] (CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_Door");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_ExecuteJump
// 0x0004 OR 0x0070 (0x0070 - 0x006C)
// 4 OR 112 (112 - 108)
class UOLAnimNotify_ExecuteJump : public UAnimNotify
{
public:
	float                                              Duration;                                      // 0x006C (0x0004) [0x0000000000020000] (CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_ExecuteJump");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_Fade
// 0x0010 OR 0x007C (0x007C - 0x006C)
// 16 OR 124 (124 - 108)
class UOLAnimNotify_Fade : public UAnimNotify
{
public:
	uint32_t                                           bFadeIn : 1;                                   // 0x006C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bForceStartValue : 1;                          // 0x006C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              Opacity;                                       // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      FadeColor;                                     // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Duration;                                      // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_Fade");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_Flashlight
// 0x0008 OR 0x0074 (0x0074 - 0x006C)
// 8 OR 116 (116 - 108)
class UOLAnimNotify_Flashlight : public UAnimNotify
{
public:
	uint32_t                                           bHideMesh : 1;                                 // 0x006C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              Duration;                                      // 0x0070 (0x0004) [0x0000000000020000] (CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_Flashlight");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_HideWeapon
// 0x0008 OR 0x0074 (0x0074 - 0x006C)
// 8 OR 116 (116 - 108)
class UOLAnimNotify_HideWeapon : public UAnimNotify
{
public:
	uint32_t                                           bShowWeapon : 1;                               // 0x006C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              Duration;                                      // 0x0070 (0x0004) [0x0000000000020000] (CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_HideWeapon");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_KillParticleEffect
// 0x0008 OR 0x0074 (0x0074 - 0x006C)
// 8 OR 116 (116 - 108)
class UOLAnimNotify_KillParticleEffect : public UAnimNotify
{
public:
	class UParticleSystem*                             PSTemplate;                                    // 0x006C (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_KillParticleEffect");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_LeftHandIK
// 0x001C OR 0x0088 (0x0088 - 0x006C)
// 28 OR 136 (136 - 108)
class UOLAnimNotify_LeftHandIK : public UAnimNotify
{
public:
	EIKTargetType                                      TargetType;                                    // 0x006C (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              FadeInTime;                                    // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FadeOutTime;                                   // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     EffectorOffset;                                // 0x0078 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              Duration;                                      // 0x0084 (0x0004) [0x0000000000020000] (CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_LeftHandIK");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_Marker
// 0x0000 OR 0x006C (0x006C - 0x006C)
// 0 OR 108 (108 - 108)
class UOLAnimNotify_Marker : public UAnimNotify
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_Marker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_ModifyPlayrate
// 0x0004 OR 0x0070 (0x0070 - 0x006C)
// 4 OR 112 (112 - 108)
class UOLAnimNotify_ModifyPlayrate : public UAnimNotify
{
public:
	float                                              NewRate;                                       // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_ModifyPlayrate");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_NonFatalDamage
// 0x0008 OR 0x0074 (0x0074 - 0x006C)
// 8 OR 116 (116 - 108)
class UOLAnimNotify_NonFatalDamage : public UAnimNotify
{
public:
	int32_t                                            DamageAmount;                                  // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bBloodParticles : 1;                           // 0x0070 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bCameraShake : 1;                              // 0x0070 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bBlur : 1;                                     // 0x0070 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bSoundEffect : 1;                              // 0x0070 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bBladeDamageSound : 1;                         // 0x0070 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_NonFatalDamage");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_OverrideCameraParams
// 0x001D OR 0x0089 (0x0089 - 0x006C)
// 29 OR 137 (137 - 108)
class UOLAnimNotify_OverrideCameraParams : public UAnimNotify
{
public:
	uint32_t                                           bResetToDefault : 1;                           // 0x006C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bLocalSpacePlayerControl : 1;                  // 0x006C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bMinYaw : 1;                                   // 0x006C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bMaxYaw : 1;                                   // 0x006C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bMinPitchWS : 1;                               // 0x006C (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bMaxPitchWS : 1;                               // 0x006C (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bMinPitchCS : 1;                               // 0x006C (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bMaxPitchCS : 1;                               // 0x006C (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	float                                              MinYaw;                                        // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxYaw;                                        // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinPitchWS;                                    // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxPitchWS;                                    // 0x007C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinPitchCS;                                    // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxPitchCS;                                    // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit)    
	ELocomotionMode                                    OverrideLMForNeckOffset;                       // 0x0088 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_OverrideCameraParams");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_PlayParticleEffect
// 0x0008 OR 0x00A0 (0x00A0 - 0x0098)
// 8 OR 160 (160 - 152)
class UOLAnimNotify_PlayParticleEffect : public UAnimNotify_PlayParticleEffect
{
public:
	struct FName                                       GroupName;                                     // 0x0098 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_PlayParticleEffect");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_PlayWeaponAnimation
// 0x0000 OR 0x006C (0x006C - 0x006C)
// 0 OR 108 (108 - 108)
class UOLAnimNotify_PlayWeaponAnimation : public UAnimNotify
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_PlayWeaponAnimation");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_ProceduralAdjust
// 0x0004 OR 0x0070 (0x0070 - 0x006C)
// 4 OR 112 (112 - 108)
class UOLAnimNotify_ProceduralAdjust : public UAnimNotify
{
public:
	float                                              Duration;                                      // 0x006C (0x0004) [0x0000000000020000] (CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_ProceduralAdjust");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_PropAttachment
// 0x0028 OR 0x0094 (0x0094 - 0x006C)
// 40 OR 148 (148 - 108)
class UOLAnimNotify_PropAttachment : public UAnimNotify
{
public:
	uint32_t                                           bHideWhenDone : 1;                             // 0x006C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bDiscardOffsets : 1;                           // 0x006C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              BlendInTime;                                   // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendOutTime;                                  // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     PositionOffset;                                // 0x0078 (0x000C) [0x0000000000000000]               
	struct FRotator                                    OrientationOffset;                             // 0x0084 (0x000C) [0x0000000000000000]               
	float                                              Duration;                                      // 0x0090 (0x0004) [0x0000000000020000] (CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_PropAttachment");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_Pulse
// 0x000C OR 0x0078 (0x0078 - 0x006C)
// 12 OR 120 (120 - 108)
class UOLAnimNotify_Pulse : public UAnimNotify
{
public:
	float                                              Strength;                                      // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StartTime;                                     // 0x0070 (0x0004) [0x0000000000000000]               
	float                                              Duration;                                      // 0x0074 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_Pulse");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_SetDynamicData
// 0x0028 OR 0x0094 (0x0094 - 0x006C)
// 40 OR 148 (148 - 108)
class UOLAnimNotify_SetDynamicData : public UAnimNotify
{
public:
	uint32_t                                           bSetX : 1;                                     // 0x006C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bSetY : 1;                                     // 0x006C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bSetZ : 1;                                     // 0x006C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bSetW : 1;                                     // 0x006C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	float                                              X;                                             // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Y;                                             // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Z;                                             // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              W;                                             // 0x007C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Time;                                          // 0x0080 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FLinearColor                                InitialData;                                   // 0x0084 (0x0010) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_SetDynamicData");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_ShoulderIK
// 0x000C OR 0x0078 (0x0078 - 0x006C)
// 12 OR 120 (120 - 108)
class UOLAnimNotify_ShoulderIK : public UAnimNotify
{
public:
	float                                              BlendInTime;                                   // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendOutTime;                                  // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Duration;                                      // 0x0074 (0x0004) [0x0000000000020000] (CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_ShoulderIK");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_StartMarker
// 0x0008 OR 0x0074 (0x0074 - 0x006C)
// 8 OR 116 (116 - 108)
class UOLAnimNotify_StartMarker : public UAnimNotify
{
public:
	uint32_t                                           bOffPhase : 1;                                 // 0x006C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              CycleLeft;                                     // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_StartMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_StopMarker
// 0x0008 OR 0x0074 (0x0074 - 0x006C)
// 8 OR 116 (116 - 108)
class UOLAnimNotify_StopMarker : public UAnimNotify
{
public:
	float                                              StartPhase;                                    // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DistTravelled;                                 // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_StopMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimNotify_WeaponAttachPoint
// 0x0008 OR 0x0074 (0x0074 - 0x006C)
// 8 OR 116 (116 - 108)
class UOLAnimNotify_WeaponAttachPoint : public UAnimNotify
{
public:
	uint32_t                                           bAttachToBone : 1;                             // 0x006C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bDetachFromPawn : 1;                           // 0x006C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              Duration;                                      // 0x0070 (0x0004) [0x0000000000020000] (CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimNotify_WeaponAttachPoint");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimPairedWalk
// 0x002F OR 0x016C (0x016C - 0x013D)
// 47 OR 364 (364 - 317)
class UOLAnimPairedWalk : public UAnimNodeBlendBase
{
public:
	float                                              BlendInIdleMaxSpeedPct;                        // 0x0140 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bTimescaleDiagonals : 1;                       // 0x0144 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bReversingBackward : 1;                        // 0x0144 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bForwardOnly : 1;                              // 0x0144 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bAltAnim : 1;                                  // 0x0144 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	uint32_t                                           bPregLynn : 1;                                 // 0x0144 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bPregLynnWithCam : 1;                          // 0x0144 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	uint32_t                                           bDelayedSetPregLynnAnims : 1;                  // 0x0144 (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	float                                              AnimatedWalkSpeed;                             // 0x0148 (0x0004) [0x0000000000000000]               
	float                                              AnimatedRunSpeed;                              // 0x014C (0x0004) [0x0000000000000000]               
	float                                              AnimatedStrafeSpeed;                           // 0x0150 (0x0004) [0x0000000000000000]               
	float                                              AltSwitchTime;                                 // 0x0154 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UOLAnimPairedWalk*                           MasterNode;                                    // 0x0158 (0x0008) [0x0000000000002000] (CPF_Transient)
	EPairedWalkAnimStyle                               AltAnimStyle;                                  // 0x0160 (0x0001) [0x0000000000002000] (CPF_Transient)
	float                                              AltBlendDuration;                              // 0x0164 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LastPregLynnAnimSwitchTime;                    // 0x0168 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimPairedWalk");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimParrying
// 0x002B OR 0x0168 (0x0168 - 0x013D)
// 43 OR 360 (360 - 317)
class UOLAnimParrying : public UAnimNodeBlendBase
{
public:
	float                                              MinimumDistance;                               // 0x0140 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LowDistance;                                   // 0x0144 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HighDistance;                                  // 0x0148 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AngleRange;                                    // 0x014C (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bActive : 1;                                   // 0x0150 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	float                                              EnemyDistance;                                 // 0x0154 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              EnemyRelYaw;                                   // 0x0158 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              ParryWeight;                                   // 0x015C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              ParryStrength;                                 // 0x0160 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              ParryAngleRatio;                               // 0x0164 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimParrying");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimPeeking
// 0x002F OR 0x016C (0x016C - 0x013D)
// 47 OR 364 (364 - 317)
class UOLAnimPeeking : public UAnimNodeBlendBase
{
public:
	int32_t                                            ActiveChildIdx;                                // 0x0140 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              CurrentRatio;                                  // 0x0144 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TargetRatio;                                   // 0x0148 (0x0004) [0x0000000000002000] (CPF_Transient)
	TArray<struct FQuat>                               CornerToHandQuats;                             // 0x014C (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<struct FVector>                             CornerToHandVecs;                              // 0x015C (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimPeeking");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimPoseFreeze
// 0x0053 OR 0x0190 (0x0190 - 0x013D)
// 83 OR 400 (400 - 317)
class UOLAnimPoseFreeze : public UAnimNodeBlendBase
{
public:
	float                                              DeformDist;                                    // 0x0140 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              ShakeDist;                                     // 0x0144 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bActive : 1;                                   // 0x0148 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	struct FVector                                     BaseLocation;                                  // 0x014C (0x000C) [0x0000000000002000] (CPF_Transient)
	float                                              StartTime;                                     // 0x0158 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              GlitchDuration;                                // 0x015C (0x0004) [0x0000000000002000] (CPF_Transient)
	TArray<struct FBoneAtom>                           CachedBones;                                   // 0x0160 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FBoneAtom                                   CachedLTW;                                     // 0x0170 (0x0020) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimPoseFreeze");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimPoseKeeper
// 0x001B OR 0x0158 (0x0158 - 0x013D)
// 27 OR 344 (344 - 317)
class UOLAnimPoseKeeper : public UAnimNodeBlendBase
{
public:
	uint32_t                                           bActive : 1;                                   // 0x0140 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bValidBones : 1;                               // 0x0140 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	float                                              EndTime;                                       // 0x0144 (0x0004) [0x0000000000002000] (CPF_Transient)
	TArray<struct FBoneAtom>                           CachedBones;                                   // 0x0148 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimPoseKeeper");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimPoseReplicator
// 0x0023 OR 0x0160 (0x0160 - 0x013D)
// 35 OR 352 (352 - 317)
class UOLAnimPoseReplicator : public UAnimNodeBlendBase
{
public:
	uint32_t                                           bSlave : 1;                                    // 0x0140 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	class UOLAnimPoseReplicator*                       MasterNode;                                    // 0x0144 (0x0008) [0x0000000000002000] (CPF_Transient)
	TArray<struct FBoneAtom>                           SavedBones;                                    // 0x014C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            SavedBonesTickCount;                           // 0x015C (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimPoseReplicator");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimPushing
// 0x0007 OR 0x0144 (0x0144 - 0x013D)
// 7 OR 324 (324 - 317)
class UOLAnimPushing : public UAnimNodeBlendBase
{
public:
	float                                              PushRatio;                                     // 0x0140 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimPushing");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimRandomCycle
// 0x001C OR 0x0180 (0x0180 - 0x0164)
// 28 OR 384 (384 - 356)
class UOLAnimRandomCycle : public UAnimNodeBlendList
{
public:
	float                                              DefaultCycleBiasWalking;                       // 0x0164 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DefaultCycleBiasRunning;                       // 0x0168 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendTime;                                     // 0x016C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              NextCycleCheckTime;                            // 0x0170 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bIsMaster : 1;                                 // 0x0174 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	class UOLAnimRandomCycle*                          ShadowNode;                                    // 0x0178 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimRandomCycle");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimRelativeBranch
// 0x0010 OR 0x0194 (0x0194 - 0x0184)
// 16 OR 404 (404 - 388)
class UOLAnimRelativeBranch : public UAnimNodeBlendPerBone
{
public:
	TArray<struct FBranchRelativeBone>                 BranchRelativeBones;                           // 0x0184 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimRelativeBranch");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimRiver
// 0x0058 OR 0x01BC (0x01BC - 0x0164)
// 88 OR 444 (444 - 356)
class UOLAnimRiver : public UAnimNodeBlendList
{
public:
	uint32_t                                           bRowedRightLast : 1;                           // 0x0164 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	float                                              IdleDuration;                                  // 0x0168 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FRowingAnimData                             RowingAnim[0x4];                               // 0x016C (0x0050) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimRiver");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimScrubbable
// 0x0000 OR 0x01A4 (0x01A4 - 0x01A4)
// 0 OR 420 (420 - 420)
class UOLAnimScrubbable : public UAnimNodeSequence
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimScrubbable");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimScrubbableBlend
// 0x0007 OR 0x0144 (0x0144 - 0x013D)
// 7 OR 324 (324 - 317)
class UOLAnimScrubbableBlend : public UAnimNodeBlendBase
{
public:
	float                                              BlendAlpha;                                    // 0x0140 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimScrubbableBlend");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimSelectByAILocoMode
// 0x0010 OR 0x0174 (0x0174 - 0x0164)
// 16 OR 372 (372 - 356)
class UOLAnimSelectByAILocoMode : public UAnimNodeBlendList
{
public:
	TArray<float>                                      ChildBlendTimes;                               // 0x0164 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimSelectByAILocoMode");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimSelectByCamcorder
// 0x0000 OR 0x0164 (0x0164 - 0x0164)
// 0 OR 356 (356 - 356)
class UOLAnimSelectByCamcorder : public UAnimNodeBlendList
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimSelectByCamcorder");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimSelectByEnemyType
// 0x0007 OR 0x0144 (0x0144 - 0x013D)
// 7 OR 324 (324 - 317)
class UOLAnimSelectByEnemyType : public UAnimNodeBlendBase
{
public:
	int32_t                                            ChildIdx;                                      // 0x0140 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimSelectByEnemyType");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimSelectByFallType
// 0x0000 OR 0x0164 (0x0164 - 0x0164)
// 0 OR 356 (356 - 356)
class UOLAnimSelectByFallType : public UAnimNodeBlendList
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimSelectByFallType");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimSelectByGameplayItemShape
// 0x0000 OR 0x0164 (0x0164 - 0x0164)
// 0 OR 356 (356 - 356)
class UOLAnimSelectByGameplayItemShape : public UAnimNodeBlendList
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimSelectByGameplayItemShape");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimSelectByPhysicsVolume
// 0x0000 OR 0x0164 (0x0164 - 0x0164)
// 0 OR 356 (356 - 356)
class UOLAnimSelectByPhysicsVolume : public UAnimNodeBlendList
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimSelectByPhysicsVolume");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimSelectByShadowProxy
// 0x0000 OR 0x0164 (0x0164 - 0x0164)
// 0 OR 356 (356 - 356)
class UOLAnimSelectByShadowProxy : public UAnimNodeBlendList
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimSelectByShadowProxy");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimSelectBySpecificEnemyType
// 0x0017 OR 0x0154 (0x0154 - 0x013D)
// 23 OR 340 (340 - 317)
class UOLAnimSelectBySpecificEnemyType : public UAnimNodeBlendBase
{
public:
	int32_t                                            ChildIdx;                                      // 0x0140 (0x0004) [0x0000000000002000] (CPF_Transient)
	TArray<EnemyType>                                  SpecificTypes;                                 // 0x0144 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimSelectBySpecificEnemyType");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimSelectByStairsDirection
// 0x0000 OR 0x0164 (0x0164 - 0x0164)
// 0 OR 356 (356 - 356)
class UOLAnimSelectByStairsDirection : public UAnimNodeBlendList
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimSelectByStairsDirection");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimSelectByWalkingStyle
// 0x0000 OR 0x0164 (0x0164 - 0x0164)
// 0 OR 356 (356 - 356)
class UOLAnimSelectByWalkingStyle : public UAnimNodeBlendList
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimSelectByWalkingStyle");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimSelectByWaterDepth
// 0x0000 OR 0x0164 (0x0164 - 0x0164)
// 0 OR 356 (356 - 356)
class UOLAnimSelectByWaterDepth : public UAnimNodeBlendList
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimSelectByWaterDepth");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimSlidingSlope
// 0x0000 OR 0x0164 (0x0164 - 0x0164)
// 0 OR 356 (356 - 356)
class UOLAnimSlidingSlope : public UAnimNodeBlendList
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimSlidingSlope");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimSmartIdle
// 0x004F OR 0x018C (0x018C - 0x013D)
// 79 OR 396 (396 - 317)
class UOLAnimSmartIdle : public UAnimNodeBlendBase
{
public:
	uint32_t                                           bModifyPlayrateIdle : 1;                       // 0x0140 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              IdleMinRate;                                   // 0x0144 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              IdleMaxRate;                                   // 0x0148 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              IdleRateMinDuration;                           // 0x014C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              IdleRateMaxDuration;                           // 0x0150 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              IdleRateTransitionSpeed;                       // 0x0154 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              IdleBias;                                      // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BreakerMaxWeight;                              // 0x015C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BreakerMinDuration;                            // 0x0160 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BreakerMaxDuration;                            // 0x0164 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinBreakerWeightTransitionSpeed;               // 0x0168 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxBreakerWeightTransitionSpeed;               // 0x016C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CurrentIdleRate;                               // 0x0170 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TargetIdleRate;                                // 0x0174 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              NextIdleRateTransition;                        // 0x0178 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              CurrentBreakerWeight;                          // 0x017C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TargetBreakerWeight;                           // 0x0180 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              BreakerWeightTransitionSpeed;                  // 0x0184 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              NextBreakerWeightTransition;                   // 0x0188 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimSmartIdle");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimStruggleCycle
// 0x0000 OR 0x01A4 (0x01A4 - 0x01A4)
// 0 OR 420 (420 - 420)
class UOLAnimStruggleCycle : public UAnimNodeSequence
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimStruggleCycle");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimTurnOnSpot
// 0x000C OR 0x0170 (0x0170 - 0x0164)
// 12 OR 368 (368 - 356)
class UOLAnimTurnOnSpot : public UAnimNodeBlendList
{
public:
	uint32_t                                           bWaitForFullWeightBeforeActivation : 1;        // 0x0164 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bInitialized : 1;                              // 0x0164 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	float                                              TurnToIdleBlendTime;                           // 0x0168 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CurrentFeetHeading;                            // 0x016C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimTurnOnSpot");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAnimWardrobe
// 0x002B OR 0x0168 (0x0168 - 0x013D)
// 43 OR 360 (360 - 317)
class UOLAnimWardrobe : public UAnimNodeBlendBase
{
public:
	int32_t                                            CurrentAnimIdx;                                // 0x0140 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            DesiredAnimIdx;                                // 0x0144 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TransitionDuration;                            // 0x0148 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TransitionTimeLeft;                            // 0x014C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              InitialRatio;                                  // 0x0150 (0x0004) [0x0000000000000000]               
	float                                              CurrentRatio;                                  // 0x0154 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              SmoothedDelta;                                 // 0x0158 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              PlayRate;                                      // 0x015C (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           AutoPlay : 1;                                  // 0x0160 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              PeekingAnimStartTime;                          // 0x0164 (0x0004) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAnimWardrobe");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSkelControl_GameTime
// 0x0005 OR 0x0131 (0x0131 - 0x012C)
// 5 OR 305 (305 - 300)
class UOLSkelControl_GameTime : public USkelControlSingleBone
{
public:
	uint32_t                                           bDriveYaw : 1;                                 // 0x012C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	EGameTimeHand                                      ClockHand;                                     // 0x0130 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSkelControl_GameTime");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSkelControl_Handle
// 0x0000 OR 0x012C (0x012C - 0x012C)
// 0 OR 300 (300 - 300)
class UOLSkelControl_Handle : public USkelControlSingleBone
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSkelControl_Handle");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSkelControl_Hinge
// 0x0000 OR 0x012C (0x012C - 0x012C)
// 0 OR 300 (300 - 300)
class UOLSkelControl_Hinge : public USkelControlSingleBone
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSkelControl_Hinge");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLAISequenceAction
// 0x0000 OR 0x0158 (0x0158 - 0x0158)
// 0 OR 344 (344 - 344)
class UOLAISequenceAction : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLAISequenceAction");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_Achievement
// 0x0001 OR 0x0159 (0x0159 - 0x0158)
// 1 OR 345 (345 - 344)
class UOLSeqAct_Achievement : public USequenceAction
{
public:
	EOutlastAchievement                                achievement;                                   // 0x0158 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_Achievement");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AdjustToFloor
// 0x0008 OR 0x0160 (0x0160 - 0x0158)
// 8 OR 352 (352 - 344)
class UOLSeqAct_AdjustToFloor : public USequenceAction
{
public:
	float                                              Duration;                                      // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HeightOffset;                                  // 0x015C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AdjustToFloor");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AdrenalineBoost
// 0x0004 OR 0x015C (0x015C - 0x0158)
// 4 OR 348 (348 - 344)
class UOLSeqAct_AdrenalineBoost : public USequenceAction
{
public:
	float                                              Duration;                                      // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AdrenalineBoost");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AIAddToGroup
// 0x0000 OR 0x0158 (0x0158 - 0x0158)
// 0 OR 344 (344 - 344)
class UOLSeqAct_AIAddToGroup : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIAddToGroup");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AIAmbiantAntiLook
// 0x0044 OR 0x01B8 (0x01B8 - 0x0174)
// 68 OR 440 (440 - 372)
class UOLSeqAct_AIAmbiantAntiLook : public USeqAct_Latent
{
public:
	struct FName                                       InactiveAnimName;                              // 0x0174 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       LeftAnimName;                                  // 0x017C (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       RightAnimName;                                 // 0x0184 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              MinAngleToPlayer;                              // 0x018C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ActivationDistance;                            // 0x0190 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DeactivationDistance;                          // 0x0194 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TooCloseDistance;                              // 0x0198 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bWaitForExplicitActivation : 1;                // 0x019C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bExitOnPlayerOutOfRange : 1;                   // 0x019C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bActivateOnlyOnce : 1;                         // 0x019C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bAttackIfTooClose : 1;                         // 0x019C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bDisableCollision : 1;                         // 0x019C (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bDisablePhysics : 1;                           // 0x019C (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bDisableRootMotion : 1;                        // 0x019C (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bRunning : 1;                                  // 0x019C (0x0004) [0x0000000000002000] [0x00000080] (CPF_Transient)
	uint32_t                                           bPendingActivatedEvent : 1;                    // 0x019C (0x0004) [0x0000000000002000] [0x00000100] (CPF_Transient)
	float                                              ActivateBlendInTime;                           // 0x01A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AngleSwitchBlendTime;                          // 0x01A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StageMarkBlendTime;                            // 0x01A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            PendingExitInput;                              // 0x01AC (0x0004) [0x0000000000002000] (CPF_Transient)
	class AActor*                                      TargetActor;                                   // 0x01B0 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIAmbiantAntiLook");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AIAmbiantLooking
// 0x0070 OR 0x01E4 (0x01E4 - 0x0174)
// 112 OR 484 (484 - 372)
class UOLSeqAct_AIAmbiantLooking : public USeqAct_Latent
{
public:
	struct FName                                       StartAnimName;                                 // 0x0174 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       ExitAnimName;                                  // 0x017C (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       LeftAnimName;                                  // 0x0184 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       CenterAnimName;                                // 0x018C (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       RightAnimName;                                 // 0x0194 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              LeftAngle;                                     // 0x019C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CenterAngle;                                   // 0x01A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RightAngle;                                    // 0x01A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ActivationDistance;                            // 0x01A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DeactivationDistance;                          // 0x01AC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TooCloseDistance;                              // 0x01B0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bLooping : 1;                                  // 0x01B4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bWaitForExplicitActivation : 1;                // 0x01B4 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bExitOnPlayerOutOfRange : 1;                   // 0x01B4 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bAttackIfTooCloseWhenActive : 1;               // 0x01B4 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bAttackIfTooCloseWhenDone : 1;                 // 0x01B4 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bDisableCollision : 1;                         // 0x01B4 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bDisablePhysics : 1;                           // 0x01B4 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bDisableRootMotion : 1;                        // 0x01B4 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bRunning : 1;                                  // 0x01B4 (0x0004) [0x0000000000002000] [0x00000100] (CPF_Transient)
	uint32_t                                           bPendingActivatedEvent : 1;                    // 0x01B4 (0x0004) [0x0000000000002000] [0x00000200] (CPF_Transient)
	int32_t                                            MaxActivationCount;                            // 0x01B8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinDelayBeforeReactivate;                      // 0x01BC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ActivateBlendInTime;                           // 0x01C0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ExitBlendInTime;                               // 0x01C4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StageMarkBlendTime;                            // 0x01C8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AngleApproachCoeff;                            // 0x01CC (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            ActivationCount;                               // 0x01D0 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LastExitedTime;                                // 0x01D4 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            PendingExitInput;                              // 0x01D8 (0x0004) [0x0000000000002000] (CPF_Transient)
	class AActor*                                      TargetActor;                                   // 0x01DC (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIAmbiantLooking");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AIAmbush
// 0x0020 OR 0x0194 (0x0194 - 0x0174)
// 32 OR 404 (404 - 372)
class UOLSeqAct_AIAmbush : public USeqAct_Latent
{
public:
	float                                              DistanceBuffer;                                // 0x0174 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bOverride_Speed : 1;                           // 0x0178 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bRunning : 1;                                  // 0x0178 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	float                                              Speed;                                         // 0x017C (0x0004) [0x0000000000000001] (CPF_Edit)    
	EBotDestSelectionHeuristic                         PointSelectionMethod;                          // 0x0180 (0x0001) [0x0000000000000001] (CPF_Edit)    
	TArray<class AOLAmbushMarker*>                     AmbushPoints;                                  // 0x0184 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIAmbush");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AIBeam
// 0x0018 OR 0x018C (0x018C - 0x0174)
// 24 OR 396 (396 - 372)
class UOLSeqAct_AIBeam : public USeqAct_Latent
{
public:
	uint32_t                                           bPreciseDest : 1;                              // 0x0174 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bOverride_Speed : 1;                           // 0x0174 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bRunning : 1;                                  // 0x0174 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	float                                              GotoSpeed;                                     // 0x0178 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AOLBeamMarker*                               EntryMarker;                                   // 0x017C (0x0008) [0x0000000000002000] (CPF_Transient)
	class AActor*                                      DestPointActor;                                // 0x0184 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIBeam");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AICloseDoor
// 0x0010 OR 0x0184 (0x0184 - 0x0174)
// 16 OR 388 (388 - 372)
class UOLSeqAct_AICloseDoor : public USeqAct_Latent
{
public:
	uint32_t                                           bOverride_Speed : 1;                           // 0x0174 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bRunning : 1;                                  // 0x0174 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	float                                              MoveSpeed;                                     // 0x0178 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AOLDoor*                                     TheDoor;                                       // 0x017C (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AICloseDoor");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AICondition
// 0x001C OR 0x0190 (0x0190 - 0x0174)
// 28 OR 400 (400 - 372)
class UOLSeqAct_AICondition : public USeqAct_Latent
{
public:
	TArray<class UOLBotCondition*>                     Conditions;                                    // 0x0174 (0x0010) [0x0000000004400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditInline)
	float                                              ActivationDelay;                               // 0x0184 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ConditionsSatisfiedTime;                       // 0x0188 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bWaitingForFulfillment : 1;                    // 0x018C (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AICondition");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqAct_AIContinuousSound
// 0x0000 OR 0x0158 (0x0158 - 0x0158)
// 0 OR 344 (344 - 344)
class UOLSeqAct_AIContinuousSound : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIContinuousSound");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AIDisbandGroup
// 0x0000 OR 0x0158 (0x0158 - 0x0158)
// 0 OR 344 (344 - 344)
class UOLSeqAct_AIDisbandGroup : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIDisbandGroup");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AIEquipFlashlight
// 0x0004 OR 0x015C (0x015C - 0x0158)
// 4 OR 348 (348 - 344)
class UOLSeqAct_AIEquipFlashlight : public USequenceAction
{
public:
	uint32_t                                           bImmediate : 1;                                // 0x0158 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIEquipFlashlight");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AIEquipWeapon
// 0x0005 OR 0x015D (0x015D - 0x0158)
// 5 OR 349 (349 - 344)
class UOLSeqAct_AIEquipWeapon : public USequenceAction
{
public:
	uint32_t                                           bImmediate : 1;                                // 0x0158 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	EWeapon                                            WeaponOverride;                                // 0x015C (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIEquipWeapon");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AIFollowActor
// 0x001C OR 0x0190 (0x0190 - 0x0174)
// 28 OR 400 (400 - 372)
class UOLSeqAct_AIFollowActor : public USeqAct_Latent
{
public:
	class AActor*                                      MovingTarget;                                  // 0x0174 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              FollowDistance;                                // 0x017C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BufferZone;                                    // 0x0180 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bOnlyFollowToLastSeenPosition : 1;             // 0x0184 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bOverride_Speed : 1;                           // 0x0184 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bForceUnawareStyle : 1;                        // 0x0184 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bForceAlertStyle : 1;                          // 0x0184 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bRunning : 1;                                  // 0x0184 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	float                                              LocationApproachRate;                          // 0x0188 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Speed;                                         // 0x018C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIFollowActor");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AIFollowGround
// 0x0000 OR 0x0158 (0x0158 - 0x0158)
// 0 OR 344 (344 - 344)
class UOLSeqAct_AIFollowGround : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIFollowGround");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AIForceChase
// 0x0008 OR 0x0160 (0x0160 - 0x0158)
// 8 OR 352 (352 - 344)
class UOLSeqAct_AIForceChase : public USequenceAction
{
public:
	float                                              MinDuration;                                   // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bCanLoseSightAfterChasing : 1;                 // 0x015C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bNoReaction : 1;                               // 0x015C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIForceChase");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AIForceCrawl
// 0x0004 OR 0x0178 (0x0178 - 0x0174)
// 4 OR 376 (376 - 372)
class UOLSeqAct_AIForceCrawl : public USeqAct_Latent
{
public:
	uint32_t                                           bWasForcedChase : 1;                           // 0x0174 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bRunning : 1;                                  // 0x0174 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIForceCrawl");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqAct_AIFormGroup
// 0x0000 OR 0x0158 (0x0158 - 0x0158)
// 0 OR 344 (344 - 344)
class UOLSeqAct_AIFormGroup : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIFormGroup");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AIFreezePose
// 0x001C OR 0x0174 (0x0174 - 0x0158)
// 28 OR 372 (372 - 344)
class UOLSeqAct_AIFreezePose : public USequenceAction
{
public:
	float                                              GlitchDurationMin;                             // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              GlitchDurationMax;                             // 0x015C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              GlitchIntervalMin;                             // 0x0160 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              GlitchIntervalMax;                             // 0x0164 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            NumberOfGlitches;                              // 0x0168 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DeformDist;                                    // 0x016C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ShakeDist;                                     // 0x0170 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIFreezePose");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AIGotoPoint
// 0x0014 OR 0x0188 (0x0188 - 0x0174)
// 20 OR 392 (392 - 372)
class UOLSeqAct_AIGotoPoint : public USeqAct_Latent
{
public:
	class AActor*                                      Point;                                         // 0x0174 (0x0008) [0x0000000000000000]               
	uint32_t                                           bTurnToRotation : 1;                           // 0x017C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bPreciseDestination : 1;                       // 0x017C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bForced : 1;                                   // 0x017C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bOverride_Speed : 1;                           // 0x017C (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bInstantAccel : 1;                             // 0x017C (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bInstantDecel : 1;                             // 0x017C (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bForceUnawareStyle : 1;                        // 0x017C (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bForceAlertStyle : 1;                          // 0x017C (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bRunning : 1;                                  // 0x017C (0x0004) [0x0000000000002000] [0x00000100] (CPF_Transient)
	float                                              DistanceBuffer;                                // 0x0180 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Speed;                                         // 0x0184 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIGotoPoint");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqAct_AITestLoco
// 0x0034 OR 0x01BC (0x01BC - 0x0188)
// 52 OR 444 (444 - 392)
class UOLSeqAct_AITestLoco : public UOLSeqAct_AIGotoPoint
{
public:
	float                                              MoveDuration;                                  // 0x0188 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TotalMoveTime;                                 // 0x018C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AngleIncrement;                                // 0x0190 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AOLBot*                                      Bot;                                           // 0x0194 (0x0008) [0x0000000000000000]               
	struct FVector                                     BaseLoc;                                       // 0x019C (0x000C) [0x0000000000000000]               
	struct FRotator                                    BaseRot;                                       // 0x01A8 (0x000C) [0x0000000000000000]               
	float                                              CurAngle;                                      // 0x01B4 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              StartedTime;                                   // 0x01B8 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AITestLoco");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AIGroupMove
// 0x0018 OR 0x018C (0x018C - 0x0174)
// 24 OR 396 (396 - 372)
class UOLSeqAct_AIGroupMove : public USeqAct_Latent
{
public:
	uint32_t                                           bOverride_Speed : 1;                           // 0x0174 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bSideBySideLeaderOnLeft : 1;                   // 0x0174 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bNodeActive : 1;                               // 0x0174 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	float                                              Speed;                                         // 0x0178 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TargetDistToPoint;                             // 0x017C (0x0004) [0x0000000000000001] (CPF_Edit)    
	EGroupFormation                                    FormationStyle;                                // 0x0180 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              FormationSpacing;                              // 0x0184 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FormationPathingDist;                          // 0x0188 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIGroupMove");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AIGuard
// 0x0048 OR 0x01BC (0x01BC - 0x0174)
// 72 OR 444 (444 - 372)
class UOLSeqAct_AIGuard : public USeqAct_Latent
{
public:
	struct FName                                       RelaxedAnimName;                               // 0x0174 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       AlertAnimName;                                 // 0x017C (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       AlertLeftAnimName;                             // 0x0184 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       AlertRightAnimName;                            // 0x018C (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              SideAngleRange;                                // 0x0194 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bLookAtWhenRelaxed : 1;                        // 0x0198 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bLookAtWhenAlert : 1;                          // 0x0198 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bDisableCollision : 1;                         // 0x0198 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bDisablePhysics : 1;                           // 0x0198 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bDisableRootMotion : 1;                        // 0x0198 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bCreateNavmeshObstacle : 1;                    // 0x0198 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bRunning : 1;                                  // 0x0198 (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	uint32_t                                           bDirectionalAlert : 1;                         // 0x0198 (0x0004) [0x0000000000002000] [0x00000080] (CPF_Transient)
	EGuardAttackType                                   AttackType;                                    // 0x019C (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              KnockbackPower;                                // 0x01A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AlertDistance;                                 // 0x01A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RelaxedDistance;                               // 0x01A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AttackDistance;                                // 0x01AC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StageMarkBlendTime;                            // 0x01B0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AngleApproachCoeff;                            // 0x01B4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CollisionSize;                                 // 0x01B8 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIGuard");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AIInvestigatePoint
// 0x0008 OR 0x017C (0x017C - 0x0174)
// 8 OR 380 (380 - 372)
class UOLSeqAct_AIInvestigatePoint : public USeqAct_Latent
{
public:
	EScriptedInvestigationType                         Type;                                          // 0x0174 (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bResumable : 1;                                // 0x0178 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bLowPriority : 1;                              // 0x0178 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bForceUnawareStyle : 1;                        // 0x0178 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bForceAlertStyle : 1;                          // 0x0178 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bRunning : 1;                                  // 0x0178 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bExplicitelyCancelled : 1;                     // 0x0178 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIInvestigatePoint");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqAct_AIJump
// 0x0010 OR 0x0184 (0x0184 - 0x0174)
// 16 OR 388 (388 - 372)
class UOLSeqAct_AIJump : public USeqAct_Latent
{
public:
	uint32_t                                           bOverride_Speed : 1;                           // 0x0174 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bFast : 1;                                     // 0x0174 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bRunning : 1;                                  // 0x0174 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	float                                              GotoSpeed;                                     // 0x0178 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AOLJumpMarker*                               SrcJumpMarker;                                 // 0x017C (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIJump");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AILookAt
// 0x0040 OR 0x01B4 (0x01B4 - 0x0174)
// 64 OR 436 (436 - 372)
class UOLSeqAct_AILookAt : public USeqAct_Latent
{
public:
	float                                              Duration;                                      // 0x0174 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bOnlyIfUnobstructedSight : 1;                  // 0x0178 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bFullUpperBody : 1;                            // 0x0178 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              MaxDistance;                                   // 0x017C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxHorzAngle;                                  // 0x0180 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxVertAngle;                                  // 0x0184 (0x0004) [0x0000000000000001] (CPF_Edit)    
	ELookAtBehavior                                    Behavior;                                      // 0x0188 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ELookAtNoisePreset                                 PresetLookAtType;                              // 0x0189 (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FLookAtNoiseConfig                          CustomLookAtConfig;                            // 0x018C (0x0014) [0x0000000000000001] (CPF_Edit)    
	float                                              NoiseMinYaw;                                   // 0x01A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              NoiseMaxYaw;                                   // 0x01A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              NoiseMinPitch;                                 // 0x01A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              NoiseMaxPitch;                                 // 0x01AC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StartedTime;                                   // 0x01B0 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AILookAt");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AIPlayAnim
// 0x002C OR 0x01A0 (0x01A0 - 0x0174)
// 44 OR 416 (416 - 372)
class UOLSeqAct_AIPlayAnim : public USeqAct_Latent
{
public:
	struct FName                                       AnimName;                                      // 0x0174 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bInterruptible : 1;                            // 0x017C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bLooping : 1;                                  // 0x017C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bDisableCollision : 1;                         // 0x017C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bDisablePhysics : 1;                           // 0x017C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bDisableRootMotion : 1;                        // 0x017C (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bExitOnBlendOut : 1;                           // 0x017C (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bKeepLastPose : 1;                             // 0x017C (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bSkullFixerEnabled : 1;                        // 0x017C (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bPlayingCustomAnim : 1;                        // 0x017C (0x0004) [0x0000000000002000] [0x00000100] (CPF_Transient)
	float                                              LoopingDuration;                               // 0x0180 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AnimBlendInTime;                               // 0x0184 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AnimBlendOutTime;                              // 0x0188 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StageMarkBlendTime;                            // 0x018C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AnimRate;                                      // 0x0190 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RateWhenPlayerLitByFlashlight;                 // 0x0194 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AnimStartTime;                                 // 0x0198 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StartedTime;                                   // 0x019C (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIPlayAnim");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AIPlayerContact
// 0x0064 OR 0x01D8 (0x01D8 - 0x0174)
// 100 OR 472 (472 - 372)
class UOLSeqAct_AIPlayerContact : public USeqAct_Latent
{
public:
	uint32_t                                           bOverride_Speed : 1;                           // 0x0174 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bDeactivateCamcorder : 1;                      // 0x0174 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bRunning : 1;                                  // 0x0174 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bPlayerFacing : 1;                             // 0x0174 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	float                                              MoveSpeed;                                     // 0x0178 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AnimTriggerDistance;                           // 0x017C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AnimOffsetDistance;                            // 0x0180 (0x0004) [0x0000000000000001] (CPF_Edit)    
	EPlayerContactPawnRotationMode                     AlignmentMode;                                 // 0x0184 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EPlayerContactPawnMovementMode                     PositionningMode;                              // 0x0185 (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FPlayerContactInfo                          EnemySetup;                                    // 0x0188 (0x0020) [0x0000000000000001] (CPF_Edit)    
	struct FPlayerContactInfo                          PlayerSetup;                                   // 0x01A8 (0x0020) [0x0000000000000001] (CPF_Edit)    
	TArray<class UAnimSet*>                            ExtraPlayerAnimSets;                           // 0x01C8 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIPlayerContact");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AIPlayFacialAnim
// 0x0024 OR 0x0198 (0x0198 - 0x0174)
// 36 OR 408 (408 - 372)
class UOLSeqAct_AIPlayFacialAnim : public USeqAct_Latent
{
public:
	struct FName                                       AnimName;                                      // 0x0174 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bInterruptible : 1;                            // 0x017C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bLooping : 1;                                  // 0x017C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bPlaying : 1;                                  // 0x017C (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	float                                              LoopingDuration;                               // 0x0180 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AnimBlendInTime;                               // 0x0184 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AnimBlendOutTime;                              // 0x0188 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AnimRate;                                      // 0x018C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AnimStartTime;                                 // 0x0190 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StartedTime;                                   // 0x0194 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIPlayFacialAnim");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AIRaiseAlarm
// 0x0004 OR 0x015C (0x015C - 0x0158)
// 4 OR 348 (348 - 344)
class UOLSeqAct_AIRaiseAlarm : public USequenceAction
{
public:
	float                                              OverriddenAlarmRange;                          // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIRaiseAlarm");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AISetConditions
// 0x0084 OR 0x01DC (0x01DC - 0x0158)
// 132 OR 476 (476 - 344)
class UOLSeqAct_AISetConditions : public USequenceAction
{
public:
	EConditionMergeType                                MergeType;                                     // 0x0158 (0x0001) [0x0000000000000001] (CPF_Edit)    
	TArray<struct FAIEventCondition>                   EventConditions;                               // 0x015C (0x0010) [0x0000000004400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditInline)
	struct FAIPerceptionRules                          PerceptionRules;                               // 0x016C (0x0070) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AISetConditions");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AISetLeash
// 0x002C OR 0x01A0 (0x01A0 - 0x0174)
// 44 OR 416 (416 - 372)
class UOLSeqAct_AISetLeash : public USeqAct_Latent
{
public:
	TArray<class AOLLeashMarker*>                      Leashes;                                       // 0x0174 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<class UOLBotCondition*>                     Conditions;                                    // 0x0184 (0x0010) [0x0000000004400009] (CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	float                                              SlowdownDuration;                              // 0x0194 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StoppedDuration;                               // 0x0198 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bAllowBasicInvestigationOutsideLeash : 1;      // 0x019C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bNodeActive : 1;                               // 0x019C (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AISetLeash");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqAct_AIStartPatrol
// 0x0010 OR 0x0184 (0x0184 - 0x0174)
// 16 OR 388 (388 - 372)
class UOLSeqAct_AIStartPatrol : public USeqAct_Latent
{
public:
	class ARoute*                                      PatrolRoute;                                   // 0x0174 (0x0008) [0x0000000000000000]               
	uint32_t                                           bStartAtClosestPoint : 1;                      // 0x017C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bForced : 1;                                   // 0x017C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bRouteIsManualPath : 1;                        // 0x017C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bOverride_Speed : 1;                           // 0x017C (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bForceUnawareStyle : 1;                        // 0x017C (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bForceAlertStyle : 1;                          // 0x017C (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bRunning : 1;                                  // 0x017C (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	float                                              Speed;                                         // 0x0180 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIStartPatrol");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqAct_AITriggerDisturbance
// 0x0008 OR 0x0160 (0x0160 - 0x0158)
// 8 OR 352 (352 - 344)
class UOLSeqAct_AITriggerDisturbance : public USequenceAction
{
public:
	EDisturbanceType                                   Type;                                          // 0x0158 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EDisturbanceReactionType                           ForcedReaction;                                // 0x0159 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              DisturbanceStrength;                           // 0x015C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AITriggerDisturbance");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AIUnspawnAtLocation
// 0x0040 OR 0x01B4 (0x01B4 - 0x0174)
// 64 OR 436 (436 - 372)
class UOLSeqAct_AIUnspawnAtLocation : public USeqAct_Latent
{
public:
	float                                              MinDistanceFromPlayer;                         // 0x0174 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinTimeSinceSeenByPlayer;                      // 0x0178 (0x0004) [0x0000000000000001] (CPF_Edit)    
	TArray<class UOLBotCondition*>                     OtherConditionsForUnspawn;                     // 0x017C (0x0010) [0x0000000004400009] (CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	uint32_t                                           bChooseAnotherSpotIfUnspawnDisallowed : 1;     // 0x018C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bSyncToPosition : 1;                           // 0x018C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bSyncToRotation : 1;                           // 0x018C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bOverride_Speed : 1;                           // 0x018C (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bForceUnawareStyle : 1;                        // 0x018C (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bForceAlertStyle : 1;                          // 0x018C (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bRunning : 1;                                  // 0x018C (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	struct FName                                       UnspawnAnimName;                               // 0x0190 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              DistanceBuffer;                                // 0x0198 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Speed;                                         // 0x019C (0x0004) [0x0000000000000001] (CPF_Edit)    
	EBotDestSelectionHeuristic                         PointSelectionMethod;                          // 0x01A0 (0x0001) [0x0000000000000001] (CPF_Edit)    
	TArray<class AActor*>                              Points;                                        // 0x01A4 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIUnspawnAtLocation");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqAct_AIWaitForEvent
// 0x0028 OR 0x019C (0x019C - 0x0174)
// 40 OR 412 (412 - 372)
class UOLSeqAct_AIWaitForEvent : public USeqAct_Latent
{
public:
	EAIEvent                                           EventType;                                     // 0x0174 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class AActor*                                      RelevantActor;                                 // 0x0178 (0x0008) [0x0000000000000001] (CPF_Edit)    
	TArray<class UOLBotCondition*>                     Conditions;                                    // 0x0180 (0x0010) [0x0000000004400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditInline)
	int32_t                                            MaxTriggerCount;                               // 0x0190 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bResetCountOnWait : 1;                         // 0x0194 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bWaiting : 1;                                  // 0x0194 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	int32_t                                            TriggerCount;                                  // 0x0198 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIWaitForEvent");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AIWaitForTrigger
// 0x001C OR 0x0190 (0x0190 - 0x0174)
// 28 OR 400 (400 - 372)
class UOLSeqAct_AIWaitForTrigger : public USeqAct_Latent
{
public:
	TArray<class UOLBotCondition*>                     Conditions;                                    // 0x0174 (0x0010) [0x0000000004400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditInline)
	uint32_t                                           bRunning : 1;                                  // 0x0184 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	class AOLAITrigger*                                AITrigger;                                     // 0x0188 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AIWaitForTrigger");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AkEventLocomotionMode
// 0x0018 OR 0x018C (0x018C - 0x0174)
// 24 OR 396 (396 - 372)
class UOLSeqAct_AkEventLocomotionMode : public USeqAct_Latent
{
public:
	ELocomotionMode                                    LocomotionMode;                                // 0x0174 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ELocomotionMode                                    LastLocomotionMode;                            // 0x0175 (0x0001) [0x0000000000002000] (CPF_Transient)
	class UAkEvent*                                    EnterLocomotionModeAkEvent;                    // 0x0178 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    ExitLocomotionModeAkEvent;                     // 0x0180 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bTriggerExitAkEventOnStop : 1;                 // 0x0188 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bUpdateActive : 1;                             // 0x0188 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AkEventLocomotionMode");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AndGate
// 0x0018 OR 0x0170 (0x0170 - 0x0158)
// 24 OR 368 (368 - 344)
class UOLSeqAct_AndGate : public USequenceAction
{
public:
	int32_t                                            LinkCount;                                     // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	TArray<uint8_t>                                    ReceivedInputs;                                // 0x015C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	uint32_t                                           bFired : 1;                                    // 0x016C (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AndGate");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_Arrow
// 0x0074 OR 0x01E8 (0x01E8 - 0x0174)
// 116 OR 488 (488 - 372)
class UOLSeqAct_Arrow : public USeqAct_Latent
{
public:
	struct FArrowSettings                              ArrowSettings;                                 // 0x0174 (0x0064) [0x0000000000000001] (CPF_Edit)    
	float                                              PreviewFreeTravelTime;                         // 0x01D8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bRunning : 1;                                  // 0x01DC (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bArrowLaunched : 1;                            // 0x01DC (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	class AOLArrow*                                    LaunchedArrow;                                 // 0x01E0 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_Arrow");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqAct_ArrowGenerator
// 0x008C OR 0x0200 (0x0200 - 0x0174)
// 140 OR 512 (512 - 372)
class UOLSeqAct_ArrowGenerator : public USeqAct_Latent
{
public:
	struct FArrowSettings                              ArrowSettings;                                 // 0x0174 (0x0064) [0x0000000000000001] (CPF_Edit)    
	float                                              MinDelay;                                      // 0x01D8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxDelay;                                      // 0x01DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            MaxArrowsToLaunch;                             // 0x01E0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AActor*                                      SrcActor;                                      // 0x01E4 (0x0008) [0x0000000000002000] (CPF_Transient)
	class AActor*                                      DestinationActor;                              // 0x01EC (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              NextLaunchTime;                                // 0x01F4 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            NbArrowsLaunched;                              // 0x01F8 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bRunning : 1;                                  // 0x01FC (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_ArrowGenerator");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AttachToDoor
// 0x0000 OR 0x0158 (0x0158 - 0x0158)
// 0 OR 344 (344 - 344)
class UOLSeqAct_AttachToDoor : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AttachToDoor");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_AttachToPushable
// 0x0010 OR 0x0168 (0x0168 - 0x0158)
// 16 OR 360 (360 - 344)
class UOLSeqAct_AttachToPushable : public USequenceAction
{
public:
	uint32_t                                           bRestrictMovement : 1;                         // 0x0158 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	struct FVector                                     WorldAxisRestriction;                          // 0x015C (0x000C) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_AttachToPushable");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_Bashable
// 0x0000 OR 0x0158 (0x0158 - 0x0158)
// 0 OR 344 (344 - 344)
class UOLSeqAct_Bashable : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_Bashable");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_Bloody
// 0x0008 OR 0x0160 (0x0160 - 0x0158)
// 8 OR 352 (352 - 344)
class UOLSeqAct_Bloody : public USequenceAction
{
public:
	uint32_t                                           bOverrideBloodyRatio : 1;                      // 0x0158 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              OverrideBloodyRatio;                           // 0x015C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_Bloody");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_Blur
// 0x0018 OR 0x0170 (0x0170 - 0x0158)
// 24 OR 368 (368 - 344)
class UOLSeqAct_Blur : public USequenceAction
{
public:
	float                                              Amount;                                        // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Duration;                                      // 0x015C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendInTime;                                   // 0x0160 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendOutTime;                                  // 0x0164 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Desaturation;                                  // 0x0168 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bFadeOutOnCancel : 1;                          // 0x016C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_Blur");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_Camcorder
// 0x0010 OR 0x0168 (0x0168 - 0x0158)
// 16 OR 360 (360 - 344)
class UOLSeqAct_Camcorder : public USequenceAction
{
public:
	uint32_t                                           bNoAnim : 1;                                   // 0x0158 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bWithNightVision : 1;                          // 0x0158 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bActivatePreventsPlayerControl : 1;            // 0x0158 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	float                                              NewMinFOV;                                     // 0x015C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            NewNumBatteries;                               // 0x0160 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              NewCurrentEnergy;                              // 0x0164 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_Camcorder");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqAct_CamcorderEnabledAnim
// 0x0038 OR 0x01AC (0x01AC - 0x0174)
// 56 OR 428 (428 - 372)
class UOLSeqAct_CamcorderEnabledAnim : public USeqAct_Latent
{
public:
	struct FName                                       BaseAnim;                                      // 0x0174 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       RaiseCamcorderAnim;                            // 0x017C (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       LowerCamcorderAnim;                            // 0x0184 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bCanRaiseCamcorder : 1;                        // 0x018C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bCanLowerCamcorder : 1;                        // 0x018C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bRunning : 1;                                  // 0x018C (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	TArray<class UAnimSet*>                            ExtraAnimSets;                                 // 0x0190 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              BaseBlendInTime;                               // 0x01A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RaiseCamcorderBlendInTime;                     // 0x01A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LowerCamcorderBlendInTime;                     // 0x01A8 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_CamcorderEnabledAnim");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_CamcorderVisibility
// 0x0004 OR 0x0178 (0x0178 - 0x0174)
// 4 OR 376 (376 - 372)
class UOLSeqAct_CamcorderVisibility : public USeqAct_Latent
{
public:
	uint32_t                                           bShowNoCam : 1;                                // 0x0174 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bShowNormalCam : 1;                            // 0x0174 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bShowInNV : 1;                                 // 0x0174 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_CamcorderVisibility");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_CameraParticleEffect
// 0x0018 OR 0x0170 (0x0170 - 0x0158)
// 24 OR 368 (368 - 344)
class UOLSeqAct_CameraParticleEffect : public USequenceAction
{
public:
	class UParticleSystem*                             ParticleSystemTemplate;                        // 0x0158 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              Duration;                                      // 0x0160 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendOutDuration;                              // 0x0164 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PlaneDist;                                     // 0x0168 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bNoRotation : 1;                               // 0x016C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bDeactivateOnCamcorderTransition : 1;          // 0x016C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_CameraParticleEffect");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqAct_CameraShake
// 0x009C OR 0x0210 (0x0210 - 0x0174)
// 156 OR 528 (528 - 372)
class UOLSeqAct_CameraShake : public USeqAct_Latent
{
public:
	struct FCameraShakeData                            Params;                                        // 0x0174 (0x0098) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bDone : 1;                                     // 0x020C (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_CameraShake");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqAct_CameraSmoothing
// 0x0004 OR 0x015C (0x015C - 0x0158)
// 4 OR 348 (348 - 344)
class UOLSeqAct_CameraSmoothing : public USequenceAction
{
public:
	float                                              BlendTime;                                     // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_CameraSmoothing");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_ChangeHeroType
// 0x0001 OR 0x0159 (0x0159 - 0x0158)
// 1 OR 345 (345 - 344)
class UOLSeqAct_ChangeHeroType : public USequenceAction
{
public:
	EHeroType                                          NewType;                                       // 0x0158 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_ChangeHeroType");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_ChokePoint
// 0x0014 OR 0x0188 (0x0188 - 0x0174)
// 20 OR 392 (392 - 372)
class UOLSeqAct_ChokePoint : public USeqAct_Latent
{
public:
	uint32_t                                           bWaitingForLoaded : 1;                         // 0x0174 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bWaitingForVisible : 1;                        // 0x0174 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bNonBlocking : 1;                              // 0x0174 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	TArray<struct FName>                               LevelNames;                                    // 0x0178 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_ChokePoint");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_ChooseClosest
// 0x0000 OR 0x0158 (0x0158 - 0x0158)
// 0 OR 344 (344 - 344)
class UOLSeqAct_ChooseClosest : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_ChooseClosest");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_ChooseClosestBot
// 0x0008 OR 0x0160 (0x0160 - 0x0158)
// 8 OR 352 (352 - 344)
class UOLSeqAct_ChooseClosestBot : public USequenceAction
{
public:
	float                                              MaxDistance;                                   // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bHorizontalDistOnly : 1;                       // 0x015C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_ChooseClosestBot");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_ChooseOutOfSight
// 0x0004 OR 0x015C (0x015C - 0x0158)
// 4 OR 348 (348 - 344)
class UOLSeqAct_ChooseOutOfSight : public USequenceAction
{
public:
	float                                              BackAngle;                                     // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_ChooseOutOfSight");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_ConditionalAIConfig
// 0x0028 OR 0x019C (0x019C - 0x0174)
// 40 OR 412 (412 - 372)
class UOLSeqAct_ConditionalAIConfig : public USeqAct_Latent
{
public:
	TArray<struct FConditionalConfigData>              ConfigSetups;                                  // 0x0174 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bNodeActive : 1;                               // 0x0184 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bCommentsUpToDate : 1;                         // 0x0184 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	int32_t                                            ActiveSetupIdx;                                // 0x0188 (0x0004) [0x0000000000002000] (CPF_Transient)
	TArray<class FString>                              MultiLineComments;                             // 0x018C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_ConditionalAIConfig");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_ConditionalHideBandages
// 0x000C OR 0x0164 (0x0164 - 0x0158)
// 12 OR 356 (356 - 344)
class UOLSeqAct_ConditionalHideBandages : public USequenceAction
{
public:
	int32_t                                            BandageLimit;                                  // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bHideInNightmareMode : 1;                      // 0x015C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	int32_t                                            MaxUnhiddenLinkedBandages;                     // 0x0160 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_ConditionalHideBandages");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_ConditionalHideBatteries
// 0x000C OR 0x0164 (0x0164 - 0x0158)
// 12 OR 356 (356 - 344)
class UOLSeqAct_ConditionalHideBatteries : public USequenceAction
{
public:
	int32_t                                            MaxNumBatteries;                               // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bHideInNightmareMode : 1;                      // 0x015C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	int32_t                                            MaxUnhiddenLinkedBatteries;                    // 0x0160 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_ConditionalHideBatteries");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_CrucifiedHands
// 0x0008 OR 0x0160 (0x0160 - 0x0158)
// 8 OR 352 (352 - 344)
class UOLSeqAct_CrucifiedHands : public USequenceAction
{
public:
	uint32_t                                           bOverrideBleedFactor : 1;                      // 0x0158 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              OveriddenBleedFactor;                          // 0x015C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_CrucifiedHands");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_DamagePlayer
// 0x0014 OR 0x016C (0x016C - 0x0158)
// 20 OR 364 (364 - 344)
class UOLSeqAct_DamagePlayer : public USequenceAction
{
public:
	uint32_t                                           bNonFatal : 1;                                 // 0x0158 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bForceBleeding : 1;                            // 0x0158 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bNoBleeding : 1;                               // 0x0158 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bShowBloodColumn : 1;                          // 0x0158 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bBloodParticles : 1;                           // 0x0158 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bCameraShake : 1;                              // 0x0158 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bBlur : 1;                                     // 0x0158 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bSoundEffect : 1;                              // 0x0158 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bBladeDamageSound : 1;                         // 0x0158 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	float                                              BloodColumnTime;                               // 0x015C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AActor*                                      referenceDamageActor;                          // 0x0160 (0x0008) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            DamageAmount;                                  // 0x0168 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_DamagePlayer");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_DarkLightControl
// 0x0008 OR 0x0160 (0x0160 - 0x0158)
// 8 OR 352 (352 - 344)
class UOLSeqAct_DarkLightControl : public USequenceAction
{
public:
	float                                              DarkLightBrightnessEV;                         // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DarkLightRadius;                               // 0x015C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_DarkLightControl");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_DebugText
// 0x0014 OR 0x016C (0x016C - 0x0158)
// 20 OR 364 (364 - 344)
class UOLSeqAct_DebugText : public USequenceAction
{
public:
	class FString                                      Text;                                          // 0x0158 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bIncludeWorldTime : 1;                         // 0x0168 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_DebugText");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_DelayByDifficulty
// 0x0044 OR 0x01B8 (0x01B8 - 0x0174)
// 68 OR 440 (440 - 372)
class UOLSeqAct_DelayByDifficulty : public USeqAct_Latent
{
public:
	struct FFloatByDifficulty                          DelayDuration;                                 // 0x0174 (0x0034) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bDelayActive : 1;                              // 0x01A8 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bStartWillRestart : 1;                         // 0x01A8 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              DefaultDuration;                               // 0x01AC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LastUpdateTime;                                // 0x01B0 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              RemainingTime;                                 // 0x01B4 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_DelayByDifficulty");
		}

		return uClassPointer;
	};

	void ResetDelayActive();
	void Reset();
};

// Class OLGame.OLSeqAct_Dialogue
// 0x0028 OR 0x019C (0x019C - 0x0174)
// 40 OR 412 (412 - 372)
class UOLSeqAct_Dialogue : public USeqAct_Latent
{
public:
	TArray<struct FDialogueLine>                       Dialogues;                                     // 0x0174 (0x0010) [0x0000000004400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditInline)
	uint32_t                                           bInteruptionHappenAfterCurrentLine : 1;        // 0x0184 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bInterrupted : 1;                              // 0x0184 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bInterruptedOnNextLine : 1;                    // 0x0184 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	int32_t                                            DialogueLineIndex;                             // 0x0188 (0x0004) [0x0000000000002000] (CPF_Transient)
	TArray<struct FPlayingDialogue>                    PlayingLines;                                  // 0x018C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_Dialogue");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_DisablePrompts
// 0x0014 OR 0x016C (0x016C - 0x0158)
// 20 OR 364 (364 - 344)
class UOLSeqAct_DisablePrompts : public USequenceAction
{
public:
	EDisablePromptGroup                                Group;                                         // 0x0158 (0x0001) [0x0000000000000001] (CPF_Edit)    
	TArray<EPlayerInteractionType>                     AdditionalPromptDisabled;                      // 0x015C (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_DisablePrompts");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_Dizzy
// 0x0418 OR 0x0570 (0x0570 - 0x0158)
// 1048 OR 1392 (1392 - 344)
class UOLSeqAct_Dizzy : public USequenceAction
{
public:
	uint32_t                                           bCustomSettings : 1;                           // 0x0158 (0x0004) [0x0000000000000000] [0x00000001] 
	EDizzinessTemplateType                             CopyFromTemplate;                              // 0x015C (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FDizzinessConfig                            Config;                                        // 0x0160 (0x00D0) [0x0000000000000001] (CPF_Edit)    
	struct FDizzinessConfig                            ConcussionConfig;                              // 0x0230 (0x00D0) [0x0000000000000000]               
	struct FDizzinessConfig                            PoisonConfig;                                  // 0x0300 (0x00D0) [0x0000000000000000]               
	struct FDizzinessConfig                            HallucinationConfig;                           // 0x03D0 (0x00D0) [0x0000000000000000]               
	struct FDizzinessConfig                            FastDropConfig;                                // 0x04A0 (0x00D0) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_Dizzy");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_Door
// 0x004D OR 0x01A5 (0x01A5 - 0x0158)
// 77 OR 421 (421 - 344)
class UOLSeqAct_Door : public USequenceAction
{
public:
	float                                              RotationSpeedOverride;                         // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OpenAngle;                                     // 0x015C (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bNoSound : 1;                                  // 0x0160 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bLockingSound : 1;                             // 0x0160 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bBashReversed : 1;                             // 0x0160 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bSwitchToBreakingMesh : 1;                     // 0x0160 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bEnableLockInteraction : 1;                    // 0x0160 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	struct FDoorShakeData                              ShakeParams;                                   // 0x0164 (0x0040) [0x0000000000000001] (CPF_Edit)    
	ECancelBashDirection                               CancelBashDirection;                           // 0x01A4 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_Door");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqAct_DoorStatus
// 0x0004 OR 0x015C (0x015C - 0x0158)
// 4 OR 348 (348 - 344)
class UOLSeqAct_DoorStatus : public USequenceAction
{
public:
	float                                              OpenAngle;                                     // 0x0158 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_DoorStatus");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_DriveMaterialDynamicDataByDistance
// 0x0040 OR 0x01B4 (0x01B4 - 0x0174)
// 64 OR 436 (436 - 372)
class UOLSeqAct_DriveMaterialDynamicDataByDistance : public USeqAct_Latent
{
public:
	struct FLinearColor                                CloseDynamicData;                              // 0x0174 (0x0010) [0x0000000000000001] (CPF_Edit)    
	struct FLinearColor                                FarDynamicData;                                // 0x0184 (0x0010) [0x0000000000000001] (CPF_Edit)    
	float                                              CloseDistance;                                 // 0x0194 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FarDistance;                                   // 0x0198 (0x0004) [0x0000000000000001] (CPF_Edit)    
	TArray<class AActor*>                              DynamicActors;                                 // 0x019C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class AActor*                                      DistanceRefActor;                              // 0x01AC (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_DriveMaterialDynamicDataByDistance");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_EyeWaterParticleLifetime
// 0x000C OR 0x0180 (0x0180 - 0x0174)
// 12 OR 384 (384 - 372)
class UOLSeqAct_EyeWaterParticleLifetime : public USeqAct_Latent
{
public:
	float                                              NewLifeTime;                                   // 0x0174 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Duration;                                      // 0x0178 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TimeLeft;                                      // 0x017C (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_EyeWaterParticleLifetime");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_Fade
// 0x0010 OR 0x0168 (0x0168 - 0x0158)
// 16 OR 360 (360 - 344)
class UOLSeqAct_Fade : public USequenceAction
{
public:
	uint32_t                                           bFadeIn : 1;                                   // 0x0158 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bForceStartValue : 1;                          // 0x0158 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              Opacity;                                       // 0x015C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      FadeColor;                                     // 0x0160 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Duration;                                      // 0x0164 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_Fade");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_FakeHitPlayer
// 0x0008 OR 0x0160 (0x0160 - 0x0158)
// 8 OR 352 (352 - 344)
class UOLSeqAct_FakeHitPlayer : public USequenceAction
{
public:
	float                                              HitStrength;                                   // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bPlayAnim : 1;                                 // 0x015C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bForceReaction : 1;                            // 0x015C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_FakeHitPlayer");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_FinishMapTransition
// 0x0004 OR 0x0178 (0x0178 - 0x0174)
// 4 OR 376 (376 - 372)
class UOLSeqAct_FinishMapTransition : public USeqAct_Latent
{
public:
	uint32_t                                           bWaitingForReady : 1;                          // 0x0174 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bBlockingOnLoad : 1;                           // 0x0174 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bTransitionCompleted : 1;                      // 0x0174 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bPendingActualCommit : 1;                      // 0x0174 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_FinishMapTransition");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_FishRecycler
// 0x0030 OR 0x01A4 (0x01A4 - 0x0174)
// 48 OR 420 (420 - 372)
class UOLSeqAct_FishRecycler : public USeqAct_Latent
{
public:
	uint32_t                                           bRandomizeOnStart : 1;                         // 0x0174 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bRunning : 1;                                  // 0x0174 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	float                                              DetectionRadius;                               // 0x0178 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              VisibilityDist;                                // 0x017C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SinkingDepth;                                  // 0x0180 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SinkingSpeed;                                  // 0x0184 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SurfacingSpeed;                                // 0x0188 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              InitialMinDepth;                               // 0x018C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              InitialMaxDepth;                               // 0x0190 (0x0004) [0x0000000000000001] (CPF_Edit)    
	TArray<struct FFloaterData>                        Floaters;                                      // 0x0194 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_FishRecycler");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_Flicker
// 0x0020 OR 0x0194 (0x0194 - 0x0174)
// 32 OR 404 (404 - 372)
class UOLSeqAct_Flicker : public USeqAct_Latent
{
public:
	float                                              Duration;                                      // 0x0174 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StartPeriodVisible;                            // 0x0178 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StartPeriodHidden;                             // 0x017C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EndPeriodVisible;                              // 0x0180 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EndPeriodHidden;                               // 0x0184 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bFinishHidden : 1;                             // 0x0188 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bRunning : 1;                                  // 0x0188 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bStartedVisible : 1;                           // 0x0188 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	float                                              StartedTime;                                   // 0x018C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              PeriodStartedTime;                             // 0x0190 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_Flicker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_FlyingFish
// 0x0028 OR 0x019C (0x019C - 0x0174)
// 40 OR 412 (412 - 372)
class UOLSeqAct_FlyingFish : public USeqAct_Latent
{
public:
	float                                              TotalDuration;                                 // 0x0174 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AccelExp;                                      // 0x0178 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       AnimName;                                      // 0x017C (0x0008) [0x0000000000000001] (CPF_Edit)    
	TArray<struct FRainingAnimalData>                  MeshesToProcess;                               // 0x0184 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              StartedTime;                                   // 0x0194 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bRunning : 1;                                  // 0x0198 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_FlyingFish");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_FogControl
// 0x005C OR 0x01D0 (0x01D0 - 0x0174)
// 92 OR 464 (464 - 372)
class UOLSeqAct_FogControl : public USeqAct_Latent
{
public:
	float                                              BlendTime;                                     // 0x0174 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FlashLightsVolumetricsIntensity;               // 0x0178 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LanternVolumetricsIntensity;                   // 0x017C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TorchVolumetricsIntensity;                     // 0x0180 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ArrowVolumetricsIntensity;                     // 0x0184 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HeroLightVolumetricsIntensity;                 // 0x0188 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FogDensityBottom;                              // 0x018C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FogDensityTop;                                 // 0x0190 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FogParticlesDensityBottom;                     // 0x0194 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FogParticlesDensityTop;                        // 0x0198 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FogPhaseAsymmetry;                             // 0x019C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Initial_FlashLightsVolumetricsIntensity;       // 0x01A0 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              Initial_LanternVolumetricsIntensity;           // 0x01A4 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              Initial_TorchVolumetricsIntensity;             // 0x01A8 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              Initial_ArrowVolumetricsIntensity;             // 0x01AC (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              Initial_HeroLightVolumetricsIntensity;         // 0x01B0 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              Initial_FogDensityBottom;                      // 0x01B4 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              Initial_FogDensityTop;                         // 0x01B8 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              Initial_FogParticlesDensityBottom;             // 0x01BC (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              Initial_FogParticlesDensityTop;                // 0x01C0 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              Initial_FogPhaseAsymmetry;                     // 0x01C4 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bRunning : 1;                                  // 0x01C8 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	float                                              StartedTime;                                   // 0x01CC (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_FogControl");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_ForceLevelVisibility
// 0x0010 OR 0x0168 (0x0168 - 0x0158)
// 16 OR 360 (360 - 344)
class UOLSeqAct_ForceLevelVisibility : public USequenceAction
{
public:
	TArray<struct FName>                               LevelsToShow;                                  // 0x0158 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_ForceLevelVisibility");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_ForceStance
// 0x0004 OR 0x015C (0x015C - 0x0158)
// 4 OR 348 (348 - 344)
class UOLSeqAct_ForceStance : public USequenceAction
{
public:
	uint32_t                                           bCrouch : 1;                                   // 0x0158 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_ForceStance");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_GameOver
// 0x0000 OR 0x0158 (0x0158 - 0x0158)
// 0 OR 344 (344 - 344)
class UOLSeqAct_GameOver : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_GameOver");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_GameplayItem
// 0x0008 OR 0x0160 (0x0160 - 0x0158)
// 8 OR 352 (352 - 344)
class UOLSeqAct_GameplayItem : public USequenceAction
{
public:
	struct FName                                       ItemName;                                      // 0x0158 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_GameplayItem");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_GenericBlend
// 0x0008 OR 0x0160 (0x0160 - 0x0158)
// 8 OR 352 (352 - 344)
class UOLSeqAct_GenericBlend : public USequenceAction
{
public:
	float                                              BlendTime;                                     // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bWorldSpace : 1;                               // 0x015C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bApplyAlsoOnCamera : 1;                        // 0x015C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bApplyOnlyOnCamera : 1;                        // 0x015C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_GenericBlend");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqAct_GetCurrentInteractiveObject
// 0x0000 OR 0x0158 (0x0158 - 0x0158)
// 0 OR 344 (344 - 344)
class UOLSeqAct_GetCurrentInteractiveObject : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_GetCurrentInteractiveObject");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_GetPairedWalkBot
// 0x0000 OR 0x0158 (0x0158 - 0x0158)
// 0 OR 344 (344 - 344)
class UOLSeqAct_GetPairedWalkBot : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_GetPairedWalkBot");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_GiveRecording
// 0x0010 OR 0x0168 (0x0168 - 0x0158)
// 16 OR 360 (360 - 344)
class UOLSeqAct_GiveRecording : public USequenceAction
{
public:
	TArray<struct FName>                               RecordingNames;                                // 0x0158 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_GiveRecording");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_GiveRecordingIfAccumulatedTime
// 0x0000 OR 0x0158 (0x0158 - 0x0158)
// 0 OR 344 (344 - 344)
class UOLSeqAct_GiveRecordingIfAccumulatedTime : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_GiveRecordingIfAccumulatedTime");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_Glasses
// 0x0001 OR 0x0159 (0x0159 - 0x0158)
// 1 OR 345 (345 - 344)
class UOLSeqAct_Glasses : public USequenceAction
{
public:
	EGlassesAction                                     Action;                                        // 0x0158 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_Glasses");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_HaarpEffect
// 0x0028 OR 0x019C (0x019C - 0x0174)
// 40 OR 412 (412 - 372)
class UOLSeqAct_HaarpEffect : public USeqAct_Latent
{
public:
	TArray<struct FHaarpEffect_IntensityValue>         Keys;                                          // 0x0174 (0x0010) [0x0000000004400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditInline)
	float                                              SmoothFactorAsc;                               // 0x0184 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SmoothFactorDsc;                               // 0x0188 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bRunning : 1;                                  // 0x018C (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	float                                              SmoothHaarpEffectIntensity;                    // 0x0190 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            CurrentIndex;                                  // 0x0194 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TimeElapsed;                                   // 0x0198 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_HaarpEffect");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_HaarpEffectConfig
// 0x0028 OR 0x0180 (0x0180 - 0x0158)
// 40 OR 384 (384 - 344)
class UOLSeqAct_HaarpEffectConfig : public USequenceAction
{
public:
	struct FRandomHaarpEffectConfig                    Config;                                        // 0x0158 (0x0028) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_HaarpEffectConfig");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_HeroControl
// 0x0058 OR 0x01CC (0x01CC - 0x0174)
// 88 OR 460 (460 - 372)
class UOLSeqAct_HeroControl : public USeqAct_Latent
{
public:
	float                                              FixedDuration;                                 // 0x0174 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LookAtBlendInTime;                             // 0x0178 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MovementSpeed;                                 // 0x017C (0x0004) [0x0000000000000001] (CPF_Edit)    
	EHeroControlRotationType                           AlignRotationType;                             // 0x0180 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              RotationSpeed;                                 // 0x0184 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bIndependentRotationControl : 1;               // 0x0188 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bNoMovementSmoothing : 1;                      // 0x0188 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bNoSmoothingIndependentRotation : 1;           // 0x0188 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bHardLookAt : 1;                               // 0x0188 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bCompleted : 1;                                // 0x0188 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bPendingKill : 1;                              // 0x0188 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	uint32_t                                           bLookAtBlendDone : 1;                          // 0x0188 (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	struct FName                                       LookAtBoneName;                                // 0x018C (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              LookAtOffsetUp;                                // 0x0194 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LookAtOffsetRight;                             // 0x0198 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AActor*                                      GoToTarget;                                    // 0x019C (0x0008) [0x0000000000000000]               
	class AActor*                                      LookAtTarget;                                  // 0x01A4 (0x0008) [0x0000000000000000]               
	float                                              ElapsedTime;                                   // 0x01AC (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              Duration;                                      // 0x01B0 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     OriginalCamLocation;                           // 0x01B4 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FRotator                                    OriginalCamRotation;                           // 0x01C0 (0x000C) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_HeroControl");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqAct_HeroEnterRiver
// 0x000C OR 0x0164 (0x0164 - 0x0158)
// 12 OR 356 (356 - 344)
class UOLSeqAct_HeroEnterRiver : public USequenceAction
{
public:
	struct FName                                       EntryAnim;                                     // 0x0158 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bSnapToWater : 1;                              // 0x0160 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bEnterLocomotionMode : 1;                      // 0x0160 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_HeroEnterRiver");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_HeroExitRiver
// 0x0008 OR 0x0160 (0x0160 - 0x0158)
// 8 OR 352 (352 - 344)
class UOLSeqAct_HeroExitRiver : public USequenceAction
{
public:
	struct FName                                       ExitAnim;                                      // 0x0158 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_HeroExitRiver");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_HeroNoInventory
// 0x0000 OR 0x0174 (0x0174 - 0x0174)
// 0 OR 372 (372 - 372)
class UOLSeqAct_HeroNoInventory : public USeqAct_Latent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_HeroNoInventory");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_HeroPlayAnim
// 0x0070 OR 0x01E4 (0x01E4 - 0x0174)
// 112 OR 484 (484 - 372)
class UOLSeqAct_HeroPlayAnim : public USeqAct_Latent
{
public:
	struct FName                                       AnimName;                                      // 0x0174 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bLooping : 1;                                  // 0x017C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bDisableCollision : 1;                         // 0x017C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bDisablePhysics : 1;                           // 0x017C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bDisableRootMotion : 1;                        // 0x017C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bDeactivateCamcorder : 1;                      // 0x017C (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bRestoreCamcorder : 1;                         // 0x017C (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bAllowFullCamcorderControl : 1;                // 0x017C (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bAllowLimitedCamcorderControl : 1;             // 0x017C (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bAllowZoom : 1;                                // 0x017C (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bKeepLocomotionMode : 1;                       // 0x017C (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bKeepVelocity : 1;                             // 0x017C (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bExitOnBlendOut : 1;                           // 0x017C (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	uint32_t                                           bEndsOnStageMark : 1;                          // 0x017C (0x0004) [0x0000000000000001] [0x00001000] (CPF_Edit)
	uint32_t                                           bStageMarkerWaitForNotify : 1;                 // 0x017C (0x0004) [0x0000000000000001] [0x00002000] (CPF_Edit)
	uint32_t                                           bStageMarkFor2dPosOnly : 1;                    // 0x017C (0x0004) [0x0000000000000001] [0x00004000] (CPF_Edit)
	uint32_t                                           bKeepLastPose : 1;                             // 0x017C (0x0004) [0x0000000000000001] [0x00008000] (CPF_Edit)
	uint32_t                                           bUseMarkAsRelativeBase : 1;                    // 0x017C (0x0004) [0x0000000000000001] [0x00010000] (CPF_Edit)
	uint32_t                                           bAllowCameraOffset : 1;                        // 0x017C (0x0004) [0x0000000000000001] [0x00020000] (CPF_Edit)
	uint32_t                                           bRecenterGamepadCamera : 1;                    // 0x017C (0x0004) [0x0000000000000001] [0x00040000] (CPF_Edit)
	uint32_t                                           bPlayingCustomAnim : 1;                        // 0x017C (0x0004) [0x0000000000002000] [0x00080000] (CPF_Transient)
	uint32_t                                           bDisabledCamcorder : 1;                        // 0x017C (0x0004) [0x0000000000002000] [0x00100000] (CPF_Transient)
	uint32_t                                           bAdjustmentFinishedTriggered : 1;              // 0x017C (0x0004) [0x0000000000002000] [0x00200000] (CPF_Transient)
	float                                              LoopingDuration;                               // 0x0180 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AnimBlendInTime;                               // 0x0184 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AnimBlendOutTime;                              // 0x0188 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StageMarkBlendTime;                            // 0x018C (0x0004) [0x0000000000000001] (CPF_Edit)    
	EProceduralAnimInterpType                          StageMarkInterpType;                           // 0x0190 (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FRotator                                    StageMarkRotationOffset;                       // 0x0194 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     StageMarkLocationOffset;                       // 0x01A0 (0x000C) [0x0000000000000001] (CPF_Edit)    
	class UAnimSet*                                    SpecificAnimSet;                               // 0x01AC (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              AnimRate;                                      // 0x01B4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AnimStartTime;                                 // 0x01B8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinYaw;                                        // 0x01BC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxYaw;                                        // 0x01C0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinPitch;                                      // 0x01C4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxPitch;                                      // 0x01C8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              NeckOffsetFwd;                                 // 0x01CC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              NeckOffsetSide;                                // 0x01D0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StartedTime;                                   // 0x01D4 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     LastMarkPos;                                   // 0x01D8 (0x000C) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_HeroPlayAnim");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqAct_HeroPlayRiverAnim
// 0x0028 OR 0x020C (0x020C - 0x01E4)
// 40 OR 524 (524 - 484)
class UOLSeqAct_HeroPlayRiverAnim : public UOLSeqAct_HeroPlayAnim
{
public:
	struct FName                                       RaftAnimation;                                 // 0x01E4 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bAllowRiverCurrentRealign : 1;                 // 0x01EC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bAllowRiverFullBehavior : 1;                   // 0x01EC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bInitialValueSetted : 1;                       // 0x01EC (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	float                                              RiverCurrentRealignRatio;                      // 0x01F0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FRotator                                    InitialStageMarkRotationOffset;                // 0x01F4 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     InitialStageMarkLocationOffset;                // 0x0200 (0x000C) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_HeroPlayRiverAnim");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_HeroSetSkinMaterials
// 0x0001 OR 0x0159 (0x0159 - 0x0158)
// 1 OR 345 (345 - 344)
class UOLSeqAct_HeroSetSkinMaterials : public USequenceAction
{
public:
	ESkinMaterialsType                                 Skin;                                          // 0x0158 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_HeroSetSkinMaterials");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_HeroTeleport
// 0x000C OR 0x0164 (0x0164 - 0x0158)
// 12 OR 356 (356 - 344)
class UOLSeqAct_HeroTeleport : public USequenceAction
{
public:
	EHeroTeleportStance                                ExitStance;                                    // 0x0158 (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bNoBlendToNewStance : 1;                       // 0x015C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bTeleportToLedgeHang : 1;                      // 0x015C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bTeleportToSqueeze : 1;                        // 0x015C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bTeleportToWardrobe : 1;                       // 0x015C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bTeleportToLocker : 1;                         // 0x015C (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	float                                              AutoUncrouchDelay;                             // 0x0160 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_HeroTeleport");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_HideInSight
// 0x0028 OR 0x019C (0x019C - 0x0174)
// 40 OR 412 (412 - 372)
class UOLSeqAct_HideInSight : public USeqAct_Latent
{
public:
	float                                              BackAngle;                                     // 0x0174 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bRunning : 1;                                  // 0x0178 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bSoftUnspawnedBot : 1;                         // 0x0178 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bUnspawnRequested : 1;                         // 0x0178 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bUnspawnReady : 1;                             // 0x0178 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	class AOLBot*                                      TargetBot;                                     // 0x017C (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     UnspawnLocation;                               // 0x0184 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FRotator                                    UnspawnRotation;                               // 0x0190 (0x000C) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_HideInSight");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqAct_HoldingBaby
// 0x0004 OR 0x015C (0x015C - 0x0158)
// 4 OR 348 (348 - 344)
class UOLSeqAct_HoldingBaby : public USequenceAction
{
public:
	float                                              WalkSpeed;                                     // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_HoldingBaby");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_IgnoreBaseRotation
// 0x0000 OR 0x0158 (0x0158 - 0x0158)
// 0 OR 344 (344 - 344)
class UOLSeqAct_IgnoreBaseRotation : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_IgnoreBaseRotation");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_InnerDemonEffect
// 0x0028 OR 0x0180 (0x0180 - 0x0158)
// 40 OR 384 (384 - 344)
class UOLSeqAct_InnerDemonEffect : public USequenceAction
{
public:
	uint32_t                                           bDeformation : 1;                              // 0x0158 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bParticles : 1;                                // 0x0158 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bPostEffect : 1;                               // 0x0158 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bDecals : 1;                                   // 0x0158 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bFadeOutEffects : 1;                           // 0x0158 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	class UParticleSystem*                             ParticleOverride;                              // 0x015C (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              DeformApproachCoeffUp;                         // 0x0164 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DeformApproachCoeffDown;                       // 0x0168 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PPSApproachCoeffUp;                            // 0x016C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PPSApproachCoeffDown;                          // 0x0170 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DecalApproachCoeffUp;                          // 0x0174 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DecalApproachCoeffDown;                        // 0x0178 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DecalActivationRadius;                         // 0x017C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_InnerDemonEffect");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_InvisibleFootsteps
// 0x0054 OR 0x01C8 (0x01C8 - 0x0174)
// 84 OR 456 (456 - 372)
class UOLSeqAct_InvisibleFootsteps : public USeqAct_Latent
{
public:
	EFootstepDecalType                                 FootstepType;                                  // 0x0174 (0x0001) [0x0000000000000001] (CPF_Edit)    
	TArray<class UMaterialInstanceConstant*>           DecalsLeft;                                    // 0x0178 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<class UMaterialInstanceConstant*>           DecalsRight;                                   // 0x0188 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              DecalWidth;                                    // 0x0198 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DecalHeight;                                   // 0x019C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DecalThickness;                                // 0x01A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bDriveDynamicData : 1;                         // 0x01A4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bTraceDownForDepth : 1;                        // 0x01A4 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bRunning : 1;                                  // 0x01A4 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	float                                              DynamicDataInterpDuration;                     // 0x01A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SimulatedDepth;                                // 0x01AC (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AOLPawn*                                     TargetPawn;                                    // 0x01B0 (0x0008) [0x0000000000002000] (CPF_Transient)
	TArray<struct FInvisibleFootstepData>              ActiveDecals;                                  // 0x01B8 (0x0010) [0x0000000000482000] (CPF_Transient | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_InvisibleFootsteps");
		}

		return uClassPointer;
	};

	bool ShouldHandleDecal(EFootstepDecalType DecalType);
	void SpawnFootstepDecal(bool bLeftFoot, struct FVector& DecalLocation, struct FRotator& DecalRotation);
};

// Class OLGame.OLSeqAct_LightEnvControl
// 0x0008 OR 0x0160 (0x0160 - 0x0158)
// 8 OR 352 (352 - 344)
class UOLSeqAct_LightEnvControl : public USequenceAction
{
public:
	float                                              StaticLightEnvironmentIntensity;               // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bCharacterLightEnv : 1;                        // 0x015C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bCastShadows : 1;                              // 0x015C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_LightEnvControl");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqAct_LimitPlayerSpeed
// 0x0008 OR 0x0160 (0x0160 - 0x0158)
// 8 OR 352 (352 - 344)
class UOLSeqAct_LimitPlayerSpeed : public USequenceAction
{
public:
	float                                              MaxSpeed;                                      // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Duration;                                      // 0x015C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_LimitPlayerSpeed");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_LimitRotationRate
// 0x0008 OR 0x0160 (0x0160 - 0x0158)
// 8 OR 352 (352 - 344)
class UOLSeqAct_LimitRotationRate : public USequenceAction
{
public:
	float                                              MaxRotationRate;                               // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Duration;                                      // 0x015C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_LimitRotationRate");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_LimitSqueeze
// 0x0004 OR 0x015C (0x015C - 0x0158)
// 4 OR 348 (348 - 344)
class UOLSeqAct_LimitSqueeze : public USequenceAction
{
public:
	uint32_t                                           bBlockMovementLeftSide : 1;                    // 0x0158 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bBlockMovementRightSide : 1;                   // 0x0158 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bBlockViewLeftSide : 1;                        // 0x0158 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bBlockViewRightSide : 1;                       // 0x0158 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_LimitSqueeze");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_Limp
// 0x0001 OR 0x0159 (0x0159 - 0x0158)
// 1 OR 345 (345 - 344)
class UOLSeqAct_Limp : public USequenceAction
{
public:
	EHobbleIntensity                                   HobbleIntensity;                               // 0x0158 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_Limp");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_LinkToPushable
// 0x0034 OR 0x01A8 (0x01A8 - 0x0174)
// 52 OR 424 (424 - 372)
class UOLSeqAct_LinkToPushable : public USeqAct_Latent
{
public:
	struct FVector                                     LocationDelta;                                 // 0x0174 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FRotator                                    RotationDelta;                                 // 0x0180 (0x000C) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bLinkActive : 1;                               // 0x018C (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bHasLinkBeenActivated : 1;                     // 0x018C (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	struct FVector                                     InitialTargetLocation;                         // 0x0190 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FRotator                                    InitialTargetRotation;                         // 0x019C (0x000C) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_LinkToPushable");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_LoadingScreen
// 0x0000 OR 0x0158 (0x0158 - 0x0158)
// 0 OR 344 (344 - 344)
class UOLSeqAct_LoadingScreen : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_LoadingScreen");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_LockerFrenzy
// 0x0048 OR 0x01BC (0x01BC - 0x0174)
// 72 OR 444 (444 - 372)
class UOLSeqAct_LockerFrenzy : public USeqAct_Latent
{
public:
	float                                              CrescendoDuration;                             // 0x0174 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TotalDuration;                                 // 0x0178 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StartTimeInterval;                             // 0x017C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EndTimeInterval;                               // 0x0180 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              IntervalExponential;                           // 0x0184 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DoorAnimationDuration;                         // 0x0188 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DoorAnimationOpeningTimePct;                   // 0x018C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DoorAnimationOpenedTimePct;                    // 0x0190 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DoorAnimationMaxAngle;                         // 0x0194 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    LockerDoorSound;                               // 0x0198 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bRunning : 1;                                  // 0x01A0 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	float                                              StartedTime;                                   // 0x01A4 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              ElapsedDoorActivationTime;                     // 0x01A8 (0x0004) [0x0000000000002000] (CPF_Transient)
	TArray<class AOLDoor*>                             TargetDoors;                                   // 0x01AC (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_LockerFrenzy");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_MartaStreet
// 0x00D4 OR 0x0248 (0x0248 - 0x0174)
// 212 OR 584 (584 - 372)
class UOLSeqAct_MartaStreet : public USeqAct_Latent
{
public:
	TArray<class AOLBashableObject*>                   BashableWalls;                                 // 0x0174 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<class AOLMartaStreetVolume*>                Volumes;                                       // 0x0184 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	struct FMartaStreetUnspawnConditions               UnspawnConditions;                             // 0x0194 (0x0020) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	struct FMartaStreetRespawnConditions               RespawnConditions;                             // 0x01B4 (0x0018) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              PlayerKnockbackZoneFwd;                        // 0x01CC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PlayerKnockbackZoneSide;                       // 0x01D0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PlayerKnockbackStrength;                       // 0x01D4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AOLBot*                                      Marta;                                         // 0x01D8 (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FMartaStreetState                           State;                                         // 0x01E0 (0x004C) [0x0000000000002000] (CPF_Transient)
	class AActor*                                      PressureSpawnPoint;                            // 0x022C (0x0008) [0x0000000000002000] (CPF_Transient)
	TArray<class AActor*>                              UnusedPressedSpawnPoints;                      // 0x0234 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	uint32_t                                           bRunning : 1;                                  // 0x0244 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_MartaStreet");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_MeshSwap
// 0x0010 OR 0x0168 (0x0168 - 0x0158)
// 16 OR 360 (360 - 344)
class UOLSeqAct_MeshSwap : public USequenceAction
{
public:
	class USkeletalMesh*                               MeshOverride;                                  // 0x0158 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class USkeletalMesh*                               HeadMeshOverride;                              // 0x0160 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_MeshSwap");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_MonitorPlayerSpeed
// 0x001C OR 0x0190 (0x0190 - 0x0174)
// 28 OR 400 (400 - 372)
class UOLSeqAct_MonitorPlayerSpeed : public USeqAct_Latent
{
public:
	float                                              MaxSpeedForIdle;                               // 0x0174 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxSpeedForWalk;                               // 0x0178 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxSpeedForRun;                                // 0x017C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SpecificThreshold;                             // 0x0180 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bRunning : 1;                                  // 0x0184 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bBelowThreshold : 1;                           // 0x0184 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	int32_t                                            CurrentStateIdx;                               // 0x0188 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LastEventTime;                                 // 0x018C (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_MonitorPlayerSpeed");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_NightVisionStatus
// 0x0008 OR 0x0160 (0x0160 - 0x0158)
// 8 OR 352 (352 - 344)
class UOLSeqAct_NightVisionStatus : public USequenceAction
{
public:
	float                                              ZoomedInPctThreshold;                          // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RemainingBatteries;                            // 0x015C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_NightVisionStatus");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqAct_NoBleeding
// 0x0000 OR 0x0158 (0x0158 - 0x0158)
// 0 OR 344 (344 - 344)
class UOLSeqAct_NoBleeding : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_NoBleeding");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_Once
// 0x0004 OR 0x015C (0x015C - 0x0158)
// 4 OR 348 (348 - 344)
class UOLSeqAct_Once : public USequenceAction
{
public:
	uint32_t                                           bHasBeenActivatedAlready : 1;                  // 0x0158 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_Once");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_OpenMainMenu
// 0x0000 OR 0x0158 (0x0158 - 0x0158)
// 0 OR 344 (344 - 344)
class UOLSeqAct_OpenMainMenu : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_OpenMainMenu");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_OutOfSight
// 0x0018 OR 0x018C (0x018C - 0x0174)
// 24 OR 396 (396 - 372)
class UOLSeqAct_OutOfSight : public USeqAct_Latent
{
public:
	TArray<struct FPendingOutOfSightOp>                PendingOps;                                    // 0x0174 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              BackAngle;                                     // 0x0184 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bReverseCondition : 1;                         // 0x0188 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_OutOfSight");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_OverrideAIMusic
// 0x000C OR 0x0164 (0x0164 - 0x0158)
// 12 OR 356 (356 - 344)
class UOLSeqAct_OverrideAIMusic : public USequenceAction
{
public:
	uint32_t                                           bSetAsMinimumState : 1;                        // 0x0158 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	EAIMusicState                                      MusicState;                                    // 0x015C (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              MusicDistance;                                 // 0x0160 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_OverrideAIMusic");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_OverrideAnimSets
// 0x0018 OR 0x0170 (0x0170 - 0x0158)
// 24 OR 368 (368 - 344)
class UOLSeqAct_OverrideAnimSets : public USequenceAction
{
public:
	TArray<class UAnimSet*>                            AnimSetOverrides;                              // 0x0158 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class UOLAIAnimConfig*                             AnimConfigOverride;                            // 0x0168 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_OverrideAnimSets");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_OverrideDetailPosition
// 0x0008 OR 0x017C (0x017C - 0x0174)
// 8 OR 380 (380 - 372)
class UOLSeqAct_OverrideDetailPosition : public USeqAct_Latent
{
public:
	class AActor*                                      ActorPositionOverride;                         // 0x0174 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_OverrideDetailPosition");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_OverrideFOV
// 0x0008 OR 0x0160 (0x0160 - 0x0158)
// 8 OR 352 (352 - 344)
class UOLSeqAct_OverrideFOV : public USequenceAction
{
public:
	float                                              OverriddenFOV;                                 // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ApproachCoeff;                                 // 0x015C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_OverrideFOV");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_OverrideRaftAttachmentMode
// 0x0004 OR 0x015C (0x015C - 0x0158)
// 4 OR 348 (348 - 344)
class UOLSeqAct_OverrideRaftAttachmentMode : public USequenceAction
{
public:
	uint32_t                                           bManual : 1;                                   // 0x0158 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_OverrideRaftAttachmentMode");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_OverrideRaftAttachmentSettings
// 0x0011 OR 0x0169 (0x0169 - 0x0158)
// 17 OR 361 (361 - 344)
class UOLSeqAct_OverrideRaftAttachmentSettings : public USequenceAction
{
public:
	struct FVector                                     RaftOffset;                                    // 0x0158 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              RaftOffsetAdjustmentDuration;                  // 0x0164 (0x0004) [0x0000000000000001] (CPF_Edit)    
	ERaftIdleAnimationType                             RaftProceduralAnimationType;                   // 0x0168 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_OverrideRaftAttachmentSettings");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_PairedWalk
// 0x0010 OR 0x0184 (0x0184 - 0x0174)
// 16 OR 388 (388 - 372)
class UOLSeqAct_PairedWalk : public USeqAct_Latent
{
public:
	EPairedWalkType                                    Type;                                          // 0x0174 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              WalkSpeed;                                     // 0x0178 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RunSpeed;                                      // 0x017C (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bBotIsDriving : 1;                             // 0x0180 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bRunning : 1;                                  // 0x0180 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_PairedWalk");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqAct_PairedWalkStyle
// 0x000C OR 0x0164 (0x0164 - 0x0158)
// 12 OR 356 (356 - 344)
class UOLSeqAct_PairedWalkStyle : public USequenceAction
{
public:
	EPairedWalkAnimStyle                               AnimStyle;                                     // 0x0158 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendTimeOverride;                             // 0x015C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OverrideSpeed;                                 // 0x0160 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_PairedWalkStyle");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_PlayDoorAnim
// 0x0018 OR 0x0170 (0x0170 - 0x0158)
// 24 OR 368 (368 - 344)
class UOLSeqAct_PlayDoorAnim : public USequenceAction
{
public:
	struct FName                                       AnimName;                                      // 0x0158 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UAnimSet*                                    AnimSet;                                       // 0x0160 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bLooping : 1;                                  // 0x0168 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              PlayRate;                                      // 0x016C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_PlayDoorAnim");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_PlayGoCheck
// 0x0004 OR 0x015C (0x015C - 0x0158)
// 4 OR 348 (348 - 344)
class UOLSeqAct_PlayGoCheck : public USequenceAction
{
public:
	uint32_t                                           bKickBackToMainMenuIfFailed : 1;               // 0x0158 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_PlayGoCheck");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_PonyTail
// 0x0000 OR 0x0158 (0x0158 - 0x0158)
// 0 OR 344 (344 - 344)
class UOLSeqAct_PonyTail : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_PonyTail");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_PostProcessEffect
// 0x006C OR 0x01E0 (0x01E0 - 0x0174)
// 108 OR 480 (480 - 372)
class UOLSeqAct_PostProcessEffect : public USeqAct_Latent
{
public:
	struct FPPSEffectConfig                            Config;                                        // 0x0174 (0x004C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FName                                       PresetName;                                    // 0x01C0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              CancelBlendOutTime;                            // 0x01C8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bKeepLastValues : 1;                           // 0x01CC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bRunning : 1;                                  // 0x01CC (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	TArray<struct FPPSEffectConfig>                    PresetConfigs;                                 // 0x01D0 (0x0010) [0x0000000000480002] (CPF_Const | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_PostProcessEffect");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_PrepareMapTransition
// 0x00BC OR 0x0230 (0x0230 - 0x0174)
// 188 OR 560 (560 - 372)
class UOLSeqAct_PrepareMapTransition : public USeqAct_Latent
{
public:
	struct FName                                       PersistentName;                                // 0x0174 (0x0008) [0x0000000000000001] (CPF_Edit)    
	TArray<struct FName>                               LevelsToLoad;                                  // 0x017C (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<struct FName>                               LevelsToShow;                                  // 0x018C (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<struct FName>                               LevelsRequiredVisible;                         // 0x019C (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<struct FName>                               LevelsToUnload1;                               // 0x01AC (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<struct FName>                               LevelsToUnload2;                               // 0x01BC (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<struct FName>                               LevelsToUnload3;                               // 0x01CC (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<struct FName>                               LevelsToUnloadBeforePreload;                   // 0x01DC (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	TArray<struct FName>                               LevelsToKeepLoaded;                            // 0x01EC (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bKeepLoadedLevelsForReturnTrip : 1;            // 0x01FC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bForceUnload1OnAutomaticPreload : 1;           // 0x01FC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bStatusIsOk : 1;                               // 0x01FC (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bPreUnloadRequested : 1;                       // 0x01FC (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	uint32_t                                           bPreUnloadDone : 1;                            // 0x01FC (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bPreloadingRequested : 1;                      // 0x01FC (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	uint32_t                                           bPreloadingDone : 1;                           // 0x01FC (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	uint32_t                                           bVisibilityRequested : 1;                      // 0x01FC (0x0004) [0x0000000000002000] [0x00000080] (CPF_Transient)
	uint32_t                                           bVisibilityDone : 1;                           // 0x01FC (0x0004) [0x0000000000002000] [0x00000100] (CPF_Transient)
	uint32_t                                           bFullUnloadRequested : 1;                      // 0x01FC (0x0004) [0x0000000000002000] [0x00000200] (CPF_Transient)
	uint32_t                                           bFullUnloadDone : 1;                           // 0x01FC (0x0004) [0x0000000000002000] [0x00000400] (CPF_Transient)
	float                                              DelayBetweenUnloads;                           // 0x0200 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DelayBetweenUnloadAndGC;                       // 0x0204 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            UnloadActorsBatchSize;                         // 0x0208 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       CheckpointForAutomaticPreload;                 // 0x020C (0x0008) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            PreloadDelay;                                  // 0x0214 (0x0004) [0x0000000000002000] (CPF_Transient)
	TArray<struct FName>                               DelayedUnloadList;                             // 0x0218 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              NextUnloadTime;                                // 0x0228 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              NextGCTime;                                    // 0x022C (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_PrepareMapTransition");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqAct_Pushable
// 0x0024 OR 0x017C (0x017C - 0x0158)
// 36 OR 380 (380 - 344)
class UOLSeqAct_Pushable : public USequenceAction
{
public:
	struct FVector                                     NewDisplacement;                               // 0x0158 (0x000C) [0x0000000000000001] (CPF_Edit)    
	class AOLPushableSplineMarker*                     NewLinkedSpline;                               // 0x0164 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     Impulse;                                       // 0x016C (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              ResetSpeed;                                    // 0x0178 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_Pushable");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqAct_PushFoliage
// 0x0004 OR 0x015C (0x015C - 0x0158)
// 4 OR 348 (348 - 344)
class UOLSeqAct_PushFoliage : public USequenceAction
{
public:
	uint32_t                                           On : 1;                                        // 0x0158 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_PushFoliage");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_QTEDrivenMatinee
// 0x003C OR 0x0194 (0x0194 - 0x0158)
// 60 OR 404 (404 - 344)
class UOLSeqAct_QTEDrivenMatinee : public USequenceAction
{
public:
	uint32_t                                           bInterruptOnAttack : 1;                        // 0x0158 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bSucceedsOnMax : 1;                            // 0x0158 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bFailsOnMin : 1;                               // 0x0158 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bInputCancelDelay : 1;                         // 0x0158 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bForceFeedbackOnButtonMash : 1;                // 0x0158 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	float                                              InitialValue;                                  // 0x015C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinValue;                                      // 0x0160 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxValue;                                      // 0x0164 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              InputForce;                                    // 0x0168 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              InputHoldForce;                                // 0x016C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ResetForce;                                    // 0x0170 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ValueApproachFactor;                           // 0x0174 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DelayBeforeRestForceApplied;                   // 0x0178 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       PromptTextId;                                  // 0x017C (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       RTPCName;                                      // 0x0184 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UForceFeedbackWaveform*                      FFWaveform;                                    // 0x018C (0x0008) [0x0000000004000001] (CPF_Edit | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_QTEDrivenMatinee");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_RaftBump
// 0x0014 OR 0x016C (0x016C - 0x0158)
// 20 OR 364 (364 - 344)
class UOLSeqAct_RaftBump : public USequenceAction
{
public:
	float                                              BumpForce;                                     // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BumpTime;                                      // 0x015C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PitchOffset;                                   // 0x0160 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UAkEvent*                                    AkEvent;                                       // 0x0164 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_RaftBump");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_RailControl
// 0x003C OR 0x01B0 (0x01B0 - 0x0174)
// 60 OR 432 (432 - 372)
class UOLSeqAct_RailControl : public USeqAct_Latent
{
public:
	struct FName                                       SwitchDisabledGamestate;                       // 0x0174 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              IntersectionStartDisplacement;                 // 0x017C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              IntersectionEndDisplacementA;                  // 0x0180 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              IntersectionEndDisplacementB;                  // 0x0184 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BreakLimitDisplacement;                        // 0x0188 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinSpeedForBreakLimit;                         // 0x018C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              NoReturnSplineDisp;                            // 0x0190 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bInitialSplineAConnected : 1;                  // 0x0194 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bRunning : 1;                                  // 0x0194 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bSplineAConnected : 1;                         // 0x0194 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bCSADisabled : 1;                              // 0x0194 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	uint32_t                                           bBrokeLimit : 1;                               // 0x0194 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bPreventedReturn : 1;                          // 0x0194 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	class AOLPushableObject*                           Pushable;                                      // 0x0198 (0x0008) [0x0000000000002000] (CPF_Transient)
	class AOLPushableSplineMarker*                     SplineA;                                       // 0x01A0 (0x0008) [0x0000000000002000] (CPF_Transient)
	class AOLPushableSplineMarker*                     SplineB;                                       // 0x01A8 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_RailControl");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_RainEffect
// 0x0000 OR 0x0158 (0x0158 - 0x0158)
// 0 OR 344 (344 - 344)
class UOLSeqAct_RainEffect : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_RainEffect");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_ReadDocument
// 0x0008 OR 0x0160 (0x0160 - 0x0158)
// 8 OR 352 (352 - 344)
class UOLSeqAct_ReadDocument : public USequenceAction
{
public:
	struct FName                                       DocumentName;                                  // 0x0158 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_ReadDocument");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_RenderingOverrides
// 0x0004 OR 0x015C (0x015C - 0x0158)
// 4 OR 348 (348 - 344)
class UOLSeqAct_RenderingOverrides : public USequenceAction
{
public:
	struct FRenderingPerformanceOverrides              RenderingOverrides;                            // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_RenderingOverrides");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_ResetAIConfig
// 0x0000 OR 0x0158 (0x0158 - 0x0158)
// 0 OR 344 (344 - 344)
class UOLSeqAct_ResetAIConfig : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_ResetAIConfig");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_RiverMovement
// 0x0004 OR 0x015C (0x015C - 0x0158)
// 4 OR 348 (348 - 344)
class UOLSeqAct_RiverMovement : public USequenceAction
{
public:
	uint32_t                                           bClearVelocity : 1;                            // 0x0158 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_RiverMovement");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_SelectRandom
// 0x0000 OR 0x0158 (0x0158 - 0x0158)
// 0 OR 344 (344 - 344)
class UOLSeqAct_SelectRandom : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_SelectRandom");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_Sequence
// 0x0004 OR 0x015C (0x015C - 0x0158)
// 4 OR 348 (348 - 344)
class UOLSeqAct_Sequence : public USequenceAction
{
public:
	int32_t                                            LinkCount;                                     // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_Sequence");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_SetAIConfig
// 0x12C0 OR 0x1418 (0x1418 - 0x0158)
// 4800 OR 5144 (5144 - 344)
class UOLSeqAct_SetAIConfig : public USequenceAction
{
public:
	class UOLAIConfig*                                 Config;                                        // 0x0158 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FAIConfigData                               ConfigOverrides;                               // 0x0160 (0x12A4) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bSetAsDefaultConfig : 1;                       // 0x1404 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bCommentsUpToDate : 1;                         // 0x1404 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	TArray<class FString>                              MultiLineComments;                             // 0x1408 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_SetAIConfig");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_SetLightProperties
// 0x0010 OR 0x0168 (0x0168 - 0x0158)
// 16 OR 360 (360 - 344)
class UOLSeqAct_SetLightProperties : public USequenceAction
{
public:
	uint32_t                                           bOverride_Enabled : 1;                         // 0x0158 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bEnabled : 1;                                  // 0x0158 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bOverride_Radius : 1;                          // 0x0158 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bOverride_Color : 1;                           // 0x0158 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bOverride_Brightness : 1;                      // 0x0158 (0x0004) [0x0000000000000000] [0x00000010] 
	float                                              Radius;                                        // 0x015C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      LightColor;                                    // 0x0160 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BrightnessEV;                                  // 0x0164 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_SetLightProperties");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_SetObjective
// 0x0014 OR 0x016C (0x016C - 0x0158)
// 20 OR 364 (364 - 344)
class UOLSeqAct_SetObjective : public USequenceAction
{
public:
	struct FName                                       ObjectiveTextId;                               // 0x0158 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       ObjectiveVOPath;                               // 0x0160 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bActivateOnlyOnce : 1;                         // 0x0168 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bResetOnPlayerDeath : 1;                       // 0x0168 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bHasBeenActivated : 1;                         // 0x0168 (0x0004) [0x0000000000000000] [0x00000004] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_SetObjective");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqAct_SetPlayerSpeed
// 0x0004 OR 0x015C (0x015C - 0x0158)
// 4 OR 348 (348 - 344)
class UOLSeqAct_SetPlayerSpeed : public USequenceAction
{
public:
	float                                              TargetSpeed;                                   // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_SetPlayerSpeed");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_SetPlayerWalkingStyle
// 0x0014 OR 0x016C (0x016C - 0x0158)
// 20 OR 364 (364 - 344)
class UOLSeqAct_SetPlayerWalkingStyle : public USequenceAction
{
public:
	EHeroWalkingStyle                                  WalkingStyle;                                  // 0x0158 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              WalkSpeedOverride;                             // 0x015C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RunSpeedOverride;                              // 0x0160 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AccelApproachFactorOverride;                   // 0x0164 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DecelApproachFactorOverride;                   // 0x0168 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_SetPlayerWalkingStyle");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_SetVolumeThreshold
// 0x0004 OR 0x015C (0x015C - 0x0158)
// 4 OR 348 (348 - 344)
class UOLSeqAct_SetVolumeThreshold : public USequenceAction
{
public:
	float                                              NewThreshold;                                  // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_SetVolumeThreshold");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_Silhouette
// 0x0065 OR 0x01D9 (0x01D9 - 0x0174)
// 101 OR 473 (473 - 372)
class UOLSeqAct_Silhouette : public USeqAct_Latent
{
public:
	uint32_t                                           bCanStartReady : 1;                            // 0x0174 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bVisibleWhenInactive : 1;                      // 0x0174 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bPerformLineCheck : 1;                         // 0x0174 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bSimpleCollisionCheck : 1;                     // 0x0174 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bDriveDynamicData : 1;                         // 0x0174 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bHideOnlyMainMesh : 1;                         // 0x0174 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bJumpScare : 1;                                // 0x0174 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bNoMovementWhenVisible : 1;                    // 0x0174 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bDisableOnLookBack : 1;                        // 0x0174 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bDisableCloseToSplineExtremities : 1;          // 0x0174 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bDisableIfPlayerTooFarFromSpline : 1;          // 0x0174 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bDisableIfCrouched : 1;                        // 0x0174 (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	uint32_t                                           bOnlyInNightVision : 1;                        // 0x0174 (0x0004) [0x0000000000000001] [0x00001000] (CPF_Edit)
	uint32_t                                           bRunning : 1;                                  // 0x0174 (0x0004) [0x0000000000002000] [0x00002000] (CPF_Transient)
	uint32_t                                           LastVisibilityCheckInFrustum : 1;              // 0x0174 (0x0004) [0x0000000000002000] [0x00004000] (CPF_Transient)
	uint32_t                                           LastVisibilityCheckResult : 1;                 // 0x0174 (0x0004) [0x0000000000002000] [0x00008000] (CPF_Transient)
	float                                              ActivationRange;                               // 0x0178 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinimumDistance;                               // 0x017C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TargetRadius;                                  // 0x0180 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EffectDuration;                                // 0x0184 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LineCheckInterval;                             // 0x0188 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInstance*                           MaterialTemplate;                              // 0x018C (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxPlayerRotationRateWhenVisible;              // 0x0194 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxPlayerSpeedWhenVisible;                     // 0x0198 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxMovementDurationAfterDetached;              // 0x019C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinCameraPitch;                                // 0x01A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AOLSplineGameplayMarker*                     LinkedSpline;                                  // 0x01A4 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              MinDistToPlayer;                               // 0x01AC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxDistToPlayer;                               // 0x01B0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxRandomSideOffset;                           // 0x01B4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SpeedTowardsPlayer;                            // 0x01B8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AActor*                                      TargetActor;                                   // 0x01BC (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              StartedTime;                                   // 0x01C4 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LastVisibilityCheckTime;                       // 0x01C8 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              DistToPlayer;                                  // 0x01CC (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              SideOffset;                                    // 0x01D0 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              SplineSign;                                    // 0x01D4 (0x0004) [0x0000000000002000] (CPF_Transient)
	ESilhouetteState                                   CurrentState;                                  // 0x01D8 (0x0001) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_Silhouette");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_SkelMeshAnimControl
// 0x0038 OR 0x01AC (0x01AC - 0x0174)
// 56 OR 428 (428 - 372)
class UOLSeqAct_SkelMeshAnimControl : public USeqAct_Latent
{
public:
	struct FName                                       BaseAnimName;                                  // 0x0174 (0x0008) [0x0000000000000001] (CPF_Edit)    
	TArray<struct FSkelMeshAnimParams>                 ExtraAnims;                                    // 0x017C (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	struct FName                                       SlotName;                                      // 0x018C (0x0008) [0x0000000000000000]               
	struct FName                                       BaseAnimNodeName;                              // 0x0194 (0x0008) [0x0000000000000000]               
	float                                              PlayRate;                                      // 0x019C (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bAnimFinishedOnBlendOut : 1;                   // 0x01A0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bRunning : 1;                                  // 0x01A0 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	int32_t                                            PlayingIdx;                                    // 0x01A4 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LastAppliedPlayRate;                           // 0x01A8 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_SkelMeshAnimControl");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_SplashScreen
// 0x0004 OR 0x0178 (0x0178 - 0x0174)
// 4 OR 376 (376 - 372)
class UOLSeqAct_SplashScreen : public USeqAct_Latent
{
public:
	uint32_t                                           bPauseGame : 1;                                // 0x0174 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bAlwaysReady : 1;                              // 0x0174 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bDone : 1;                                     // 0x0174 (0x0004) [0x0000000000000000] [0x00000004] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_SplashScreen");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_SplineNode
// 0x0002 OR 0x0176 (0x0176 - 0x0174)
// 2 OR 374 (374 - 372)
class UOLSeqAct_SplineNode : public USeqAct_Latent
{
public:
	ESplineAction                                      PreviousNodes;                                 // 0x0174 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ESplineAction                                      NextNodes;                                     // 0x0175 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_SplineNode");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_StopCameraShake
// 0x0000 OR 0x0158 (0x0158 - 0x0158)
// 0 OR 344 (344 - 344)
class UOLSeqAct_StopCameraShake : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_StopCameraShake");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_Struggle
// 0x00A0 OR 0x0214 (0x0214 - 0x0174)
// 160 OR 532 (532 - 372)
class UOLSeqAct_Struggle : public USeqAct_Latent
{
public:
	struct FStruggleConfig                             Config;                                        // 0x0174 (0x007C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class ASkeletalMeshActor*                          Enemy;                                         // 0x01F0 (0x0008) [0x0000000000000000]               
	struct FVector                                     RefLocation;                                   // 0x01F8 (0x000C) [0x0000000000000000]               
	struct FVector                                     RefDirection;                                  // 0x0204 (0x000C) [0x0000000000000000]               
	uint32_t                                           bSucceeded : 1;                                // 0x0210 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bFailed : 1;                                   // 0x0210 (0x0004) [0x0000000000000000] [0x00000002] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_Struggle");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqAct_TeleportExotic
// 0x0001 OR 0x0159 (0x0159 - 0x0158)
// 1 OR 345 (345 - 344)
class UOLSeqAct_TeleportExotic : public USequenceAction
{
public:
	ExoticTeleportType                                 Type;                                          // 0x0158 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_TeleportExotic");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_TeleportRelative
// 0x0004 OR 0x015C (0x015C - 0x0158)
// 4 OR 348 (348 - 344)
class UOLSeqAct_TeleportRelative : public USequenceAction
{
public:
	uint32_t                                           bRecomputeFallingHeight : 1;                   // 0x0158 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_TeleportRelative");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_Throwable
// 0x0060 OR 0x01D4 (0x01D4 - 0x0174)
// 96 OR 468 (468 - 372)
class UOLSeqAct_Throwable : public USeqAct_Latent
{
public:
	struct FThrowableSettings                          Settings;                                      // 0x0174 (0x004C) [0x0000000000000001] (CPF_Edit)    
	class UStaticMesh*                                 ObjectMesh;                                    // 0x01C0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bRunning : 1;                                  // 0x01C8 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bLaunched : 1;                                 // 0x01C8 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	class AOLThrowable*                                LaunchedThrowable;                             // 0x01CC (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_Throwable");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_Tutorial
// 0x0028 OR 0x019C (0x019C - 0x0174)
// 40 OR 412 (412 - 372)
class UOLSeqAct_Tutorial : public USeqAct_Latent
{
public:
	struct FName                                       TutorialTextId;                                // 0x0174 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       TutorialTextIdGamepad;                         // 0x017C (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              DisplayTime;                                   // 0x0184 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DelayedTime;                                   // 0x0188 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bShowEvenIfCompleted : 1;                      // 0x018C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bIsDone : 1;                                   // 0x018C (0x0004) [0x0000000000000000] [0x00000002] 
	ETutorialPriority                                  Priority;                                      // 0x0190 (0x0001) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            TutorialId;                                    // 0x0194 (0x0004) [0x0000000000000000]               
	float                                              ElapsedTime;                                   // 0x0198 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_Tutorial");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_UpdateProximityCache
// 0x0000 OR 0x0158 (0x0158 - 0x0158)
// 0 OR 344 (344 - 344)
class UOLSeqAct_UpdateProximityCache : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_UpdateProximityCache");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_VisibilityCheck
// 0x002C OR 0x01A0 (0x01A0 - 0x0174)
// 44 OR 416 (416 - 372)
class UOLSeqAct_VisibilityCheck : public USeqAct_Latent
{
public:
	float                                              TargetRadius;                                  // 0x0174 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxDistance;                                   // 0x0178 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bPerformLineTrace : 1;                         // 0x017C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bAllowNonContinuousVisibility : 1;             // 0x017C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bRunning : 1;                                  // 0x017C (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bWaitingForVisibility : 1;                     // 0x017C (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	float                                              LineCheckInterval;                             // 0x0180 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinimumVisibleTime;                            // 0x0184 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinimumNotVisibleTime;                         // 0x0188 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxAngleToScreenCenter;                        // 0x018C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ValidStateStartedTime;                         // 0x0190 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              ValidStateAccumulatedTime;                     // 0x0194 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              EffectiveLineCheckInterval;                    // 0x0198 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              NextTraceTime;                                 // 0x019C (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_VisibilityCheck");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_WaitAndReact
// 0x0078 OR 0x01EC (0x01EC - 0x0174)
// 120 OR 492 (492 - 372)
class UOLSeqAct_WaitAndReact : public USeqAct_Latent
{
public:
	struct FName                                       StartLoopAnim;                                 // 0x0174 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       ReactionAnim;                                  // 0x017C (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       AwareLoopAnim;                                 // 0x0184 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       BackToUnawareAnim;                             // 0x018C (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       ExitAnim;                                      // 0x0194 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bMustReactBeforeExit : 1;                      // 0x019C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bInterruptibleReaction : 1;                    // 0x019C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bBothConditionsForReaction : 1;                // 0x019C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bBothConditionsForExit : 1;                    // 0x019C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bDisableCollision : 1;                         // 0x019C (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bDisablePhysics : 1;                           // 0x019C (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bDisableRootMotion : 1;                        // 0x019C (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bRunning : 1;                                  // 0x019C (0x0004) [0x0000000000002000] [0x00000080] (CPF_Transient)
	int32_t                                            MaxBackToUnaware;                              // 0x01A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AwareDuration;                                 // 0x01A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ReactionBlendTime;                             // 0x01A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ExitBlendTime;                                 // 0x01AC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BackToUnawareBlendTime;                        // 0x01B0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StageMarkBlendTime;                            // 0x01B4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinDisturbanceForReaction;                     // 0x01B8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinProximityForReaction;                       // 0x01BC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinDisturbanceForExit;                         // 0x01C0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinProximityForExit;                           // 0x01C4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	TArray<class UOLBotCondition*>                     ExtraConditionsForReaction;                    // 0x01C8 (0x0010) [0x0000000004400009] (CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	TArray<class UOLBotCondition*>                     ExtraConditionsForExit;                        // 0x01D8 (0x0010) [0x0000000004400009] (CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	int32_t                                            PendingOutputIdx;                              // 0x01E8 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_WaitAndReact");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqAct_WaitForCamcorderEvent
// 0x000C OR 0x0180 (0x0180 - 0x0174)
// 12 OR 384 (384 - 372)
class UOLSeqAct_WaitForCamcorderEvent : public USeqAct_Latent
{
public:
	ECamcorderEventType                                EventType;                                     // 0x0174 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              ZoomedInPctThreshold;                          // 0x0178 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bRunning : 1;                                  // 0x017C (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_WaitForCamcorderEvent");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_WaitForPlayerInput
// 0x0024 OR 0x0198 (0x0198 - 0x0174)
// 36 OR 408 (408 - 372)
class UOLSeqAct_WaitForPlayerInput : public USeqAct_Latent
{
public:
	uint32_t                                           bInterruptOnAttack : 1;                        // 0x0174 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bOnClick : 1;                                  // 0x0174 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bOnToggleCam : 1;                              // 0x0174 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bOnToggleMicrophone : 1;                       // 0x0174 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bWaiting : 1;                                  // 0x0174 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	struct FName                                       PromptTextId;                                  // 0x0178 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxTime;                                       // 0x0180 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FString                                      TranslatedPrompt;                              // 0x0184 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              StartedTime;                                   // 0x0194 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_WaitForPlayerInput");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqAct_WaitForSpecialMove
// 0x0018 OR 0x018C (0x018C - 0x0174)
// 24 OR 396 (396 - 372)
class UOLSeqAct_WaitForSpecialMove : public USeqAct_Latent
{
public:
	ESpecialMoveType                                   moveType;                                      // 0x0174 (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bPreventMove : 1;                              // 0x0178 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bResetCountOnWait : 1;                         // 0x0178 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bWaiting : 1;                                  // 0x0178 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	int32_t                                            MaxTriggerCount;                               // 0x017C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            TriggerCount;                                  // 0x0180 (0x0004) [0x0000000000002000] (CPF_Transient)
	class AActor*                                      RefActor;                                      // 0x0184 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_WaitForSpecialMove");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_WaitForSpecificConditions
// 0x002C OR 0x01A0 (0x01A0 - 0x0174)
// 44 OR 416 (416 - 372)
class UOLSeqAct_WaitForSpecificConditions : public USeqAct_Latent
{
public:
	TArray<ESpecificConditionType>                     Conditions;                                    // 0x0174 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bIgnoreIfAlreadyTrue : 1;                      // 0x0184 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bRunning : 1;                                  // 0x0184 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bCommentsUpToDate : 1;                         // 0x0184 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	float                                              ActivationDelay;                               // 0x0188 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ConditionsSatisfiedTime;                       // 0x018C (0x0004) [0x0000000000002000] (CPF_Transient)
	TArray<class FString>                              MultiLineComments;                             // 0x0190 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_WaitForSpecificConditions");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_WaitForTrigger
// 0x0004 OR 0x0178 (0x0178 - 0x0174)
// 4 OR 376 (376 - 372)
class UOLSeqAct_WaitForTrigger : public USeqAct_Latent
{
public:
	uint32_t                                           bRunning : 1;                                  // 0x0174 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_WaitForTrigger");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_Wardrobe
// 0x000C OR 0x0164 (0x0164 - 0x0158)
// 12 OR 356 (356 - 344)
class UOLSeqAct_Wardrobe : public USequenceAction
{
public:
	float                                              RotationSpeedOverride;                         // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OpenAngle;                                     // 0x015C (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bNoSound : 1;                                  // 0x0160 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_Wardrobe");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_Window
// 0x0008 OR 0x0160 (0x0160 - 0x0158)
// 8 OR 352 (352 - 344)
class UOLSeqAct_Window : public USequenceAction
{
public:
	float                                              ProceduralAnimSpeedOverride;                   // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bNoSound : 1;                                  // 0x015C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_Window");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_ZoomImpulse
// 0x0004 OR 0x015C (0x015C - 0x0158)
// 4 OR 348 (348 - 344)
class UOLSeqAct_ZoomImpulse : public USequenceAction
{
public:
	float                                              ImpulseScale;                                  // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_ZoomImpulse");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqCond_AIState
// 0x0000 OR 0x013C (0x013C - 0x013C)
// 0 OR 316 (316 - 316)
class UOLSeqCond_AIState : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqCond_AIState");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqCond_Checkpoint
// 0x000C OR 0x0148 (0x0148 - 0x013C)
// 12 OR 328 (328 - 316)
class UOLSeqCond_Checkpoint : public USequenceCondition
{
public:
	struct FName                                       CheckpointName;                                // 0x013C (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bStatusIsOk : 1;                               // 0x0144 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqCond_Checkpoint");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqCond_DetailMode
// 0x0004 OR 0x0140 (0x0140 - 0x013C)
// 4 OR 320 (320 - 316)
class UOLSeqCond_DetailMode : public USequenceCondition
{
public:
	uint32_t                                           bResult : 1;                                   // 0x013C (0x0004) [0x0000000000000000] [0x00000001] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqCond_DetailMode");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqCond_DifficultyCondition
// 0x0006 OR 0x0142 (0x0142 - 0x013C)
// 6 OR 322 (322 - 316)
class UOLSeqCond_DifficultyCondition : public USequenceCondition
{
public:
	uint32_t                                           bInversed : 1;                                 // 0x013C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	ESequenceDifficultyCondition                       ConditionType;                                 // 0x0140 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EDifficultyMode                                    Difficulty;                                    // 0x0141 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqCond_DifficultyCondition");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqCond_Direct3DVersion
// 0x0000 OR 0x013C (0x013C - 0x013C)
// 0 OR 316 (316 - 316)
class UOLSeqCond_Direct3DVersion : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqCond_Direct3DVersion");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqCond_GameState
// 0x000C OR 0x0148 (0x0148 - 0x013C)
// 12 OR 328 (328 - 316)
class UOLSeqCond_GameState : public USequenceCondition
{
public:
	struct FName                                       GameStateName;                                 // 0x013C (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bStatusIsOk : 1;                               // 0x0144 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqCond_GameState");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqCond_HasRecording
// 0x0008 OR 0x0144 (0x0144 - 0x013C)
// 8 OR 324 (324 - 316)
class UOLSeqCond_HasRecording : public USequenceCondition
{
public:
	struct FName                                       RecordingName;                                 // 0x013C (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqCond_HasRecording");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqCond_HeroLocomotionTime
// 0x0010 OR 0x014C (0x014C - 0x013C)
// 16 OR 332 (332 - 316)
class UOLSeqCond_HeroLocomotionTime : public USequenceCondition
{
public:
	float                                              Duration;                                      // 0x013C (0x0004) [0x0000000000000001] (CPF_Edit)    
	ELocomotionMode                                    LocomotionMode;                                // 0x0140 (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bNoSpecialCase : 1;                            // 0x0144 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bWaitActive : 1;                               // 0x0144 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	float                                              TimeInLocomotion;                              // 0x0148 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqCond_HeroLocomotionTime");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqCond_IncrementByDifficulty
// 0x0044 OR 0x0180 (0x0180 - 0x013C)
// 68 OR 384 (384 - 316)
class UOLSeqCond_IncrementByDifficulty : public USequenceCondition
{
public:
	int32_t                                            IncrementAmount;                               // 0x013C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            ValueA;                                        // 0x0140 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FIntByDifficulty                            ValueB;                                        // 0x0144 (0x0034) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            InitialValue;                                  // 0x0178 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bInitialValueSet : 1;                          // 0x017C (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqCond_IncrementByDifficulty");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqCond_IncrementFloatByDifficulty
// 0x0044 OR 0x0180 (0x0180 - 0x013C)
// 68 OR 384 (384 - 316)
class UOLSeqCond_IncrementFloatByDifficulty : public USequenceCondition
{
public:
	float                                              IncrementAmount;                               // 0x013C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ValueA;                                        // 0x0140 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FFloatByDifficulty                          ValueB;                                        // 0x0144 (0x0034) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            InitialValue;                                  // 0x0178 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bInitialValueSet : 1;                          // 0x017C (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqCond_IncrementFloatByDifficulty");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqCond_IsBotAlive
// 0x0000 OR 0x013C (0x013C - 0x013C)
// 0 OR 316 (316 - 316)
class UOLSeqCond_IsBotAlive : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqCond_IsBotAlive");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqCond_IsCensoredVersion
// 0x0004 OR 0x0140 (0x0140 - 0x013C)
// 4 OR 320 (320 - 316)
class UOLSeqCond_IsCensoredVersion : public USequenceCondition
{
public:
	uint32_t                                           bResult : 1;                                   // 0x013C (0x0004) [0x0000000000000000] [0x00000001] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqCond_IsCensoredVersion");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqCond_IsChinese
// 0x0000 OR 0x013C (0x013C - 0x013C)
// 0 OR 316 (316 - 316)
class UOLSeqCond_IsChinese : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqCond_IsChinese");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqCond_IsDemo
// 0x0004 OR 0x0140 (0x0140 - 0x013C)
// 4 OR 320 (320 - 316)
class UOLSeqCond_IsDemo : public USequenceCondition
{
public:
	uint32_t                                           bResult : 1;                                   // 0x013C (0x0004) [0x0000000000000000] [0x00000001] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqCond_IsDemo");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqCond_IsDistortionActive
// 0x0000 OR 0x013C (0x013C - 0x013C)
// 0 OR 316 (316 - 316)
class UOLSeqCond_IsDistortionActive : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqCond_IsDistortionActive");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqCond_IsOutOfSight
// 0x0004 OR 0x0140 (0x0140 - 0x013C)
// 4 OR 320 (320 - 316)
class UOLSeqCond_IsOutOfSight : public USequenceCondition
{
public:
	float                                              BackAngle;                                     // 0x013C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqCond_IsOutOfSight");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqCond_IsPlayerDying
// 0x0000 OR 0x013C (0x013C - 0x013C)
// 0 OR 316 (316 - 316)
class UOLSeqCond_IsPlayerDying : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqCond_IsPlayerDying");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqCond_IsTouching
// 0x0004 OR 0x0140 (0x0140 - 0x013C)
// 4 OR 320 (320 - 316)
class UOLSeqCond_IsTouching : public USequenceCondition
{
public:
	uint32_t                                           bResult : 1;                                   // 0x013C (0x0004) [0x0000000000000000] [0x00000001] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqCond_IsTouching");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqCond_MartaStreetCond
// 0x0000 OR 0x013C (0x013C - 0x013C)
// 0 OR 316 (316 - 316)
class UOLSeqCond_MartaStreetCond : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqCond_MartaStreetCond");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqCond_OnSpline
// 0x0008 OR 0x0144 (0x0144 - 0x013C)
// 8 OR 324 (324 - 316)
class UOLSeqCond_OnSpline : public USequenceCondition
{
public:
	float                                              DistanceToBeConsideredOnSpline;                // 0x013C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AngleToBeConsideredOnSpline;                   // 0x0140 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqCond_OnSpline");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqCond_PlayerHealth
// 0x0004 OR 0x0140 (0x0140 - 0x013C)
// 4 OR 320 (320 - 316)
class UOLSeqCond_PlayerHealth : public USequenceCondition
{
public:
	float                                              Threshold;                                     // 0x013C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqCond_PlayerHealth");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqCond_PlayerSpeed
// 0x0014 OR 0x0150 (0x0150 - 0x013C)
// 20 OR 336 (336 - 316)
class UOLSeqCond_PlayerSpeed : public USequenceCondition
{
public:
	float                                              MaxSpeedForIdle;                               // 0x013C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxSpeedForWalk;                               // 0x0140 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxSpeedForRun;                                // 0x0144 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SpecificThreshold;                             // 0x0148 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bForwardVelocityOnly : 1;                      // 0x014C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bResult : 1;                                   // 0x014C (0x0004) [0x0000000000000000] [0x00000002] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqCond_PlayerSpeed");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqCond_SwitchByDifficulty
// 0x0000 OR 0x013C (0x013C - 0x013C)
// 0 OR 316 (316 - 316)
class UOLSeqCond_SwitchByDifficulty : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqCond_SwitchByDifficulty");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqCond_TutorialSeen
// 0x0008 OR 0x0144 (0x0144 - 0x013C)
// 8 OR 324 (324 - 316)
class UOLSeqCond_TutorialSeen : public USequenceCondition
{
public:
	struct FName                                       TutorialTextId;                                // 0x013C (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqCond_TutorialSeen");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqCond_TutorialsEnabled
// 0x0000 OR 0x013C (0x013C - 0x013C)
// 0 OR 316 (316 - 316)
class UOLSeqCond_TutorialsEnabled : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqCond_TutorialsEnabled");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqEvent_AILostTarget
// 0x0004 OR 0x017C (0x017C - 0x0178)
// 4 OR 380 (380 - 376)
class UOLSeqEvent_AILostTarget : public USequenceEvent
{
public:
	uint32_t                                           bOnlyAfterChase : 1;                           // 0x0178 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_AILostTarget");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqEvent_AITrigger
// 0x0010 OR 0x0188 (0x0188 - 0x0178)
// 16 OR 392 (392 - 376)
class UOLSeqEvent_AITrigger : public USequenceEvent
{
public:
	TArray<struct FGameFlowRuleEnable>                 GameFlowRules;                                 // 0x0178 (0x0010) [0x0000000000600001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_AITrigger");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqEvent_AIWaypointAction
// 0x0000 OR 0x0178 (0x0178 - 0x0178)
// 0 OR 376 (376 - 376)
class UOLSeqEvent_AIWaypointAction : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_AIWaypointAction");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqEvent_ApplyCheckpointState
// 0x0014 OR 0x018C (0x018C - 0x0178)
// 20 OR 396 (396 - 376)
class UOLSeqEvent_ApplyCheckpointState : public USequenceEvent
{
public:
	struct FName                                       CheckpointName;                                // 0x0178 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       RangeEndCheckpoint;                            // 0x0180 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bApplyImmediatelyWhenReached : 1;              // 0x0188 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bApplyImmediatelyWhenCompleted : 1;            // 0x0188 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bStatusIsOk : 1;                               // 0x0188 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_ApplyCheckpointState");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqEvent_ApplyGameState
// 0x000C OR 0x0184 (0x0184 - 0x0178)
// 12 OR 388 (388 - 376)
class UOLSeqEvent_ApplyGameState : public USequenceEvent
{
public:
	struct FName                                       GameStateName;                                 // 0x0178 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bApplyImmediatlyWhenChanged : 1;               // 0x0180 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bStatusIsOk : 1;                               // 0x0180 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_ApplyGameState");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqEvent_BandageUsed
// 0x0000 OR 0x0178 (0x0178 - 0x0178)
// 0 OR 376 (376 - 376)
class UOLSeqEvent_BandageUsed : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_BandageUsed");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqEvent_Barrel
// 0x0010 OR 0x0188 (0x0188 - 0x0178)
// 16 OR 392 (392 - 376)
class UOLSeqEvent_Barrel : public USequenceEvent
{
public:
	TArray<struct FGameFlowRuleEnable>                 GameFlowRules;                                 // 0x0178 (0x0010) [0x0000000000600001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_Barrel");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqEvent_Bashable
// 0x0010 OR 0x0188 (0x0188 - 0x0178)
// 16 OR 392 (392 - 376)
class UOLSeqEvent_Bashable : public USequenceEvent
{
public:
	TArray<struct FGameFlowRuleEnable>                 GameFlowRules;                                 // 0x0178 (0x0010) [0x0000000000600001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_Bashable");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqEvent_CSAActivated
// 0x0004 OR 0x017C (0x017C - 0x0178)
// 4 OR 380 (380 - 376)
class UOLSeqEvent_CSAActivated : public USequenceEvent
{
public:
	uint32_t                                           bTriggerOnCompletion : 1;                      // 0x0178 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bTriggerOnAnimationEvent : 1;                  // 0x0178 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_CSAActivated");
		}

		return uClassPointer;
	};

	void eventToggled();
};

// Class OLGame.OLSeqEvent_DieInRiver
// 0x0000 OR 0x0178 (0x0178 - 0x0178)
// 0 OR 376 (376 - 376)
class UOLSeqEvent_DieInRiver : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_DieInRiver");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqEvent_Door
// 0x0020 OR 0x0198 (0x0198 - 0x0178)
// 32 OR 408 (408 - 376)
class UOLSeqEvent_Door : public USequenceEvent
{
public:
	float                                              OpenThreshold;                                 // 0x0178 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinOpenAngleForQuietOpen;                      // 0x017C (0x0004) [0x0000000000000001] (CPF_Edit)    
	TArray<struct FGameFlowRuleEnable>                 GameFlowRules;                                 // 0x0180 (0x0010) [0x0000000000600001] (CPF_Edit | CPF_NeedCtorLink)
	EDoorOpenEventFilter                               OpenEventFilter;                               // 0x0190 (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bOpenThresholdOnlyForInteractiveOpen : 1;      // 0x0194 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_Door");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class OLGame.OLSeqEvent_Drop
// 0x0000 OR 0x0178 (0x0178 - 0x0178)
// 0 OR 376 (376 - 376)
class UOLSeqEvent_Drop : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_Drop");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqEvent_GameFlowControlledMaterial
// 0x003C OR 0x01B4 (0x01B4 - 0x0178)
// 60 OR 436 (436 - 376)
class UOLSeqEvent_GameFlowControlledMaterial : public USequenceEvent
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                       // 0x0178 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class AActor*                                      CloneOnObject;                                 // 0x0180 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FName                                       ParamName;                                     // 0x0188 (0x0008) [0x0000000000000001] (CPF_Edit)    
	TArray<struct FGameFlowRuleEnable>                 GameFlowRules;                                 // 0x0190 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bDefaultToOn : 1;                              // 0x01A0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bStatusIsOk : 1;                               // 0x01A0 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	float                                              OnValue;                                       // 0x01A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OffValue;                                      // 0x01A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInstanceConstant*                   ClonedMaterialInstance;                        // 0x01AC (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_GameFlowControlledMaterial");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqEvent_HeroChased
// 0x0000 OR 0x0178 (0x0178 - 0x0178)
// 0 OR 376 (376 - 376)
class UOLSeqEvent_HeroChased : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_HeroChased");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqEvent_InvestigationPointEvent
// 0x0000 OR 0x0178 (0x0178 - 0x0178)
// 0 OR 376 (376 - 376)
class UOLSeqEvent_InvestigationPointEvent : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_InvestigationPointEvent");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqEvent_LevelInit
// 0x0000 OR 0x0178 (0x0178 - 0x0178)
// 0 OR 376 (376 - 376)
class UOLSeqEvent_LevelInit : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_LevelInit");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqEvent_NightVision
// 0x0000 OR 0x0178 (0x0178 - 0x0178)
// 0 OR 376 (376 - 376)
class UOLSeqEvent_NightVision : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_NightVision");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqEvent_Pickup
// 0x0000 OR 0x0178 (0x0178 - 0x0178)
// 0 OR 376 (376 - 376)
class UOLSeqEvent_Pickup : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_Pickup");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqEvent_Pushable
// 0x0010 OR 0x0188 (0x0188 - 0x0178)
// 16 OR 392 (392 - 376)
class UOLSeqEvent_Pushable : public USequenceEvent
{
public:
	float                                              LimitBack;                                     // 0x0178 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LimitFwd;                                      // 0x017C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinSpeedForLimitReached;                       // 0x0180 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bLimitReachedBack : 1;                         // 0x0184 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bLimitReachedFwd : 1;                          // 0x0184 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_Pushable");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqEvent_PushableTrigger
// 0x0000 OR 0x0178 (0x0178 - 0x0178)
// 0 OR 376 (376 - 376)
class UOLSeqEvent_PushableTrigger : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_PushableTrigger");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqEvent_RecordingComplete
// 0x0000 OR 0x0178 (0x0178 - 0x0178)
// 0 OR 376 (376 - 376)
class UOLSeqEvent_RecordingComplete : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_RecordingComplete");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqEvent_RecordingStarted
// 0x0000 OR 0x0178 (0x0178 - 0x0178)
// 0 OR 376 (376 - 376)
class UOLSeqEvent_RecordingStarted : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_RecordingStarted");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqEvent_SpawnedAtCheckpoint
// 0x000C OR 0x0184 (0x0184 - 0x0178)
// 12 OR 388 (388 - 376)
class UOLSeqEvent_SpawnedAtCheckpoint : public USequenceEvent
{
public:
	struct FName                                       CheckpointName;                                // 0x0178 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bStatusIsOk : 1;                               // 0x0180 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_SpawnedAtCheckpoint");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqEvent_TutorialDisabled
// 0x0000 OR 0x0178 (0x0178 - 0x0178)
// 0 OR 376 (376 - 376)
class UOLSeqEvent_TutorialDisabled : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_TutorialDisabled");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqEvent_Underwater
// 0x0000 OR 0x0178 (0x0178 - 0x0178)
// 0 OR 376 (376 - 376)
class UOLSeqEvent_Underwater : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_Underwater");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqEvent_Wardrobe
// 0x0010 OR 0x0188 (0x0188 - 0x0178)
// 16 OR 392 (392 - 376)
class UOLSeqEvent_Wardrobe : public USequenceEvent
{
public:
	TArray<struct FGameFlowRuleEnable>                 GameFlowRules;                                 // 0x0178 (0x0010) [0x0000000000600001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_Wardrobe");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqEvent_Window
// 0x0010 OR 0x0188 (0x0188 - 0x0178)
// 16 OR 392 (392 - 376)
class UOLSeqEvent_Window : public USequenceEvent
{
public:
	TArray<struct FGameFlowRuleEnable>                 GameFlowRules;                                 // 0x0178 (0x0010) [0x0000000000600001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqEvent_Window");
		}

		return uClassPointer;
	};

};

// Class OLGame.ActorFactoryOLAIInvestigationPoint
// 0x0000 OR 0x00A4 (0x00A4 - 0x00A4)
// 0 OR 164 (164 - 164)
class UActorFactoryOLAIInvestigationPoint : public UActorFactory
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.ActorFactoryOLAIInvestigationPoint");
		}

		return uClassPointer;
	};

};

// Class OLGame.ActorFactoryOLLedgeMarker
// 0x0000 OR 0x00A4 (0x00A4 - 0x00A4)
// 0 OR 164 (164 - 164)
class UActorFactoryOLLedgeMarker : public UActorFactory
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.ActorFactoryOLLedgeMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.ActorFactoryOLPositionMarker
// 0x0000 OR 0x00A4 (0x00A4 - 0x00A4)
// 0 OR 164 (164 - 164)
class UActorFactoryOLPositionMarker : public UActorFactory
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.ActorFactoryOLPositionMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLPositionMarker
// 0x0000 OR 0x0248 (0x0248 - 0x0248)
// 0 OR 584 (584 - 584)
class AOLPositionMarker : public AActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLPositionMarker");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_ToggleAIIgnorePlayer
// 0x0004 OR 0x015C (0x015C - 0x0158)
// 4 OR 348 (348 - 344)
class UOLSeqAct_ToggleAIIgnorePlayer : public USequenceAction
{
public:
	uint32_t                                           bSetOnGroup : 1;                               // 0x0158 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_ToggleAIIgnorePlayer");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_ToggleAIAlwaysSeePlayer
// 0x0000 OR 0x0158 (0x0158 - 0x0158)
// 0 OR 344 (344 - 344)
class UOLSeqAct_ToggleAIAlwaysSeePlayer : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_ToggleAIAlwaysSeePlayer");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLGFxMoviePlayer
// 0x0000 OR 0x01EC (0x01EC - 0x01EC)
// 0 OR 492 (492 - 492)
class UOLGFxMoviePlayer : public UGFxMoviePlayer
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLGFxMoviePlayer");
		}

		return uClassPointer;
	};

	void OnProfileWriteComplete(uint8_t LocalUserNum, bool bWasSuccessful);
	bool SaveProfile(struct FScriptDelegate optionalWriteProfileSettingsCompleteDelegate, class AOLPlayerController* optionalPlayerToSave);
	static class UOnlinePlayerInterface* GetOnlinePlayerInterface();
	void MuteSoundThemes(bool bMute);
	static class AOLGame* GetGame();
	class AOLPlayerController* GetOLPC();
};

// Class OLGame.OLUIMessage
// 0x0018 OR 0x0204 (0x0204 - 0x01EC)
// 24 OR 516 (516 - 492)
class UOLUIMessage : public UOLGFxMoviePlayer
{
public:
	class UGFxClikWidget*                              MessageBox;                                    // 0x01EC (0x0008) [0x0000000000000000]               
	float                                              MessageXPos;                                   // 0x01F4 (0x0004) [0x0000000000000000]               
	float                                              MessageYPos;                                   // 0x01F8 (0x0004) [0x0000000000000000]               
	float                                              MessageWidth;                                  // 0x01FC (0x0004) [0x0000000000000000]               
	float                                              MessageHeight;                                 // 0x0200 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLUIMessage");
		}

		return uClassPointer;
	};

	void eventSetPCQTELabels(class FString upStr, class FString leftStr, class FString downStr, class FString rightStr);
	void SetSubtitleHeight(bool hight);
	bool eventTryClose();
	int32_t TryCloseInternal();
	bool eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget);
	void SetMessage(EHUDMessageType MessageType, class FString Message);
	void SetVisible(bool bVisible);
	void OnClose();
	bool Start(bool optionalStartPaused);
};

// Class OLGame.OLUIMessage_Console
// 0x0000 OR 0x0204 (0x0204 - 0x0204)
// 0 OR 516 (516 - 516)
class UOLUIMessage_Console : public UOLUIMessage
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLUIMessage_Console");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLUIMessage_ConsoleXbox
// 0x0000 OR 0x0204 (0x0204 - 0x0204)
// 0 OR 516 (516 - 516)
class UOLUIMessage_ConsoleXbox : public UOLUIMessage_Console
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLUIMessage_ConsoleXbox");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLPlayerReplicationInfo
// 0x0000 OR 0x0414 (0x0414 - 0x0414)
// 0 OR 1044 (1044 - 1044)
class AOLPlayerReplicationInfo : public APlayerReplicationInfo
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLPlayerReplicationInfo");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLCamera
// 0x0000 OR 0x0668 (0x0668 - 0x0668)
// 0 OR 1640 (1640 - 1640)
class AOLCamera : public ACamera
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLCamera");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLUIFrontEnd
// 0x0108 OR 0x02F4 (0x02F4 - 0x01EC)
// 264 OR 756 (756 - 492)
class UOLUIFrontEnd : public UOLGFxMoviePlayer
{
public:
	struct FName                                       EscapeMenuKey;                                 // 0x01EC (0x0008) [0x0000000000000000]               
	struct FName                                       TabMenuKey;                                    // 0x01F4 (0x0008) [0x0000000000000000]               
	struct FName                                       RecordingMenuKey;                              // 0x01FC (0x0008) [0x0000000000000000]               
	struct FName                                       EvidenceMenuKey;                               // 0x0204 (0x0008) [0x0000000000000000]               
	class UGFxObject*                                  RootMC;                                        // 0x020C (0x0008) [0x0000000000000000]               
	class UGFxObject*                                  ManagerMC;                                     // 0x0214 (0x0008) [0x0000000000000000]               
	uint32_t                                           bInitialized : 1;                              // 0x021C (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bCapturingKeyBinding : 1;                      // 0x021C (0x0004) [0x0000000000000000] [0x00000002] 
	EMenuType                                          MenuType;                                      // 0x0220 (0x0001) [0x0000000000000000]               
	class UOLUIFrontEnd_MainMenu*                      MainMenuView;                                  // 0x0224 (0x0008) [0x0000000000000000]               
	class UOLUIFrontEnd_PauseMenu*                     PauseMenuView;                                 // 0x022C (0x0008) [0x0000000000000000]               
	class UOLUIFrontEnd_PausedPrompt*                  PausedPromptView;                              // 0x0234 (0x0008) [0x0000000000000000]               
	class UOLUIFrontEnd_SaveLocationList*              SaveLocationList;                              // 0x023C (0x0008) [0x0000000000000000]               
	class UOLUIFrontEnd_Options*                       OptionsView;                                   // 0x0244 (0x0008) [0x0000000000000000]               
	class UOLUIFrontEnd_Screen*                        GammaScreenView;                               // 0x024C (0x0008) [0x0000000000000000]               
	class UOLUIFrontEnd_Screen*                        GamepadScreenView;                             // 0x0254 (0x0008) [0x0000000000000000]               
	class UOLUIFrontEnd_Credits*                       CreditsView;                                   // 0x025C (0x0008) [0x0000000000000000]               
	class UOLUIFrontEnd_DifficultySelectionScreen*     DifficultySelectionView;                       // 0x0264 (0x0008) [0x0000000000000000]               
	class UOLUIFrontEnd_ChapterSelection*              ChapterSelection;                              // 0x026C (0x0008) [0x0000000000000000]               
	class UOLUIFrontEnd_CleanText*                     CleanTextView;                                 // 0x0274 (0x0008) [0x0000000000000000]               
	class UOLUIFrontEnd_RecordingMenu*                 RecordingMenuView;                             // 0x027C (0x0008) [0x0000000000000000]               
	class FString                                      CleanTextName;                                 // 0x0284 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      CleanTextTitle;                                // 0x0294 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      CleanTextMessage;                              // 0x02A4 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      CancelCaptureKeyName;                          // 0x02B4 (0x0010) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	TArray<struct FViewInfo>                           ViewData;                                      // 0x02C4 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	TArray<class UOLUIFrontEnd_View*>                  ViewStack;                                     // 0x02D4 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<struct FName>                               LoadedViews;                                   // 0x02E4 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLUIFrontEnd");
		}

		return uClassPointer;
	};

	void NotifyAltEnter();
	class FString GetLocalizedString(class FString Category, class FString KeyName, class FString File);
	class FString GetGamepadActionBoundToKey(class FString KeyNameString, int32_t ConfigType);
	bool HasInitializedGamma();
	class FString GetFriendlyKeyBindingName(class FString KeyName);
	void StartKeyBindingCapture();
	bool eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent);
	bool eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget);
	void ConfigureTargetView(class UOLUIFrontEnd_View* targetView);
	void ConfigureView(class UOLUIFrontEnd_View* InView, struct FName WidgetName, struct FName WidgetPath);
	class UGFxObject* PopViewStub();
	class UGFxObject* PopView();
	void PushViewByName(struct FName TargetViewName, class UOLUIFrontEnd_Screen* optionalParentView);
	void PushView(class UOLUIFrontEnd_View* targetView);
	void LoadView(struct FViewInfo InViewInfo);
	void LoadViews();
	void CleanViews();
	void ConfigFrontEnd();
	void OnKeyBindingsChanged();
	void AddCaptureKeys();
	void eventOnClose();
	bool Start(bool optionalStartPaused);
};

// Class OLGame.OLUIFrontEnd_View
// 0x0010 OR 0x00B8 (0x00B8 - 0x00A8)
// 16 OR 184 (184 - 168)
class UOLUIFrontEnd_View : public UGFxObject
{
public:
	class UOLUIFrontEnd*                               MenuManager;                                   // 0x00A8 (0x0008) [0x0000000000000000]               
	struct FName                                       ViewName;                                      // 0x00B0 (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLUIFrontEnd_View");
		}

		return uClassPointer;
	};

	void eventInputTypeChanged();
	void ASHideDialogs();
	void OnKeyBindingCancelled();
	void OnKeyBindingCaptured(struct FName KeyName);
	bool eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent);
	bool eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget);
	bool back();
	void NotifyAltEnter();
	void OnViewDeactivated();
	void OnViewActivated();
	void OnTopMostView(bool optionalBPlayOpenAnimation);
	void OnViewLoaded();
};

// Class OLGame.OLUIFrontEnd_Screen
// 0x0084 OR 0x013C (0x013C - 0x00B8)
// 132 OR 316 (316 - 184)
class UOLUIFrontEnd_Screen : public UOLUIFrontEnd_View
{
public:
	class FString                                      ViewTitle;                                     // 0x00B8 (0x0010) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	float                                              DefaultGamma;                                  // 0x00C8 (0x0004) [0x0000000000004000] (CPF_Config)  
	class FString                                      BackText;                                      // 0x00CC (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      EnterText;                                     // 0x00DC (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      YesText;                                       // 0x00EC (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      NoText;                                        // 0x00FC (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      CloseText;                                     // 0x010C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      AcceptText;                                    // 0x011C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class UGFxObject*                                  CircleLabel;                                   // 0x012C (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxObject*                                  CrossLabel;                                    // 0x0134 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLUIFrontEnd_Screen");
		}

		return uClassPointer;
	};

	bool eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget);
	class FString LocalizeGeneric(class FString SectionName, class FString KeyName);
	class FString LocalizeNarrative(class FString SectionName, class FString KeyName);
	bool IsDLCInstalled();
	bool IsPlaytest();
	bool IsDemo();
	bool IsTopMostView();
};

// Class OLGame.OLUIFrontEnd_MainMenu
// 0x018C OR 0x02C8 (0x02C8 - 0x013C)
// 396 OR 712 (712 - 316)
class UOLUIFrontEnd_MainMenu : public UOLUIFrontEnd_Screen
{
public:
	class FString                                      MainMenu_ContinueText;                         // 0x013C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MainMenu_StartText;                            // 0x014C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MainMenu_PlayDemoText;                         // 0x015C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MainMenu_LoadText;                             // 0x016C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MainMenu_OptionsText;                          // 0x017C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MainMenu_CreditsText;                          // 0x018C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MainMenu_ExitText;                             // 0x019C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MainMenu_NewGameIntroText;                     // 0x01AC (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MainMenu_IntroContext;                         // 0x01BC (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MainMenu_ChaptersText;                         // 0x01CC (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MainMenu_StartDLCText;                         // 0x01DC (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MainMenu_PressStartText;                       // 0x01EC (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MainMenu_Recordings;                           // 0x01FC (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MainMenu_DeleteRecording_Title;                // 0x020C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MainMenu_DeleteRecording_Message;              // 0x021C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MainMenu_WaitingForContent;                    // 0x022C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MainMenu_ContentDownloading;                   // 0x023C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class UGFxClikWidget*                              ButtonBar;                                     // 0x024C (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              IntroLabel;                                    // 0x0254 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              OKButton;                                      // 0x025C (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxObject*                                  GamertagLabel;                                 // 0x0264 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxObject*                                  GamertagButton;                                // 0x026C (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              GamertagContainer;                             // 0x0274 (0x0008) [0x0000000000002000] (CPF_Transient)
	int32_t                                            ContinueButtonIndex;                           // 0x027C (0x0004) [0x0000000000000000]               
	int32_t                                            StartButtonIndex;                              // 0x0280 (0x0004) [0x0000000000000000]               
	int32_t                                            StartDLCButtonIndex;                           // 0x0284 (0x0004) [0x0000000000000000]               
	int32_t                                            LoadButtonIndex;                               // 0x0288 (0x0004) [0x0000000000000000]               
	int32_t                                            OptionsButtonIndex;                            // 0x028C (0x0004) [0x0000000000000000]               
	int32_t                                            CreditsButtonIndex;                            // 0x0290 (0x0004) [0x0000000000000000]               
	int32_t                                            ExitButtonIndex;                               // 0x0294 (0x0004) [0x0000000000000000]               
	int32_t                                            ChaptersButtonIndex;                           // 0x0298 (0x0004) [0x0000000000000000]               
	int32_t                                            RecordingButtonIndex;                          // 0x029C (0x0004) [0x0000000000000000]               
	uint32_t                                           bShowIntroMsg : 1;                             // 0x02A0 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bShowingIntroMsg : 1;                          // 0x02A0 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bWaitingForPopup : 1;                          // 0x02A0 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bWaitingForPopupReleased : 1;                  // 0x02A0 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	uint32_t                                           bConfirmButtonDown : 1;                        // 0x02A0 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bShowingBadCheckpointMsg : 1;                  // 0x02A0 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	uint32_t                                           bOnPressStartScreen : 1;                       // 0x02A0 (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	uint32_t                                           bPendingProfileSaveOnNewGame : 1;              // 0x02A0 (0x0004) [0x0000000000002000] [0x00000080] (CPF_Transient)
	uint32_t                                           bRefreshContentDownloading : 1;                // 0x02A0 (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bDownloading : 1;                              // 0x02A0 (0x0004) [0x0000000000002000] [0x00000200] (CPF_Transient)
	uint32_t                                           bPopulatedOnce : 1;                            // 0x02A0 (0x0004) [0x0000000000002000] [0x00000400] (CPF_Transient)
	uint32_t                                           bButtonsMightBeDirty : 1;                      // 0x02A0 (0x0004) [0x0000000000002000] [0x00000800] (CPF_Transient)
	uint32_t                                           bMenuFadingOut : 1;                            // 0x02A0 (0x0004) [0x0000000000002000] [0x00001000] (CPF_Transient)
	int32_t                                            IntroMessageIndex;                             // 0x02A4 (0x0004) [0x0000000000000000]               
	class FString                                      StartCPName;                                   // 0x02A8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            OverwritingSaveIdx;                            // 0x02B8 (0x0004) [0x0000000000000000]               
	int32_t                                            MaxNumberOfSaveSlot;                           // 0x02BC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              OkButtonTimeElapsed;                           // 0x02C0 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            FocusDelay;                                    // 0x02C4 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLUIFrontEnd_MainMenu");
		}

		return uClassPointer;
	};

	void TickGameDownload(float DeltaSeconds);
	void Tick(float DeltaSeconds);
	void ASInitButtonFocus();
	void ASShowNewGameIntroText();
	void ShowDeleteRecordingsConfirmationDialog(class FString Title, class FString Message, class FString okButtonLabel, class FString cancelButtonLabel, class FString callbackName);
	void ShowMessageDialog(class FString Title, class FString Message, class FString okButtonLabel, class FString callbackName);
	bool eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget);
	bool eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent);
	void ShowPressStartScreen();
	void ForceShowLoginUI(int32_t ControllerId);
	void OnPressStart(int32_t ControllerId);
	void OnDingoUserInitialized(bool bSuccess);
	void OnButtonClick(struct FEventData ev);
	void SetMainMenuText(class FString Message);
	void PopulateButtons();
	bool back();
	void OnRecordingsButtonPress(struct FEventData ev);
	void OnExitButtonPress(struct FEventData ev);
	void OnCreditsButtonPress(struct FEventData ev);
	void OnOptionsButtonPress(struct FEventData ev);
	void Select_Options();
	void OnSaveListButtonPress(struct FEventData ev);
	void OnLoadButtonPress(struct FEventData ev);
	void OnOK();
	void OnOKButtonClick(struct FEventData ev);
	void GoToNextIntroText(class FString NextText);
	void OnChaptersButtonPress(struct FEventData ev);
	void OnStartDLCButtonPress(struct FEventData ev);
	void OnStartButtonPress(struct FEventData ev);
	void GameLoadedCallback(bool bSuccess);
	void StartNewGame();
	void DingoRecordingStorageDialogResult(int32_t Type);
	void DifficultySelected();
	bool TrySkipSaveScreen();
	void ShowGamertag(class FString Gamertag);
	void HideGametag();
	void SaveLocationSelected(bool bSuccess);
	void OnBadCheckpointMsgAcknowledged();
	void ShowBadCheckpointMsg();
	void OnContinueButtonPress(struct FEventData ev);
	void OnTopMostView(bool optionalBPlayOpenAnimation);
	void OnViewLoaded();
};

// Class OLGame.OLUIFrontEnd_Credits
// 0x001C OR 0x0158 (0x0158 - 0x013C)
// 28 OR 344 (344 - 316)
class UOLUIFrontEnd_Credits : public UOLUIFrontEnd_Screen
{
public:
	class UGFxClikWidget*                              BackButton;                                    // 0x013C (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxObject*                                  CreditsScroll;                                 // 0x0144 (0x0008) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bGameOver : 1;                                 // 0x014C (0x0004) [0x0000000000000000] [0x00000001] 
	class UAkEvent*                                    StopCreditMusicEvent;                          // 0x0150 (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLUIFrontEnd_Credits");
		}

		return uClassPointer;
	};

	bool eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget);
	void SetCreditsText(class FString Text);
	bool eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent);
	void Press_Back(struct FEventData ev);
	void OnViewDeactivated();
	void StartCredits(bool bQuickstart);
	void OnTopMostView(bool optionalBPlayOpenAnimation);
	void OnCreditsFadeOut();
	void OnCreditsFinished();
	bool back();
};

// Class OLGame.OLUIFrontEnd_CleanText
// 0x006C OR 0x01A8 (0x01A8 - 0x013C)
// 108 OR 424 (424 - 316)
class UOLUIFrontEnd_CleanText : public UOLUIFrontEnd_Screen
{
public:
	class FString                                      Title;                                         // 0x013C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class FString                                      Text;                                          // 0x014C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class FString                                      TextName;                                      // 0x015C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class UGFxClikWidget*                              CloseBtn;                                      // 0x016C (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              PreviousBtn;                                   // 0x0174 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              NextBtn;                                       // 0x017C (0x0008) [0x0000000000002000] (CPF_Transient)
	class FString                                      NextText;                                      // 0x0184 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      PreviousText;                                  // 0x0194 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	int32_t                                            InputChangedDelay;                             // 0x01A4 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLUIFrontEnd_CleanText");
		}

		return uClassPointer;
	};

	bool eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent);
	void Tick(float DeltaSeconds);
	void PreviousPage();
	void NextPage();
	void InitializeFocusControl(bool bIsController);
	void eventInputTypeChanged();
	void InitializeText(class FString In_Title, class FString In_Text, bool In_bIsGospel);
	bool back();
	void Press_Back(struct FEventData ev);
	bool eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget);
	void OnViewLoaded();
	void InitializeView();
	void OnTopMostView(bool optionalBPlayOpenAnimation);
};

// Class OLGame.OLUIFrontEnd_Console
// 0x0000 OR 0x02F4 (0x02F4 - 0x02F4)
// 0 OR 756 (756 - 756)
class UOLUIFrontEnd_Console : public UOLUIFrontEnd
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLUIFrontEnd_Console");
		}

		return uClassPointer;
	};

	bool eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget);
	void CleanViews();
};

// Class OLGame.OLUIFrontEnd_ConsoleXbox
// 0x0000 OR 0x02F4 (0x02F4 - 0x02F4)
// 0 OR 756 (756 - 756)
class UOLUIFrontEnd_ConsoleXbox : public UOLUIFrontEnd_Console
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLUIFrontEnd_ConsoleXbox");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLUIFrontEnd_GammaScreen_Console
// 0x0044 OR 0x0180 (0x0180 - 0x013C)
// 68 OR 384 (384 - 316)
class UOLUIFrontEnd_GammaScreen_Console : public UOLUIFrontEnd_Screen
{
public:
	class UOLProfileSettings*                          MyProfile;                                     // 0x013C (0x0008) [0x0000000000002000] (CPF_Transient)
	class FString                                      GammaConsole_LabelText;                        // 0x0144 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class UGFxClikWidget*                              AcceptButtonCentred;                           // 0x0154 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              AcceptButton;                                  // 0x015C (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              BackButton;                                    // 0x0164 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              GammaSlider;                                   // 0x016C (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxObject*                                  GammaLabel;                                    // 0x0174 (0x0008) [0x0000000000002000] (CPF_Transient)
	int32_t                                            FocusDelay;                                    // 0x017C (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLUIFrontEnd_GammaScreen_Console");
		}

		return uClassPointer;
	};

	void ASDisableBackButton(bool bDisable);
	float GetCurrentGammaSetting();
	bool IsGammaInitialized();
	bool eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget);
	void Tick(float DeltaSeconds);
	bool eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent);
	void Change_Slider(struct FEventData ev);
	void Pop();
	void OnViewDeactivated();
	bool back();
	void Press_Back(struct FEventData ev);
	void OnAccept();
	void Press_Accept(struct FEventData ev);
	void OnTopMostView(bool optionalBPlayOpenAnimation);
	void OnViewLoaded();
};

// Class OLGame.OLUIFrontEnd_RecordingMenu
// 0x00F8 OR 0x0234 (0x0234 - 0x013C)
// 248 OR 564 (564 - 316)
class UOLUIFrontEnd_RecordingMenu : public UOLUIFrontEnd_Screen
{
public:
	class UGFxObject*                                  ChaptersTitle;                                 // 0x013C (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxObject*                                  ChapterButtons;                                // 0x0144 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              BackButton;                                    // 0x014C (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              ImageBtnBack;                                  // 0x0154 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              ImageBtnNext;                                  // 0x015C (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              ImageBtnPrevious;                              // 0x0164 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              ImageBtnPlay;                                  // 0x016C (0x0008) [0x0000000000002000] (CPF_Transient)
	int32_t                                            SelectedSectionIndex;                          // 0x0174 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            SelectedFullSizeImage;                         // 0x0178 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bSelectionIsVideo : 1;                         // 0x017C (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bPlaying : 1;                                  // 0x017C (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bPlayingVO : 1;                                // 0x017C (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bNoRoot : 1;                                   // 0x017C (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bQuitting : 1;                                 // 0x017C (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	class UAkEvent*                                    MovieLoopStart;                                // 0x0180 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UAkEvent*                                    MovieLoopStop;                                 // 0x0188 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UAkEvent*                                    MovieVO;                                       // 0x0190 (0x0008) [0x0000000000002000] (CPF_Transient)
	class FString                                      ChapterSelection_ChooseChapterTypeTitleText;   // 0x0198 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      ChapterSelection_ChooseChapterTypeMessageText; // 0x01A8 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      ChapterSelection_ChooseChapterTypeNewGameText; // 0x01B8 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      ChapterSelection_ChooseChapterTypeSavedGameText;// 0x01C8 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      ChapterSelection_ChooseChapterTypeCancelText;  // 0x01D8 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	int32_t                                            SortingType;                                   // 0x01E8 (0x0004) [0x0000000000000000]               
	int32_t                                            SelectedChapterIndexBeforePopUp;               // 0x01EC (0x0004) [0x0000000000000000]               
	TArray<class UTexture*>                            CategoriesTexture;                             // 0x01F0 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<class UTexture*>                            ThumbnailsTextures;                            // 0x0200 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<class UTexture*>                            FullSizeTextures;                              // 0x0210 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            ButtonLinkedDelay;                             // 0x0220 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UAkEvent*                                    EnterSoundEvent;                               // 0x0224 (0x0008) [0x0000000000000000]               
	class UAkEvent*                                    ExitSoundEvent;                                // 0x022C (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLUIFrontEnd_RecordingMenu");
		}

		return uClassPointer;
	};

	void eventInputTypeChanged();
	void selectConsole(class FString Console);
	void InitializeFocusControl(bool bIsController);
	bool eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent);
	bool eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget);
	void LinkButtons();
	void OnSetPlayButton(class UGFxClikWidget* Widget);
	void OnSetPreviousButton(class UGFxClikWidget* Widget);
	void OnSetNextButton(class UGFxClikWidget* Widget);
	void OnSetBackButton(class UGFxClikWidget* Widget);
	bool eventSetLargeImageSize(float SizeX, float SizeY, float PosX, float PosY);
	void PlayEvent();
	void Press_Play(struct FEventData ev);
	void PauseVideo(bool bForce);
	void StopVideo(bool bClearVO);
	void PlayVideo();
	void Press_Previous(struct FEventData ev);
	void Previous();
	void Press_Next(struct FEventData ev);
	void Next();
	void Press_Back(struct FEventData ev);
	bool back();
	void ShowChangeConfirmationDialog(class FString Title, class FString Message, class FString okButtonLabel, class FString noButtonLabel, class FString cancelButtonLabel, class FString callbackName);
	void ResetFocus(int32_t focusIndex);
	void Tick(float DeltaTime);
	void ShowFullSizeImage(class FString ImageURL, bool bIsVideo);
	void OnRecordingClicked(int32_t Index);
	class UTexture* GetFullSizeTexture(int32_t Index);
	void OnRecordingTypeClicked(int32_t TypeIndex);
	void PopulateChapterList(bool bFocus);
	void InitiateThumbnailTextures(uint8_t Type, int32_t ThumbSortingType);
	void InitiateCategoriesTextures();
	void Pop();
	void OnViewDeactivated();
	void OnViewActivated();
	void OnViewLoaded();
	void SetLocalizedStrings(class FString Play, class FString Pause, class FString cleanText);
	void OnTopMostView(bool optionalBPlayOpenAnimation);
};

// Class OLGame.OLMapInfo
// 0x0000 OR 0x0068 (0x0068 - 0x0068)
// 0 OR 104 (104 - 104)
class UOLMapInfo : public UMapInfo
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLMapInfo");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLSeqAct_TieWrap
// 0x0000 OR 0x0158 (0x0158 - 0x0158)
// 0 OR 344 (344 - 344)
class UOLSeqAct_TieWrap : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLSeqAct_TieWrap");
		}

		return uClassPointer;
	};

};

// Class OLGame.OLUIFrontEnd_ChapterSelection
// 0x0078 OR 0x01B4 (0x01B4 - 0x013C)
// 120 OR 436 (436 - 316)
class UOLUIFrontEnd_ChapterSelection : public UOLUIFrontEnd_Screen
{
public:
	class UGFxObject*                                  ChapterButtons;                                // 0x013C (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              BackButton;                                    // 0x0144 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              ImageBtnBack;                                  // 0x014C (0x0008) [0x0000000000002000] (CPF_Transient)
	int32_t                                            SelectedSectionIndex;                          // 0x0154 (0x0004) [0x0000000000002000] (CPF_Transient)
	class FString                                      ChapterSelection_ChooseChapterTypeTitleText;   // 0x0158 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      ChapterSelection_ChooseChapterTypeMessageText; // 0x0168 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      ChapterSelection_ChooseChapterTypeNewGameText; // 0x0178 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      ChapterSelection_ChooseChapterTypeSavedGameText;// 0x0188 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      ChapterSelection_ChooseChapterTypeCancelText;  // 0x0198 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	uint32_t                                           bWaitingForPopup : 1;                          // 0x01A8 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bQuitting : 1;                                 // 0x01A8 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	int32_t                                            SelectedChapterIndexBeforePopUp;               // 0x01AC (0x0004) [0x0000000000000000]               
	int32_t                                            ButtonLinkedDelay;                             // 0x01B0 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLUIFrontEnd_ChapterSelection");
		}

		return uClassPointer;
	};

	void Tick(float DeltaTime);
	void LinkButtons();
	void OnSetBackButton(class UGFxClikWidget* Widget);
	bool eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget);
	int32_t GetCurrentSectionCount();
	int32_t GetMaxSectionCount();
	void Press_Back(struct FEventData ev);
	bool back();
	void OnGameTypeSelect(int32_t Type);
	void SaveLocationSelected(bool bSuccess);
	void OnChapterClicked(int32_t chapterIndex, int32_t buttonIndex);
	void ShowChangeConfirmationDialog(class FString Title, class FString Message, class FString okButtonLabel, class FString noButtonLabel, class FString cancelButtonLabel, class FString callbackName);
	void ResetFocus(int32_t focusIndex);
	void OnSectionClicked(int32_t SectionIndex);
	void PopulateChapterList(bool bFocus);
	void InitializeFocusControl(bool bIsController);
	void eventInputTypeChanged();
	static class FString GetChapterName(struct FName CheckpointName);
	static bool HasValidChapters();
	void Pop();
	void OnViewActivated();
	void OnViewLoaded();
	void selectConsole(class FString Console);
	void OnTopMostView(bool optionalBPlayOpenAnimation);
};

// Class OLGame.OLUIFrontEnd_DifficultySelectionScreen
// 0x00D4 OR 0x0210 (0x0210 - 0x013C)
// 212 OR 528 (528 - 316)
class UOLUIFrontEnd_DifficultySelectionScreen : public UOLUIFrontEnd_Screen
{
public:
	class UOLProfileSettings*                          MyProfile;                                     // 0x013C (0x0008) [0x0000000000002000] (CPF_Transient)
	class FString                                      DifficultySelection_ChooseDifficultyText;      // 0x0144 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      DifficultySelection_EasyText;                  // 0x0154 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      DifficultySelection_NormalText;                // 0x0164 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      DifficultySelection_HardText;                  // 0x0174 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      DifficultySelection_NightmareText;             // 0x0184 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      DifficultySelection_InsaneText;                // 0x0194 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      DifficultySelection_ConfirmInsaneTitleText;    // 0x01A4 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      DifficultySelection_ConfirmInsaneMsgText;      // 0x01B4 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class UGFxClikWidget*                              EasyButton;                                    // 0x01C4 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              NormalButton;                                  // 0x01CC (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              HardButton;                                    // 0x01D4 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              NightmareButton;                               // 0x01DC (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              InsaneButton;                                  // 0x01E4 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              BackButton;                                    // 0x01EC (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxObject*                                  InsaneLabel;                                   // 0x01F4 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxObject*                                  TitleLabel;                                    // 0x01FC (0x0008) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bShowingInsaneConfirmDialog : 1;               // 0x0204 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bSpecificChapter : 1;                          // 0x0204 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bQuitting : 1;                                 // 0x0204 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	float                                              InitializationTimestamp;                       // 0x0208 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              InitializeDelay;                               // 0x020C (0x0004) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLUIFrontEnd_DifficultySelectionScreen");
		}

		return uClassPointer;
	};

	bool eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget);
	void ASShowConfirmInsaneDialog(class FString Title, class FString Message, class FString okButtonLabel, class FString cancelButtonLabel, class FString callbackName);
	bool eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent);
	void Press_Back(struct FEventData ev);
	void Pop();
	void OnViewDeactivated();
	void ProceedToStartGame();
	void OnConfirmedInsane(bool bOk);
	void Press_Insane(struct FEventData ev);
	void Press_Nightmare(struct FEventData ev);
	void Press_Hard(struct FEventData ev);
	void Press_Normal(struct FEventData ev);
	void Press_Easy(struct FEventData ev);
	void OnTopMostView(bool optionalBPlayOpenAnimation);
	void OnViewLoaded();
};

// Class OLGame.OLUIFrontEnd_Options
// 0x0244 OR 0x0380 (0x0380 - 0x013C)
// 580 OR 896 (896 - 316)
class UOLUIFrontEnd_Options : public UOLUIFrontEnd_Screen
{
public:
	class UOLProfileSettings*                          MyProfile;                                     // 0x013C (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FUniqueNetId                                OwningId;                                      // 0x0144 (0x0010) [0x0000000000000000]               
	class UOnlineSubsystem*                            OnlineSub;                                     // 0x0154 (0x0008) [0x0000000000000000]               
	class FString                                      Options_MouseSettingsText;                     // 0x015C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Options_MouseInvertYText;                      // 0x016C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Options_MouseSensitivityText;                  // 0x017C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Options_ApplyText;                             // 0x018C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Options_GammaText;                             // 0x019C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Options_ResetText;                             // 0x01AC (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Options_GameplayText;                          // 0x01BC (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Options_GraphicsText;                          // 0x01CC (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Options_ControlsText;                          // 0x01DC (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Options_ConfirmResolutionTitleText;            // 0x01EC (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Options_ConfirmResolutionMessageText;          // 0x01FC (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Options_DiscardChangesTitleText;               // 0x020C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Options_DiscardChangesMessageText;             // 0x021C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Options_KeyBindingConflictTitleText;           // 0x022C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Options_KeyBindingConflictMessageText;         // 0x023C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Options_MustRestartTitleText;                  // 0x024C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Options_MustRestartMessageText;                // 0x025C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Options_DifficultyOptionEasy;                  // 0x026C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Options_DifficultyOptionNormal;                // 0x027C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Options_DifficultyOptionHard;                  // 0x028C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Options_DifficultyOptionNightmare;             // 0x029C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class UGFxClikWidget*                              ApplyButton;                                   // 0x02AC (0x0008) [0x0000000000000000]               
	class UGFxClikWidget*                              BackButton;                                    // 0x02B4 (0x0008) [0x0000000000000000]               
	class UGFxClikWidget*                              ResetButton;                                   // 0x02BC (0x0008) [0x0000000000000000]               
	class UGFxClikWidget*                              TabButtons;                                    // 0x02C4 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxObject*                                  GameplayList;                                  // 0x02CC (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxObject*                                  GraphicsList;                                  // 0x02D4 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxObject*                                  ControlsList;                                  // 0x02DC (0x0008) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bWaitingForPopup : 1;                          // 0x02E4 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bSwitchingFromJpn : 1;                         // 0x02E4 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bActive : 1;                                   // 0x02E4 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bQuitting : 1;                                 // 0x02E4 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	TArray<struct FName>                               ResolutionValueNames;                          // 0x02E8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<struct FIntPoint>                           ResolutionValues;                              // 0x02F8 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<struct FOptionInfo>                         GeneralOptionsGameplayDefault;                 // 0x0308 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<struct FOptionInfo>                         GeneralOptionsGameplayInsane;                  // 0x0318 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<struct FOptionInfo>                         GeneralOptionsMainMenu;                        // 0x0328 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<struct FOptionInfo>                         GraphicsOptions;                               // 0x0338 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	TArray<struct FOptionInfo>                         ControlsOptions;                               // 0x0348 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	EOptionTabs                                        CurrentTab;                                    // 0x0358 (0x0001) [0x0000000000000000]               
	float                                              moveTabTimeStamp;                              // 0x035C (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            PopUpFocusSelectedButtonIdx;                   // 0x0360 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            PopUpFocusDelay;                               // 0x0364 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UGFxObject*                                  PopupSubmitButton;                             // 0x0368 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxObject*                                  PopupCancelButton;                             // 0x0370 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxObject*                                  PopupButtonToFocus;                            // 0x0378 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLUIFrontEnd_Options");
		}

		return uClassPointer;
	};

	void ASOnKeyBindingCancelled();
	void ASOnKeyBindingCaptured(class FString KeyName);
	void ShowMessageDialog(class FString Title, class FString Message, class FString okButtonLabel, class FString callbackName);
	void ShowKeyBindingConflictDialog(class FString Title, class FString Message, class FString okButtonLabel, class FString cancelButtonLabel, class FString callbackName);
	void ShowChangeConfirmationDialog(class FString Title, class FString Message, class FString okButtonLabel, class FString cancelButtonLabel, class FString callbackName);
	bool eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent);
	void eventTick(float DeltaTime);
	void CloseDialog(int32_t buttonIdx);
	void moveTab(int32_t Side);
	void NotifyAltEnter();
	void OnSliderChanged(int32_t ProfileSettingId, float SliderValue);
	TArray<class FString> GetKeyBindingConflicts();
	class UGFxObject* GetCurrentGFxList();
	void SetGamepadConfigExternally(int32_t ConfigIndex);
	int32_t GetGamepadConfig();
	void OnKeyBindingCancelled();
	void OnKeyBindingCaptured(struct FName KeyName);
	int32_t GetBorderlessFullscreenOptionIndex();
	int32_t GetFullscreenOptionIndex();
	int32_t GetResolutionOptionIndex();
	bool eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget);
	void SetSelectionFocus(class UGFxObject* MovieClip);
	class UOLProfileSettings* GetOLProfile();
	bool SaveSettingsToProfile(bool bApplyOnly);
	bool HasAnyPropertyChanged();
	bool HasPropertyChangedInList(class UGFxObject* OptionsList, TArray<struct FOptionInfo> OptionInfos);
	bool SaveSettingsForList(TArray<struct FOptionInfo> OptionInfos);
	void TabChanged(struct FEventData ev);
	void StoreOptionValuesForList(class UGFxObject* OptionsList, TArray<struct FOptionInfo>& OptionInfos);
	class FString GetOptionValueStringAt(class UGFxObject* OptionsList, int32_t Index);
	float GetOptionValueAt(class UGFxObject* OptionsList, int32_t Index);
	bool SetDefaultOptionValuesForList(TArray<struct FOptionInfo>& OptionInfos);
	void FillOptionValuesForList(TArray<struct FOptionInfo>& OptionInfos);
	void FillOptionValuesFromProfile();
	void PopulateControlsOptions();
	void PopulateGraphicsOptions();
	void PopulateGeneralOptions(bool bIgnoreFocus);
	class FString GetLabelTextFromOptionInfo(struct FOptionInfo Info);
	class UGFxObject* GetObjectFromOptionW(struct FOptionInfo CurrentOptionInfo);
	void PopulateTabButtons();
	bool UseInsaneGameplayOptions();
	bool UseMainMenuGameplayOptions();
	void Press_OptionItemButton(int32_t PSID);
	void Press_Reset(struct FEventData ev);
	void Press_Gamma(struct FEventData ev);
	void Press_Back(struct FEventData ev);
	void OnDiscardChanges(int32_t bOk);
	void OnDismissKeyBindingConflictDialog(bool bOk);
	void Press_Apply(struct FEventData ev);
	void OnMustRestartAccepted();
	void ExitOptionsScreen();
	bool back();
	void OnTopMostView(bool optionalBPlayOpenAnimation);
	void OnViewDeactivated();
	void OnViewActivated();
	void OnViewLoaded();
};

// Class OLGame.OLUIFrontEnd_SaveLocationList
// 0x00E0 OR 0x021C (0x021C - 0x013C)
// 224 OR 540 (540 - 316)
class UOLUIFrontEnd_SaveLocationList : public UOLUIFrontEnd_Screen
{
public:
	class FString                                      SaveLocationList_TitleSaving;                  // 0x013C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      SaveLocationList_TitleLoading;                 // 0x014C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      SaveLocationList_NewSaveLabel;                 // 0x015C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      SaveLocationList_DeleteLabel;                  // 0x016C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      SaveLocationList_ConfirmOverwriteTitleText;    // 0x017C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      SaveLocationList_ConfirmOverwriteMsgText;      // 0x018C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      SaveLocationList_ConfirmDeleteTitleText;       // 0x019C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      SaveLocationList_ConfirmDeleteMsgText;         // 0x01AC (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      SaveLocationList_ContentUnavailable;           // 0x01BC (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      SaveLocationList_CheckpointUnavailableForCheckpoint;// 0x01CC (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class UGFxClikWidget*                              BackButton;                                    // 0x01DC (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              ButtonBar;                                     // 0x01E4 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxObject*                                  TitleLabel;                                    // 0x01EC (0x0008) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bSaving : 1;                                   // 0x01F4 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bHasNewSaveOption : 1;                         // 0x01F4 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bFromPauseMenu : 1;                            // 0x01F4 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bShowingMessageDialog : 1;                     // 0x01F4 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	uint32_t                                           bShowingConfirmOverwriteDialog : 1;            // 0x01F4 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bShowingConfirmDeleteDialog : 1;               // 0x01F4 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	uint32_t                                           bQuitting : 1;                                 // 0x01F4 (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	class FString                                      startCP;                                       // 0x01F8 (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            OverwritingSaveIdx;                            // 0x0208 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            DeleteSaveIdx;                                 // 0x020C (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            MaxCheckpointId;                               // 0x0210 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              ActionButtonWidget;                            // 0x0214 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLUIFrontEnd_SaveLocationList");
		}

		return uClassPointer;
	};

	bool eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget);
	void SetupActionButtonString();
	int32_t GetHighlightedIndex(bool bAllowSelectedIndex);
	void ASTraceFocus();
	void ASInitButtonFocus();
	void ASShowConfirmDialog(class FString Title, class FString Message, class FString okButtonLabel, class FString cancelButtonLabel, class FString callbackName);
	void ShowMessageDialog(class FString Title, class FString Message, class FString okButtonLabel, class FString callbackName);
	bool back();
	void Press_Back(struct FEventData ev);
	bool eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent);
	void ReloadScreen();
	void OnConfirmedDelete(bool bOk);
	void OnConfirmedOverwrite(bool bOk);
	void OnMessageDialogAcknowledged();
	void ShowContentNotAvailaible();
	void ShowBadCheckpointMsg();
	void OnButtonClick(struct FEventData ev);
	void ResetFocus(int32_t focusIndex);
	void PopulateSaves();
	class FString GetSaveFileDisplayName(struct FSaveFileInfo SaveFile);
	class FString GetDifficultyStr(int32_t Difficulty);
	void Pop();
	void eventInputTypeChanged();
	void OnViewDeactivated();
	void OnTopMostView(bool optionalBPlayOpenAnimation);
	void selectConsole(class FString Console);
	void OnViewLoaded();
	bool TrySkipScreen(class FString StartCPName);
};

// Class OLGame.OLUIFrontEnd_PausedPrompt
// 0x0014 OR 0x0150 (0x0150 - 0x013C)
// 20 OR 336 (336 - 316)
class UOLUIFrontEnd_PausedPrompt : public UOLUIFrontEnd_Screen
{
public:
	class FString                                      MessageString;                                 // 0x013C (0x0010) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	uint32_t                                           bGoBackToMainMenu : 1;                         // 0x014C (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLUIFrontEnd_PausedPrompt");
		}

		return uClassPointer;
	};

	void SetMessage(class FString Message);
	bool eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent);
	void OnPressContinue(int32_t ControllerId);
	void OnTopMostView(bool optionalBPlayOpenAnimation);
	void OnViewLoaded();
};

// Class OLGame.OLUIFrontEnd_PauseMenu
// 0x00BC OR 0x01F8 (0x01F8 - 0x013C)
// 188 OR 504 (504 - 316)
class UOLUIFrontEnd_PauseMenu : public UOLUIFrontEnd_Screen
{
public:
	class FString                                      PauseMenu_ReturnText;                          // 0x013C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      PauseMenu_OptionsText;                         // 0x014C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      PauseMenu_ExitToMenuText;                      // 0x015C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      PauseMenu_SaveAndExitText;                     // 0x016C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      PauseMenu_SaveText;                            // 0x017C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      PauseMenu_ConfirmExitText;                     // 0x018C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      PauseMenu_ConfirmExitInsaneText;               // 0x019C (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      PauseMenu_ConfirmExitTitle;                    // 0x01AC (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      PauseMenu_ExitToWindowsText;                   // 0x01BC (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class UGFxClikWidget*                              ButtonBar;                                     // 0x01CC (0x0008) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bHasSaveOption : 1;                            // 0x01D4 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bShowingConfirmExitDialog : 1;                 // 0x01D4 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	int32_t                                            PopUpFocusSelectedButtonIdx;                   // 0x01D8 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            PopUpFocusDelay;                               // 0x01DC (0x0004) [0x0000000000002000] (CPF_Transient)
	class UGFxObject*                                  PopupSubmitButton;                             // 0x01E0 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxObject*                                  PopupCancelButton;                             // 0x01E8 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxObject*                                  PopupButtonToFocus;                            // 0x01F0 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLUIFrontEnd_PauseMenu");
		}

		return uClassPointer;
	};

	bool eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent);
	bool eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget);
	void eventTick(float DeltaTime);
	void ASShowConfirmExitDialog(class FString Title, class FString Message, class FString okButtonLabel, class FString cancelButtonLabel, class FString callbackName);
	void CloseDialog(int32_t buttonIdx);
	void SetSelectionFocus(class UGFxObject* MovieClip);
	void OnExitConfirmed(bool bOk);
	void OnExitToMenuButtonPress(struct FEventData ev);
	bool back();
	void OnSaveCompleted(bool bSuccess);
	void OnSaveButtonPress(struct FEventData ev);
	void OnOptionsButtonPress(struct FEventData ev);
	void OnReturnButtonPress(struct FEventData ev);
	void OnButtonClick(struct FEventData ev);
	void PopulateButtons();
	void OnTopMostView(bool optionalBPlayOpenAnimation);
	void OnViewLoaded();
};

// Class OLGame.OLUIFrontEnd_GammaScreen
// 0x0040 OR 0x017C (0x017C - 0x013C)
// 64 OR 380 (380 - 316)
class UOLUIFrontEnd_GammaScreen : public UOLUIFrontEnd_Screen
{
public:
	class UOLProfileSettings*                          MyProfile;                                     // 0x013C (0x0008) [0x0000000000002000] (CPF_Transient)
	class FString                                      Gamma_LabelText;                               // 0x0144 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class UGFxClikWidget*                              AcceptButtonCentred;                           // 0x0154 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              AcceptButton;                                  // 0x015C (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              BackButton;                                    // 0x0164 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              GammaSlider;                                   // 0x016C (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxObject*                                  GammaLabel;                                    // 0x0174 (0x0008) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLUIFrontEnd_GammaScreen");
		}

		return uClassPointer;
	};

	float GetCurrentGammaSetting();
	bool IsGammaInitialized();
	bool eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget);
	bool eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent);
	void Change_Slider(struct FEventData ev);
	void Pop();
	void OnViewDeactivated();
	bool back();
	void Press_Back(struct FEventData ev);
	void OnAccept();
	void Press_Accept(struct FEventData ev);
	void OnTopMostView(bool optionalBPlayOpenAnimation);
	void OnViewLoaded();
};

// Class OLGame.OLUIFrontEnd_GamepadScreen
// 0x001C OR 0x0158 (0x0158 - 0x013C)
// 28 OR 344 (344 - 316)
class UOLUIFrontEnd_GamepadScreen : public UOLUIFrontEnd_Screen
{
public:
	class UGFxClikWidget*                              TabButtons;                                    // 0x013C (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              AcceptButton;                                  // 0x0144 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UGFxClikWidget*                              BackButton;                                    // 0x014C (0x0008) [0x0000000000002000] (CPF_Transient)
	int32_t                                            SelectedTabIndex;                              // 0x0154 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLUIFrontEnd_GamepadScreen");
		}

		return uClassPointer;
	};

	void ASUpdateGamepadLabels(int32_t ConfigType);
	void TabChanged(struct FEventData ev);
	bool eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget);
	void PopulateTabButtons();
	void Pop();
	void OnViewDeactivated();
	void Press_Back(struct FEventData ev);
	void Press_Accept(struct FEventData ev);
	void OnTopMostView(bool optionalBPlayOpenAnimation);
	void OnViewLoaded();
};

// Class OLGame.OLUIFrontEnd_Options_Console
// 0x0028 OR 0x03A8 (0x03A8 - 0x0380)
// 40 OR 936 (936 - 896)
class UOLUIFrontEnd_Options_Console : public UOLUIFrontEnd_Options
{
public:
	class UGFxObject*                                  SquareLabel;                                   // 0x0380 (0x0008) [0x0000000000002000] (CPF_Transient)
	class FString                                      OptionsConsole_SettingsText;                   // 0x0388 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      OptionsConsole_HelpText;                       // 0x0398 (0x0010) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLUIFrontEnd_Options_Console");
		}

		return uClassPointer;
	};

	bool eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget);
	bool eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent);
	int32_t GetFullscreenOptionIndex();
	int32_t GetResolutionOptionIndex();
	bool HasResolutionChanged();
	void TabChanged(struct FEventData ev);
	void ResetConsoleOptions();
	void Press_Reset(struct FEventData ev);
	void FillOptionValuesFromProfile();
	void PopulateControlsOptions();
	void PopulateTabButtons();
	void Press_Apply(struct FEventData ev);
	void Press_OptionItemButton(int32_t PSID);
	void Press_Gamma(struct FEventData ev);
	bool back();
	void OnTopMostView(bool optionalBPlayOpenAnimation);
	void OnViewDeactivated();
	void OnViewActivated();
	void OnViewLoaded();
};

// Class OLGame.OLUIFrontEnd_GamepadScreen_Console
// 0x000C OR 0x0148 (0x0148 - 0x013C)
// 12 OR 328 (328 - 316)
class UOLUIFrontEnd_GamepadScreen_Console : public UOLUIFrontEnd_Screen
{
public:
	class UGFxClikWidget*                              TabButtons;                                    // 0x013C (0x0008) [0x0000000000002000] (CPF_Transient)
	int32_t                                            SelectedTabIndex;                              // 0x0144 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLUIFrontEnd_GamepadScreen_Console");
		}

		return uClassPointer;
	};

	void ASUpdateGamepadLabels(int32_t ConfigType);
	void TabChanged(struct FEventData ev);
	bool eventWidgetInitialized(struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget);
	bool eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent);
	void PopulateTabButtons();
	void Pop();
	void OnViewDeactivated();
	bool back();
	void OnTopMostView(bool optionalBPlayOpenAnimation);
	void OnViewLoaded();
};

// Class OLGame.OLUIPopupScreen
// 0x0000 OR 0x01EC (0x01EC - 0x01EC)
// 0 OR 492 (492 - 492)
class UOLUIPopupScreen : public UOLGFxMoviePlayer
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class OLGame.OLUIPopupScreen");
		}

		return uClassPointer;
	};

	bool eventFilterButtonInput(int32_t ControllerId, struct FName ButtonName, EInputEvent InputEvent);
	void OnClose();
	bool Start(bool optionalStartPaused);
};

/*
# ========================================================================================= #
#
# ========================================================================================= #
*/

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
